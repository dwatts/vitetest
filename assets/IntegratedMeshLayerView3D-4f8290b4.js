import{ay as n,ag as p,az as m,ai as i,aj as e,aA as l,al as d}from"./index-b652a0c6.js";import{x as h}from"./I3SMeshView3D-0099e069.js";import{n as c}from"./LayerView3D-fe0f618e.js";import{d as u}from"./LayerView-4eabe6b1.js";import"./I3SOverrides-80102612.js";import"./I3SNode-2f39bf5b.js";import"./meshFeatureSet-1a5c8ec3.js";import"./MeshGeoreferencedRelativeVertexSpace-93e08fdb.js";import"./MeshLocalVertexSpace-67dcd01f.js";import"./georeference-ab9eb71a.js";import"./External-8a88794c.js";import"./FeatureLayerView3D-eb1e4ad5.js";import"./FeatureLayerViewBase3D-3c684dd3.js";import"./FeatureLikeLayerView3D-7412a8bc.js";import"./dehydratedFeatureComparison-6294e6cf.js";import"./queryForSymbologySnapping-9c845331.js";import"./elevationInfoUtils-59994bfa.js";import"./hash-6f442295.js";import"./Graphics3DObjectStates-b3d454f7.js";import"./optimizedFeatureQueryEngineAdapter-364e1491.js";import"./centroid-8e8cfa47.js";import"./PooledRBush-b77183cc.js";import"./quickselect-3a15e7c7.js";import"./floorFilterUtils-080a7cd2.js";import"./QueryEngine-a382c42e.js";import"./normalizeUtils-eefea2c7.js";import"./normalizeUtilsCommon-ca11a10d.js";import"./WhereClause-f5ba93ee.js";import"./executionError-c92d3b85.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-1e8068f2.js";import"./generateRendererUtils-e897c531.js";import"./FeatureStore-bd1883da.js";import"./BoundsStore-4dff41ee.js";import"./projectExtentUtils-58c61e93.js";import"./query-b18fae19.js";import"./pbfQueryUtils-93f16c1f.js";import"./pbf-758c6a16.js";import"./EventedSet-876ecf2d.js";import"./RefreshableLayerView-e9aacc56.js";import"./SceneModification-71514ab7.js";import"./SceneLayerWorker-7a482204.js";const g=.2;let r=class extends h(c(u)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,o,a,s;return((s=(a=(o=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this.updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.handles.remove("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.handles.add(this.updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([e()],r.prototype,"layer",void 0),i([e()],r.prototype,"i3slayer",null),i([e(l)],r.prototype,"updatingProgress",void 0),i([e()],r.prototype,"updatingProgressValue",null),i([e()],r.prototype,"lodFactor",null),i([e({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const at=r;export{at as default};
