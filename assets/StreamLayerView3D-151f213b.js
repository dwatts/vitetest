import{ai as s,aj as i,al as d,ci as P,cj as M,ao as R,ah as y,f4 as U,av as _,az as k,bn as $,as as T,aq as C,be as j}from"./index-4a2a8e32.js";import{o as x}from"./StreamFeatureManager-75a44ef7.js";import{createConnection as E}from"./createConnection-dacb6930.js";import{r as G}from"./EventedSet-988365f4.js";import{E as V}from"./FeatureLikeLayerView3D-309cc35b.js";import{n as L}from"./LayerView3D-357435c1.js";import{d as F}from"./LayerView-0086d16f.js";import"./query-dffe729f.js";import"./normalizeUtils-fd2a5db8.js";import"./normalizeUtilsCommon-1cd3f30a.js";import"./pbfQueryUtils-2c4c2b56.js";import"./pbf-5cbd0354.js";import"./dehydratedFeatureComparison-8af36f04.js";import"./queryForSymbologySnapping-3151fb9e.js";import"./elevationInfoUtils-59ca4653.js";import"./hash-6f442295.js";import"./Graphics3DObjectStates-78412461.js";import"./optimizedFeatureQueryEngineAdapter-16bcdb07.js";import"./centroid-8e8cfa47.js";import"./PooledRBush-812c43b8.js";import"./quickselect-94603516.js";import"./floorFilterUtils-080a7cd2.js";import"./QueryEngine-c9a04bbc.js";import"./WhereClause-914ffa63.js";import"./executionError-c92d3b85.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-bbf63e79.js";import"./generateRendererUtils-2338da02.js";import"./FeatureStore-98253549.js";import"./BoundsStore-689e73da.js";import"./projectExtentUtils-2cab06fa.js";const N=2500;let l=class extends k{getObjectId(){return this.objectId}};s([i({type:Number,json:{read:!0}})],l.prototype,"objectId",void 0),l=s([d("esri.layers.graphics.controllers.StreamGraphic")],l);let z=class{constructor(t){this.onUpdate=t,this._idToGraphic=new Map}destroy(){this._idToGraphic.clear()}add(t){this._idToGraphic.set(t.objectId,t)}get(t){return this._idToGraphic.get(t)}forEach(t){this._idToGraphic.forEach(t)}removeById(t){const r=this._idToGraphic.get(t);return r?(r.sourceLayer=r.layer=null,this._idToGraphic.delete(t),r):null}update(t,r){this.onUpdate(t,r)}get size(){return this._idToGraphic.size}},a=class extends P(M(R)){constructor(){super(...arguments),this.isPaused=!1,this.graphics=new G,this._updateInfo={websocket:0,client:0},this._updateIntervalId=null,this._outSpatialReference=null}initialize(){this.addResolvingPromise(this.layer.when(()=>this._startup()))}destroy(){this.clear()}_clearInterval(){this._updateIntervalId!==null&&(clearInterval(this._updateIntervalId),this._updateIntervalId=null)}clear(){this._clearInterval(),this.connection=y(this.connection),this.store=y(this.store),this.graphics.clear(),this.handles.removeAll()}get updating(){return!this.connection||this.connection.connectionStatus==="connected"}_startup(){const{layer:e,layerView:t}=this,{spatialReference:r,definitionExpression:c,geometryDefinition:h,objectIdField:p,timeInfo:f,purgeOptions:g,maxReconnectionAttempts:v,maxReconnectionInterval:I,customParameters:S}=e,w=e.geometryType?U.toJSON(e.geometryType):null,b=r,u=t.view.spatialReference,O={geometry:h,where:c};this.clear(),this._set("connection",E(e.parsedUrl,b,u,w,O,v,I,S??void 0)),this._outSpatialReference=u.toJSON(),this.store=new z(this._onUpdate.bind(this)),this.featuresManager=new x(this.store,p,f.toJSON(),g);const m="startup-watches";this.handles.remove(m),this.handles.add([e.on("send-message-to-socket",n=>this.connection.sendMessageToSocket(n)),e.on("send-message-to-client",n=>this.connection.sendMessageToClient(n)),this.connection.on("data-received",n=>this._onFeature(n)),this.connection.on("message-received",n=>this._onWebSocketMessage(n)),_(()=>[e.definitionExpression,e.geometryDefinition,e.purgeOptions],()=>this._startup())],m),this.isPaused||this._initUpdateInterval()}_onWebSocketMessage(e){if(this.layerView.emit("message-received",e),"type"in e)switch(e.type){case"delete":if(e.objectIds)for(const t of e.objectIds)this.featuresManager.removeById(t);if(e.trackIds)for(const t of e.trackIds)this.featuresManager.removeByTrackId(t);break;case"clear":this.store.forEach(t=>this.featuresManager.removeById(t.objectId))}}_onFeature(e){this._updateInfo.websocket++,this.layerView.hasEventListener("data-received")&&this.layerView.emit("data-received",{attributes:e.attributes,centroid:e.centroid,geometry:e.geometry});try{e.geometry==null||e.geometry.spatialReference||(e.geometry.spatialReference=this._outSpatialReference);const t=l.fromJSON(e);t.sourceLayer=t.layer=this.layer,this.featuresManager.add(t)}catch{}}_onUpdate(e,t){t!=null&&this.graphics.removeMany(t),e!=null&&(this._updateInfo.client+=e.length,this.graphics.addMany(e))}_initUpdateInterval(){this._clearInterval();const{updateInterval:e}=this.layer;let t=performance.now();this._updateIntervalId=setInterval(()=>{const r=performance.now(),c=r-t;if(c>N){t=r;const h=Math.round(this._updateInfo.client/(c/1e3)),p=Math.round(this._updateInfo.websocket/(c/1e3));this._updateInfo.client=0,this._updateInfo.websocket=0,this.layerView.emit("update-rate",{client:h,websocket:p})}this.featuresManager.checkForUpdates()},e)}pauseStream(){this.isPaused=!0,this._clearInterval()}resumeStream(){this.isPaused=!1,this._initUpdateInterval()}};s([i()],a.prototype,"isPaused",void 0),s([i({constructOnly:!0})],a.prototype,"layer",void 0),s([i({constructOnly:!0})],a.prototype,"layerView",void 0),s([i()],a.prototype,"connection",void 0),s([i({readOnly:!0})],a.prototype,"updating",null),a=s([d("esri.layers.graphics.controllers.StreamController")],a);const B=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return this._isUserPaused?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([i()],t.prototype,"_isUserPaused",void 0),s([i({readOnly:!0})],t.prototype,"connectionStatus",null),s([i({type:$})],t.prototype,"filter",void 0),t=s([d("esri.layers.mixins.StreamLayerView")],t),t};let o=class extends B(V(L(F))){constructor(){super(...arguments),this.type="stream-3d",this.updatePolicy=T.ASYNC,this.hasZ=!0,this.hasM=!1}initialize(){this.handles.add(_(()=>this.suspended,e=>{this.controller&&this._onSuspendedChange(e)}))}get connectionError(){const e=this.get("controller.connection.errorString");return e?new C("stream-controller",e):null}createQuery(){return new j({outFields:["*"],returnGeometry:!0,outSpatialReference:this.view.spatialReference})}queryLatestObservations(e,t){return this.queryEngine.executeQueryForLatestObservations(this._ensureQuery(e),t==null?void 0:t.signal)}get _streamConnectionStatus(){var e,t;return((t=(e=this.controller)==null?void 0:e.connection)==null?void 0:t.connectionStatus)??"disconnected"}createController(){return new a({layer:this.layer,layerView:this})}beforeSetController(){}_doPause(){var e;(e=this.controller)==null||e.pauseStream()}_doResume(){var e;(e=this.controller)==null||e.resumeStream()}};s([i({readOnly:!0})],o.prototype,"updatePolicy",void 0),s([i({readOnly:!0})],o.prototype,"connectionError",null),s([i()],o.prototype,"controller",void 0),s([i({readOnly:!0})],o.prototype,"hasZ",void 0),s([i({readOnly:!0})],o.prototype,"hasM",void 0),s([i({readOnly:!0})],o.prototype,"_streamConnectionStatus",null),o=s([d("esri.views.3d.layers.StreamLayerView3D")],o);const be=o;export{be as default};
