import {
  M
} from "./chunk-3VUFACNT.js";
import {
  H
} from "./chunk-RTDN6KAT.js";

// node_modules/@arcgis/core/renderers/support/clickToleranceUtils.js
function t(t2, e2) {
  return e2 ? "xoffset" in e2 && e2.xoffset ? Math.max(t2, Math.abs(e2.xoffset)) : "yoffset" in e2 && e2.yoffset ? Math.max(t2, Math.abs(e2.yoffset || 0)) : t2 : t2;
}
function e(t2) {
  let e2 = 0, n2 = 0;
  for (let r3 = 0; r3 < t2.length; r3++) {
    const s2 = t2[r3].size;
    "number" == typeof s2 && (e2 += s2, n2++);
  }
  return e2 / n2;
}
function n(t2, n2) {
  return "number" == typeof t2 ? t2 : t2 && t2.stops && t2.stops.length ? e(t2.stops) : n2;
}
function r(t2, e2) {
  if (!e2)
    return t2;
  const r3 = e2.filter((t3) => "size" === t3.type).map((e3) => {
    const { maxSize: r4, minSize: s3 } = e3;
    return (n(r4, t2) + n(s3, t2)) / 2;
  });
  let s2 = 0;
  const o = r3.length;
  if (0 === o)
    return t2;
  for (let n2 = 0; n2 < o; n2++)
    s2 += r3[n2];
  const f = Math.floor(s2 / o);
  return Math.max(f, t2);
}
function s(e2) {
  var _a;
  const n2 = e2 && e2.renderer, s2 = "touch" === (e2 && e2.event && e2.event.pointerType) ? 9 : 6;
  if (!n2)
    return s2;
  const o = "visualVariables" in n2 ? r(s2, n2.visualVariables) : s2;
  if ("simple" === n2.type)
    return t(o, n2.symbol);
  if ("unique-value" === n2.type) {
    let e3 = o;
    return (_a = n2.uniqueValueInfos) == null ? void 0 : _a.forEach((n3) => {
      e3 = t(e3, n3.symbol);
    }), e3;
  }
  if ("class-breaks" === n2.type) {
    let e3 = o;
    return n2.classBreakInfos.forEach((n3) => {
      e3 = t(e3, n3.symbol);
    }), e3;
  }
  return "dot-density" === n2.type || n2.type, o;
}

// node_modules/@arcgis/core/views/support/drapedUtils.js
function r2(t2, r3, i, a2 = new M()) {
  let o = 0;
  if ("2d" === i.type)
    o = r3 * (i.resolution ?? 0);
  else if ("3d" === i.type) {
    const n2 = i.overlayPixelSizeInMapUnits(t2), a3 = i.basemapSpatialReference;
    o = null == a3 || a3.equals(i.spatialReference) ? r3 * n2 : H(a3) / H(i.spatialReference);
  }
  const s2 = t2.x - o, l = t2.y - o, m = t2.x + o, p = t2.y + o, { spatialReference: c } = i;
  return a2.xmin = Math.min(s2, m), a2.ymin = Math.min(l, p), a2.xmax = Math.max(s2, m), a2.ymax = Math.max(l, p), a2.spatialReference = c, a2;
}
var a = new M();

export {
  s,
  r2 as r
};
//# sourceMappingURL=chunk-R5Y2SULF.js.map
