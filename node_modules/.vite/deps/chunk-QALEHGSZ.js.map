{
  "version": 3,
  "sources": ["../../@arcgis/core/chunks/SSAO.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{s as e}from\"./vec2.js\";import{a as r}from\"./vec2f64.js\";import{ScreenSpacePass as t}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{ReadLinearDepth as o}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";import{CameraSpace as a,getZScale as n}from\"../views/3d/webgl-engine/core/shaderLibrary/util/CameraSpace.glsl.js\";import{Float2PassUniform as s}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{FloatPassUniform as i}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as c}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as l}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as u}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";const f=16;function d(){const r=new l,d=r.fragment;return r.include(t),d.include(o),r.include(a),d.uniforms.add(new i(\"radius\",((e,r)=>m(r.camera)))),d.code.add(c`vec3 sphere[16];\nvoid fillSphere() {\nsphere[0] = vec3(0.186937, 0.0, 0.0);\nsphere[1] = vec3(0.700542, 0.0, 0.0);\nsphere[2] = vec3(-0.864858, -0.481795, -0.111713);\nsphere[3] = vec3(-0.624773, 0.102853, -0.730153);\nsphere[4] = vec3(-0.387172, 0.260319, 0.007229);\nsphere[5] = vec3(-0.222367, -0.642631, -0.707697);\nsphere[6] = vec3(-0.01336, -0.014956, 0.169662);\nsphere[7] = vec3(0.122575, 0.1544, -0.456944);\nsphere[8] = vec3(-0.177141, 0.85997, -0.42346);\nsphere[9] = vec3(-0.131631, 0.814545, 0.524355);\nsphere[10] = vec3(-0.779469, 0.007991, 0.624833);\nsphere[11] = vec3(0.308092, 0.209288,0.35969);\nsphere[12] = vec3(0.359331, -0.184533, -0.377458);\nsphere[13] = vec3(0.192633, -0.482999, -0.065284);\nsphere[14] = vec3(0.233538, 0.293706, -0.055139);\nsphere[15] = vec3(0.417709, -0.386701, 0.442449);\n}\nfloat fallOffFunction(float vv, float vn, float bias) {\nfloat f = max(radius * radius - vv, 0.0);\nreturn f * f * f * max(vn - bias, 0.0);\n}`),d.code.add(c`float aoValueFromPositionsAndNormal(vec3 C, vec3 n_C, vec3 Q) {\nvec3 v = Q - C;\nfloat vv = dot(v, v);\nfloat vn = dot(normalize(v), n_C);\nreturn fallOffFunction(vv, vn, 0.1);\n}`),d.uniforms.add(new s(\"nearFar\",((e,r)=>r.camera.nearFar)),new u(\"normalMap\",(e=>e.normalTexture)),new u(\"depthMap\",(e=>e.depthTexture)),new s(\"zScale\",((e,r)=>n(r))),new i(\"projScale\",(e=>e.projScale)),new u(\"rnm\",(e=>e.noiseTexture)),new s(\"rnmScale\",((r,t)=>e(p,t.camera.fullWidth/r.noiseTexture.descriptor.width,t.camera.fullHeight/r.noiseTexture.descriptor.height))),new i(\"intensity\",(e=>e.intensity)),new s(\"screenSize\",((r,t)=>e(p,t.camera.fullWidth,t.camera.fullHeight)))),d.code.add(c`\n    void main(void) {\n      fillSphere();\n      vec3 fres = normalize(2.0 * texture(rnm, uv * rnmScale).xyz - 1.0);\n      float currentPixelDepth = linearDepthFromTexture(depthMap, uv, nearFar);\n\n      if (-currentPixelDepth>nearFar.y || -currentPixelDepth<nearFar.x) {\n        fragColor = vec4(0);\n        return;\n      }\n\n      vec3 currentPixelPos = reconstructPosition(gl_FragCoord.xy,currentPixelDepth);\n\n      // get the normal of current fragment\n      vec4 norm4 = texture(normalMap, uv);\n      vec3 norm = vec3(-1.0) + 2.0 * norm4.xyz;\n      bool isTerrain = norm4.w < 0.5;\n\n      float sum = 0.0;\n      vec3 tapPixelPos;\n\n      // note: the factor 2.0 should not be necessary, but makes ssao much nicer.\n      // bug or deviation from CE somewhere else?\n      float ps = projScale / (2.0 * currentPixelPos.z * zScale.x + zScale.y);\n\n      for(int i = 0; i < ${c.int(f)}; ++i) {\n        vec2 unitOffset = reflect(sphere[i], fres).xy;\n        vec2 offset = vec2(-unitOffset * radius * ps);\n\n        //don't use current or very nearby samples\n        if( abs(offset.x) < 2.0 || abs(offset.y) < 2.0){\n          continue;\n        }\n\n        vec2 tc = vec2(gl_FragCoord.xy + offset);\n        if (tc.x < 0.0 || tc.y < 0.0 || tc.x > screenSize.x || tc.y > screenSize.y) continue;\n        vec2 tcTap = tc / screenSize;\n        float occluderFragmentDepth = linearDepthFromTexture(depthMap, tcTap, nearFar);\n\n        if (isTerrain) {\n          if (texture(normalMap, tcTap).w < 0.5) {\n            continue;\n          }\n        }\n\n        tapPixelPos = reconstructPosition(tc, occluderFragmentDepth);\n\n        sum+= aoValueFromPositionsAndNormal(currentPixelPos, norm, tapPixelPos);\n      }\n\n      // output the result\n      float A = max(1.0 - sum * intensity / float(${c.int(f)}), 0.0);\n\n      // Anti-tone map to reduce contrast and drag dark region farther: (x^0.2 + 1.2 * x^4) / 2.2\n      A = (pow(A, 0.2) + 1.2 * A*A*A*A) / 2.2;\n      fragColor = vec4(A);\n    }\n  `),r}function m(e){return Math.max(10,20*e.computeScreenPixelSizeAtDist(Math.abs(4*e.relativeElevation)))}const p=r(),v=Object.freeze(Object.defineProperty({__proto__:null,build:d,getRadius:m},Symbol.toStringTag,{value:\"Module\"}));export{v as S,d as b,m as g};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIq2B,IAAM,IAAE;AAAG,SAAS,IAAG;AAAC,QAAMA,KAAE,IAAI,KAAEC,KAAED,GAAE;AAAS,SAAOA,GAAE,QAAQE,EAAC,GAAED,GAAE,QAAQ,CAAC,GAAED,GAAE,QAAQG,EAAC,GAAEF,GAAE,SAAS,IAAI,IAAIC,GAAE,UAAU,CAACE,IAAEJ,OAAI,EAAEA,GAAE,MAAM,CAAE,CAAC,GAAEC,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBpgC,GAAEA,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,EAKb,GAAEA,GAAE,SAAS,IAAI,IAAI,EAAE,WAAW,CAACG,IAAEJ,OAAIA,GAAE,OAAO,OAAQ,GAAE,IAAI,EAAE,aAAa,CAAAI,OAAGA,GAAE,aAAc,GAAE,IAAI,EAAE,YAAY,CAAAA,OAAGA,GAAE,YAAa,GAAE,IAAI,EAAE,UAAU,CAACA,IAAEJ,OAAIK,GAAEL,EAAC,CAAE,GAAE,IAAIE,GAAE,aAAa,CAAAE,OAAGA,GAAE,SAAU,GAAE,IAAI,EAAE,OAAO,CAAAA,OAAGA,GAAE,YAAa,GAAE,IAAI,EAAE,YAAY,CAACJ,IAAE,MAAI,EAAE,GAAE,EAAE,OAAO,YAAUA,GAAE,aAAa,WAAW,OAAM,EAAE,OAAO,aAAWA,GAAE,aAAa,WAAW,MAAM,CAAE,GAAE,IAAIE,GAAE,aAAa,CAAAE,OAAGA,GAAE,SAAU,GAAE,IAAI,EAAE,cAAc,CAACJ,IAAE,MAAI,EAAE,GAAE,EAAE,OAAO,WAAU,EAAE,OAAO,UAAU,CAAE,CAAC,GAAEC,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAyBrd,EAAE,IAAI,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDA0BiB,EAAE,IAAI,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAMzD,GAAED;AAAC;AAAC,SAAS,EAAEI,IAAE;AAAC,SAAO,KAAK,IAAI,IAAG,KAAGA,GAAE,6BAA6B,KAAK,IAAI,IAAEA,GAAE,iBAAiB,CAAC,CAAC;AAAC;AAAC,IAAM,IAAE,EAAE;AAAV,IAAY,IAAE,OAAO,OAAO,OAAO,eAAe,EAAC,WAAU,MAAK,OAAM,GAAE,WAAU,EAAC,GAAE,OAAO,aAAY,EAAC,OAAM,SAAQ,CAAC,CAAC;",
  "names": ["r", "d", "o", "n", "e", "i"]
}
