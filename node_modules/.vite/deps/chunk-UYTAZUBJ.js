import {
  l
} from "./chunk-FOEAKQNX.js";
import {
  R,
  _
} from "./chunk-LEDSC236.js";
import {
  e as e2
} from "./chunk-CW7LIPBH.js";
import {
  n
} from "./chunk-7EG7BYWF.js";
import {
  O
} from "./chunk-TPJLFGOT.js";
import {
  e2 as e
} from "./chunk-V76KGJFU.js";

// node_modules/@arcgis/core/views/3d/layers/interfaces.js
var e3;
var a;
var t;
!function(e4) {
  e4[e4.RasterImage = 0] = "RasterImage", e4[e4.Features = 1] = "Features";
}(e3 || (e3 = {})), function(e4) {
  e4[e4.MapLayer = 0] = "MapLayer", e4[e4.ViewLayer = 1] = "ViewLayer", e4[e4.Outline = 2] = "Outline", e4[e4.SnappingHint = 3] = "SnappingHint";
}(a || (a = {})), function(e4) {
  e4[e4.WithRasterImage = 0] = "WithRasterImage", e4[e4.WithoutRasterImage = 1] = "WithoutRasterImage";
}(t || (t = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/ModelDirtyTypes.js
var E;
var I;
!function(E2) {
  E2[E2.ADD = 0] = "ADD", E2[E2.UPDATE = 1] = "UPDATE", E2[E2.REMOVE = 2] = "REMOVE";
}(E || (E = {})), function(E2) {
  E2[E2.NONE = 0] = "NONE", E2[E2.VISIBILITY = 1] = "VISIBILITY", E2[E2.GEOMETRY = 2] = "GEOMETRY", E2[E2.TRANSFORMATION = 4] = "TRANSFORMATION", E2[E2.HIGHLIGHT = 8] = "HIGHLIGHT", E2[E2.OCCLUDEE = 16] = "OCCLUDEE";
}(I || (I = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/RenderGeometry.js
var a2 = class {
  constructor(t2, e4 = {}) {
    this.geometry = t2, this.screenToWorldRatio = 1, this._transformation = e2(), this._shaderTransformation = null, this._boundingSphere = null, this.id = e(), this.layerUid = e4.layerUid, this.graphicUid = e4.graphicUid, this.shaderTransformer = e4.shaderTransformer, this.castShadow = e4.castShadow ?? false;
  }
  get transformation() {
    return this._transformation;
  }
  get boundingInfo() {
    return this.geometry.boundingInfo;
  }
  updateTransformation(r) {
    r(this._transformation), this._shaderTransformation = this._boundingSphere = null;
  }
  shaderTransformationChanged() {
    this._shaderTransformation = null;
  }
  get boundingSphere() {
    return this._boundingSphere ? this._boundingSphere : this.boundingInfo ? (this._boundingSphere = O(_(), this.boundingInfo.center, this.shaderTransformation), this._boundingSphere[3] = this.boundingInfo.radius * l(this.shaderTransformation), this._boundingSphere) : R;
  }
  get hasShaderTransformation() {
    return null != this.shaderTransformer;
  }
  get material() {
    return this.geometry.material;
  }
  get type() {
    return this.geometry.type;
  }
  get shaderTransformation() {
    return null == this.shaderTransformer ? this.transformation : (this._shaderTransformation || (this._shaderTransformation = n(e2(), this.shaderTransformer(this.transformation))), this._shaderTransformation);
  }
  get indices() {
    return this.geometry.indices;
  }
  get vertexAttributes() {
    return this.geometry.vertexAttributes;
  }
  get highlights() {
    return this.geometry.highlights;
  }
  get occludees() {
    return this.geometry.occludees;
  }
  get visible() {
    return this.geometry.visible;
  }
  set visible(r) {
    this.geometry.visible = r;
  }
};

export {
  e3 as e,
  a,
  t,
  E,
  I,
  a2
};
//# sourceMappingURL=chunk-UYTAZUBJ.js.map
