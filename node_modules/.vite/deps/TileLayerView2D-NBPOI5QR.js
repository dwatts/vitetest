import {
  n as n2,
  o,
  t
} from "./chunk-SA34YTVI.js";
import {
  n
} from "./chunk-3HMMECZ3.js";
import "./chunk-EDK6DVWD.js";
import "./chunk-RLCH4JTX.js";
import {
  oe
} from "./chunk-XJSQN3VD.js";
import "./chunk-TH76HZJA.js";
import "./chunk-ZYIW27ER.js";
import {
  f
} from "./chunk-IVHBK5M6.js";
import "./chunk-74URQI6M.js";
import "./chunk-U7ACAW2W.js";
import "./chunk-HVV5CDLD.js";
import "./chunk-JNPHM5XV.js";
import "./chunk-X6M7YYU3.js";
import "./chunk-HMHRXSML.js";
import "./chunk-JXKASHKJ.js";
import "./chunk-WGM2OLIG.js";
import "./chunk-R7LS3BCI.js";
import "./chunk-3MPC6MVT.js";
import "./chunk-UBY6VMKB.js";
import "./chunk-ULFDJHIR.js";
import {
  S as S2,
  U
} from "./chunk-7LWWKPW7.js";
import {
  r as r2
} from "./chunk-R5Y2SULF.js";
import {
  a as a2
} from "./chunk-32IFRFHL.js";
import {
  d as d2
} from "./chunk-TYEEWKIN.js";
import "./chunk-44OKOXKA.js";
import "./chunk-BSSEIP2H.js";
import "./chunk-FKUVQAN6.js";
import "./chunk-LYNC7OVT.js";
import "./chunk-WON6TZX6.js";
import "./chunk-OLCZX7MC.js";
import "./chunk-4YQPCE3Y.js";
import "./chunk-3QGLF4DO.js";
import "./chunk-OKNF37G2.js";
import "./chunk-5W2MUQQG.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-VF625TQS.js";
import "./chunk-UXWYXWGD.js";
import "./chunk-PX3Q44FM.js";
import "./chunk-XYJMHUDA.js";
import "./chunk-CSLWFQJE.js";
import "./chunk-MRDUXF66.js";
import "./chunk-IVABPLLZ.js";
import "./chunk-FS3VDXRM.js";
import "./chunk-BWIRPDWB.js";
import "./chunk-XP6ESZGI.js";
import "./chunk-RKM5MXYH.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-TBHRKIAA.js";
import "./chunk-EFDT2ZDW.js";
import "./chunk-PM77FW2O.js";
import "./chunk-USNIBKH4.js";
import "./chunk-BPITJIFG.js";
import "./chunk-BBJLFBMQ.js";
import "./chunk-J6SRKANJ.js";
import "./chunk-RBDJB3ZY.js";
import "./chunk-RRRAGAMB.js";
import "./chunk-ERFCZMKG.js";
import "./chunk-C2GW4T2D.js";
import "./chunk-SO7CVIZK.js";
import "./chunk-YAWND7HF.js";
import "./chunk-FJYIB7HF.js";
import "./chunk-ZYPAFVYT.js";
import "./chunk-X65XM5YN.js";
import "./chunk-JORCYNDS.js";
import "./chunk-BZUKDBTT.js";
import "./chunk-7YCGPGGL.js";
import "./chunk-GPABU246.js";
import "./chunk-KILCBNKU.js";
import "./chunk-FJA4J75M.js";
import "./chunk-LIXBKTBN.js";
import "./chunk-K4WBDIIJ.js";
import "./chunk-H3DKDGMJ.js";
import "./chunk-FB6EWBGE.js";
import "./chunk-6FHMQNMS.js";
import "./chunk-TRGMWULG.js";
import "./chunk-WTPQKRQM.js";
import "./chunk-SADO52IH.js";
import "./chunk-V66LHQVK.js";
import "./chunk-JP7O2ZWE.js";
import "./chunk-AER5JAFS.js";
import "./chunk-FKEHFW5J.js";
import "./chunk-7HZ72XIE.js";
import "./chunk-ALPCRJS4.js";
import "./chunk-WDZ5AAFL.js";
import "./chunk-XL7RF4A6.js";
import "./chunk-ZL3HOHNK.js";
import "./chunk-PR2OEILG.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-MVWFPLOX.js";
import "./chunk-X3YW4YOG.js";
import "./chunk-IG234GCS.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-BA6PBZHC.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-D3BOGOKY.js";
import "./chunk-QOWAKGE4.js";
import "./chunk-BFVDDR4R.js";
import "./chunk-3TTW7E7W.js";
import "./chunk-RWWB77SD.js";
import "./chunk-ZMFGNDTK.js";
import "./chunk-UL64BLDS.js";
import "./chunk-EG6CFIHA.js";
import "./chunk-CMNAZRWU.js";
import "./chunk-P4PDTNIU.js";
import "./chunk-G2DTL6AE.js";
import "./chunk-Q6HN54VB.js";
import "./chunk-Z3GCSCQI.js";
import "./chunk-UU2XJGLA.js";
import "./chunk-CGJNVOU3.js";
import "./chunk-YA7WDOJK.js";
import "./chunk-FVR25IMN.js";
import "./chunk-EV77QZBT.js";
import "./chunk-467UETSR.js";
import "./chunk-SHFLRM67.js";
import "./chunk-YGUWDSEH.js";
import "./chunk-LO3LAMAS.js";
import "./chunk-EFRTD25L.js";
import "./chunk-EAGDM3GO.js";
import "./chunk-W2YWKOK7.js";
import "./chunk-YOTOWDJK.js";
import {
  r
} from "./chunk-ND7XUHDE.js";
import {
  y as y2
} from "./chunk-XG5SDOKD.js";
import "./chunk-UQHDCOJC.js";
import {
  h
} from "./chunk-MF3HZ6GV.js";
import "./chunk-SNAARWF3.js";
import "./chunk-FQZ2JEHK.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-ICGBQNK3.js";
import "./chunk-7JB7RSO7.js";
import "./chunk-CEUJOC5P.js";
import "./chunk-G3Q2URFK.js";
import {
  i
} from "./chunk-F6TKAVSX.js";
import "./chunk-D5NSNTGJ.js";
import "./chunk-63ERNIOV.js";
import "./chunk-XABSD6D5.js";
import "./chunk-QNFDBY7V.js";
import "./chunk-RVQLSA5X.js";
import "./chunk-5KLICR5E.js";
import {
  e as e2
} from "./chunk-YYTXJF6W.js";
import "./chunk-GOK5MP3B.js";
import "./chunk-NLWV7Q6F.js";
import "./chunk-JB7FDW5N.js";
import "./chunk-SS3YG6J3.js";
import "./chunk-5IYCCZ54.js";
import "./chunk-JLSXEPY6.js";
import "./chunk-VMTVUE47.js";
import "./chunk-GDZM4A6K.js";
import "./chunk-XWGNMTES.js";
import "./chunk-6NNEHJYI.js";
import "./chunk-BNBT4QTW.js";
import "./chunk-3FQOSG5O.js";
import "./chunk-CAFGOFIE.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-JNDFAMXY.js";
import "./chunk-NTEKJWGF.js";
import "./chunk-TFIKV5RU.js";
import "./chunk-KW6QQDGN.js";
import "./chunk-AQ7R6V4L.js";
import "./chunk-DOQ3SAAR.js";
import "./chunk-4BXK4H4L.js";
import "./chunk-SLVNG7FV.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-4CZO65BK.js";
import "./chunk-SVCGLUNW.js";
import "./chunk-DEZCXTA3.js";
import "./chunk-RRJGZKNX.js";
import "./chunk-PL5Q4C6Y.js";
import "./chunk-A6VKJXIH.js";
import "./chunk-KFSY6ZZH.js";
import "./chunk-7EQSYZHW.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-GGOVZ2GK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-WLWP35G2.js";
import "./chunk-JPW73GY2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-Z2ZUNW5S.js";
import "./chunk-7L7Z2HXM.js";
import "./chunk-75NKPXTR.js";
import "./chunk-EUVARFSM.js";
import "./chunk-3VUFACNT.js";
import "./chunk-ZEEBL7ZN.js";
import {
  S2 as S
} from "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-SJ2GJCS2.js";
import {
  l
} from "./chunk-H7RDAEPY.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import "./chunk-JL3TJGVW.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-43LWRDQS.js";
import "./chunk-R6YKST3K.js";
import "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-MP6GH2AC.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import {
  d
} from "./chunk-7I33FAWS.js";
import "./chunk-DWOEYHKS.js";
import {
  s2 as s
} from "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var T = [0, 0];
var v = class extends a2(t(f(d2))) {
  constructor() {
    super(...arguments), this._fetchQueue = null, this._highlightGraphics = new i(), this._highlightView = null, this._popupHighlightHelper = null, this._tileStrategy = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  get tilemapCache() {
    return "tilemapCache" in this.layer ? this.layer.tilemapCache : null;
  }
  update(e3) {
    var _a;
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume(), (_a = this._highlightView) == null ? void 0 : _a.processUpdate(e3);
  }
  attach() {
    const e3 = "tileServers" in this.layer ? this.layer.tileServers : null, t2 = this.tilemapCache;
    if (this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent, t2 == null ? void 0 : t2.effectiveMinLOD, t2 == null ? void 0 : t2.effectiveMaxLOD), this._fetchQueue = new y2({ tileInfoView: this._tileInfoView, concurrency: e3 && 10 * e3.length || 10, process: (e4, t3) => this.fetchTile(e4, t3) }), this._tileStrategy = new r({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), S2(this, this.layer)) {
      const e4 = this._highlightView = new oe({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new n(this.view.featuresTilingScheme), defaultPointSymbolEnabled: false });
      this.container.addChild(this._highlightView.container), this._popupHighlightHelper = new U({ createFetchPopupFeaturesQueryGeometry: (e5, t3) => r2(e5, t3, this.view), highlightGraphics: this._highlightGraphics, highlightGraphicUpdated: (t3, i2) => {
        e4.graphicUpdateHandler({ graphic: t3, property: i2 });
      }, layerView: this, updatingHandles: this.updatingHandles });
    }
    this.requestUpdate(), this.addAttachHandles(l(() => this.resampling, () => {
      this.doRefresh();
    })), super.attach();
  }
  detach() {
    var _a;
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), (_a = this._popupHighlightHelper) == null ? void 0 : _a.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = this._popupHighlightHelper = null;
  }
  async fetchPopupFeatures(e3, t2) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.fetchPopupFeatures(e3, t2) : [];
  }
  highlight(e3) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.highlight(e3) : { remove() {
    } };
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    var _a;
    return S((_a = this.layer.tileInfo) == null ? void 0 : _a.spatialReference, e3);
  }
  async doRefresh() {
    !this.attached || this.updateRequested || this.suspended || (this._fetchQueue.reset(), this._tileStrategy.refresh((e3) => this._enqueueTileFetch(e3)));
  }
  isUpdating() {
    var _a;
    return ((_a = this._fetchQueue) == null ? void 0 : _a.updating) ?? false;
  }
  acquireTile(e3) {
    const t2 = this._bitmapView.createTile(e3), i2 = t2.bitmap;
    return [i2.x, i2.y] = this._tileInfoView.getTileCoords(T, t2.key), i2.resolution = this._tileInfoView.getTileResolution(t2.key), [i2.width, i2.height] = this._tileInfoView.tileInfo.size, this._enqueueTileFetch(t2), this._bitmapView.addChild(t2), this.requestUpdate(), t2;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  async fetchTile(e3, t2 = {}) {
    const r3 = this.tilemapCache, { signal: s2, resamplingLevel: o2 = 0 } = t2;
    if (!r3)
      try {
        return await this._fetchImage(e3, s2);
      } catch (a3) {
        if (!d(a3) && !this.resampling)
          return o(this._tileInfoView.tileInfo.size);
        if (o2 < 3) {
          const i2 = this._tileInfoView.getTileParentId(e3.id);
          if (i2) {
            const r4 = new e2(i2), s3 = await this.fetchTile(r4, { ...t2, resamplingLevel: o2 + 1 });
            return n2(this._tileInfoView, s3, r4, e3);
          }
        }
        throw a3;
      }
    const l2 = new e2(0, 0, 0, 0);
    let h2;
    try {
      if (await r3.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, l2, { signal: s2 }), l2.level !== e3.level && !this.resampling)
        return o(this._tileInfoView.tileInfo.size);
      h2 = await this._fetchImage(l2, s2);
    } catch (a3) {
      if (d(a3))
        throw a3;
      h2 = await this._fetchImage(e3, s2);
    }
    return this.resampling ? n2(this._tileInfoView, h2, l2, e3) : h2;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const t2 = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = t2, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.requestRender(), e3.once("attach", () => this.requestUpdate());
      } catch (r3) {
        d(r3) || s.getLogger(this).error(r3);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, t2) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: t2 });
  }
};
e([y()], v.prototype, "_fetchQueue", void 0), e([y()], v.prototype, "resampling", null), e([y()], v.prototype, "tilemapCache", null), v = e([a("esri.views.2d.layers.TileLayerView2D")], v);
var I = v;
export {
  I as default
};
//# sourceMappingURL=TileLayerView2D-NBPOI5QR.js.map
