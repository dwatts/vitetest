import {
  h as h3
} from "./chunk-XWGNMTES.js";
import {
  S2 as S,
  h2,
  m3 as m2,
  z
} from "./chunk-JNDFAMXY.js";
import {
  h
} from "./chunk-RRJGZKNX.js";
import {
  s
} from "./chunk-TEHNQYQD.js";
import {
  m,
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";

// node_modules/@arcgis/core/views/support/TileTreeDebugger.js
var p = [[0, 179, 255], [117, 62, 128], [0, 104, 255], [215, 189, 166], [32, 0, 193], [98, 162, 206], [102, 112, 129], [52, 125, 0], [142, 118, 246], [138, 83, 0], [92, 122, 255], [122, 55, 83], [0, 142, 255], [81, 40, 179], [0, 200, 244], [13, 24, 127], [0, 170, 147], [19, 58, 241], [22, 44, 35]];
var y2 = class extends m {
  constructor(e2) {
    super(e2), this.updating = false, this.enablePolygons = true, this.enableLabels = true, this._polygons = /* @__PURE__ */ new Map(), this._labels = /* @__PURE__ */ new Map(), this._enabled = true;
  }
  initialize() {
    this._symbols = p.map((e2) => new S({ color: [e2[0], e2[1], e2[2], 0.6], outline: { color: "black", width: 1 } })), this.update();
  }
  destroy() {
    this._enabled = false, this.clear();
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(e2) {
    this._enabled !== e2 && (this._enabled = e2, this.update());
  }
  update() {
    if (!this._enabled)
      return void this.clear();
    const e2 = (e3) => {
      if (null != e3.label)
        return e3.label;
      let s2 = e3.lij.toString();
      return null != e3.loadPriority && (s2 += ` (${e3.loadPriority})`), s2;
    }, o = this.getTiles(), r = new Array(), i = new Set((this._labels.size, this._labels.keys()));
    o.forEach((n2, p2) => {
      const y3 = n2.lij.toString();
      i.delete(y3);
      const m3 = n2.lij[0], b = n2.geometry;
      if (this.enablePolygons && !this._polygons.has(y3)) {
        const e3 = new h3({ geometry: b, symbol: this._symbols[m3 % this._symbols.length] });
        this._polygons.set(y3, e3), r.push(e3);
      }
      if (this.enableLabels) {
        const i2 = e2(n2), m4 = p2 / (o.length - 1), u = s(0, 200, m4), d = s(20, 6, m4) / 0.75, g = null != n2.loadPriority && n2.loadPriority >= o.length, _ = new h([u, g ? 0 : u, g ? 0 : u]), f = "3d" === this.view.type ? () => new h2({ verticalOffset: { screenLength: 40 / 0.75 }, callout: { type: "line", color: "white", border: { color: "black" } }, symbolLayers: [new z({ text: i2, halo: { color: "white", size: 1 / 0.75 }, material: { color: _ }, size: d })] }) : () => new m2({ text: i2, haloColor: "white", haloSize: 1 / 0.75, color: _, size: d }), w = this._labels.get(y3);
        if (w) {
          const e3 = f();
          null != w.symbol && JSON.stringify(e3) === JSON.stringify(w.symbol) || (w.symbol = e3);
        } else {
          const e3 = new h3({ geometry: b.extent.center, symbol: f() });
          this._labels.set(y3, e3), r.push(e3);
        }
      }
    });
    const n = new Array();
    i.forEach((e3) => {
      const s2 = this._polygons.get(e3);
      null != s2 && (n.push(s2), this._polygons.delete(e3));
      const t = this._labels.get(e3);
      null != t && (n.push(t), this._labels.delete(e3));
    }), this.view.graphics.removeMany(n), this.view.graphics.addMany(r);
  }
  clear() {
    this.view.graphics.removeMany(Array.from(this._polygons.values())), this.view.graphics.removeMany(Array.from(this._labels.values())), this._polygons.clear(), this._labels.clear();
  }
};
e([y({ constructOnly: true })], y2.prototype, "view", void 0), e([y({ readOnly: true })], y2.prototype, "updating", void 0), e([y()], y2.prototype, "enabled", null), y2 = e([a("esri.views.support.TileTreeDebugger")], y2);

export {
  y2 as y
};
//# sourceMappingURL=chunk-XBDZ5RTM.js.map
