import {
  s as s13
} from "./chunk-6HOJZLKI.js";
import {
  v as v4
} from "./chunk-ZIIRSX6D.js";
import {
  n as n12
} from "./chunk-JQKL7AD5.js";
import {
  K,
  R as R6,
  T as T6,
  c as c18,
  d as d8,
  f as f11,
  f2 as f12,
  g as g6,
  l as l17,
  m as m3,
  o as o12,
  p as p5,
  s as s12,
  u as u9
} from "./chunk-6WY3ZZYN.js";
import {
  B as B2,
  I as I7,
  O as O7,
  P as P5,
  S as S4,
  V as V2,
  X as X3,
  a as a15,
  k as k3,
  w as w4
} from "./chunk-CS6BZGQO.js";
import {
  f as f13
} from "./chunk-YZTKL3LQ.js";
import {
  h as h11,
  r as r19
} from "./chunk-I7EXY23J.js";
import {
  A as A5,
  d as d9,
  ne,
  r3 as r21
} from "./chunk-XXN3TEOU.js";
import {
  $
} from "./chunk-SFIT2AUF.js";
import {
  B as B3,
  V as V3
} from "./chunk-DBIFU6GO.js";
import {
  M as M5,
  i as i12,
  t as t17
} from "./chunk-V33FVMPT.js";
import {
  O as O8,
  n as n13
} from "./chunk-BD4RGMMN.js";
import {
  P as P6,
  a as a16
} from "./chunk-LBRZG7XH.js";
import {
  C as C5,
  et,
  it,
  lt,
  ot as ot2,
  q as q5,
  tt,
  ut,
  wt
} from "./chunk-WRC5WFEM.js";
import {
  E as E6,
  I as I6,
  a2 as a13
} from "./chunk-UYTAZUBJ.js";
import {
  e as e18
} from "./chunk-2EO2WRP7.js";
import {
  m as m4
} from "./chunk-IAWQREMS.js";
import {
  v as v3
} from "./chunk-EPDLDPS4.js";
import {
  r as r20
} from "./chunk-CERU5LKM.js";
import {
  a as a14,
  e as e19,
  o as o13
} from "./chunk-FAOMDC3K.js";
import {
  I as I5,
  N,
  X as X2,
  n as n10,
  r as r13,
  r2 as r16,
  u as u8
} from "./chunk-AN3WFAN2.js";
import {
  o as o7,
  t as t12
} from "./chunk-N4JKQR77.js";
import {
  E as E5,
  O as O5,
  b as b4,
  b2 as b5,
  p as p4,
  r2 as r15,
  s as s10
} from "./chunk-BDX5TRUE.js";
import {
  A as A4,
  E as E3,
  S as S3,
  _ as _8,
  a as a12,
  c as c16,
  l as l16
} from "./chunk-LIXBKTBN.js";
import {
  e as e17,
  f as f10,
  o as o11,
  r as r14
} from "./chunk-VDSNHCMM.js";
import {
  E as E4
} from "./chunk-6LC2JTLC.js";
import {
  s as s11
} from "./chunk-XM3YSFN6.js";
import {
  w as w3
} from "./chunk-NIZWDAMQ.js";
import {
  i as i10
} from "./chunk-UPDSQXLR.js";
import {
  a as a10
} from "./chunk-XUU35WPC.js";
import {
  r as r18
} from "./chunk-KM375BNF.js";
import {
  c as c17
} from "./chunk-FB6EWBGE.js";
import {
  e as e16,
  i as i11,
  t as t14
} from "./chunk-V6CD66ZZ.js";
import {
  W as W3,
  _ as _7,
  a as a11,
  h as h9,
  l as l15,
  o as o10
} from "./chunk-6FHMQNMS.js";
import {
  B,
  G as G2,
  O as O6,
  Q,
  W as W4,
  X,
  t as t16
} from "./chunk-YQDOKTNT.js";
import {
  r as r17
} from "./chunk-KFDARCTS.js";
import {
  R as R5,
  o as o8
} from "./chunk-WTPQKRQM.js";
import {
  I as I4,
  P as P4,
  c as c15,
  d2 as d7,
  e as e15,
  g as g5,
  t as t15
} from "./chunk-SMDDCTGQ.js";
import {
  E as E2
} from "./chunk-NU4UASX6.js";
import {
  c as c14
} from "./chunk-EHQZFPMP.js";
import {
  t as t13
} from "./chunk-FB4A6PBH.js";
import {
  o as o9
} from "./chunk-SADO52IH.js";
import {
  h as h8
} from "./chunk-73PNWDTS.js";
import {
  h2 as h10
} from "./chunk-2EWAI4LP.js";
import {
  t as t11
} from "./chunk-2CKXYQCA.js";
import {
  i as i9,
  n as n9,
  t as t10
} from "./chunk-JP7O2ZWE.js";
import {
  a as a9,
  f as f9
} from "./chunk-4Y7ZTMES.js";
import {
  g as g4
} from "./chunk-ODTMOFOP.js";
import {
  c as c11,
  c2 as c12
} from "./chunk-AHBQVOT4.js";
import {
  W as W2
} from "./chunk-Z6R62RNV.js";
import {
  l as l13
} from "./chunk-3LLZ72VA.js";
import {
  b as b3,
  v as v2
} from "./chunk-4SIKLJSS.js";
import {
  s as s8
} from "./chunk-ALPCRJS4.js";
import {
  c as c10,
  i as i7
} from "./chunk-XL7RF4A6.js";
import {
  i as i8
} from "./chunk-PR2OEILG.js";
import {
  M as M4,
  O as O4,
  R as R3,
  _ as _5
} from "./chunk-KSBQD24F.js";
import {
  a as a8,
  e as e13,
  t as t7
} from "./chunk-UM64E5NS.js";
import {
  n as n8,
  r as r11
} from "./chunk-2SZNVP5H.js";
import {
  F as F3,
  Z,
  k as k2
} from "./chunk-2XKILFME.js";
import {
  t as t8
} from "./chunk-G4LSNP77.js";
import {
  e as e9,
  t as t4
} from "./chunk-S5RIUWET.js";
import {
  rt
} from "./chunk-IG234GCS.js";
import {
  r as r9
} from "./chunk-M7PTINEZ.js";
import {
  H as H3
} from "./chunk-Z7LZRT7C.js";
import {
  s as s7
} from "./chunk-SGBMUZSF.js";
import {
  f as f8,
  i as i6,
  l as l11,
  t as t6,
  y as y4
} from "./chunk-BDWD2ZNU.js";
import {
  D as D2,
  F as F2,
  I as I3,
  R as R2
} from "./chunk-BCDDCNQ2.js";
import {
  T as T4,
  b as b2,
  c as c9,
  d as d6,
  h as h6,
  i as i5,
  l as l9,
  u as u5,
  x as x3
} from "./chunk-FIBWCATC.js";
import {
  d as d5,
  h as h5
} from "./chunk-D3BOGOKY.js";
import {
  A as A3,
  c as c13,
  u as u7
} from "./chunk-EK3Y2IYO.js";
import {
  s as s9
} from "./chunk-6S2FCH6S.js";
import {
  e as e14,
  r as r12
} from "./chunk-BZL5MAFP.js";
import {
  L as L2,
  P as P3,
  R as R4,
  T as T5,
  W,
  h as h7,
  j as j5,
  l as l12,
  p as p2,
  p2 as p3,
  q2 as q4
} from "./chunk-FOEAKQNX.js";
import {
  C as C4,
  _ as _6,
  p,
  z as z2
} from "./chunk-LEDSC236.js";
import {
  e as e12,
  o as o5,
  r as r10
} from "./chunk-CW7LIPBH.js";
import {
  e as e11
} from "./chunk-VN2IXVGV.js";
import {
  O as O3
} from "./chunk-BN6X2OXK.js";
import {
  M as M3
} from "./chunk-EV77QZBT.js";
import {
  _ as _3,
  l as l7,
  n as n6,
  r as r6,
  t as t3
} from "./chunk-YGUWDSEH.js";
import {
  c as c8,
  d as d4
} from "./chunk-EAGDM3GO.js";
import {
  t as t9
} from "./chunk-5KLICR5E.js";
import {
  C as C3,
  I as I2
} from "./chunk-KRCNIFX2.js";
import {
  _ as _4,
  j as j4,
  l as l8,
  o as o4,
  q as q3,
  r as r7,
  s as s6,
  v
} from "./chunk-NLWV7Q6F.js";
import {
  l as l14
} from "./chunk-RVS5HU2K.js";
import {
  a as a7,
  g as g3,
  o as o6,
  u as u6
} from "./chunk-JB7FDW5N.js";
import {
  e as e10,
  f as f7,
  l as l10,
  n as n7,
  r as r8,
  t as t5
} from "./chunk-SS3YG6J3.js";
import {
  Cn,
  Fn,
  Hn,
  In,
  Yn,
  kn,
  yn,
  zn
} from "./chunk-BNBT4QTW.js";
import {
  I,
  c as c6,
  e as e7,
  f as f6,
  g as g2,
  h as h3,
  i as i4,
  n as n4,
  q as q2,
  r as r5
} from "./chunk-7EG7BYWF.js";
import {
  d as d3,
  j as j3,
  l as l6,
  o as o3
} from "./chunk-JNDFAMXY.js";
import {
  c as c7,
  t as t2
} from "./chunk-NTEKJWGF.js";
import {
  d as d2
} from "./chunk-KW6QQDGN.js";
import {
  A as A2,
  D,
  E,
  F,
  G,
  O as O2,
  P as P2,
  S as S2,
  T as T3,
  V,
  Y,
  a as a5,
  c as c5,
  f as f5,
  h as h2,
  i as i3,
  l as l5,
  o as o2,
  w as w2,
  y as y3
} from "./chunk-AQ7R6V4L.js";
import {
  e as e8,
  u as u4
} from "./chunk-DOQ3SAAR.js";
import {
  n as n11
} from "./chunk-4BXK4H4L.js";
import {
  n as n5
} from "./chunk-4CZO65BK.js";
import {
  _ as _2,
  a as a6
} from "./chunk-SVCGLUNW.js";
import {
  h as h4
} from "./chunk-RRJGZKNX.js";
import {
  c as c4,
  j as j2,
  u as u2,
  u2 as u3
} from "./chunk-4OR73Y2R.js";
import {
  C as C2,
  f as f4,
  i as i2,
  x as x2,
  y as y2
} from "./chunk-EKJ2DJIR.js";
import {
  M,
  b,
  i,
  l as l4,
  s as s5
} from "./chunk-TEHNQYQD.js";
import {
  H,
  O,
  P,
  _,
  c as c3,
  e as e6,
  g,
  j,
  o,
  q,
  r as r4,
  s as s4,
  u,
  x,
  z
} from "./chunk-TPJLFGOT.js";
import {
  e as e5,
  f as f3,
  l as l2,
  n as n2,
  r as r2
} from "./chunk-CQX57DED.js";
import {
  a as a4,
  l as l3,
  r as r3
} from "./chunk-3CQBBMMD.js";
import {
  M as M2
} from "./chunk-3VUFACNT.js";
import {
  A2 as A,
  H as H2,
  S2 as S,
  T2
} from "./chunk-RTDN6KAT.js";
import {
  n as n3
} from "./chunk-7KH4CLS5.js";
import {
  ot
} from "./chunk-ZJEWQGHG.js";
import {
  m as m2,
  t2 as t,
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a3
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  e as e4
} from "./chunk-3R7FAT25.js";
import {
  C,
  T,
  a as a2,
  c as c2,
  d,
  f as f2,
  h,
  s as s3,
  w
} from "./chunk-7I33FAWS.js";
import {
  e as e2,
  f,
  l
} from "./chunk-DWOEYHKS.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-HMVAPW5X.js";
import {
  a
} from "./chunk-IYZKKFJM.js";
import {
  L,
  R,
  c,
  e as e3,
  has,
  k,
  m,
  n,
  r
} from "./chunk-JZJWZ6DN.js";

// node_modules/@arcgis/core/views/3d/layers/graphics/ElevationQuery.js
var a17 = class {
  constructor(e32, t23) {
    this.spatialReference = e32, this._view = t23;
  }
  getElevation(e32, t23, r38) {
    return this._view.elevationProvider.getElevation(e32, t23, 0, this.spatialReference, r38);
  }
  async queryElevation(e32, t23, r38, s27, i20) {
    return this._view.elevationProvider.queryElevation(e32, t23, 0, this.spatialReference, i20, r38, s27);
  }
};
var l18 = class {
  constructor(e32, t23, r38, s27) {
    this.spatialReference = t23, this._getElevationQueryProvider = r38, this._queries = new Array(), this._queryOptions = { ...s27, ignoreInvisibleLayers: true }, this._frameTask = e32.registerTask(I2.ELEVATION_QUERY, this);
  }
  destroy() {
    this._frameTask.remove();
  }
  queryElevation(i20, n26, o27, a26 = 0) {
    const l33 = C(), u23 = { x: i20, y: n26, minDemResolution: a26, result: l33, signal: o27 };
    return this._queries.push(u23), w(o27, () => {
      L(this._queries, u23), l33.reject(c2());
    }), l33.promise;
  }
  get running() {
    return this._queries.length > 0;
  }
  runTask(e32) {
    const t23 = this._queries;
    this._queries = [];
    const i20 = this._getElevationQueryProvider();
    if (!i20)
      return t23.forEach((e33) => e33.result.reject()), void e32.madeProgress();
    const n26 = t23.map((e33) => [e33.x, e33.y]), a26 = t23.reduce((e33, t24) => Math.min(e33, t24.minDemResolution), 1 / 0), l33 = new u2({ points: n26, spatialReference: this.spatialReference }), u23 = t23.length > 1 && t23.some((e33) => !!e33.signal) ? new AbortController() : null, h23 = null != u23 ? u23.signal : t23[0].signal;
    if (null != u23) {
      let e33 = 0;
      t23.forEach((i21) => w(i21.signal, () => {
        e33++, i21.result.reject(c2()), e33 === t23.length && u23.abort();
      }));
    }
    const c34 = { ...this._queryOptions, minDemResolution: a26, signal: h23 };
    i20.queryElevation(l33, c34).then((e33) => {
      t23.forEach((t24, r38) => {
        null != t24.signal && t24.signal.aborted ? t24.result.reject(c2()) : t24.result.resolve(e33.geometry.points[r38][2]);
      });
    }).catch((e33) => {
      t23.forEach((t24) => t24.result.reject(e33));
    }), e32.madeProgress();
  }
  get test() {
    const e32 = this;
    return { update: () => e32._queries.length > 0 && e32.runTask(C3) };
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/enums.js
var L3;
var A6;
!function(L8) {
  L8[L8.USER = 1] = "USER", L8[L8.SCALE_RANGE = 2] = "SCALE_RANGE", L8[L8.FILTER = 4] = "FILTER", L8[L8.DECONFLICTION = 8] = "DECONFLICTION", L8[L8.ALL_GRAPHIC = 15] = "ALL_GRAPHIC", L8[L8.ALL_LABEL = 255] = "ALL_LABEL";
}(L3 || (L3 = {})), function(L8) {
  L8[L8.GRAPHIC = 1] = "GRAPHIC", L8[L8.LABEL = 16] = "LABEL";
}(A6 || (A6 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/GeometryWithMapPositions.js
function e20(o27) {
  return null != o27.mapPositions;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/ElevationAligners.js
function u10(t23, e32, n26, o27, a26) {
  const r38 = t23.stageObject, s27 = r38.geometries;
  let i20 = 0;
  for (const l33 of s27) {
    if (!e20(l33))
      continue;
    const { update: t24, averageGeometrySampledElevation: s28 } = A7(l33, e32, n26, o27, a26);
    i20 += s28, t24 && r38.geometryVertexAttrsUpdated(l33);
  }
  return i20 / s27.length;
}
function p6(e32, o27, r38, s27, c34, m15) {
  const f25 = e32.stageObject, u23 = o27.centerPointInElevationSR;
  let p19 = 0;
  if (f25.usesVerticalDistanceToGround)
    s27(u23, M6), P5(f25, M6.verticalDistanceToGround), p19 = M6.sampledElevation;
  else {
    s27(u23, M6);
    "absolute-height" !== o27.mode && (p19 = M6.sampledElevation);
  }
  const g16 = n4(d10, m15 ?? f25.transformation), I16 = o(E7, g16[12], g16[13], g16[14]);
  t15.TESTS_DISABLE_OPTIMIZATIONS ? (T7[0] = u23.x, T7[1] = u23.y, T7[2] = M6.z, zn(u23.spatialReference, T7, g16, c34.spatialReference) && (m15 ? n4(m15, g16) : f25.transformation = g16)) : c34.setAltitudeOfTransformation(M6.z, g16);
  const h23 = b6 / c34.unitInMeters;
  return (Math.abs(g16[12] - I16[0]) >= h23 || Math.abs(g16[13] - I16[1]) >= h23 || Math.abs(g16[14] - I16[2]) >= h23) && (m15 ? n4(m15, g16) : f25.transformation = g16), p19;
}
var d10 = e12();
function g7(t23, e32, o27, r38, s27) {
  const i20 = t23.graphics3DSymbolLayer.lodRenderer;
  if (null == i20)
    return 0;
  const c34 = e32.centerPointInElevationSR;
  r38(c34, M6);
  const m15 = "absolute-height" !== e32.mode ? M6.sampledElevation : 0, f25 = i20.instanceData, u23 = t23.instanceIndex, p19 = v5;
  f25.getGlobalTransform(u23, p19);
  const d19 = o(E7, p19[12], p19[13], p19[14]);
  t15.TESTS_DISABLE_OPTIMIZATIONS ? (T7[0] = c34.x, T7[1] = c34.y, T7[2] = M6.z, zn(c34.spatialReference, T7, p19, s27.spatialReference) && f25.setGlobalTransform(u23, p19)) : s27.setAltitudeOfTransformation(M6.z, p19);
  const g16 = b6 / s27.unitInMeters;
  return (t15.TESTS_DISABLE_OPTIMIZATIONS || Math.abs(p19[12] - d19[0]) >= g16 || Math.abs(p19[13] - d19[1]) >= g16 || Math.abs(p19[14] - d19[2]) >= g16) && f25.setGlobalTransform(u23, p19), m15;
}
function I8(t23, e32, n26, o27, a26) {
  const r38 = t23.stageObject, s27 = r38.geometries;
  if (0 === s27.length)
    return 0;
  let i20 = 0, l33 = null, c34 = 0, u23 = false;
  for (const p19 of s27) {
    if (!e20(p19))
      continue;
    const t24 = p19.vertexAttributes.get(O3.POSITION);
    if (t24 !== l33) {
      const { update: r39, averageGeometrySampledElevation: s28 } = A7(p19, e32, n26, o27, a26);
      c34 = s28, l33 = t24, u23 = r39;
    }
    u23 && r38.geometryVertexAttrsUpdated(p19), i20 += c34;
  }
  return i20 / s27.length;
}
var b6 = 0.01;
var T7 = n2();
var h12 = n2();
var S5 = n2();
var v5 = e12();
var E7 = n2();
var M6 = new R6();
function A7(t23, e32, n26, o27, a26) {
  let s27 = false;
  const i20 = t23.shaderTransformation, m15 = e32.requiresSampledElevationInfo;
  h12[0] = i20[12], h12[1] = i20[13], h12[2] = i20[14], t23.invalidateBoundingInfo();
  const u23 = t23.getMutableAttribute(O3.POSITION), p19 = u23.data, d19 = u23.size, g16 = p19.length / d19, I16 = new r19(t23.mapPositions, n26);
  let v13 = 0, E14 = 0;
  for (let c34 = 0; c34 < g16; c34++) {
    if (S5[0] = p19[v13], S5[1] = p19[v13 + 1], S5[2] = p19[v13 + 2], o27(I16, M6), m15 && (E14 += M6.sampledElevation), t15.TESTS_DISABLE_OPTIMIZATIONS)
      p19[v13] = I16.array[I16.offset], p19[v13 + 1] = I16.array[I16.offset + 1], p19[v13 + 2] = M6.z, yn(p19, n26, v13, p19, a26.spatialReference, v13, 1), p19[v13] -= h12[0], p19[v13 + 1] -= h12[1], p19[v13 + 2] -= h12[2], s27 = true;
    else {
      T7[0] = p19[v13] + h12[0], T7[1] = p19[v13 + 1] + h12[1], T7[2] = p19[v13 + 2] + h12[2], a26.setAltitude(T7, M6.z), p19[v13] = T7[0] - h12[0], p19[v13 + 1] = T7[1] - h12[1], p19[v13 + 2] = T7[2] - h12[2];
      const t24 = b6 / a26.unitInMeters;
      (Math.abs(S5[0] - p19[v13]) >= t24 || Math.abs(S5[1] - p19[v13 + 1]) >= t24 || Math.abs(S5[2] - p19[v13 + 2]) >= t24) && (s27 = true);
    }
    v13 += d19, I16.offset += 3;
  }
  return E14 /= g16, { update: s27, averageGeometrySampledElevation: E14 };
}

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DGraphicCreationContext.js
var r22 = class {
  constructor(r38, s27, t23) {
    this.graphic = r38, this.renderingInfo = s27, this.layer = t23;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DObject3DGraphicLayer.js
var m5 = class {
  constructor(e32, t23, s27) {
    this.baseMaterial = e32, this.edgeMaterials = t23, this.properties = s27;
  }
};
var p7 = class {
  get isElevationSource() {
    return !!this.stageObject.lastValidElevationBB;
  }
  constructor(e32, t23, s27, i20, a26, n26, r38, o27 = null) {
    this.graphics3DSymbolLayer = e32, this.stageObject = t23, this._uniqueGeometries = s27, this._uniqueMaterials = i20, this._sharedResource = a26, this.elevationAligner = n26, this.elevationContext = r38, this._edgeState = o27, this.type = "object3d", this._stageLayer = null, this._visible = false, this._addedToStage = false, this.alignedSampledElevation = 0, this.needsElevationUpdates = false, this.useObjectOriginAsAttachmentOrigin = false;
  }
  initialize(e32) {
    this._stageLayer = e32;
    const t23 = e32.stage;
    t23.addMany(this._uniqueMaterials), t23.addMany(this._uniqueGeometries), t23.add(this.stageObject);
  }
  destroy() {
    if (!this._stageLayer)
      return;
    const e32 = this._stageLayer.stage;
    e32.removeMany(this._uniqueMaterials), e32.removeMany(this._uniqueGeometries), e32.remove(this.stageObject), this._addedToStage && (this._stageLayer.remove(this.stageObject), this._addedToStage = false);
    const t23 = e32.renderer.ensureEdgeView();
    t23.hasObject(this.stageObject) && t23.removeObject(this.stageObject), this.stageObject.dispose(), null != this._sharedResource && this._sharedResource.release(), this._visible = false, this._stageLayer = null;
  }
  layerOpacityChanged(e32, t23) {
    if (null == this._edgeState)
      return;
    const s27 = v6(this._edgeState.baseMaterial);
    let i20 = false;
    for (const a26 of this._edgeState.edgeMaterials)
      a26.objectTransparency !== s27 && (a26.objectTransparency = s27, i20 = true);
    i20 && this.resetEdgeObject(t23);
    this._stageLayer.stage.renderer.ensureEdgeView().updateAllComponentOpacities(this.stageObject, [e32]);
  }
  slicePlaneEnabledChanged(e32, t23) {
    if (null == this._edgeState)
      return;
    this._stageLayer.stage.renderer.ensureEdgeView().updateAllComponentMaterials(this.stageObject, this._edgeState.edgeMaterials, { hasSlicePlane: e32 }, !t23), this._edgeState.properties.hasSlicePlane = e32;
  }
  setVisibility(e32) {
    if (null != this._stageLayer && this._visible !== e32 && (this._visible = e32, this.stageObject.visible = e32, this._visible && !this._addedToStage && (this._stageLayer.add(this.stageObject), this._addedToStage = true), this._edgeState)) {
      const t23 = this._stageLayer.stage.renderer.ensureEdgeView();
      t23.hasObject(this.stageObject) ? t23.updateObjectVisibility(this.stageObject, e32) : e32 && this._addOrUpdateEdgeObject(t23, false);
    }
  }
  get visible() {
    return this._visible;
  }
  alignWithElevation(e32, t23, s27, i20) {
    if (null == this.elevationAligner)
      return;
    null != s27 && l17(this.elevationContext.featureExpressionInfoContext, s27);
    const a26 = (s28, i21) => c18(s28, e32, this.elevationContext, t23, i21);
    this.alignedSampledElevation = this.elevationAligner(this, this.elevationContext, e32.spatialReference, a26, t23), this.resetEdgeObject(i20);
  }
  alignWithAbsoluteElevation(e32, t23, s27) {
    const i20 = (t24, s28) => {
      s28.sampledElevation = e32, s28.verticalDistanceToGround = 0, s28.z = e32;
    };
    this.alignedSampledElevation = this.elevationAligner(this, this.elevationContext, null, i20, t23), this.resetEdgeObject(s27);
  }
  getCenterObjectSpace(t23 = n2()) {
    return r4(t23, z2(this.stageObject.boundingVolumeObjectSpace.bounds));
  }
  getBoundingBoxObjectSpace(e32 = i3()) {
    const t23 = this.stageObject.boundingVolumeObjectSpace;
    return A2(e32, t23.min), G(e32, t23.max), e32;
  }
  computeAttachmentOrigin(e32) {
    if (this.useObjectOriginAsAttachmentOrigin) {
      const t23 = this.stageObject.shaderTransformation;
      e32.render.origin[0] += t23[12], e32.render.origin[1] += t23[13], e32.render.origin[2] += t23[14], e32.render.num++;
    } else
      for (const i20 of this.stageObject.geometries)
        i20.computeAttachmentOrigin(S6) && (O(S6, S6, this.stageObject.shaderTransformation), u(e32.render.origin, e32.render.origin, S6), e32.render.num++);
  }
  async getProjectedBoundingBox(e32, s27, i20, a26, n26) {
    const r38 = this.getBoundingBoxObjectSpace(n26), g16 = y5, d19 = w2(r38) ? 1 : g16.length;
    for (let o27 = 0; o27 < d19; o27++) {
      const e33 = g16[o27];
      f14[0] = r38[e33[0]], f14[1] = r38[e33[1]], f14[2] = r38[e33[2]], O(f14, f14, this.stageObject.transformation), _9[3 * o27] = f14[0], _9[3 * o27 + 1] = f14[1], _9[3 * o27 + 2] = f14[2];
    }
    if (!e32(_9, 0, d19))
      return null;
    P2(r38);
    let u23 = null;
    this.calculateRelativeScreenBounds && (u23 = this.calculateRelativeScreenBounds());
    for (let t23 = 0; t23 < 3 * d19; t23 += 3) {
      for (let e33 = 0; e33 < 3; e33++)
        r38[e33] = Math.min(r38[e33], _9[t23 + e33]), r38[e33 + 3] = Math.max(r38[e33 + 3], _9[t23 + e33]);
      u23 && i20.push({ location: _9.slice(t23, t23 + 3), screenSpaceBoundingRect: u23 });
    }
    if (s27 && s27.service && "absolute-height" !== this.elevationContext.mode) {
      E(r38, S6);
      const e33 = "relative-to-scene" === this.elevationContext.mode ? "scene" : "ground";
      let t23 = 0;
      if (s27.useViewElevation)
        t23 = s27.service.getElevation(S6[0], S6[1], e33) ?? 0;
      else
        try {
          const i21 = V2(r38, s27.service.spatialReference, s27);
          t23 = await s27.service.queryElevation(S6[0], S6[1], a26, i21, e33) ?? 0;
        } catch (O15) {
        }
      Y(r38, 0, 0, -this.alignedSampledElevation + t23);
    }
    return r38;
  }
  addObjectState(e32, t23) {
    e32 === t10.Highlight && t23.addObject(this.stageObject, this.stageObject.highlight()), e32 === t10.MaskOccludee && t23.addObject(this.stageObject, this.stageObject.maskOccludee());
  }
  removeObjectState(e32) {
    e32.removeObject(this.stageObject);
  }
  resetEdgeObject(e32) {
    if (null == this._edgeState)
      return;
    const t23 = this._stageLayer.stage.renderer.ensureEdgeView();
    this._visible ? this._addOrUpdateEdgeObject(t23, e32) : t23.removeObject(this.stageObject);
  }
  _addOrUpdateEdgeObject(e32, t23) {
    const s27 = this._edgeState;
    if (null == s27)
      return;
    const i20 = v6(s27.baseMaterial);
    for (const a26 of s27.edgeMaterials)
      a26.objectTransparency = i20;
    e32.addOrUpdateObject3D(this.stageObject, s27.edgeMaterials, s27.properties, !t23).then(() => {
      var _a;
      return (_a = this._stageLayer) == null ? void 0 : _a.sync();
    });
  }
};
function v6(e32) {
  return e32.isVisible() ? e32.parameters.transparent ? A3.TRANSPARENT : A3.OPAQUE : A3.INVISIBLE;
}
var _9 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var f14 = n2();
var S6 = n2();
var y5 = [[0, 1, 2], [3, 1, 2], [0, 4, 2], [3, 4, 2], [0, 1, 5], [3, 1, 5], [0, 4, 5], [3, 4, 5]];

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DObjectMetadata.js
var t18 = class {
  constructor(t23, e32 = null) {
    this.labelText = e32, this.elevationOffset = t23 ?? 0;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/interfaces.js
var e21;
!function(e32) {
  e32[e32.RecreateSymbol = 0] = "RecreateSymbol", e32[e32.RecreateGraphics = 1] = "RecreateGraphics", e32[e32.FastUpdate = 2] = "FastUpdate";
}(e21 || (e21 = {}));

// node_modules/@arcgis/core/views/3d/layers/graphics/Loadable.js
var r23 = class {
  constructor(t23) {
    this.schedule = t23, this._abortController = null, this._loadStatus = l19.LOADING, this._loadError = null, this._loader = null, this.logger = null;
  }
  destroy() {
    this.abortLoad();
  }
  get loadStatus() {
    return this._loadStatus;
  }
  load(t23, r38) {
    return this._loadStatus === l19.LOADED ? (t23 && t23(), this._loader ?? Promise.resolve()) : this._loadStatus === l19.FAILED ? (r38 && r38(this._loadError), this._loader ?? Promise.resolve()) : (null == this._loader && (this._abortController = new AbortController(), this._loader = this.doLoad(this._abortController.signal).then(() => {
      this._abortController = null, this._loadStatus = l19.LOADED;
    }, (t24) => {
      throw this._loadError = t24, this._abortController = null, this._loadStatus = l19.FAILED, !d(t24) && this.logger && t24.message && this.logger.warn(t24.message), t24;
    })), this._loader.then(t23, r38).catch(() => {
    }), this._loader);
  }
  abortLoad() {
    null != this._abortController ? this._abortController = e2(this._abortController) : this._loadStatus === l19.LOADING && (this._loadStatus = l19.FAILED), this._loader = null;
  }
};
var l19;
!function(t23) {
  t23[t23.LOADING = 0] = "LOADING", t23[t23.LOADED = 1] = "LOADED", t23[t23.FAILED = 2] = "FAILED";
}(l19 || (l19 = {}));

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DPathSymbolLayerConstants.js
var o14 = 3;
var t19 = 3;
var c19 = 10;

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/LodResources.js
var e22 = class {
  constructor(t23, e32 = null) {
    this.geometry = t23, this.textures = e32;
  }
};
function o15(e32) {
  const o27 = [];
  return e32.levels.forEach((t23) => t23.components.forEach((t24) => o27.push(t24.geometry.material))), c(o27);
}
function r24(e32) {
  const o27 = new Array();
  return e32.levels.forEach((t23) => {
    t23.components.forEach((t24) => {
      null != t24.textures && o27.push(...t24.textures);
    });
  }), c(o27);
}
function n14(e32) {
  const o27 = e32.components.map((t23) => t23.geometry);
  return c(o27);
}
function s14(e32) {
  const o27 = [];
  return e32.levels.forEach((t23) => {
    t23.components.forEach((t24) => {
      o27.push(t24.geometry);
    });
  }), c(o27);
}

// node_modules/@arcgis/core/views/3d/layers/graphics/primitiveObjectSymbolUtils.js
function o16(e32) {
  switch (e32) {
    case "sphere":
    case "cube":
    case "diamond":
    case "cylinder":
    case "cone":
    case "inverted-cone":
    case "tetrahedron":
      return true;
  }
  return false;
}
function u11(o27, u23) {
  const S14 = (n26, s27, a26 = false) => ({ levels: n26.map((n27) => {
    const c34 = s27(n27.tesselation);
    return a26 && it(c34), { components: [new e22(c34)], faceCount: c34.indexCount / 3, minScreenSpaceRadius: n27.minScreenSpaceRadius };
  }) });
  switch (o27) {
    case "sphere":
      return S14([{ tesselation: 0, minScreenSpaceRadius: 0 }, { tesselation: 1, minScreenSpaceRadius: 8 }, { tesselation: 2, minScreenSpaceRadius: 16 }, { tesselation: 3, minScreenSpaceRadius: 50 }, { tesselation: 4, minScreenSpaceRadius: 250 }], (e32) => et(u23, 0.5, e32, true));
    case "cube":
      return S14([{ tesselation: 0, minScreenSpaceRadius: 0 }], () => C5(u23, 1));
    case "cone":
      return S14(d11, (e32) => lt(u23, 1, 0.5, e32, false), true);
    case "inverted-cone":
      return S14(d11, (e32) => lt(u23, 1, 0.5, e32, true), true);
    case "cylinder":
      return S14(d11, (e32) => ut(u23, 1, 0.5, e32, [0, 0, 1], [0, 0, 0.5]));
    case "tetrahedron":
      return S14([{ tesselation: 0, minScreenSpaceRadius: 0 }], () => tt(u23, 1), true);
    case "diamond":
      return S14([{ tesselation: 0, minScreenSpaceRadius: 0 }], () => q5(u23, 1), true);
    default:
      return;
  }
}
var d11 = [{ tesselation: 6, minScreenSpaceRadius: 0 }, { tesselation: 18, minScreenSpaceRadius: 7 }, { tesselation: 64, minScreenSpaceRadius: 65 }];

// node_modules/@arcgis/core/views/3d/layers/graphics/symbolComplexity.js
var y6 = { primitivesPerFeature: 0, primitivesPerCoordinate: 0, drawCallsPerFeature: 0, estimated: true, memory: { bytesPerFeature: 0, bytesPerCoordinate: 0, bytesPerFeatureLabel: 0, resourceBytes: 0, draped: { bytesPerFeature: 0, bytesPerFeatureLabel: 0, bytesPerCoordinate: 0 } } };
function P7(e32) {
  if ("web-style" === e32.type)
    return y6;
  return d12(e32.symbolLayers.toArray().map((r38) => l20(e32, r38)));
}
function d12(e32) {
  let r38 = 0, t23 = 0, a26 = 0, s27 = false, i20 = 0;
  const o27 = { bytesPerFeature: 0, bytesPerFeatureLabel: 0, bytesPerCoordinate: 0, resourceBytes: 0, draped: { bytesPerFeature: 0, bytesPerFeatureLabel: 0, bytesPerCoordinate: 0 } };
  for (const u23 of e32)
    null != u23 && (r38 += u23.primitivesPerFeature, t23 += u23.primitivesPerCoordinate, a26 += u23.drawCallsPerFeature, o27.bytesPerFeature += u23.memory.bytesPerFeature, o27.bytesPerFeatureLabel += u23.memory.bytesPerFeatureLabel, o27.bytesPerCoordinate += u23.memory.bytesPerCoordinate, o27.resourceBytes += u23.memory.resourceBytes, o27.draped.bytesPerFeature += u23.memory.bytesPerFeature, o27.draped.bytesPerFeatureLabel += u23.memory.bytesPerFeatureLabel, o27.draped.bytesPerCoordinate += u23.memory.bytesPerCoordinate, s27 = s27 || u23.estimated, ++i20);
  return { primitivesPerFeature: r38, primitivesPerCoordinate: t23, drawCallsPerFeature: a26, estimated: s27, memory: o27, numComplexities: i20 };
}
function n15(e32) {
  const r38 = d12(e32);
  return r38.numComplexities > 0 && (r38.primitivesPerFeature /= r38.numComplexities, r38.primitivesPerCoordinate /= r38.numComplexities, r38.drawCallsPerFeature /= r38.numComplexities, r38.memory.bytesPerFeature /= r38.numComplexities, r38.memory.bytesPerFeatureLabel /= r38.numComplexities, r38.memory.bytesPerCoordinate /= r38.numComplexities, r38.memory.resourceBytes /= r38.numComplexities, r38.memory.draped.bytesPerFeature /= r38.numComplexities, r38.memory.draped.bytesPerFeatureLabel /= r38.numComplexities, r38.memory.draped.bytesPerCoordinate /= r38.numComplexities), r38;
}
var m6 = {};
function l20(i20, u23) {
  var _a;
  const b15 = F4(i20, u23), y12 = c13(u23) ? 2 : 0;
  switch (u23.type) {
    case "extrude":
      return { primitivesPerFeature: -4, primitivesPerCoordinate: 4, drawCallsPerFeature: y12, estimated: false, memory: b15 };
    case "fill":
      return "mesh-3d" === i20.type ? { primitivesPerFeature: 0, primitivesPerCoordinate: 0, drawCallsPerFeature: y12, estimated: false, memory: b15 } : null != u23.outline && u23.outline.size > 0 ? { primitivesPerFeature: -4, primitivesPerCoordinate: 3, drawCallsPerFeature: 0, estimated: false, memory: b15 } : { primitivesPerFeature: -2, primitivesPerCoordinate: 1, drawCallsPerFeature: 0, estimated: false, memory: b15 };
    case "water":
      return { primitivesPerFeature: -2, primitivesPerCoordinate: 1, drawCallsPerFeature: 0, estimated: false, memory: b15 };
    case "line":
      return { primitivesPerFeature: -2, primitivesPerCoordinate: 2, drawCallsPerFeature: 0, estimated: false, memory: b15 };
    case "object":
      if ((_a = u23.resource) == null ? void 0 : _a.href)
        return { primitivesPerFeature: 16, primitivesPerCoordinate: 0, drawCallsPerFeature: 0, estimated: true, memory: b15 };
      return { ...c20(u23.resource && u23.resource.primitive || d3), memory: b15 };
    case "path": {
      let r38 = 0, i21 = 0;
      switch (u23.profile) {
        case "circle":
          r38 = c19;
          break;
        case "quad":
          r38 = 4;
          break;
        default:
          return void n5(u23.profile);
      }
      switch (u23.join ?? "simple") {
        case "round":
          i21 = o14;
          break;
        case "miter":
        case "bevel":
          i21 = 1;
          break;
        default:
          return;
      }
      const o27 = 2 * r38, y13 = r38 * i21 * 2;
      let P14 = -2 * y13 - o27;
      switch (u23.cap) {
        case "none":
          break;
        case "butt":
        case "square":
          P14 += 2 * (r38 - 1);
          break;
        case "round":
          P14 += 2 * (r38 * (t19 - 1) * 2 + r38);
          break;
        default:
          return;
      }
      return { primitivesPerFeature: P14, primitivesPerCoordinate: y13 + o27, drawCallsPerFeature: 0, estimated: false, memory: b15 };
    }
    case "text":
    case "icon":
      return { primitivesPerFeature: 2, primitivesPerCoordinate: 0, drawCallsPerFeature: 0, estimated: false, memory: b15 };
    default:
      return;
  }
}
function F4(r38, t23) {
  const a26 = "point-3d" === r38.type;
  switch (t23.type) {
    case "extrude":
      return t23.edges && t23.edges.size > 0 ? p8.EXTRUDE_EDGES : p8.EXTRUDE;
    case "fill":
      return null != t23.outline && t23.outline.size > 0 ? p8.FILL_OUTLINE : p8.FILL;
    case "water":
      return p8.FILL;
    case "line":
      return "round" === t23.join ? p8.LINE_ROUND : p8.LINE_MITER;
    case "path":
      switch (t23.join) {
        case "round":
          switch (t23.profile) {
            case "circle":
              return p8.PATH_ROUND_CIRCLE;
            case "quad":
              return p8.PATH_ROUND_QUAD;
            default:
              return void n5(t23.profile);
          }
        case "miter":
        case "bevel":
          switch (t23.profile) {
            case "circle":
              return p8.PATH_MITER_CIRCLE;
            case "quad":
              return p8.PATH_MITER_QUAD;
            default:
              return void n5(t23.profile);
          }
        default:
          return;
      }
    case "object":
      return a26 ? p8.OBJECT_POINT : p8.OBJECT_POLYGON;
    case "icon":
    case "text":
      return a26 ? p8.ICON_POINT : p8.ICON_POLYGON;
    default:
      return;
  }
}
function c20(e32) {
  let r38 = m6[e32];
  if (r38)
    return r38;
  const t23 = u11(e32, null);
  return r38 = { primitivesPerFeature: n14(t23.levels[0]).reduce((e33, r39) => e33 + r39.indices.get(O3.POSITION).length / 3, 0), primitivesPerCoordinate: 0, drawCallsPerFeature: 0, estimated: false }, m6[e32] = r38, r38;
}
var p8 = { ICON_POINT: { bytesPerFeature: 2321.5204640676384, bytesPerFeatureLabel: 990.45722, bytesPerCoordinate: 0, resourceBytes: 0, draped: { bytesPerFeature: 2169.5155951150787, bytesPerFeatureLabel: 999.2598599999999, bytesPerCoordinate: 0 } }, ICON_POLYGON: { bytesPerFeature: 3822.4566594216512, bytesPerFeatureLabel: 1004.4288266666666, bytesPerCoordinate: 3.8232947206245864, resourceBytes: 0, draped: { bytesPerFeature: 3656.161389156324, bytesPerFeatureLabel: 994.9227800000001, bytesPerCoordinate: 3.836714603517761 } }, OBJECT_POINT: { bytesPerFeature: 1286.2669145138564, bytesPerFeatureLabel: 1011.4901900000001, bytesPerCoordinate: 0, resourceBytes: 0, draped: { bytesPerFeature: 1286.2669145138564, bytesPerFeatureLabel: 1011.4901900000001, bytesPerCoordinate: 0 } }, OBJECT_POLYGON: { bytesPerFeature: 2796.828455517831, bytesPerFeatureLabel: 1012.9951500000002, bytesPerCoordinate: 4.051546356517487, resourceBytes: 0, draped: { bytesPerFeature: 2796.828455517831, bytesPerFeatureLabel: 1012.9951500000002, bytesPerCoordinate: 4.051546356517487 } }, LINE_MITER: { bytesPerFeature: 4906.045480276492, bytesPerFeatureLabel: 1002.8815266666666, bytesPerCoordinate: 24.04850207798191, resourceBytes: 0, draped: { bytesPerFeature: 4315.785832179941, bytesPerFeatureLabel: 998.7028333333334, bytesPerCoordinate: 19.457038722015074 } }, LINE_ROUND: { bytesPerFeature: 4893.576398024015, bytesPerFeatureLabel: 1015.8812866666666, bytesPerCoordinate: 24.039686621147293, resourceBytes: 0, draped: { bytesPerFeature: 4321.076505943878, bytesPerFeatureLabel: 1008.7058400000001, bytesPerCoordinate: 19.522527447599565 } }, PATH_MITER_CIRCLE: { bytesPerFeature: 27475.37385725739, bytesPerFeatureLabel: 945.1915, bytesPerCoordinate: 1936.190695268645, resourceBytes: 0, draped: { bytesPerFeature: 27475.37385725739, bytesPerFeatureLabel: 945.1915, bytesPerCoordinate: 1936.190695268645 } }, PATH_ROUND_CIRCLE: { bytesPerFeature: 13432.532036888486, bytesPerFeatureLabel: 949.8167000000001, bytesPerCoordinate: 4250.913048917402, resourceBytes: 0, draped: { bytesPerFeature: 13432.532036888486, bytesPerFeatureLabel: 949.8167000000001, bytesPerCoordinate: 4250.913048917402 } }, PATH_MITER_QUAD: { bytesPerFeature: 17083.041162790672, bytesPerFeatureLabel: 1006.4104, bytesPerCoordinate: 1543.9135284683243, resourceBytes: 0, draped: { bytesPerFeature: 17083.041162790672, bytesPerFeatureLabel: 1006.4104, bytesPerCoordinate: 1543.9135284683243 } }, PATH_ROUND_QUAD: { bytesPerFeature: 24054.406240577355, bytesPerFeatureLabel: 976.0122999999999, bytesPerCoordinate: 2683.863857257418, resourceBytes: 0, draped: { bytesPerFeature: 24054.406240577355, bytesPerFeatureLabel: 976.0122999999999, bytesPerCoordinate: 2683.863857257418 } }, FILL: { bytesPerFeature: 5336.950602511737, bytesPerFeatureLabel: 993.6785799999999, bytesPerCoordinate: 9.558162275921951, resourceBytes: 0, draped: { bytesPerFeature: 4643.732435264264, bytesPerFeatureLabel: 1003.6394400000001, bytesPerCoordinate: 8.123952159573538 } }, FILL_OUTLINE: { bytesPerFeature: 8210.8457089066, bytesPerFeatureLabel: 1006.2871066666667, bytesPerCoordinate: 14.496686428135353, resourceBytes: 0, draped: { bytesPerFeature: 6982.149803527473, bytesPerFeatureLabel: 1005.1158800000001, bytesPerCoordinate: 11.034666572000932 } }, EXTRUDE: { bytesPerFeature: 16336.386002724352, bytesPerFeatureLabel: 1013.2957066666665, bytesPerCoordinate: 40.50904192903909, resourceBytes: 0, draped: { bytesPerFeature: 16336.386002724352, bytesPerFeatureLabel: 1013.2957066666665, bytesPerCoordinate: 40.50904192903909 } }, EXTRUDE_EDGES: { bytesPerFeature: 18251.260762353977, bytesPerFeatureLabel: 1044.1864133333333, bytesPerCoordinate: 40.594518397678755, resourceBytes: 0, draped: { bytesPerFeature: 18251.260762353977, bytesPerFeatureLabel: 1044.1864133333333, bytesPerCoordinate: 40.594518397678755 } } };

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DSymbolLayer.js
var u12 = s.getLogger("esri.views.3d.layers.graphics.Graphics3DSymbolLayer");
var h13 = class extends r23 {
  constructor(e32, t23, i20, o27) {
    super(i20.schedule), this.symbol = e32, this.symbolLayer = t23, this._context = i20, this._elevationInfoOverride = null, this.ignoreDrivers = false, this._drivenProperties = { color: false, opacity: false, opacityAlwaysOpaque: true, size: false }, this.complexity = null, this.logger = u12, this._elevationOptions = { supportsOffsetAdjustment: false, supportsOnTheGround: true }, this.skipHighSymbolLodsChanged = true, this._renderPriority = o27.renderPriority, this._renderPriorityStep = o27.renderPriorityStep, this._elevationContext = new o12(), this.complexity = this.computeComplexity(), this.ignoreDrivers = o27.ignoreDrivers, this.ignoreDrivers || (this._drivenProperties = f15(this._context.renderer)), this._updateElevationContext();
  }
  getCachedSize() {
    return null;
  }
  get extentPadding() {
    return 0;
  }
  _drivenPropertiesChanged(e32) {
    if (this.ignoreDrivers)
      return false;
    const t23 = this._drivenProperties, i20 = f15(e32);
    return i20.color !== t23.color || i20.opacity !== t23.opacity || i20.opacityAlwaysOpaque !== t23.opacityAlwaysOpaque || i20.size !== t23.size;
  }
  get needsDrivenTransparentPass() {
    return this._drivenProperties.opacity && !this._drivenProperties.opacityAlwaysOpaque;
  }
  _logGeometryCreationWarnings(e32, t23, i20, o27) {
    const r38 = e32.projectionSuccess, n26 = "polygons" in e32 ? e32.polygons : null, s27 = `${o27} geometry failed to be created`;
    let a26 = null;
    r38 ? !this._logGeometryValidationWarnings(t23, i20, o27) && n26 && 0 === n26.length && "rings" === i20 && t23.length > 0 && t23[0].length > 2 && (a26 = `${s27} (filled rings should use clockwise winding - try reversing the order of vertices)`) : a26 = `${s27} (failed to project geometry to view spatial reference)`, a26 && u12.warnOncePerTick(a26);
  }
  _logGeometryValidationWarnings(e32, t23, i20) {
    const o27 = `${i20} geometry failed to be created`;
    return !e32.length || 1 === e32.length && !e32[0].length ? (u12.warnOncePerTick(`${o27} (no ${t23} were defined)`), true) : (!Array.isArray(e32) || !Array.isArray(e32[0])) && (u12.warnOncePerTick(`${o27} (${t23} should be defined as a 2D array)`), true);
  }
  _validateGeometry(e32, t23 = null, i20 = null) {
    if (null != t23 && !t23.includes(e32.type))
      return this.logger.warn("unsupported geometry type for " + i20 + ` symbol: ${e32.type}`), false;
    if ("point" === e32.type) {
      const t24 = e32;
      if (!isFinite(t24.x) || !isFinite(t24.y))
        return u12.warn("point coordinate is not a valid number, graphic skipped"), false;
    }
    return true;
  }
  _defaultElevationInfoNoZ() {
    return y7;
  }
  _defaultElevationInfoZ() {
    return v7;
  }
  _updateElevationContext() {
    null != this._elevationInfoOverride ? (this._elevationContext.setFromElevationInfo(this._elevationInfoOverride), this._elevationContext.updateFeatureExpressionInfoContext(null)) : this._context.layer.elevationInfo ? (this._elevationContext.setFromElevationInfo(this._context.layer.elevationInfo), this._elevationContext.updateFeatureExpressionInfoContext(this._context.featureExpressionInfoContext)) : this._elevationContext.reset();
  }
  getDefaultElevationInfo(e32) {
    return e32.hasZ ? this._defaultElevationInfoZ() : this._defaultElevationInfoNoZ();
  }
  getGeometryElevationMode(e32, t23 = this.getDefaultElevationInfo(e32)) {
    return this._elevationContext.mode || t23.mode;
  }
  setElevationInfoOverride(e32) {
    this._elevationInfoOverride = e32, this._updateElevationContext();
  }
  setGraphicElevationContext(e32, t23) {
    const i20 = e32.geometry, o27 = this.getDefaultElevationInfo(i20);
    t23.unit = null != this._elevationContext.unit ? this._elevationContext.unit : o27.unit, t23.mode = this.getGeometryElevationMode(i20, o27), t23.offsetMeters = this._elevationContext.meterUnitOffset ?? o27.offset ?? 0;
    const r38 = !this._elevationOptions.supportsOnTheGround && "on-the-ground" === t23.mode;
    r38 && (t23.mode = "relative-to-ground", t23.offsetMeters = 0);
    const n26 = r38 ? f12 : this._elevationContext.featureExpressionInfoContext;
    return t23.updateFeatureExpressionInfoContext(n26, e32, this._context.layer), t23;
  }
  prepareSymbolLayerPatch(e32) {
  }
  updateGeometry(e32, t23) {
    return false;
  }
  updateTransform(e32, t23, i20, o27) {
    return false;
  }
  onRemoveGraphic(e32) {
  }
  _getLayerOpacity() {
    if (this._context.graphicsCoreOwner && "fullOpacity" in this._context.graphicsCoreOwner)
      return this._context.graphicsCoreOwner.fullOpacity ?? 0;
    const e32 = this._context.layer.opacity;
    return e32 ?? 1;
  }
  _getCombinedOpacity(e32, t23 = g8) {
    let i20 = 1;
    return this.draped || (i20 *= this._getLayerOpacity()), this._drivenProperties.opacity || (null != e32 ? i20 *= e32.a : t23.hasIntrinsicColor || (i20 = 0)), i20;
  }
  _getCombinedOpacityAndColor(t23, o27 = g8) {
    const r38 = this._getCombinedOpacity(t23, o27);
    if (this._drivenProperties.color)
      return k3(null, r38);
    const n26 = null != t23 ? h4.toUnitRGB(t23) : l2;
    return k3(n26, r38);
  }
  _getVertexOpacityAndColor(e32, t23 = null) {
    const i20 = this._drivenProperties.color ? e32.color : null, o27 = this._drivenProperties.opacity ? e32.opacity : null, r38 = k3(i20, o27);
    return t23 && (r38[0] *= t23, r38[1] *= t23, r38[2] *= t23, r38[3] *= t23), r38;
  }
  isFastUpdatesEnabled() {
    return null != this._fastUpdates;
  }
  computeComplexity() {
    return l20(this.symbol, this.symbolLayer);
  }
  globalPropertyChanged(e32, t23, i20) {
    switch (e32) {
      case "opacity":
        return this.layerOpacityChanged(t23, i20), true;
      case "elevationInfo": {
        const e33 = this._elevationContext.mode;
        this._updateElevationContext();
        return this.layerElevationInfoChanged(t23, i20, e33) !== T6.RECREATE;
      }
      case "slicePlaneEnabled":
        return this.slicePlaneEnabledChanged(t23, i20);
      case "physicalBasedRenderingEnabled":
        return this.physicalBasedRenderingChanged();
      case "pixelRatio":
        return this.pixelRatioChanged;
      case "skipHighSymbolLods":
        return this.skipHighSymbolLodsChanged;
      default:
        return false;
    }
  }
  get pixelRatioChanged() {
    return true;
  }
  updateGraphics3DGraphicElevationInfo(e32, t23, i20) {
    let o27 = T6.UPDATE;
    return e32.forEach((e33) => {
      const n26 = t23(e33);
      if (null != n26) {
        const t24 = e33.graphic;
        this.setGraphicElevationContext(t24, n26.elevationContext), n26.needsElevationUpdates = i20(n26.elevationContext.mode);
      } else
        o27 = T6.RECREATE;
    }), o27;
  }
  applyRendererDiff(e32, t23) {
    return e21.RecreateSymbol;
  }
  getFastUpdateAttrValues(e32) {
    if (!this._fastUpdates)
      return null;
    const t23 = this._fastUpdates.visualVariables, i20 = t23.size ? X(t23.size.field, e32) : 0, r38 = t23.color ? X(t23.color.field, e32) : 0, n26 = t23.opacity ? X(t23.opacity.field, e32) : 0;
    return r6(i20, r38, n26, 0);
  }
  get draped() {
    return this._draped;
  }
  ensureDrapedStatus(e32) {
    return null == this._draped ? (this._draped = e32, true) : (e32 !== this.draped && u12.warnOnce("A symbol can only produce either draped or non-draped visualizations. Use two separate symbol instances for draped and non-draped graphics if necessary."), false);
  }
  test() {
    const e32 = () => {
      var _a, _b, _c, _d, _e3, _f, _g, _h2;
      return { size: ((_b = (_a = this._fastUpdates) == null ? void 0 : _a.visualVariables.size) == null ? void 0 : _b.field) ?? null, color: ((_d = (_c = this._fastUpdates) == null ? void 0 : _c.visualVariables.color) == null ? void 0 : _d.field) ?? null, opacity: ((_f = (_e3 = this._fastUpdates) == null ? void 0 : _e3.visualVariables.opacity) == null ? void 0 : _f.field) ?? null, rotation: ((_h2 = (_g = this._fastUpdates) == null ? void 0 : _g.visualVariables.rotation) == null ? void 0 : _h2.field) ?? null };
    };
    return { drivenProperties: this._drivenProperties, getVisVarFields: e32 };
  }
};
function f15(e32) {
  const t23 = { color: false, opacity: false, opacityAlwaysOpaque: true, size: false };
  return e32 && "visualVariables" in e32 && e32.visualVariables && e32.visualVariables.forEach((e33) => {
    switch (e33.type) {
      case "color":
        if (t23.color = true, e33.stops)
          for (let i20 = 0; i20 < e33.stops.length; i20++) {
            const o27 = e33.stops[i20].color;
            o27 && (t23.opacity = true, o27.a < 1 && (t23.opacityAlwaysOpaque = false));
          }
        break;
      case "opacity":
        t23.opacity = true, t23.opacityAlwaysOpaque = false;
        break;
      case "size":
        t23.size = true;
    }
  }), t23;
}
var y7 = { mode: "on-the-ground", offset: 0, unit: "meters" };
var v7 = { mode: "absolute-height", offset: 0, unit: "meters" };
var g8 = { hasIntrinsicColor: false };

// node_modules/@arcgis/core/views/3d/layers/graphics/pointUtils.js
function c21(e32, n26, o27, i20, l33, c34) {
  const p19 = e32.clippingExtent;
  if (In(n26, m7, e32.elevationProvider.spatialReference), null != p19 && !y3(p19, m7))
    return null;
  In(n26, m7, e32.renderCoordsHelper.spatialReference), o27.shaderTransformer = c34, o27.localOrigin = e32.localOriginFactory.getOrigin(m7);
  const u23 = new V3({ geometries: [o27], castShadow: false, layerUid: e32.layer.uid, graphicUid: l33, usesVerticalDistanceToGround: true });
  return { object: u23, sampledElevation: g6(u23, n26, e32.elevationProvider, e32.renderCoordsHelper, i20) };
}
function p9(e32, t23, n26) {
  const o27 = e32.elevationContext, s27 = n26.spatialReference;
  In(t23, m7, s27), o27.centerPointInElevationSR = Z(m7[0], m7[1], t23.hasZ ? m7[2] : 0, null != s27 ? s27 : null);
}
function u13(e32) {
  switch (e32.type) {
    case "point":
      return e32;
    case "polygon":
    case "extent":
      return w4(e32);
    case "polyline": {
      const r38 = e32.paths[0];
      if (!r38 || 0 === r38.length)
        return null;
      const t23 = c4(r38, u3(r38) / 2);
      return Z(t23[0], t23[1], t23[2], e32.spatialReference);
    }
    case "mesh":
      return e32.origin;
  }
  return null;
}
var m7 = n2();

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LineCalloutTechnique.js
var h14 = class _h extends e16 {
  initializeConfiguration(i20, t23) {
    t23.spherical = i20.viewingMode === l14.Global;
  }
  initializeProgram(e32) {
    return new i11(e32.rctx, _h.shader.get().build(this.configuration), E2);
  }
  setPipelineState(e32) {
    const i20 = e32 ? I3.ALWAYS : I3.LESS;
    return this.configuration.depthHudEnabled ? W3({ depthTest: { func: i20 }, depthWrite: a11 }) : W3({ blending: l15(R2.ONE, R2.SRC_ALPHA, R2.ONE_MINUS_SRC_ALPHA, R2.ONE_MINUS_SRC_ALPHA), depthTest: { func: i20 }, colorWrite: _7 });
  }
  initializePipeline() {
    return this.setPipelineState(this.configuration.hasMultipassGeometry);
  }
};
h14.shader = new t14(m4, () => import("./LineCallout.glsl-OWTGIAL5.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LineCalloutTechniqueConfiguration.js
var r25 = class extends s11 {
  constructor() {
    super(...arguments), this.screenCenterOffsetUnitsEnabled = v3.World, this.spherical = false, this.occlusionTestEnabled = true, this.hasVerticalOffset = false, this.hasScreenSizePerspective = false, this.depthHudEnabled = false, this.depthHudAlignStartEnabled = false, this.hasSlicePlane = false, this.hasMultipassGeometry = false;
  }
};
e([r17({ count: v3.COUNT })], r25.prototype, "screenCenterOffsetUnitsEnabled", void 0), e([r17()], r25.prototype, "spherical", void 0), e([r17()], r25.prototype, "occlusionTestEnabled", void 0), e([r17()], r25.prototype, "hasVerticalOffset", void 0), e([r17()], r25.prototype, "hasScreenSizePerspective", void 0), e([r17()], r25.prototype, "depthHudEnabled", void 0), e([r17()], r25.prototype, "depthHudAlignStartEnabled", void 0), e([r17()], r25.prototype, "hasSlicePlane", void 0), e([r17()], r25.prototype, "hasMultipassGeometry", void 0), e([r17({ constValue: true })], r25.prototype, "hasSliceInVertexProgram", void 0), e([r17({ constValue: false })], r25.prototype, "draped", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/LineCalloutMaterial.js
var p10 = class _p extends d7 {
  get uniqueMaterialIdentifier() {
    return this._uniqueMaterialIdentifier;
  }
  constructor(e32) {
    super(e32, new O9()), this._configuration = new r25(), this._uniqueMaterialIdentifier = _p.uniqueMaterialIdentifier(this.parameters);
  }
  getPassParameters() {
    return this.parameters;
  }
  getConfiguration(e32, t23) {
    const r38 = (t23 == null ? void 0 : t23.slot) !== E4.LINE_CALLOUTS;
    return this._configuration.occlusionTestEnabled = this.parameters.occlusionTest, this._configuration.hasVerticalOffset = null != this.parameters.verticalOffset, this._configuration.hasScreenSizePerspective = null != this.parameters.screenSizePerspective, this._configuration.depthHudEnabled = r38, this._configuration.depthHudAlignStartEnabled = !!this.parameters.depthHUDAlignStart, this._configuration.screenCenterOffsetUnitsEnabled = "screen" === this.parameters.centerOffsetUnits ? v3.Screen : v3.World, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.hasMultipassGeometry = t23.multipassGeometry.enabled, this._configuration;
  }
  intersect() {
  }
  requiresSlot(e32, t23) {
    if (t23 === h8.Color)
      switch (e32) {
        case E4.LINE_CALLOUTS:
        case E4.LINE_CALLOUTS_HUD_DEPTH:
          return true;
      }
    return false;
  }
  createGLMaterial(e32) {
    return new g9(e32);
  }
  createBufferWriter() {
    return new L4();
  }
  validateParameters(e32) {
    const t23 = _p.uniqueMaterialIdentifier(e32);
    t23 !== this._uniqueMaterialIdentifier && (this._uniqueMaterialIdentifier = t23);
  }
  static uniqueMaterialIdentifier(e32) {
    return JSON.stringify({ screenOffset: e32.screenOffset || [0, 0], centerOffsetUnits: e32.centerOffsetUnits || "world" });
  }
};
var g9 = class extends t13 {
  beginSlot(e32) {
    return this.ensureTechnique(h14, e32);
  }
};
var O9 = class extends c15 {
  constructor() {
    super(...arguments), this.screenOffset = f7, this.color = [0, 0, 0, 1], this.size = 1, this.occlusionTest = false, this.shaderPolygonOffset = 1e-5, this.depthHUDAlignStart = false, this.centerOffsetUnits = "world", this.hasSlicePlane = false;
  }
};
var S7 = H3().vec3f(O3.POSITION).vec3f(O3.NORMAL).vec2f(O3.UV0).vec4f(O3.AUXPOS1);
var I9 = [t9(0, 0), t9(1, 0), t9(0, 1), t9(1, 0), t9(1, 1), t9(0, 1)];
var L4 = class {
  constructor() {
    this.vertexBufferLayout = S7;
  }
  elementCount(e32) {
    return 6 * e32.indices.get(O3.POSITION).length;
  }
  write(e32, t23, r38, i20, s27) {
    b5(r38.indices.get(O3.POSITION), r38.vertexAttributes.get(O3.POSITION).data, e32, i20.position, s27, 6), O5(r38.indices.get(O3.NORMAL), r38.vertexAttributes.get(O3.NORMAL).data, t23, i20.normal, s27, 6), p4(r38.indices.get(O3.AUXPOS1), r38.vertexAttributes.get(O3.AUXPOS1).data, i20.auxpos1, s27, 6);
    for (let n26 = 0; n26 < I9.length; ++n26)
      i20.uv0.setVec(s27 + n26, I9[n26]);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DLineCalloutSymbolLayer.js
var E8 = class _E extends h13 {
  constructor(e32, t23) {
    super(e32, null, t23, A8), this._elevationOptions = { supportsOffsetAdjustment: true, supportsOnTheGround: false }, this.ensureDrapedStatus(false);
  }
  async doLoad() {
    this._material = new p10(this._materialParameters), this._context.stage.add(this._material);
  }
  destroy() {
    super.destroy(), this._context.stage.remove(this._material), this._material = null;
  }
  _perInstanceMaterialParameters(e32) {
    const t23 = this._materialParameters;
    return t23.screenOffset = e32.screenOffset || f7, t23.centerOffsetUnits = e32.centerOffsetUnits || "world", t23;
  }
  get _materialParameters() {
    const r38 = new O9(), i20 = this.symbol, n26 = i20.callout;
    if (r38.color = null != n26.color ? h4.toUnitRGBA(n26.color) : [0, 0, 0, 0], r38.color[3] *= this._getLayerOpacity(), r38.size = u4(n26.size || 0), i20.verticalOffset) {
      const { screenLength: e32, minWorldLength: n27, maxWorldLength: a27 } = i20.verticalOffset;
      r38.verticalOffset = { screenLength: u4(e32), minWorldLength: n27 || 0, maxWorldLength: null != a27 ? a27 : 1 / 0 };
    }
    r38.borderColor = null != n26.border && null != n26.border.color ? h4.toUnitRGBA(n26.border.color) : null;
    const a26 = "object" === i20.symbolLayers.at(0).type, s27 = "label-3d" === i20.type;
    return r38.occlusionTest = !a26, r38.shaderPolygonOffset = a26 ? 0 : void 0, r38.depthHUDAlignStart = s27, r38.hasSlicePlane = this._context.slicePlaneEnabled, r38.screenSizePerspective = this._context.screenSizePerspectiveEnabled ? this._context.sharedResources.screenSizePerspectiveSettings : null, r38;
  }
  _defaultElevationInfoNoZ() {
    return G3;
  }
  createGraphics3DGraphic(e32) {
    const t23 = e32.renderingInfo, r38 = e32.graphic, i20 = this.setGraphicElevationContext(r38, new o12(), t23.elevationOffset || 0), n26 = t23.symbol, a26 = "on-the-ground" === this._elevationContext.mode && ("cim" === n26.type || !n26.symbolLayers.some((e33) => "object" === e33.type || "text" === e33.type));
    if ("label-3d" !== n26.type && a26)
      return null;
    if ("point-3d" === n26.type && n26.symbolLayers.every((e33) => "text" === e33.type && !l6(e33)))
      return null;
    const o27 = w4(r38.geometry);
    return null == o27 ? null : this._createAs3DShape(o27, i20, t23, r38.uid);
  }
  layerOpacityChanged() {
    var _a;
    (_a = this._material) == null ? void 0 : _a.setParameters(this._materialParameters);
  }
  layerElevationInfoChanged(e32, t23, r38) {
    const i20 = this._elevationContext.mode, n26 = d8(_E.elevationModeChangeTypes, r38, i20);
    return n26 !== T6.UPDATE || e32.forEach((e33) => {
      const r39 = t23(e33);
      null != r39 && this.updateGraphicElevationContext(e33.graphic, r39);
    }), n26;
  }
  slicePlaneEnabledChanged() {
    var _a;
    return (_a = this._material) == null ? void 0 : _a.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled }), true;
  }
  physicalBasedRenderingChanged() {
    return true;
  }
  setGraphicElevationContext(e32, t23, r38 = 0) {
    const i20 = super.setGraphicElevationContext(e32, t23);
    return i20.addOffsetRenderUnits(r38), i20;
  }
  updateGraphicElevationContext(e32, t23) {
    this.setGraphicElevationContext(e32, t23.elevationContext, null != t23.metadata ? t23.metadata.elevationOffset : 0), t23.needsElevationUpdates = m3(t23.elevationContext.mode);
  }
  computeComplexity() {
    return { primitivesPerFeature: 2, primitivesPerCoordinate: 0, drawCallsPerFeature: 0, estimated: false, memory: y6.memory };
  }
  _createVertexData(e32) {
    const { translation: t23, centerOffset: r38 } = e32, i20 = new s9(t23 ? [t23[0], t23[1], t23[2]] : [0, 0, 0], 3, true), n26 = new s9(r38 ? [r38[0], r38[1], r38[2], r38[3]] : [0, 0, 0, 1], 4, true);
    return [[O3.POSITION, i20], [O3.NORMAL, new s9([0, 0, 1], 3, true)], [O3.AUXPOS1, n26]];
  }
  _getOrCreateMaterial(e32) {
    const t23 = this._perInstanceMaterialParameters(e32), r38 = p10.uniqueMaterialIdentifier(t23);
    if (this._material && r38 === this._material.uniqueMaterialIdentifier)
      return { material: this._material, isUnique: false };
    if (null != e32.materialCollection) {
      let i20 = e32.materialCollection.get(r38);
      return null == i20 && (i20 = new p10(t23), e32.materialCollection.add(r38, i20)), { material: i20, isUnique: false };
    }
    return { material: new p10(t23), isUnique: true };
  }
  _createAs3DShape(e32, t23, r38, i20) {
    const n26 = this._context.layer.uid, a26 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: i20, layerUid: n26 }), s27 = this._getOrCreateMaterial(r38), l33 = new b4(s27.material, this._createVertexData(r38), w5, null, e15.Point, a26), c34 = c21(this._context, e32, l33, t23, i20);
    if (null == c34)
      return null;
    const h23 = new p7(this, c34.object, [l33], s27.isUnique ? [s27.material] : null, null, p6, t23);
    return h23.metadata = new t18(r38.elevationOffset), h23.alignedSampledElevation = c34.sampledElevation, h23.needsElevationUpdates = m3(t23.mode), p9(h23, e32, this._context.elevationProvider), h23;
  }
};
E8.elevationModeChangeTypes = { definedChanged: T6.UPDATE, staysOnTheGround: T6.UPDATE, onTheGroundChanged: T6.RECREATE };
var U = [0];
var w5 = [[O3.POSITION, U], [O3.NORMAL, U], [O3.AUXPOS1, U]];
var G3 = { mode: "relative-to-ground", offset: 0 };
var A8 = { ignoreDrivers: true, renderPriority: 0, renderPriorityStep: 1 };
var L5 = class {
  constructor(e32, t23, r38 = n2(), s27 = n6(), o27 = n7(), l33 = "world", c34 = 0, m15 = null) {
    this.renderer = e32, this.symbol = t23, this.translation = r38, this.centerOffset = s27, this.screenOffset = o27, this.centerOffsetUnits = l33, this.elevationOffset = c34, this.materialCollection = m15;
  }
};
var S8 = class extends r22 {
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DCalloutSymbolLayerFactory.js
var t20 = s.getLogger("esri.views.3d.layers.graphics.Graphics3DCalloutSymbolLayerFactory");
function e23(o27, l33) {
  if (!o3(o27))
    return t20.error("Graphics3DCalloutSymbolLayerFactory#make", `symbol of type '${o27.type}' does not support callouts`), null;
  if (!o27.callout)
    return null;
  const e32 = a18[o27.callout.type];
  return e32 ? new e32(o27, l33) : (t20.error("Graphics3DCalloutSymbolLayerFactory#make", `unknown or unsupported callout type ${o27.callout.type}`), null);
}
var a18 = { line: E8 };

// node_modules/@arcgis/core/renderers/support/renderingInfoUtils.js
function o17(t23, e32) {
  if (!t23 || t23.symbol)
    return null;
  const o27 = e32 && e32.renderer;
  return t23 && null != o27 && o27.getObservationRenderer ? o27.getObservationRenderer(t23) : o27;
}
function r26(t23, e32) {
  if (null != t23.symbol)
    return t23.symbol;
  const r38 = o17(t23, e32);
  return null != r38 && "dot-density" !== r38.type ? r38.getSymbol(t23, e32) : null;
}
function i13(t23, i20) {
  const n26 = o17(t23, i20), l33 = r26(t23, i20);
  if (null == l33)
    return null;
  const a26 = { renderer: n26, symbol: l33 };
  if (null == n26 || !("visualVariables" in n26) || !n26.visualVariables)
    return a26;
  const s27 = M3(n26, t23, i20) ?? [], u23 = ["proportional", "proportional", "proportional"];
  for (const { variable: e32, value: o27 } of s27)
    switch (e32.type) {
      case "color":
        a26.color = o27.toRgba();
        break;
      case "size":
        if ("outline" === e32.target)
          a26.outlineSize = o27;
        else {
          const t24 = e32.axis, r38 = e32.useSymbolValue ? "symbol-value" : o27;
          switch (t24) {
            case "width":
              u23[0] = r38;
              break;
            case "depth":
              u23[1] = r38;
              break;
            case "height":
              u23[2] = r38;
              break;
            case "width-and-depth":
              u23[0] = u23[1] = r38;
              break;
            default:
              u23[0] = u23[1] = u23[2] = r38;
          }
        }
        break;
      case "opacity":
        a26.opacity = o27;
        break;
      case "rotation":
        switch (e32.axis) {
          case "tilt":
            a26.tilt = o27;
            break;
          case "roll":
            a26.roll = o27;
            break;
          default:
            a26.heading = o27;
        }
    }
  return "proportional" === u23[0] && "proportional" === u23[1] && "proportional" === u23[2] || (a26.size = u23), a26;
}
async function n16(t23, e32) {
  if (null != t23.symbol)
    return t23.symbol;
  const r38 = o17(t23, e32);
  return null != r38 ? r38.getSymbolAsync(t23, e32) : null;
}
async function l21(r38, i20) {
  const l33 = o17(r38, i20), a26 = await n16(r38, i20);
  if (!a26)
    return null;
  const s27 = { renderer: l33, symbol: a26 };
  if (!l33 || !("visualVariables" in l33) || !l33.visualVariables)
    return s27;
  const u23 = M3(l33, r38, i20) ?? [], c34 = ["proportional", "proportional", "proportional"];
  for (const { variable: e32, value: o27 } of u23)
    if ("color" === e32.type)
      s27.color = h4.toUnitRGBA(o27);
    else if ("size" === e32.type)
      if ("outline" === e32.target)
        s27.outlineSize = o27;
      else {
        const t23 = e32.axis, r39 = e32.useSymbolValue ? "symbol-value" : o27;
        "width" === t23 ? c34[0] = r39 : "depth" === t23 ? c34[1] = r39 : "height" === t23 ? c34[2] = r39 : c34[0] = c34[1] = "width-and-depth" === t23 ? r39 : c34[2] = r39;
      }
    else
      "opacity" === e32.type ? s27.opacity = o27 : "rotation" === e32.type && "tilt" === e32.axis ? s27.tilt = o27 : "rotation" === e32.type && "roll" === e32.axis ? s27.roll = o27 : "rotation" === e32.type && (s27.heading = o27);
  return (isFinite(c34[0]) || isFinite(c34[1]) || isFinite(c34[2])) && (s27.size = c34), s27;
}
function a19(t23, e32 = 0) {
  const o27 = t23[e32];
  return "number" == typeof o27 && isFinite(o27) ? o27 : null;
}
function s15(t23) {
  for (let e32 = 0; e32 < 3; e32++) {
    const o27 = t23[e32];
    if ("number" == typeof o27)
      return isFinite(o27) ? o27 : 0;
  }
  return 0;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/constants.js
var s16 = 1.2;
var c22 = l7;

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextRenderer.js
var i14 = class {
  constructor(t23, e32, i20, n26 = 2048) {
    this.text = t23, this._alignment = e32, this._parameters = i20, this._maxSize = n26, this._textWidths = [], this._lineWidths = [], this._renderPixelRatio = null, this._metricsCached = null, this.key = `TextRenderer-${this._parameters.key}-${this._alignment}--${t23}`, this._lines = t23.split(/\r?\n/);
  }
  get displayWidth() {
    return Math.ceil(this._displayWidth + 2 * this._backgroundHorizontalPadding);
  }
  get displayHeight() {
    const t23 = this._lineSpacing * (this._lines.length - 1), e32 = this._lineHeight;
    return Math.ceil(t23 + e32 + 2 * this._haloSize + this._backgroundTopPadding + this._backgroundBottomPadding);
  }
  get renderedWidth() {
    return Math.ceil(this._toRenderUnit(this.displayWidth));
  }
  get renderedHeight() {
    return Math.ceil(this._toRenderUnit(this.displayHeight));
  }
  get firstRenderedBaselinePosition() {
    return this._toRenderUnit(this._firstLineYOffset + this._baselinePosition);
  }
  get _firstLineYOffset() {
    return this._backgroundTopPadding + this._haloSize;
  }
  get _metrics() {
    if (null == this._metricsCached) {
      const t23 = r27(o18, a20, a20).getContext("2d");
      this._setFontProperties(t23, this._fontSize);
      let e32 = 2 * this._haloSize;
      const i20 = this._parameters.definition.font;
      "italic" !== i20.style && "oblique" !== i20.style && "bold" !== i20.weight && "bolder" !== i20.weight || (e32 += 0.3 * t23.measureText("A").width), this._textWidths.length = 0, this._lineWidths.length = 0;
      let n26, s27, h23 = 0, d19 = 0, u23 = 0;
      this._lines.forEach((i21, r38) => {
        const o27 = t23.measureText(i21), a26 = o27.width, l33 = a26 + e32;
        this._textWidths.push(a26), this._lineWidths.push(l33), h23 = Math.max(h23, l33), d19 = Math.max(d19, o27.actualBoundingBoxAscent), u23 = Math.max(u23, o27.actualBoundingBoxDescent), 0 === r38 && (n26 = o27), r38 === this._lines.length - 1 && (s27 = o27);
      });
      const f25 = t23.font;
      let p19 = g10.get(f25);
      if (!p19) {
        const e33 = t23.measureText(l22);
        p19 = new c23(e33.actualBoundingBoxAscent, e33.actualBoundingBoxDescent), g10.set(f25, p19);
      }
      d19 = Math.max(d19, p19.actualBoundingBoxAscent), u23 = Math.max(u23, p19.actualBoundingBoxDescent);
      const m15 = d19 + u23, x10 = this._hasBackground ? n26.actualBoundingBoxAscent : d19, R10 = this._hasBackground ? s27.actualBoundingBoxDescent : u23;
      this._metricsCached = new _10(d19 - x10, u23 - R10, m15, h23, d19);
    }
    return this._metricsCached;
  }
  get _lineSpacing() {
    return (this._lineHeight + this._linePadding) * this._parameters.definition.lineSpacingFactor;
  }
  get _lineHeight() {
    return this._metrics.lineHeight;
  }
  get _linePadding() {
    return this._lineHeight * h15;
  }
  get _baselinePosition() {
    return this._metrics.baselinePosition;
  }
  get _renderedFontSize() {
    return this._toRenderUnit(this._fontSize);
  }
  get _fontSize() {
    return this._parameters.definition.size;
  }
  get _renderedHaloSize() {
    return this._toRenderUnit(this._haloSize);
  }
  get _haloSize() {
    return this._parameters.haloSize;
  }
  get _backgroundHorizontalPadding() {
    return this._hasBackground ? this._parameters.definition.background.padding[0] : 0;
  }
  get _backgroundVerticalPadding() {
    return this._hasBackground ? this._parameters.definition.background.padding[1] : 0;
  }
  get _backgroundTopPadding() {
    return Math.max(0, this._backgroundVerticalPadding - this._metrics.paddingTop);
  }
  get _backgroundBottomPadding() {
    return Math.max(0, this._backgroundVerticalPadding - this._metrics.paddingBottom);
  }
  get _hasBackground() {
    return !!this._parameters.backgroundStyle;
  }
  get renderPixelRatio() {
    if (null == this._renderPixelRatio) {
      const t23 = this._parameters.definition.pixelRatio;
      this._maxSize > 0 ? this._renderPixelRatio = Math.min(t23, Math.min(this._maxSize / this.displayWidth, this._maxSize / this.displayHeight)) : this._renderPixelRatio = t23;
    }
    return this._renderPixelRatio;
  }
  _getLineXOffset(t23) {
    switch (this._alignment) {
      case s17.Left:
        return this._backgroundHorizontalPadding;
      case s17.Center:
        return (this.displayWidth - this._lineWidths[t23]) / 2;
      case s17.Right:
        return this.displayWidth - this._backgroundHorizontalPadding - this._lineWidths[t23];
    }
  }
  render(t23, i20 = 0, n26 = 0) {
    t23.save();
    const s27 = i20 /= this.renderPixelRatio, r38 = n26 /= this.renderPixelRatio, o27 = this._haloSize, h23 = this._firstLineYOffset;
    i20 += o27, n26 += h23 + this._baselinePosition;
    const a26 = this._haloSize > 0;
    a26 && this._renderHalo(t23, s27, r38, o27, h23), this._setFontProperties(t23, this._renderedFontSize);
    for (let e32 = 0; e32 < this._lines.length; ++e32) {
      const s28 = this._lines[e32], r39 = this._getLineXOffset(e32);
      a26 && (t23.globalCompositeOperation = "destination-out", t23.fillStyle = "rgb(0, 0, 0)", this._fillText(t23, s28, i20 + r39, n26), this._renderLineDecoration(t23, i20 + r39, n26, this._textWidths[e32])), t23.globalCompositeOperation = "source-over", t23.fillStyle = this._parameters.textStyle, this._fillText(t23, s28, i20 + this._getLineXOffset(e32), n26), this._renderLineDecoration(t23, i20 + r39, n26, this._textWidths[e32]), n26 += this._lineSpacing;
    }
    if (t15.TEXT_SHOW_BASELINE) {
      t23.strokeStyle = d13, t23.setLineDash([2, 2]), t23.lineWidth = 1;
      let e32 = r38 + h23;
      for (let i21 = 0; i21 < this._lines.length; ++i21) {
        const i22 = e32 + this._baselinePosition;
        this._drawLine(t23, [s27, i22], [s27 + this.displayWidth, i22]), e32 += this._lineSpacing;
      }
    }
    if (t15.TEXT_SHOW_BORDER && (t23.strokeStyle = d13, t23.setLineDash([]), t23.lineWidth = 1, this._drawBox(t23, [s27, r38], [this.displayWidth, this.displayHeight])), this._hasBackground) {
      const e32 = this._parameters.definition.background.borderRadius * this.renderPixelRatio;
      this._roundedRect(t23, s27, r38, e32), t23.globalCompositeOperation = "destination-over", t23.fillStyle = this._parameters.backgroundStyle, t23.fill();
    }
    t23.restore();
  }
  _renderLineDecoration(t23, e32, i20, n26, s27 = false) {
    if ("none" === this._parameters.definition.font.decoration || 0 === n26)
      return;
    const r38 = 1, o27 = Math.max(this._parameters.definition.size / 16, r38);
    switch (this._parameters.definition.font.decoration) {
      case "underline":
        i20 += 2 * o27;
        break;
      case "line-through":
        i20 -= 0.33 * this._baselinePosition;
    }
    const h23 = s27 ? this._haloSize : 0;
    t23.strokeStyle = s27 ? this._parameters.haloStyle : this._parameters.textStyle, t23.lineWidth = this._toRenderUnit(o27 + 2 * h23), t23.beginPath(), t23.moveTo(this._toRenderUnit(e32 - h23), this._toRenderUnit(i20)), t23.lineTo(this._toRenderUnit(e32 + n26 + h23), this._toRenderUnit(i20)), t23.stroke();
  }
  _roundedRect(e32, i20, n26, s27) {
    i20 = this._toRenderUnit(i20), n26 = this._toRenderUnit(n26);
    const r38 = this.renderedWidth, o27 = this.renderedHeight;
    0 !== s27 ? (s27 = i(s27, 0, Math.floor(o27 / 2)), e32.beginPath(), e32.moveTo(i20, n26 + s27), e32.arcTo(i20, n26, i20 + s27, n26, s27), e32.lineTo(i20 + r38 - s27, n26), e32.arcTo(i20 + r38, n26, i20 + r38, n26 + s27, s27), e32.lineTo(i20 + r38, n26 + o27 - s27), e32.arcTo(i20 + r38, n26 + o27, i20 + r38 - s27, n26 + o27, s27), e32.lineTo(i20 + s27, n26 + o27), e32.arcTo(i20, n26 + o27, i20, n26 + o27 - s27, s27), e32.closePath()) : e32.rect(i20, n26, r38, o27);
  }
  _renderHalo(t23, e32, i20, n26, s27) {
    const h23 = this.renderedWidth, d19 = this.renderedHeight, l33 = r27(o18, Math.max(h23, a20), Math.max(d19, a20)), _13 = l33.getContext("2d");
    _13.clearRect(0, 0, h23, d19), this._setFontProperties(_13, this._renderedFontSize), _13.fillStyle = this._parameters.haloStyle, _13.strokeStyle = this._parameters.haloStyle;
    const c34 = this._renderedHaloSize < 3;
    _13.lineJoin = c34 ? "miter" : "round", c34 ? this._renderHaloEmulated(_13, n26, s27) : this._renderHaloNative(_13, n26, s27);
    let g16 = s27 + this._baselinePosition;
    for (let r38 = 0; r38 < this._lines.length; ++r38) {
      const t24 = this._getLineXOffset(r38);
      this._renderLineDecoration(_13, n26 + t24, g16, this._textWidths[r38], true), g16 += this._lineSpacing;
    }
    t23.globalAlpha = this._parameters.definition.halo.color[3], t23.drawImage(l33, 0, 0, h23, d19, this._toRenderUnit(e32), this._toRenderUnit(i20), h23, d19), t23.globalAlpha = 1;
  }
  _renderHaloEmulated(t23, e32, i20) {
    i20 += this._baselinePosition;
    for (let s27 = 0; s27 < this._lines.length; ++s27) {
      const r38 = this._lines[s27], o27 = this._getLineXOffset(s27);
      for (const [s28, h23] of n17)
        this._fillText(t23, r38, e32 + o27 + this._haloSize * s28, i20 + this._haloSize * h23);
      i20 += this._lineSpacing;
    }
  }
  _renderHaloNative(t23, e32, i20) {
    const n26 = 2 * this._haloSize;
    i20 += this._baselinePosition;
    for (let s27 = 0; s27 < this._lines.length; ++s27) {
      const r38 = this._lines[s27], o27 = this._getLineXOffset(s27), h23 = 5, a26 = 0.1;
      for (let s28 = 0; s28 < h23; s28++) {
        const d19 = 1 - (h23 - 1) * a26 + s28 * a26;
        t23.lineWidth = this._toRenderUnit(d19 * n26), this._strokeText(t23, r38, e32 + o27, i20);
      }
      i20 += this._lineSpacing;
    }
  }
  _setFontProperties(t23, e32) {
    t23.font = this._parameters.fontString(e32), t23.textAlign = "left", t23.textBaseline = "alphabetic";
  }
  get _displayWidth() {
    return this._metrics.displayWidth;
  }
  _toRenderUnit(t23) {
    return t23 * this.renderPixelRatio;
  }
  _toRoundedRenderUnit(t23) {
    return Math.round(t23 * this.renderPixelRatio);
  }
  _fillText(t23, e32, i20, n26) {
    t23.fillText(e32, this._toRenderUnit(i20), this._toRenderUnit(n26));
  }
  _strokeText(t23, e32, i20, n26) {
    t23.strokeText(e32, this._toRenderUnit(i20), this._toRenderUnit(n26));
  }
  _drawLine(t23, e32, i20) {
    t23.beginPath(), t23.moveTo(this._toRoundedRenderUnit(e32[0]) + 0.5, this._toRoundedRenderUnit(e32[1]) + 0.5), t23.lineTo(this._toRoundedRenderUnit(i20[0]) + 0.5, this._toRoundedRenderUnit(i20[1]) + 0.5), t23.stroke();
  }
  _drawBox(t23, e32, i20) {
    const n26 = this._toRenderUnit(e32[0]), s27 = this._toRenderUnit(e32[1]), r38 = this._toRenderUnit(i20[0]), o27 = this._toRenderUnit(i20[1]), h23 = Math.floor(n26) + 0.5, a26 = Math.ceil(n26 + r38) - 0.5, d19 = Math.floor(s27) + 0.5, l33 = Math.ceil(s27 + o27) - 0.5;
    t23.beginPath(), t23.moveTo(h23, d19), t23.lineTo(a26, d19), t23.lineTo(a26, l33), t23.lineTo(h23, l33), t23.lineTo(h23, d19), t23.stroke();
  }
};
var n17 = [];
{
  const t23 = 16;
  for (let e32 = 0; e32 < 360; e32 += 360 / t23)
    n17.push([Math.cos(Math.PI * e32 / 180), Math.sin(Math.PI * e32 / 180)]);
}
var s17;
function r27(t23, e32, i20) {
  return t23.canvas || (t23.canvas = document.createElement("canvas")), t23.canvas.width = e32, t23.canvas.height = i20, t23.canvas;
}
!function(t23) {
  t23[t23.Left = 0] = "Left", t23[t23.Center = 1] = "Center", t23[t23.Right = 2] = "Right";
}(s17 || (s17 = {}));
var o18 = { canvas: null };
var h15 = 0.2;
var a20 = 512;
var d13 = "rgb(255, 0, 255, 0.5)";
var l22 = (() => {
  let t23 = "";
  for (let e32 = 32; e32 < 127; e32++)
    t23 += String.fromCharCode(e32);
  return t23;
})();
var _10 = class {
  constructor(t23, e32, i20, n26, s27) {
    this.paddingTop = t23, this.paddingBottom = e32, this.lineHeight = i20, this.displayWidth = n26, this.baselinePosition = s27;
  }
};
var c23 = class {
  constructor(t23, e32) {
    this.actualBoundingBoxAscent = t23, this.actualBoundingBoxDescent = e32;
  }
};
var g10 = /* @__PURE__ */ new Map();

// node_modules/@arcgis/core/views/3d/layers/graphics/placementUtils.js
var r28 = Object.freeze({ left: 0, center: 0.5, right: 1 });
var o19 = Object.freeze({ "bottom-left": r8(0, 0), bottom: r8(0.5, 0), "bottom-right": r8(1, 0), left: r8(0, 0.5), center: r8(0.5, 0.5), right: r8(1, 0.5), "top-left": r8(0, 1), top: r8(0.5, 1), "top-right": r8(1, 1) });
function c24(t23) {
  switch (t23) {
    case "left":
      return s17.Left;
    case "right":
      return s17.Right;
    default:
      return s17.Center;
  }
}
function n18(t23) {
  switch (t23) {
    case "bottom-left":
    case "left":
    case "top-left":
      return "left";
    case "bottom":
    case "center":
    case "top":
      return "center";
    case "bottom-right":
    case "right":
    case "top-right":
      return "right";
  }
}
function s18(t23) {
  switch (t23) {
    case "bottom-left":
    case "bottom":
    case "bottom-right":
      return "bottom";
    case "left":
    case "center":
    case "right":
      return "center";
    case "top-left":
    case "top":
    case "top-right":
      return "top";
  }
}
function i15(t23, e32) {
  switch (e32) {
    case "bottom":
      return "left" === t23 ? "bottom-left" : "right" === t23 ? "bottom-right" : "bottom";
    case "center":
      return t23;
    case "top":
      return "left" === t23 ? "top-left" : "right" === t23 ? "top-right" : "top";
  }
}
function f16(t23) {
  return "middle" === t23 ? "center" : t23;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/CreateLabelParameters.js
var t21 = class {
  constructor(t23 = null, e32 = "center", s27 = "center", i20 = null, l33 = [0, 0, 0], n26 = 0, h23 = [0, 0, 0, 1], r38 = [0, 0], c34 = "world", a26 = 0, f25 = 0) {
    this.verticalOffset = t23, this.horizontalPlacement = e32, this.verticalPlacement = s27, this.text = i20, this.translation = l33, this.elevationOffset = n26, this.centerOffset = h23, this.screenOffset = r38, this.centerOffsetUnits = c34, this.displayWidth = a26, this.displayHeight = f25;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextRenderParameters.js
var s19 = class _s {
  constructor(o27) {
    this.definition = o27, this.key = JSON.stringify(o27), this.haloSize = Math.round(o27.halo.size), this.textStyle = this._colorToRGBA(o27.color), this.haloStyle = this._colorToRGB(o27.halo.color), this.backgroundStyle = 0 !== o27.background.color[3] ? this._colorToRGBA(o27.background.color) : null;
  }
  fontString(o27) {
    const t23 = this.definition.font;
    return `${t23.style} ${t23.weight} ${o27}px ${t23.family}, sans-serif`;
  }
  _colorToRGB(o27) {
    return `rgb(${o27.slice(0, 3).map((o28) => Math.floor(255 * o28)).toString()})`;
  }
  _colorToRGBA(o27) {
    return `rgba(${o27.slice(0, 3).map((o28) => Math.floor(255 * o28)).toString()},${o27[3]})`;
  }
  static async fromSymbol(a26, c34) {
    var _a, _b, _c, _d, _e3;
    const f25 = (_a = a26 == null ? void 0 : a26.material) == null ? void 0 : _a.color, m15 = h4.toUnitRGBA(f25) ?? l7, u23 = null != a26.size ? u4(a26.size) : 12, g16 = a26.lineHeight, h23 = null != a26.background ? h4.toUnitRGBA(a26.background.color) : l7, d19 = { family: ((_b = a26.font) == null ? void 0 : _b.family) ?? "sans-serif", decoration: ((_c = a26.font) == null ? void 0 : _c.decoration) ?? "none", weight: ((_d = a26.font) == null ? void 0 : _d.weight) ?? "normal", style: ((_e3 = a26.font) == null ? void 0 : _e3.style) ?? "normal" }, y12 = a26.halo, b15 = null != y12 && null != y12.color && y12.size > 0 ? { size: u4(y12.size), color: h4.toUnitRGBA(y12.color) } : { size: 0, color: l7 }, p19 = new _s({ color: m15, size: u23, background: { color: h23, padding: null != a26.background ? [0.65 * u23, 0.5 * u23] : [0, 0], borderRadius: null != a26.background ? u23 * (6 / 16) : 0 }, lineSpacingFactor: g16, font: d19, halo: b15, pixelRatio: c34 });
    if (a26.font) {
      let o27 = false;
      const i20 = p19.fontString(u23);
      try {
        o27 = (await document.fonts.load(i20)).some((o28) => !i7(o28));
      } catch (w9) {
        s.getLogger("esri.views.3d.webgl-engine.lib.TextRenderParameters").warnOnce(`Failed to preload font '${i20}'. Some text symbology may be rendered using the default browser font.`);
      }
      if (!o27 && !l23.has(a26.font.family))
        try {
          await c10(a26.font);
        } catch (w9) {
        }
    }
    return p19;
  }
};
var l23 = /* @__PURE__ */ new Set(["Arial", "Times New Roman", "Courier New", "serif", "sans-serif", "monospace", "cursive", "fantasy", "system-ui", "ui-serif", "ui-sans-serif", "ui-monospace", "ui-rounded", "math", "emoji", "fangsong"]);

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DSymbolCreationContext.js
var e24 = class {
  constructor(e32, s27) {
    this.scheduler = e32, this.schedule = s27, this.sharedResources = null, this.streamDataRequester = null, this.elevationProvider = null, this.renderer = null, this.stage = null, this.clippingExtent = null, this.renderCoordsHelper = null, this.overlaySR = null, this.layer = null, this.drapeSourceRenderer = null, this.graphicsCoreOwner = null, this.localOriginFactory = null, this.featureExpressionInfoContext = null, this.screenSizePerspectiveEnabled = true, this.slicePlaneEnabled = false, this.physicalBasedRenderingEnabled = false, this.skipHighSymbolLods = false, this.isAsync = false;
  }
};
var s20 = class {
  constructor() {
    this.renderPriority = 0, this.renderPriorityStep = 1, this.ignoreDrivers = false;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DGraphic.js
var x4 = new e4(Array, (e32) => O2(e32, D), null, 10, 5);
var A9 = i2();
var S9 = class {
  get labelLayers() {
    return this._labelLayers || k;
  }
  get extent() {
    return this._extent;
  }
  get isElevationSource() {
    return this.layers.some((e32) => e32 == null ? void 0 : e32.isElevationSource);
  }
  constructor(e32, t23, i20, r38, s27) {
    this.graphic = e32, this.graphics3DSymbol = t23, this.layers = i20, this._visibleFlags = L3.ALL_LABEL, this.deconflictionPriority = 0, ++t23.referenced, this._featureExpressionFeature = s27 ? s12(s27, e32, r38) : null;
  }
  initialize(e32) {
    this._layer = e32, this._forEachSymbolLayerGraphic((t23) => {
      t23.initialize(e32), t23.setVisibility(this.isVisible());
    });
  }
  destroy() {
    this._forEachSymbolLayerGraphic((e32) => e32.destroy()), this._calloutLayer = null, --this.graphics3DSymbol.referenced, this.graphics3DSymbol = null;
  }
  get destroyed() {
    return null == this.layers;
  }
  clearLabelGraphics() {
    this._forEachLabelGraphic((e32) => e32.destroy()), this._labelLayers = null;
  }
  addLabelGraphic(e32, t23) {
    this._labelLayers || (this._labelLayers = new Array()), this._labelLayers.push(e32), e32.initialize(t23), e32.setVisibility(this.isVisible(A6.LABEL));
  }
  setCalloutGraphic(e32) {
    this._calloutLayer = e32, this._layer && (e32.initialize(this._layer), e32.setVisibility(this.isVisible()));
  }
  get calloutLayer() {
    return this._calloutLayer;
  }
  get isDraped() {
    let e32 = false;
    return this._forEachSymbolLayerGraphic((t23) => {
      "draped" === t23.type && (e32 = true);
    }), e32;
  }
  isVisible(e32 = A6.GRAPHIC, t23) {
    const i20 = t23 ? this._visibleFlags | t23 | A6.LABEL * t23 : this._visibleFlags;
    return e32 === A6.GRAPHIC ? (i20 & L3.ALL_GRAPHIC) === L3.ALL_GRAPHIC : (i20 & L3.ALL_LABEL) === L3.ALL_LABEL;
  }
  setVisibilityFlag(e32, t23, i20) {
    const r38 = this.isVisible(e32);
    i20 ? this._visibleFlags |= e32 * t23 : this._visibleFlags &= ~(e32 * t23);
    const s27 = this.isVisible(e32);
    if (r38 === s27)
      return false;
    if (e32 === A6.LABEL)
      this._forEachLabelGraphic((e33) => e33.setVisibility(s27));
    else {
      this._forEachSymbolLayerGraphic((e34) => e34.setVisibility(s27));
      const e33 = this.isVisible(A6.LABEL);
      this._forEachLabelGraphic((t24) => t24.setVisibility(e33));
    }
    return true;
  }
  getVisibilityFlag(e32, t23) {
    return 0 != (this._visibleFlags & e32 * t23);
  }
  computeExtent(e32) {
    if (!this._extent) {
      const t23 = this.graphic.geometry;
      if (null == t23)
        return false;
      this._extent = i2(), F3(t23, this._extent);
      const i20 = t23.spatialReference;
      if (!S(i20, e32) && !kn(this._extent, i20, this._extent, e32))
        return this._extent = null, false;
    }
    return true;
  }
  getAsOptimizedGeometry(e32, t23) {
    return this._optimizedGeometry || (this._optimizedGeometry = this._convertGraphicToOptimizedGeometry(this.graphic, e32, t23)), this._optimizedGeometry;
  }
  _convertGraphicToOptimizedGeometry(e32, t23, i20) {
    let r38 = e32.geometry;
    return "mesh" !== r38.type && "extent" !== r38.type || (r38 = j2.fromExtent("mesh" === r38.type ? r38.extent : r38)), rt(r38, t23, i20);
  }
  get usedMemory() {
    let e32 = t8(this.graphic.attributes);
    return this._forEachSymbolLayerGraphic((t23) => {
      const i20 = t23.graphics3DSymbolLayer.complexity;
      if (null == i20)
        return;
      const r38 = "draped" === t23.type ? i20.memory.draped : i20.memory;
      e32 += r38.bytesPerFeature, r38.bytesPerCoordinate && (e32 += k2(this.graphic.geometry) * r38.bytesPerCoordinate);
    }), e32;
  }
  computeAttachmentOrigin() {
    const e32 = { render: { origin: n2(), num: 0 }, draped: { origin: n7(), num: 0 } };
    for (const t23 of this.layers)
      null != t23 && t23.computeAttachmentOrigin(e32);
    return e32.render.num > 1 && g(e32.render.origin, e32.render.origin, 1 / e32.render.num), e32.draped.num > 1 && l8(e32.draped.origin, e32.draped.origin, 1 / e32.draped.num), e32;
  }
  async getProjectedBoundingBox(e32, i20, r38, s27, a26) {
    return a26 || (a26 = { boundingBox: null, requiresDrapedElevation: false, screenSpaceObjects: [] }), a26.boundingBox ? P2(a26.boundingBox) : a26.boundingBox = P2(), a26.requiresDrapedElevation = false, await a6(this.layers, async (t23) => {
      if (null == t23)
        return;
      const o27 = "draped" === t23.type ? i20 : e32, n26 = x4.acquire(), l33 = await t23.getProjectedBoundingBox(o27, r38, a26.screenSpaceObjects, s27, n26);
      isFinite(l33[2]) && isFinite(l33[5]) || (a26.requiresDrapedElevation = true), l33 && o2(a26.boundingBox, n26), x4.release(n26);
    }), l5(a26.boundingBox) || x2(S2(a26.boundingBox, A9)) ? a26 : null;
  }
  needsElevationUpdates() {
    var _a;
    for (const e32 of this.layers)
      if (null != e32 && ("object3d" === e32.type || "lod-instance" === e32.type) && e32.needsElevationUpdates)
        return true;
    return ((_a = this._labelLayers) == null ? void 0 : _a.some((e32) => (e32 == null ? void 0 : e32.needsElevationUpdates) ?? false)) ?? false;
  }
  alignWithElevation(e32, t23, i20) {
    this._forEachRenderedGraphic((r38) => {
      "object3d" !== r38.type && "lod-instance" !== r38.type || r38.alignWithElevation(e32, t23, this._featureExpressionFeature, i20);
    });
  }
  alignWithAbsoluteElevation(e32, t23, i20) {
    this._forEachRenderedGraphic((r38) => {
      "object3d" === r38.type && r38.alignWithAbsoluteElevation(e32, t23, i20);
    });
  }
  addObjectStateSet(e32, t23) {
    this._forEachSymbolLayerGraphic((i20) => i20.addObjectState(e32, t23));
  }
  removeObjectState(e32) {
    this._forEachSymbolLayerGraphic((t23) => t23.removeObjectState(e32));
  }
  _forEachGraphicList(e32, t23) {
    e32 == null ? void 0 : e32.forEach((e33) => e33 && t23(e33));
  }
  _forEachSymbolLayerGraphic(e32) {
    this._forEachGraphicList(this.layers, e32), this._calloutLayer && e32(this._calloutLayer);
  }
  _forEachLabelGraphic(e32) {
    this._forEachGraphicList(this._labelLayers, e32);
  }
  _forEachRenderedGraphic(e32) {
    this._forEachSymbolLayerGraphic(e32), this._forEachLabelGraphic(e32);
  }
  get test() {
    const e32 = this;
    return { addLabelLayer: (t23) => {
      e32._labelLayers || (e32._labelLayers = new Array()), e32._labelLayers.push(t23);
    } };
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/polygonUtils.js
function s21(a26) {
  const o27 = [[O3.POSITION, a26.indices]], s27 = [[O3.POSITION, new s9(a26.attributeData.position, 3, true)]];
  return null != a26.attributeData.colorFeature ? (s27.push([O3.COLORFEATUREATTRIBUTE, new s9([a26.attributeData.colorFeature], 1, true)]), o27.push([O3.COLORFEATUREATTRIBUTE, new Array(a26.indices.length).fill(0)])) : a26.attributeData.color && (s27.push([O3.COLOR, new s9(a26.attributeData.color, 4, true)]), o27.push([O3.COLOR, l11(a26.indices.length)])), a26.attributeData.uvMapSpace && (s27.push([O3.UVMAPSPACE, new s9(a26.attributeData.uvMapSpace, 4, true)]), o27.push([O3.UVMAPSPACE, a26.indices])), a26.attributeData.boundingRect && (s27.push([O3.BOUNDINGRECT, new s9(a26.attributeData.boundingRect, 9, true)]), o27.push([O3.BOUNDINGRECT, a26.indices])), new b4(a26.material, s27, o27, a26.mapPositions, e15.Mesh, a26.attributeData.objectAndLayerIdColor);
}
function u14(t23, a26 = null) {
  const o27 = [[O3.POSITION, t23.indices], [O3.UV0, t23.indices]], s27 = [[O3.POSITION, new s9(t23.attributeData.position, 3, true)], [O3.UV0, new s9(t23.attributeData.uv0, 2, true)]];
  return new b4(t23.material, s27, o27, t23.mapPositions, e15.Mesh, a26);
}
function c25(t23) {
  switch (t23.type) {
    case "extent":
      if (t23 instanceof M2)
        return j2.fromExtent(t23);
      break;
    case "polygon":
      return t23;
  }
  return null;
}
var p11 = class {
  constructor(t23, e32, i20) {
    this.renderData = t23, this.layerUid = e32, this.graphicUid = i20, this.outGeometries = new Array();
  }
};

// node_modules/@arcgis/core/views/3d/support/renderInfoUtils/polygon.js
function p12(o27, n26, r38, p19) {
  const l33 = f9(o27.rings, !!o27.hasZ, a9.CCW_IS_HOLE), h23 = t7(l33.position.length), a26 = u9(l33.position, o27.spatialReference, 0, h23, 0, l33.position, 0, l33.position.length / 3, n26, r38, p19), g16 = null != a26;
  return new f17(l33.position, h23, u15(l33.polygons, l33.position, h23), c26(l33.outlines, l33.position, h23), g16, a26);
}
function l24(t23, n26) {
  const e32 = f9(t23.rings, false, a9.CCW_IS_HOLE), p19 = yn(e32.position, t23.spatialReference, 0, e32.position, n26, 0, e32.position.length / 3);
  for (let o27 = 2; o27 < e32.position.length; o27 += 3)
    e32.position[o27] = ne;
  return { position: e32.position, polygons: u15(e32.polygons, e32.position), outlines: c26(e32.outlines, e32.position), projectionSuccess: p19 };
}
function c26(o27, t23, s27 = null) {
  return o27.filter(({ count: o28 }) => o28 > 1).map(({ index: o28, count: i20 }) => {
    const e32 = 3 * o28, r38 = 3 * i20;
    return null != s27 ? new a21(o28, i20, a8(t23, e32, r38), a8(s27, e32, r38)) : new h16(o28, i20, a8(t23, e32, r38));
  });
}
function u15(o27, t23, s27 = null) {
  const i20 = new Array();
  for (const { index: e32, count: r38, holeIndices: p19, pathLengths: l33 } of o27) {
    if (r38 <= 1)
      continue;
    const o28 = 3 * e32, c34 = 3 * r38, u23 = p19.map((o29) => o29 - e32), h23 = null != s27 ? new g11(e32, r38, a8(t23, 3 * e32, 3 * r38), a8(s27, o28, c34), u23, l33) : new m8(e32, r38, a8(t23, 3 * e32, 3 * r38), u23, l33);
    i20.push(h23);
  }
  return i20;
}
var h16 = class {
  constructor(o27, t23, n26) {
    this.index = o27, this.count = t23, this.position = n26;
  }
};
var a21 = class extends h16 {
  constructor(o27, t23, n26, s27) {
    super(o27, t23, n26), this.mapPositions = s27;
  }
};
var g11 = class extends a21 {
  constructor(o27, t23, n26, s27, i20, e32) {
    super(o27, t23, n26, s27), this.holeIndices = i20, this.pathLengths = e32;
  }
};
var m8 = class extends h16 {
  constructor(o27, t23, n26, s27, i20) {
    super(o27, t23, n26), this.holeIndices = s27, this.pathLengths = i20;
  }
};
var f17 = class {
  constructor(o27, t23, n26, s27, i20, e32) {
    this.position = o27, this.mapPositions = t23, this.polygons = n26, this.outlines = s27, this.projectionSuccess = i20, this.sampledElevation = e32;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Normals.js
function n19(t23, a26, n26, s27, o27, h23 = 2) {
  const c34 = 1 / (Math.abs(n26) + Math.abs(s27) + Math.abs(o27)), e32 = n26 * c34, u23 = s27 * c34, M12 = o27 <= 0 ? (e32 >= 0 ? 1 : -1) * (1 - Math.abs(u23)) : e32, b15 = o27 <= 0 ? (u23 >= 0 ? 1 : -1) * (1 - Math.abs(e32)) : u23, f25 = a26 * h23;
  t23[f25] = r29(M12), t23[f25 + 1] = r29(b15);
}
function s22(t23) {
  const a26 = t23.length / 3, s27 = new Int16Array(2 * a26);
  let o27 = 0;
  for (let r38 = 0; r38 < a26; ++r38)
    n19(s27, r38, t23[o27++], t23[o27++], t23[o27++]);
  return s27;
}
function o20(t23, n26, s27, o27 = 2) {
  const r38 = s27 * o27, c34 = h17(n26[r38]), e32 = h17(n26[r38 + 1]), u23 = 1 - Math.abs(c34) - Math.abs(e32);
  t23[2] = u23, u23 < 0 ? (t23[0] = (c34 >= 0 ? 1 : -1) * (1 - Math.abs(e32)), t23[1] = (e32 >= 0 ? 1 : -1) * (1 - Math.abs(c34))) : (t23[0] = c34, t23[1] = e32), z(t23, t23);
}
function r29(a26) {
  return i(Math.round(32767 * a26), -32767, 32767);
}
function h17(a26) {
  return i(a26 / 32767, -1, 1);
}

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DExtrudeSymbolLayer.js
var $2 = ["polygon", "extent"];
var ee = class extends h13 {
  constructor(e32, t23, s27, r38) {
    super(e32, t23, s27, r38), this.ensureDrapedStatus(false);
  }
  async doLoad() {
    var _a, _b;
    if (!this._drivenProperties.size) {
      const t24 = I7(this._getSymbolSize());
      if (t24)
        throw new s2("graphics3dextrudesymbollayer:invalid-size", t24);
    }
    const t23 = (_b = (_a = this.symbolLayer) == null ? void 0 : _a.material) == null ? void 0 : _b.color, s27 = this._getCombinedOpacityAndColor(t23), r38 = e5(s27), n26 = s27[3], i20 = n26 < 1 || this.needsDrivenTransparentPass, o27 = { usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: true, diffuse: r38, ambient: r38, opacity: n26, transparent: i20, cullFace: i20 ? n9.None : n9.Back, hasVertexColors: true, hasSlicePlane: this._context.slicePlaneEnabled, castShadows: this.symbolLayer.castShadows, offsetTransparentBackfaces: true, normalType: a10.Compressed };
    this._material = new I5(o27), this._bottomMaterial = new I5({ ...o27, cullFace: n9.Back }), this._context.stage.add(this._material), this._context.stage.add(this._bottomMaterial);
  }
  destroy() {
    super.destroy(), this._material && (this._context.stage.remove(this._material), this._context.stage.remove(this._bottomMaterial));
  }
  createGraphics3DGraphic(e32) {
    const t23 = e32.graphic;
    if (!this._validateGeometry(t23.geometry, $2, this.symbolLayer.type))
      return null;
    const s27 = this._getVertexOpacityAndColor(e32.renderingInfo, 255), r38 = this.setGraphicElevationContext(t23, new o12());
    return this._createAs3DShape(t23, e32.renderingInfo, s27, r38, t23.uid);
  }
  layerOpacityChanged(e32, t23) {
    var _a, _b;
    const s27 = (_b = (_a = this.symbolLayer) == null ? void 0 : _a.material) == null ? void 0 : _b.color, r38 = this._getCombinedOpacity(s27), n26 = r38 < 1 || this.needsDrivenTransparentPass;
    this._material.setParameters({ opacity: r38, transparent: n26 }), this._bottomMaterial.setParameters({ opacity: r38, transparent: n26 });
    const i20 = this._getLayerOpacity();
    e32.forEach((e33) => {
      const s28 = t23(e33);
      null != s28 && s28.layerOpacityChanged(i20, this._context.isAsync);
    });
  }
  layerElevationInfoChanged(e32, t23) {
    return this.updateGraphics3DGraphicElevationInfo(e32, t23, p5);
  }
  slicePlaneEnabledChanged(e32, t23) {
    return this._material.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled }), this._bottomMaterial.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled }), e32.forEach((e33) => {
      const s27 = t23(e33);
      null != s27 && s27.slicePlaneEnabledChanged(this._context.slicePlaneEnabled, this._context.isAsync);
    }), true;
  }
  physicalBasedRenderingChanged() {
    return this._material.setParameters({ usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: true }), this._bottomMaterial.setParameters({ usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: true }), true;
  }
  _getExtrusionSize(e32) {
    let t23;
    return t23 = e32.size && this._drivenProperties.size ? a19(e32.size, 2) ?? 0 : this._getSymbolSize(), t23 /= this._context.renderCoordsHelper.unitInMeters, t23;
  }
  applyRendererDiff(e32, t23) {
    return this._drivenPropertiesChanged(t23) ? e21.RecreateSymbol : e21.RecreateGraphics;
  }
  async queryForSnapping(e32, r38, n26, i20) {
    const o27 = this._getExtrusionSize(n26) * this._context.renderCoordsHelper.unitInMeters / T2(r38), { objectId: a26, target: l33 } = e32, c34 = a(l33);
    switch (c34.z = (c34.z ?? 0) + o27, e32.type) {
      case "edge": {
        const { start: s27, end: r39 } = e32, n27 = a(s27), i21 = a(r39);
        return n27.z = (n27.z ?? 0) + o27, i21.z = (i21.z ?? 0) + o27, [e9(a26, c34, 1 / 0, n27, i21)];
      }
      case "vertex":
        return [t4(a26, c34, 1 / 0), e9(a26, l33, 1 / 0, l33, c34)];
      default:
        return [];
    }
  }
  _getSymbolSize() {
    return this.symbolLayer.size ?? 1;
  }
  _createAs3DShape(e32, t23, s27, a26, c34) {
    const h23 = c25(e32.geometry);
    if (null == h23)
      return null;
    if (0 === h23.rings.length || !h23.rings.some((e33) => e33.length > 0))
      return this._logGeometryValidationWarnings(h23.rings, "rings", "ExtrudeSymbol3DLayer"), null;
    const m15 = p12(h23, this._context.elevationProvider, this._context.renderCoordsHelper, a26);
    this._logGeometryCreationWarnings(m15, h23.rings, "rings", "ExtrudeSymbol3DLayer");
    const p19 = w4(h23);
    if (null == p19)
      return null;
    const g16 = new Array(), d19 = new Array(), u23 = i3(), E14 = e12(), v13 = n2(), C11 = this._context.renderCoordsHelper.viewingMode === l14.Global;
    C11 || this._context.renderCoordsHelper.worldUpAtPosition(null, v13), zn(h23.spatialReference, [p19.x, p19.y, 0], E14, this._context.renderCoordsHelper.spatialReference);
    const L8 = e12();
    h3(L8, E14);
    const M12 = e11();
    g3(M12, L8);
    const { polygons: A12, mapPositions: D6, position: R10 } = m15;
    for (const n26 of A12) {
      const e33 = n26.count;
      if (this._context.clippingExtent && (P2(u23), c5(u23, n26.mapPositions), !V(u23, this._context.clippingExtent)))
        continue;
      const i20 = i8(n26.mapPositions, n26.holeIndices, 3);
      if (0 === i20.length)
        continue;
      const o27 = i20.length, a27 = 6 * e33, l33 = i6(a27 + o27), h24 = i6(o27), m16 = t7(3 * a27), p20 = t7(3 * a27), f25 = t7(3 * a27), y12 = t7(a27);
      se(R10, D6, i20, n26, m16, f25, p20, y12, l33, h24, this._getExtrusionSize(t23), v13, C11), r11(m16, m16, L8);
      const b15 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: c34, layerUid: this._context.layer.uid }), E15 = new je(m16, f25, s22(p20), y12);
      g16.push(te(this._material, l33, l33.length - h24.length, E15, s27, b15), te(this._bottomMaterial, h24, 0, E15, s27, b15)), d19.push(E15.heights);
    }
    if (0 === g16.length)
      return null;
    const B6 = new V3({ geometries: g16, layerUid: this._context.layer.uid, graphicUid: c34, isElevationSource: true });
    B6.transformation = E14;
    const k11 = u7(this.symbolLayer, { opacity: this._getLayerOpacity() }), N7 = null != k11 ? { baseMaterial: this._material, edgeMaterials: [k11], properties: { mergeGeometries: true, hasSlicePlane: this._context.slicePlaneEnabled } } : null, H6 = new p7(this, B6, g16, null, null, (e33, t24, s28, r38, n26) => de(e33, t24, s28, r38, n26, d19), a26, N7);
    return H6.alignedSampledElevation = m15.sampledElevation, H6.needsElevationUpdates = p5(a26.mode), H6;
  }
};
function te(e32, t23, s27, r38, n26, i20) {
  const o27 = l11(t23.length), a26 = [[O3.POSITION, new s9(r38.positions, 3, true)], [O3.NORMALCOMPRESSED, new s9(r38.normals, 2, true)], [O3.COLOR, new s9(n26, 4, true)]], l33 = [[O3.POSITION, t23], [O3.NORMALCOMPRESSED, t23], [O3.COLOR, o27]];
  return new b4(e32, a26, l33, r38.elevation, e15.Mesh, i20, s27);
}
function se(e32, t23, s27, r38, n26, i20, o27, a26, l33, c34, h23, m15, p19) {
  const g16 = s27.length / 3;
  let d19 = 0, u23 = 2 * r38.count;
  re(e32, t23, r38.index, r38.count, s27, 0, g16, n26, i20, o27, a26, l33, c34, u23, h23, m15, p19);
  let f25 = 2 * r38.count;
  u23 = 0, oe(n26, i20, a26, o27, d19, r38.pathLengths[0], r38.count, f25, l33, u23, h23), f25 += 4 * r38.pathLengths[0], u23 += 2 * r38.pathLengths[0], d19 += r38.pathLengths[0];
  for (let y12 = 1; y12 < r38.pathLengths.length; ++y12)
    oe(n26, i20, a26, o27, d19, r38.pathLengths[y12], r38.count, f25, l33, u23, h23), f25 += 4 * r38.pathLengths[y12], u23 += 2 * r38.pathLengths[y12], d19 += r38.pathLengths[y12];
}
function re(e32, t23, s27, r38, n26, i20, o27, a26, l33, m15, p19, g16, d19, u23, f25, y12, b15) {
  r4(fe, y12);
  const _13 = f25 > 0 ? 1 : -1;
  let x10 = 3 * s27, j13 = 0, S14 = 3 * j13, P14 = r38, E14 = 3 * P14;
  for (let c34 = 0; c34 < r38; ++c34)
    b15 && (fe[0] = e32[x10], fe[1] = e32[x10 + 1], fe[2] = e32[x10 + 2], z(fe, fe)), a26[S14] = e32[x10], a26[S14 + 1] = e32[x10 + 1], a26[S14 + 2] = e32[x10 + 2], l33[S14] = t23[x10], l33[S14 + 1] = t23[x10 + 1], l33[S14 + 2] = t23[x10 + 2], m15[S14] = -_13 * fe[0], m15[S14 + 1] = -_13 * fe[1], m15[S14 + 2] = -_13 * fe[2], p19[j13] = 0, a26[E14] = e32[x10] + f25 * fe[0], a26[E14 + 1] = e32[x10 + 1] + f25 * fe[1], a26[E14 + 2] = e32[x10 + 2] + f25 * fe[2], l33[E14] = t23[x10], l33[E14 + 1] = t23[x10 + 1], l33[E14 + 2] = t23[x10 + 2], m15[E14] = _13 * fe[0], m15[E14 + 1] = _13 * fe[1], m15[E14 + 2] = _13 * fe[2], p19[P14] = f25, S14 += 3, E14 += 3, x10 += 3, j13 += 1, P14 += 1;
  x10 = 3 * i20, S14 = 0, E14 = 3 * u23;
  const w9 = f25 < 0 ? _e : be, v13 = f25 < 0 ? be : _e;
  for (let c34 = 0; c34 < o27; ++c34)
    d19[S14] = n26[x10 + w9[0]], d19[S14 + 1] = n26[x10 + w9[1]], d19[S14 + 2] = n26[x10 + w9[2]], g16[E14] = n26[x10 + v13[0]] + r38, g16[E14 + 1] = n26[x10 + v13[1]] + r38, g16[E14 + 2] = n26[x10 + v13[2]] + r38, S14 += 3, E14 += 3, x10 += 3;
}
function ne2(e32, t23, s27, r38, n26, i20, o27) {
  r38[i20] = r38[o27], o27 *= 3, e32[i20 *= 3] = e32[o27], e32[i20 + 1] = e32[o27 + 1], e32[i20 + 2] = e32[o27 + 2], t23[i20] = t23[o27], t23[i20 + 1] = t23[o27 + 1], t23[i20 + 2] = t23[o27 + 2], s27[i20] = n26[0], s27[i20 + 1] = n26[1], s27[i20 + 2] = n26[2];
}
var ie = n2();
function oe(e32, t23, s27, r38, n26, i20, o27, a26, l33, c34, h23) {
  let m15 = n26, p19 = n26 + 1, g16 = n26 + o27, d19 = n26 + o27 + 1, u23 = a26, f25 = a26 + 1, y12 = a26 + 2 * i20, b15 = a26 + 2 * i20 + 1;
  h23 < 0 && (m15 = n26 + o27 + 1, d19 = n26), c34 *= 3;
  for (let _13 = 0; _13 < i20; ++_13)
    _13 === i20 - 1 && (h23 > 0 ? (p19 = n26, d19 = n26 + o27) : (p19 = n26, m15 = n26 + o27)), pe(e32, m15, p19, g16, ie), ne2(e32, t23, r38, s27, ie, u23, m15), ne2(e32, t23, r38, s27, ie, f25, p19), ne2(e32, t23, r38, s27, ie, y12, g16), ne2(e32, t23, r38, s27, ie, b15, d19), l33[c34++] = u23, l33[c34++] = y12, l33[c34++] = b15, l33[c34++] = u23, l33[c34++] = b15, l33[c34++] = f25, m15++, p19++, g16++, d19++, u23 += 2, f25 += 2, y12 += 2, b15 += 2;
}
var ae = n2();
var le = n2();
var ce = n2();
var he = n2();
var me = n2();
function pe(e32, t23, s27, r38, n26) {
  t23 *= 3, s27 *= 3, r38 *= 3, o(ae, e32[t23++], e32[t23++], e32[t23++]), o(le, e32[s27++], e32[s27++], e32[s27++]), o(ce, e32[r38++], e32[r38++], e32[r38++]), e6(he, le, ae), e6(me, ce, ae), _(n26, me, he), z(n26, n26);
}
var ge = n2();
function de(e32, t23, s27, r38, n26, i20) {
  const o27 = e32.stageObject, c34 = o27.geometries, h23 = c34.length, p19 = "absolute-height" !== t23.mode;
  let g16 = 0;
  const u23 = o27.transformation, f25 = e7(e12(), u23);
  for (let a26 = 0; a26 < h23; a26 += 2) {
    const e33 = c34[a26];
    if (!e20(e33))
      continue;
    const t24 = e33.getMutableAttribute(O3.POSITION).data, l33 = i20[a26 / 2], h24 = new r19(e33.mapPositions), y12 = t24.length / 3;
    let b15 = 0, _13 = false, x10 = 0;
    for (let i21 = 0; i21 < y12; i21++) {
      ge[0] = t24[b15], ge[1] = t24[b15 + 1], ge[2] = t24[b15 + 2], r38(h24, ye), p19 && (x10 += ye.sampledElevation), t15.TESTS_DISABLE_OPTIMIZATIONS ? (o(ue, h24.array[h24.offset], h24.array[h24.offset + 1], ye.z + l33[b15 / 3]), null != s27 && n26.toRenderCoords(ue, s27, ue), O(ue, ue, f25)) : (o(ue, t24[b15], t24[b15 + 1], t24[b15 + 2]), O(ue, ue, u23), n26.setAltitude(ue, ye.z + l33[b15 / 3]), O(ue, ue, f25)), t24[b15] = ue[0], t24[b15 + 1] = ue[1], t24[b15 + 2] = ue[2];
      const e34 = xe / n26.unitInMeters;
      (Math.abs(ge[0] - t24[b15]) >= e34 || Math.abs(ge[1] - t24[b15 + 1]) >= e34 || Math.abs(ge[2] - t24[b15 + 2]) >= e34) && (_13 = true), h24.offset += 3, b15 += 3;
    }
    _13 && (e33.invalidateBoundingInfo(), o27.geometryVertexAttrsUpdated(c34[a26]), c34[a26 + 1].invalidateBoundingInfo(), o27.geometryVertexAttrsUpdated(c34[a26 + 1])), g16 += x10 / y12;
  }
  return g16 / h23;
}
var ue = n2();
var fe = n2();
var ye = new R6();
var be = [0, 2, 1];
var _e = [0, 1, 2];
var xe = 0.01;
var je = class {
  constructor(e32, t23, s27, r38) {
    this.positions = e32, this.elevation = t23, this.normals = s27, this.heights = r38;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DDrapedGraphicLayer.js
var u16 = class {
  constructor(e32, t23, r38, i20) {
    this.graphics3DSymbolLayer = e32, this.renderGeometries = t23, this.boundingBox = r38, this._drapeSourceRenderer = i20, this.type = "draped", this.stage = null, this._visible = false, this._addedToStage = false, this.isElevationSource = false;
  }
  initialize(e32) {
    this.stage = e32.stage;
  }
  setVisibility(e32) {
    if (null != this.stage && this._visible !== e32) {
      if (this._visible = e32, e32 && !this._addedToStage)
        return this._addedToStage = true, void this._drapeSourceRenderer.addGeometries(this.renderGeometries, E6.ADD);
      if (e32 || this._addedToStage) {
        for (const e33 of this.renderGeometries)
          e33.visible = this._visible;
        this._drapeSourceRenderer.modifyGeometries(this.renderGeometries, I6.VISIBILITY);
      }
    }
  }
  destroy() {
    this.stage && this._addedToStage && this._drapeSourceRenderer.removeGeometries(this.renderGeometries, E6.REMOVE), this._addedToStage = false, this._visible = false, this.stage = null;
  }
  getCenterObjectSpace(r38 = n2()) {
    return o(r38, 0, 0, 0);
  }
  getBoundingBoxObjectSpace(e32 = i3()) {
    return P2(e32);
  }
  addObjectState(e32, t23) {
    e32 === t10.Highlight && (this.renderGeometries.forEach((e33) => {
      const r38 = e33.geometry.addHighlight();
      t23.addRenderGeometry(e33, r38, this);
    }), this._addedToStage && this._drapeSourceRenderer.modifyGeometries(this.renderGeometries, I6.HIGHLIGHT));
  }
  removeObjectState(e32) {
    this.renderGeometries.forEach((t23) => {
      e32.removeRenderGeometry(t23);
    });
  }
  removeRenderGeometryObjectState(e32, t23) {
    e32.geometry.removeHighlight(t23), this._addedToStage && this._drapeSourceRenderer.modifyGeometries(this.renderGeometries, I6.HIGHLIGHT);
  }
  computeAttachmentOrigin(e32) {
    for (const t23 of this.renderGeometries)
      t23.geometry.computeAttachmentOrigin(f18) && (e32.draped.origin[0] += f18[0], e32.draped.origin[1] += f18[1], e32.draped.num++);
  }
  async getProjectedBoundingBox(e32, t23, r38, d19, n26) {
    P2(n26);
    for (let i20 = 0; i20 < this.renderGeometries.length; i20++) {
      const t24 = this.renderGeometries[i20];
      this._getRenderGeometryProjectedBoundingRect(t24, e32, l25, r38), f5(n26, l25);
    }
    if (t23) {
      let e33;
      E(n26, f18);
      const r39 = V2(n26, t23.service.spatialReference, t23);
      try {
        e33 = await t23.service.queryElevation(f18[0], f18[1], d19, r39, "ground");
      } catch (a26) {
      }
      null != e33 && (n26[2] = Math.min(n26[2], e33), n26[5] = Math.max(n26[5], e33));
    }
    return n26;
  }
  _getRenderGeometryProjectedBoundingRect(e32, t23, r38, i20) {
    if (this.boundingBox)
      O2(p13, this.boundingBox);
    else {
      const t24 = e32.boundingSphere, r39 = t24[3];
      p13[0] = t24[0] - r39, p13[1] = t24[1] - r39, p13[2] = t24[2] - r39, p13[3] = t24[0] + r39, p13[4] = t24[1] + r39, p13[5] = t24[2] + r39;
    }
    return t23(p13, 0, 2), this.calculateRelativeScreenBounds && i20.push({ location: E(p13), screenSpaceBoundingRect: this.calculateRelativeScreenBounds() }), S2(p13, r38);
  }
};
var l25 = i2();
var p13 = i3();
var f18 = n2();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DIconSymbolLayer.js
var Z2 = e12();
var K2 = r2(0, 0, 1);
var Q2 = 16;
var X4 = 1.5;
var Y2 = a14;
var ee2 = [Y2 / 2, Y2 / 2, 1 - Y2 / 2, 1 - Y2 / 2];
var te2 = [e19 * Y2, e19 * Y2];
var re2 = class _re extends h13 {
  getCachedSize() {
    return { size: this._getIconSize() };
  }
  constructor(e32, t23, r38, i20) {
    super(e32, t23, r38, i20), this._cimLayers = null, this._cimSymbolMaterials = /* @__PURE__ */ new Map(), this._cimSymbolTextures = /* @__PURE__ */ new Map(), this._cimMaterialParametersInfo = null, this._cimRequiredFields = null, this._cimScaleFactorOrFunction = null, this._size = null, this._symbolTextureRatio = 1, this._outlineSize = 0, this._elevationOptions = { supportsOffsetAdjustment: true, supportsOnTheGround: true };
  }
  async doLoad(e32) {
    this._validateOrThrow();
    const t23 = this._prepareMaterialParameters(), r38 = this._getPrimitive();
    if (null != r38)
      this._prepareResourcesPrimitive(t23, r38);
    else {
      const r39 = h10(this.symbolLayer), i20 = ot(r39);
      i20 && "application/json" === i20.mediaType ? await this._prepareResourcesCIM(t23, JSON.parse(i20.data), e32) : await this._prepareResourcesHref(t23, r39, e32);
    }
  }
  _validateOrThrow() {
    if (this._drivenProperties.size)
      return;
    const e32 = I7(this._getIconSize());
    if (e32)
      throw new s2("graphics3diconsymbollayer:invalid-size", e32);
  }
  _getIconSize() {
    const e32 = this.symbolLayer, t23 = Math.round(null != e32.size ? u4(e32.size) : Q2);
    return this._drivenProperties.size ? Math.max(t23, 64) : t23;
  }
  _generateTextureCIM(e32) {
    const t23 = this._getGraphicHash(e32);
    let r38 = "" === t23 ? null : this._cimSymbolTextures.get(t23);
    if (!r38) {
      const i20 = { scaleFactor: this._cimScaleFactorOrFunction }, s27 = this._context.sharedResources.cimSymbolRasterizer.rasterizeCIMSymbol3D(this._cimLayers, e32, "esriGeometryPoint", i20, void 0, void 0);
      this._cimMaterialParametersInfo.anchorPosition = this._getAnchorPos("relative", s27.anchorPosition);
      const a26 = { width: s27.imageData.width, height: s27.imageData.height };
      r38 = new w3(s27.imageData, a26), this._cimSymbolTextures.set(t23, r38), this._context.stage.add(r38);
    }
    return r38;
  }
  _prepareMaterialParameters() {
    const e32 = { anchorPosition: this._getAnchorPos(this.symbolLayer.anchor, this.symbolLayer.anchorPosition) }, t23 = this.symbol;
    if (ie2(t23)) {
      const { screenLength: r38, minWorldLength: i20, maxWorldLength: s27 } = t23.verticalOffset;
      e32.verticalOffset = { screenLength: u4(r38), minWorldLength: i20 || 0, maxWorldLength: null != s27 ? s27 : 1 / 0 };
    }
    return this._context.screenSizePerspectiveEnabled && (e32.screenSizePerspective = this._context.sharedResources.screenSizePerspectiveSettings), e32.occlusionTest = true, e32.hasSlicePlane = this._context.slicePlaneEnabled, e32;
  }
  _prepareResourcesPrimitive(e32, t23) {
    const r38 = this._getOutlineSize();
    if (se2(t23) && 0 === r38)
      throw new Error("Nothing to render");
    if (this._outlineSize = r38, e32.color = this._getFillColor(), e32.outlineColor = this._getOutlineColor(), e32.outlineSize = this._outlineSize, null != this._context.sharedResources.textures) {
      const r39 = this._context.sharedResources.textures.fromData(`${t23}-icon`, () => o13(t23));
      this._texture = r39.texture, this._releaseTexture = r39, e32.textureId = this._texture.id;
    }
    e32.textureIsSignedDistanceField = true, e32.distanceFieldBoundingBox = ee2;
    const i20 = this._getIconSize();
    this._size = [i20, i20], this._symbolTextureRatio = 1 / Y2, this._createMaterialAndAddToStage(e32, this._context.stage);
  }
  async _prepareResourcesHref(e32, i20, a26) {
    this._outlineSize = this._getOutlineSize(), e32.color = this._getFillColor(), e32.outlineColor = this._getOutlineColor(), e32.outlineSize = this._outlineSize, e32.textureIsSignedDistanceField = false;
    const o27 = this._getIconSize(), n26 = o27 * this._context.graphicsCoreOwner.view.state.rasterPixelRatio;
    if (null != this._context.sharedResources.textures) {
      const l33 = await _2(this._context.sharedResources.textures.fromUrl(i20, n26, { signal: a26 }));
      if (false === l33.ok) {
        f2(l33.error);
        throw new s2("graphics3diconsymbollayer:request-failed", `Failed to load (Request for icon resource failed: ${i20})`);
      }
      this._releaseTexture = l33.value;
      const c34 = l33.value.texture, h23 = c34.parameters.width / c34.parameters.height;
      this._size = h23 > 1 ? [o27, Math.round(o27 / h23)] : [Math.round(o27 * h23), o27], e32.textureId = c34.id;
    }
    this._createMaterialAndAddToStage(e32, this._context.stage);
  }
  async _prepareResourcesCIM(e32, t23, r38) {
    const i20 = new d2({ data: t23 });
    if (!this._context.sharedResources.cimSymbolRasterizer) {
      const e33 = (await import("./CIMSymbolRasterizer-6EJNNI23.js")).CIMSymbolRasterizer;
      s3(r38), this._context.sharedResources.cimSymbolRasterizer || (this._context.sharedResources.cimSymbolRasterizer = new e33(this._context.renderCoordsHelper.spatialReference, true));
    }
    const s27 = this._context.layer.fields ? this._context.layer.fields.map((e33) => e33.toJSON()) : null;
    let o27, n26;
    if (this._cimLayers = await this._context.sharedResources.cimSymbolRasterizer.analyzeCIMSymbol3D(i20, s27, this._context.renderer && "dictionary" === this._context.renderer.type ? this._context.renderer.fieldMap : null, "esriGeometryPoint", { signal: r38 }), this._context.renderer && "dictionary" === this._context.renderer.type && this._context.renderer.scaleExpression) {
      const e33 = this._context.renderer;
      if (isNaN(e33.scaleExpression)) {
        const t24 = e33.scaleExpression, r39 = await n11(t24, this._context.layer.spatialReference, s27);
        n26 = (e34, t25, i21) => {
          const s28 = s8(r39, e34, { $view: i21 }, "esriGeometryPoint", t25);
          return null !== s28 ? s28 : 1;
        };
      } else
        o27 = Number(e33.scaleExpression);
    }
    this._cimScaleFactorOrFunction = o27 || n26 || 1;
    const l33 = this._context.renderer ? await this._context.renderer.getRequiredFields(this._context.layer.fieldsIndex) : [];
    s3(r38);
    const c34 = this._context.layer.fieldsIndex;
    this._cimRequiredFields = l33.map((e33) => c34.get(e33).name), this._cimMaterialParametersInfo = e32, this._cimMaterialParametersInfo.color = this._getFillColor(), this._cimMaterialParametersInfo.outlineColor = [0, 0, 0, 0], this._cimMaterialParametersInfo.outlineSize = 0, this._cimMaterialParametersInfo.textureIsSignedDistanceField = false;
  }
  _getPrimitive() {
    return this.symbolLayer.resource && this.symbolLayer.resource.href ? null : this.symbolLayer.resource && this.symbolLayer.resource.primitive || j3;
  }
  _getOutlineSize() {
    let e32 = 0;
    const t23 = this.symbolLayer;
    if (null != t23.outline && null != t23.outline.size)
      return Math.max(u4(t23.outline.size), 0);
    return e32 = se2(this._getPrimitive()) ? X4 : 0, Math.max(e32, 0);
  }
  _getOutlineColor() {
    var _a;
    const t23 = this._getLayerOpacity(), r38 = this.symbolLayer, i20 = (_a = r38 == null ? void 0 : r38.outline) == null ? void 0 : _a.color;
    if (null != i20) {
      const r39 = h4.toUnitRGB(i20), s27 = i20.a * t23;
      return [r39[0], r39[1], r39[2], s27];
    }
    return [0, 0, 0, 0];
  }
  _getFillColor() {
    var _a, _b;
    if (se2(this._getPrimitive()))
      return c22;
    const e32 = null == this._getPrimitive(), t23 = (_b = (_a = this.symbolLayer) == null ? void 0 : _a.material) == null ? void 0 : _b.color;
    return this._getCombinedOpacityAndColor(t23, { hasIntrinsicColor: e32 });
  }
  _getAnchorPos(e32, t23) {
    return "relative" === e32 ? r8((t23.x || 0) + 0.5, 0.5 - (t23.y || 0)) : e32 in o19 ? o19[e32] : o19.center;
  }
  _createMaterialAndAddToStage(e32, t23) {
    if (this._cimLayers) {
      this._fastUpdates = null;
      let r38 = e32.textureId ? this._cimSymbolMaterials.get(e32.textureId) : null;
      return r38 || (r38 = new K(e32), this._cimSymbolMaterials.set(e32.textureId ?? 0, r38), t23.add(r38)), r38;
    }
    return this._fastUpdates = O6(this._context.renderer, this._fastVisualVariableConvertOptions()), this._fastUpdates && (e32 = { ...e32, ...this._fastUpdates.materialParameters }), this._material = new K(e32), t23.add(this._material), this._material;
  }
  _setDrapingDependentMaterialParameters() {
    this.draped && (this._forEachMaterial((e32) => {
      e32.setParameters({ verticalOffset: null, screenSizePerspective: null, occlusionTest: false, hasSlicePlane: false, shaderPolygonOffset: 0, isDraped: this.draped });
    }), this.layerOpacityChanged());
  }
  destroy() {
    super.destroy(), this._forEachMaterial((e32) => this._context.stage.remove(e32)), this._material = null, this._cimSymbolMaterials.clear(), this._cimSymbolTextures.forEach((e32) => this._context.stage.remove(e32)), this._cimSymbolTextures.clear(), this._releaseTexture = f(this._releaseTexture);
  }
  _getScaleFactor(e32, t23) {
    if (this._drivenProperties.size && e32.size) {
      for (let t24 = 0; t24 < 3; t24++) {
        const r38 = e32.size[t24];
        r38 && "symbol-value" !== r38 && "proportional" !== r38 && (e32.size[t24] = u4(r38));
      }
      if ("symbol-value" === e32.size[0])
        return 1;
      if (isFinite(+e32.size[0]))
        return +e32.size[0] / t23;
      if (isFinite(+e32.size[2]))
        return +e32.size[2] / t23;
    }
    return 1;
  }
  createGraphics3DGraphic(e32) {
    var _a;
    const t23 = e32.graphic;
    if (!this._validateGeometry(t23.geometry))
      return null;
    let r38, i20 = [0, 0];
    if (this._cimLayers) {
      if (!this._cimLayers.length)
        return null;
      const e33 = this._generateTextureCIM(t23), s28 = { textureId: e33.id, ...this._cimMaterialParametersInfo };
      r38 = this._createMaterialAndAddToStage(s28, this._context.stage), i20 = [e33.parameters.width, e33.parameters.height];
    } else
      i20 = this._size, r38 = this._material;
    const s27 = u13(t23.geometry);
    if (null == s27)
      return this.logger.warn(`unsupported geometry type for icon symbol: ${t23.geometry.type}`), null;
    const a26 = e32.renderingInfo, o27 = this._getVertexOpacityAndColor(a26);
    let n26 = 1;
    if (!((_a = this._fastUpdates) == null ? void 0 : _a.visualVariables.size)) {
      const e33 = i20[0] > i20[1] ? i20[0] : i20[1];
      n26 = this._getScaleFactor(a26, e33);
    }
    n26 *= this._symbolTextureRatio;
    const l33 = r8(i20[0] * n26, i20[1] * n26), c34 = this.setGraphicElevationContext(t23, new o12());
    return this.ensureDrapedStatus("on-the-ground" === c34.mode) && this._setDrapingDependentMaterialParameters(), this.draped ? this._createAsOverlay(t23, s27, r38, o27, l33, e32.layer.uid) : this._createAs3DShape(t23, s27, r38, o27, l33, c34, t23.uid);
  }
  layerOpacityChanged() {
    const e32 = this._getFillColor(), t23 = this._getOutlineColor();
    this._forEachMaterial((r38) => {
      r38.setParameters({ color: e32 }), r38.setParameters({ outlineColor: t23 });
    });
  }
  layerElevationInfoChanged(e32, t23, r38) {
    const i20 = this._elevationContext.mode, s27 = d8(_re.elevationModeChangeTypes, r38, i20);
    if (s27 !== T6.UPDATE)
      return s27;
    const a26 = m3(i20) || "absolute-height" === i20;
    return this.updateGraphics3DGraphicElevationInfo(e32, t23, () => a26);
  }
  slicePlaneEnabledChanged() {
    return this.draped || this._forEachMaterial((e32) => {
      e32.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled });
    }), true;
  }
  physicalBasedRenderingChanged() {
    return true;
  }
  get pixelRatioChanged() {
    return null != this._getPrimitive();
  }
  applyRendererDiff(e32, t23) {
    for (const r38 in e32.diff) {
      if ("visualVariables" !== r38)
        return e21.RecreateSymbol;
      if (!G2(this._fastUpdates, t23, this._fastVisualVariableConvertOptions()))
        return e21.RecreateSymbol;
      null != this._material && this._material.setParameters(this._fastUpdates.materialParameters);
    }
    return e21.FastUpdate;
  }
  _defaultElevationInfoNoZ() {
    return ae2;
  }
  _createAs3DShape(e32, t23, r38, i20, s27, a26, o27) {
    const n26 = this.getFastUpdateAttrValues(e32), l33 = n26 && this._fastUpdates ? (e33) => Q(this._fastUpdates.materialParameters, n26, e33) : void 0, c34 = this._context.layer.uid, h23 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: o27, layerUid: c34 }), m15 = ot2(r38, K2, null, i20, s27, oe2, null, n26, h23), u23 = c21(this._context, t23, m15, a26, o27, l33);
    if (null == u23)
      return null;
    const d19 = new p7(this, u23.object, [m15], null, null, p6, a26);
    return d19.alignedSampledElevation = u23.sampledElevation, d19.needsElevationUpdates = m3(a26.mode) || "absolute-height" === a26.mode, d19.getScreenSize = this._createScreenSizeGetter(s27, l33), d19.calculateRelativeScreenBounds = (e33) => r38.calculateRelativeScreenBounds(d19.getScreenSize(), 1, e33), p9(d19, t23, this._context.elevationProvider), d19;
  }
  _createAsOverlay(e32, t23, r38, i20, s27, a26) {
    r38.renderPriority = this._renderPriority;
    const o27 = n6();
    In(t23, o27, this._context.overlaySR), o27[2] = ne;
    const n26 = this._context.clippingExtent;
    if (null != n26 && !y3(n26, o27))
      return null;
    const l33 = this.getFastUpdateAttrValues(e32), c34 = l33 && this._fastUpdates ? (e33) => Q(this._fastUpdates.materialParameters, l33, e33) : void 0, h23 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: e32.uid, layerUid: this._context.layer.uid }), m15 = ot2(r38, K2, o27, i20, s27, null, null, l33, h23), u23 = new a13(m15, { layerUid: a26, graphicUid: e32.uid, shaderTransformer: c34 }), d19 = new u16(this, [u23], null, this._context.drapeSourceRenderer);
    return d19.getScreenSize = this._createScreenSizeGetter(s27, c34), d19.calculateRelativeScreenBounds = (e33) => r38.calculateRelativeScreenBounds(d19.getScreenSize(), 1, e33), d19;
  }
  _createScreenSizeGetter(e32, t23) {
    const r38 = this._outlineSize + 2;
    if (this._fastUpdates && t23) {
      const i20 = e32[0] / this._symbolTextureRatio, s27 = e32[1] / this._symbolTextureRatio;
      return (e33 = n7()) => {
        const a26 = t23(Z2);
        return e33[0] = a26[0] * i20 + r38, e33[1] = a26[5] * s27 + r38, e33;
      };
    }
    {
      const t24 = e32[0] / this._symbolTextureRatio + r38, i20 = e32[1] / this._symbolTextureRatio + r38;
      return (e33 = n7()) => (e33[0] = t24, e33[1] = i20, e33);
    }
  }
  _fastVisualVariableConvertOptions() {
    const e32 = Math.max(this._size[0], this._size[1]), t23 = r2(e32, e32, e32), r38 = e8(1), i20 = e32 * r38, s27 = r2(i20, i20, i20);
    return new B({ size: true, color: true, rotation: true, opacity: false }, t23, s27, r38);
  }
  _getGraphicHash(e32) {
    let t23 = "";
    for (const r38 of this._cimRequiredFields)
      t23 += r38 + e32.attributes[r38];
    return t23;
  }
  _forEachMaterial(e32) {
    null != this._material && e32(this._material), this._cimSymbolMaterials.forEach(e32);
  }
  test() {
    return { ...super.test(), material: this._material };
  }
};
function ie2(e32) {
  return e32 && "point-3d" === e32.type && e32.hasVisibleVerticalOffset();
}
function se2(e32) {
  return null != e32 && ("cross" === e32 || "x" === e32);
}
re2.PRIMITIVE_SIZE = te2, re2.elevationModeChangeTypes = { definedChanged: T6.UPDATE, staysOnTheGround: T6.NONE, onTheGroundChanged: T6.RECREATE };
var ae2 = { mode: "relative-to-ground", offset: 0 };
var oe2 = r6(0, 0, 0, 1);

// node_modules/@arcgis/core/views/3d/layers/graphics/lineUtils.js
function n20(n26) {
  switch (n26) {
    case "butt":
      return r20.BUTT;
    case "square":
      return r20.SQUARE;
    case "round":
      return r20.ROUND;
    default:
      return null;
  }
}
function r30(e32) {
  return "diamond" === e32 ? "kite" : e32;
}

// node_modules/@arcgis/core/views/3d/support/renderInfoUtils/line.js
function p14(o27, n26, s27, p19) {
  const l33 = "polygon" === o27.type ? a9.CCW_IS_HOLE : a9.NONE, u23 = "polygon" === o27.type ? o27.rings : o27.paths, { position: a26, outlines: g16 } = f9(u23, !!o27.hasZ, l33), m15 = t7(a26.length), y12 = u9(a26, o27.spatialReference, 0, m15, 0, a26, 0, a26.length / 3, n26, s27, p19), f25 = null != y12;
  return { lines: f25 ? c27(g16, a26, m15) : [], projectionSuccess: f25, sampledElevation: y12 };
}
function l26(t23, n26) {
  const i20 = "polygon" === t23.type ? a9.CCW_IS_HOLE : a9.NONE, p19 = "polygon" === t23.type ? t23.rings : t23.paths, { position: l33, outlines: u23 } = f9(p19, false, i20), a26 = yn(l33, t23.spatialReference, 0, l33, n26, 0, l33.length / 3);
  for (let o27 = 2; o27 < l33.length; o27 += 3)
    l33[o27] = ne;
  return { lines: a26 ? c27(u23, l33) : [], projectionSuccess: a26 };
}
function c27(o27, t23, e32 = null) {
  const r38 = new Array();
  for (const { index: i20, count: s27 } of o27) {
    if (s27 <= 1)
      continue;
    const o28 = 3 * i20, p19 = 3 * s27;
    r38.push({ position: a8(t23, 3 * i20, 3 * s27), mapPositions: null != e32 ? a8(e32, o28, p19) : void 0 });
  }
  return r38;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DLineSymbolLayer.js
var O10 = ["polyline", "polygon", "extent"];
var V4 = new B({ size: true, color: true, rotation: false, opacity: true });
var I10 = class _I extends h13 {
  constructor(e32, t23, r38, i20) {
    super(e32, t23, r38, i20);
  }
  async doLoad() {
    if (this._fastUpdates = O6(this._context.renderer, V4), !this._drivenProperties.size) {
      if ((null != this.symbolLayer.size ? this.symbolLayer.size : e8(1)) < 0)
        throw new s2("graphics3dlinesymbollayer:invalid-size", "Symbol sizes may not be negative values");
    }
  }
  _getMaterialParameters(e32, t23 = false) {
    var _a, _b;
    const r38 = this._getCombinedOpacityAndColor(t23 && this._markerColor || this._materialColor);
    this._patternHidesLine && !t23 && (r38[3] = 0);
    const i20 = { width: this._computeMaterialWidth((_a = this.symbolLayer) == null ? void 0 : _a.size), color: r38, hasPolygonOffset: true, join: this.symbolLayer.join || "miter", cap: n20(this.symbolLayer.cap || "butt"), hasSlicePlane: this._context.slicePlaneEnabled, isClosed: e32, stipplePattern: n12(this.symbolLayer.pattern), stippleScaleWithLineWidth: true };
    return ((_b = this._fastUpdates) == null ? void 0 : _b.visualVariables) ? { ...i20, ...this._fastUpdates.materialParameters } : i20;
  }
  get _materialColor() {
    var _a;
    return (_a = this.symbolLayer.material) == null ? void 0 : _a.color;
  }
  get _markerColor() {
    var _a;
    return (_a = this.symbolLayer.marker) == null ? void 0 : _a.color;
  }
  get _lineMaterial() {
    return null == this._lineMaterialCached && (this._lineMaterialCached = new B3(this._getMaterialParameters(false)), this._context.stage.add(this._lineMaterialCached)), this._lineMaterialCached;
  }
  get _ringMaterial() {
    return null == this._ringMaterialCached && (this._ringMaterialCached = new B3(this._getMaterialParameters(true)), this._context.stage.add(this._ringMaterialCached)), this._ringMaterialCached;
  }
  get _wireframeLineMaterial() {
    return null == this._wireframeLineMaterialCached && (this._wireframeLineMaterialCached = new B3({ ...this._getMaterialParameters(false), wireframe: true }), this._context.stage.add(this._wireframeLineMaterialCached)), this._wireframeLineMaterialCached;
  }
  get _wireframeRingMaterial() {
    return null == this._wireframeRingMaterialCached && (this._wireframeRingMaterialCached = new B3({ ...this._getMaterialParameters(true), wireframe: true }), this._context.stage.add(this._wireframeRingMaterialCached)), this._wireframeRingMaterialCached;
  }
  get _markerMaterial() {
    return null == this._markerMaterialCached && null != this.symbolLayer.marker && (this._markerMaterialCached = new v4({ ...this._getMaterialParameters(false, true), placement: this.symbolLayer.marker.placement, markerPrimitive: r30(this.symbolLayer.marker.style) }), this._context.stage.add(this._markerMaterialCached)), this._markerMaterialCached;
  }
  destroy() {
    super.destroy(), this._forEachMaterial((e32) => this._context.stage.remove(e32)), this._lineMaterialCached = null, this._ringMaterialCached = null, this._wireframeLineMaterialCached = null, this._wireframeRingMaterialCached = null, this._markerMaterialCached = null;
  }
  _getDrivenSize(e32) {
    return this._drivenProperties.size && e32.size ? u4(s15(e32.size)) : 1;
  }
  _getDrivenColor(e32) {
    const t23 = r6(1, 1, 1, 1);
    return this._drivenProperties.color && e32.color && (t23[0] = e32.color[0], t23[1] = e32.color[1], t23[2] = e32.color[2], e32.color.length > 0 && (t23[3] = e32.color[3])), this._drivenProperties.opacity && e32.opacity && (t23[3] = e32.opacity), t23;
  }
  createGraphics3DGraphic(e32) {
    const t23 = e32.graphic;
    if (!this._validateGeometry(t23.geometry, O10, this.symbolLayer.type))
      return null;
    const r38 = this.setGraphicElevationContext(t23, new o12());
    return this.ensureDrapedStatus("on-the-ground" === r38.mode), this.draped ? this._createAsOverlay(e32, this._context.layer.uid) : this._createAs3DShape(e32, r38, t23.uid);
  }
  applyRendererDiff(e32, t23) {
    for (const r38 in e32.diff) {
      if ("visualVariables" !== r38)
        return e21.RecreateSymbol;
      {
        const e33 = this._fastUpdates;
        if (!G2(e33, t23, V4))
          return e21.RecreateSymbol;
        this._forEachMaterial((t24) => t24.setParameters(e33.materialParameters));
      }
    }
    return e21.FastUpdate;
  }
  prepareSymbolLayerPatch(e32) {
    var _a, _b;
    if ("partial" !== e32.diff.type)
      return;
    const t23 = e32.diff.diff, r38 = {};
    "complete" === ((_a = t23.size) == null ? void 0 : _a.type) && (r38.width = this._computeMaterialWidth(t23.size.newValue), delete t23.size), "complete" === ((_b = t23.cap) == null ? void 0 : _b.type) && (r38.cap = n20(t23.cap.newValue ?? "butt"), delete t23.cap);
    const i20 = this._prepareMarkerPatch(e32, t23);
    this._prepareMaterialPatch(e32, t23, i20), e32.symbolLayerStatePatches.push(() => this._forEachMaterial((e33) => e33.setParameters(r38)));
  }
  layerOpacityChanged() {
    this._forEachMaterial((e32, t23) => this._updateMaterialLayerOpacity(e32, t23));
  }
  _forEachMaterial(e32) {
    null != this._lineMaterialCached && e32(this._lineMaterialCached), null != this._ringMaterialCached && e32(this._ringMaterialCached), null != this._wireframeLineMaterialCached && e32(this._wireframeLineMaterialCached), null != this._wireframeRingMaterialCached && e32(this._wireframeRingMaterialCached), null != this._markerMaterialCached && e32(this._markerMaterialCached, true);
  }
  _updateMaterialLayerOpacity(e32, t23 = false) {
    var _a, _b;
    const r38 = e32.parameters.color, a26 = (_b = (_a = this.symbolLayer) == null ? void 0 : _a.material) == null ? void 0 : _b.color, l33 = this._patternHidesLine && !t23 ? 0 : this._getCombinedOpacity(a26), s27 = r6(r38[0], r38[1], r38[2], l33);
    e32.setParameters({ color: s27 });
  }
  layerElevationInfoChanged(e32, t23, r38) {
    const i20 = this._elevationContext.mode, a26 = d8(_I.elevationModeChangeTypes, r38, i20);
    if (a26 !== T6.UPDATE)
      return a26;
    const l33 = m3(i20);
    return this.updateGraphics3DGraphicElevationInfo(e32, t23, () => l33);
  }
  slicePlaneEnabledChanged() {
    const e32 = { hasSlicePlane: this._context.slicePlaneEnabled };
    return this._forEachMaterial((t23) => t23.setParameters(e32)), true;
  }
  physicalBasedRenderingChanged() {
    return true;
  }
  _getGeometryAsPolygonOrPolyline(e32) {
    switch (e32.type) {
      case "extent":
        if (e32 instanceof M2)
          return j2.fromExtent(e32);
        break;
      case "polygon":
      case "polyline":
        return e32;
    }
    return null;
  }
  _createAs3DShape(e32, t23, r38) {
    const i20 = e32.graphic, a26 = this._getGeometryAsPolygonOrPolyline(i20.geometry), h23 = "polygon" === a26.type ? a26.rings : a26.paths, c34 = new Array(), m15 = i3(), d19 = p14(a26, this._context.elevationProvider, this._context.renderCoordsHelper, t23), _13 = "polygon" === a26.type ? "rings" : "paths";
    this._logGeometryCreationWarnings(d19, h23, _13, "LineSymbol3DLayer");
    for (let l33 = 0; l33 < d19.lines.length; l33++) {
      const t24 = d19.lines[l33], i21 = t24.position, h24 = t24.mapPositions;
      if (null != this._context.clippingExtent && (P2(m15), c5(m15, h24), !V(m15, this._context.clippingExtent)))
        continue;
      const p19 = this._createGeometry("polygon" === a26.type ? this._ringMaterial : this._lineMaterial, e32, i21, h24, a26.type, T8.ELEVATED, r38);
      c34.push(p19), t15.LINE_WIREFRAMES && c34.push(p19.instantiate({ material: "polygon" === a26.type ? this._wireframeRingMaterial : this._wireframeLineMaterial })), null != this._markerMaterial && c34.push(p19.instantiate({ material: this._markerMaterial }));
    }
    if (0 === c34.length)
      return null;
    const u23 = new V3({ geometries: c34, castShadow: false, layerUid: this._context.layer.uid, graphicUid: r38 }), f25 = new p7(this, u23, c34, null, null, I8, t23);
    return f25.alignedSampledElevation = d19.sampledElevation, f25.needsElevationUpdates = m3(t23.mode), f25;
  }
  _createGeometry(e32, t23, r38, i20, a26, l33, s27) {
    var _a, _b, _c;
    const n26 = l33 === T8.DRAPED ? { spatialReference: this._context.overlaySR, renderCoordsHelper: this._context.renderCoordsHelper } : null, o27 = "polygon" === a26, h23 = (_a = this._fastUpdates) == null ? void 0 : _a.visualVariables.color, c34 = (_b = this._fastUpdates) == null ? void 0 : _b.visualVariables.size, p19 = (_c = this._fastUpdates) == null ? void 0 : _c.visualVariables.opacity, m15 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: s27, layerUid: this._context.layer.uid }), d19 = { position: r38, size: c34 ? null : this._getDrivenSize(t23.renderingInfo), color: h23 ? null : this._getDrivenColor(t23.renderingInfo), sizeFeature: c34 ? X(c34.field, t23.graphic) : null, colorFeature: h23 ? X(h23.field, t23.graphic) : null, opacityFeature: p19 ? X(p19.field, t23.graphic) : null };
    return h11(e32, { overlayInfo: n26, removeDuplicateStartEnd: o27, mapPositions: i20, attributeData: d19 }, m15);
  }
  _createAsOverlay(e32, t23) {
    const r38 = e32.graphic, i20 = this._getGeometryAsPolygonOrPolyline(r38.geometry), a26 = "polygon" === i20.type ? i20.rings : i20.paths, c34 = "polygon" === i20.type ? this._ringMaterial : this._lineMaterial;
    c34.renderPriority = this._renderPriority;
    const p19 = t15.LINE_WIREFRAMES ? "polygon" === i20.type ? this._wireframeRingMaterial : this._wireframeLineMaterial : null, m15 = this._markerMaterial;
    null != p19 && (p19.renderPriority = this._renderPriority - 1e-3), null != m15 && (m15.renderPriority = this._renderPriority - 2e-3);
    const d19 = new Array(), y12 = i3(), _13 = P2(), g16 = l26(i20, this._context.overlaySR), f25 = "polygon" === i20.type ? "rings" : "paths";
    this._logGeometryCreationWarnings(g16, a26, f25, "LineSymbol3DLayer");
    for (const l33 of g16.lines) {
      if (P2(y12), c5(y12, l33.position), !V(y12, this._context.clippingExtent))
        continue;
      o2(_13, y12);
      const a27 = (a28) => {
        const s27 = this._createGeometry(a28, e32, l33.position, void 0, i20.type, T8.DRAPED, r38.uid), n26 = new a13(s27, { layerUid: t23, graphicUid: r38.uid });
        d19.push(n26);
      };
      if (null != m15) {
        a27(m15);
        const e33 = this.symbolLayer.marker.placement;
        "begin" !== e33 && "begin-end" !== e33 || c5(y12, l33.position, 0, 1), "end" !== e33 && "begin-end" !== e33 || c5(y12, l33.position, l33.position.length - 3, 1);
      }
      a27(c34), t15.LINE_WIREFRAMES && a27(p19);
    }
    return new u16(this, d19, _13, this._context.drapeSourceRenderer);
  }
  get _patternHidesLine() {
    const e32 = this.symbolLayer.pattern;
    return null != e32 && "style" === e32.type && "none" === e32.style;
  }
  _computeMaterialWidth(e32) {
    var _a;
    return e32 = e32 ?? e8(1), this._drivenProperties.size ? ((_a = this._fastUpdates) == null ? void 0 : _a.visualVariables.size) ? u4(1) : 1 : u4(e32);
  }
  _prepareMaterialPatch(e32, t23, r38) {
    var _a, _b;
    const i20 = t23.material;
    if (null == i20)
      return void (r38.changed && r38.useMaterialColor && this._patchMaterialColor(this._getCombinedOpacityAndColor(this._materialColor), this._markerMaterialCached, e32));
    if ("collection" === i20.type)
      return;
    const l33 = "complete" === i20.type ? (_a = i20.newValue) == null ? void 0 : _a.color : "complete" === ((_b = i20.diff.color) == null ? void 0 : _b.type) ? i20.diff.color.newValue : null, s27 = this._getCombinedOpacityAndColor(l33);
    r38.useMaterialColor && this._patchMaterialColor(t3(s27), this._markerMaterialCached, e32), this._patternHidesLine && (s27[3] = 0), this._patchMaterialColor(s27, this._lineMaterialCached, e32), delete t23.material;
  }
  _prepareMarkerPatch(e32, t23) {
    var _a;
    const r38 = t23.marker, i20 = this._markerMaterial;
    if (null == r38 || "partial" !== r38.type || null == r38.diff || null != r38.diff.placement || null != r38.diff.style && "complete" !== r38.diff.style.type || null != r38.diff.color && "complete" !== r38.diff.color.type || null == i20)
      return { changed: false, useMaterialColor: null == this._markerColor };
    const a26 = r38.diff.color, l33 = null != a26, s27 = l33 ? a26.newValue : null, n26 = null == s27 && null == this._markerColor;
    s27 && this._patchMaterialColor(this._getCombinedOpacityAndColor(s27), i20, e32);
    const o27 = (_a = r38.diff.style) == null ? void 0 : _a.newValue;
    return o27 && e32.symbolLayerStatePatches.push(() => i20.setParameters({ markerPrimitive: r30(o27) })), delete t23.marker, { changed: l33, useMaterialColor: n26 };
  }
  _patchMaterialColor(e32, t23, r38) {
    null != t23 && r38.symbolLayerStatePatches.push(() => t23.setParameters({ color: e32 }));
  }
};
var T8;
I10.elevationModeChangeTypes = { definedChanged: T6.RECREATE, staysOnTheGround: T6.NONE, onTheGroundChanged: T6.RECREATE }, function(e32) {
  e32[e32.DRAPED = 0] = "DRAPED", e32[e32.ELEVATED = 1] = "ELEVATED";
}(T8 || (T8 = {}));

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DMeshObject3DGraphicLayer.js
s.getLogger("esri.views.3d.layers.graphics.Graphics3DMeshObject3DGraphicLayer");
var d14 = class extends p7 {
  constructor() {
    super(...arguments), this._originalGeometries = [], this._fastTransformUpdatesEnabled = false;
  }
  get fastTransformUpdatesEnabled() {
    return this._fastTransformUpdatesEnabled;
  }
  enableFastTransformUpdates(t23, r38) {
    if (this._fastTransformUpdatesEnabled)
      return;
    this._fastTransformUpdatesEnabled = true;
    const { stageObject: a26 } = this, s27 = a26.geometries.slice();
    a26.removeAllGeometries();
    const o27 = I(p15, a26.transformation), i20 = r38.getOrigin(o27);
    for (const e32 of s27) {
      const r39 = t23(e32.material), s28 = e32.instantiate({ material: r39 });
      s28.localOrigin = i20, a26.addGeometry(s28);
    }
    this._originalGeometries = s27;
  }
  disableFastTransformUpdates(t23) {
    if (!this._fastTransformUpdatesEnabled)
      return;
    this._fastTransformUpdatesEnabled = false;
    const { stageObject: e32 } = this, r38 = e32.geometries.map((e33) => t23(e33.material));
    e32.removeAllGeometries();
    for (let a26 = 0; a26 < this._originalGeometries.length; a26++) {
      const t24 = this._originalGeometries[a26], s27 = r38[a26];
      s27.setParameters({ modelTransformation: null }), s27 === t24.material ? e32.addGeometry(t24) : e32.addGeometry(t24.instantiate({ material: s27 }));
    }
    this._originalGeometries.length = 0;
  }
  updateFastLocalOrigin(t23, r38, a26) {
    if (!this._fastTransformUpdatesEnabled)
      return;
    const { stageObject: s27 } = this;
    if (0 === s27.geometries.length)
      return;
    const o27 = s27.geometries[0].localOrigin, n26 = I(p15, t23), m15 = a26.getOrigin(n26);
    if (m15 === o27)
      return;
    const f25 = (r38 == null ? void 0 : r38.localMatrix) ?? o5;
    s27.clearShaderTransformation(), s27.transformation = t23, s27.geometries.forEach((t24) => {
      t24.transformation = f25, t24.localOrigin = m15;
    });
  }
  updateTransform(t23, e32, a26) {
    const { stageObject: s27 } = this, o27 = (e32 == null ? void 0 : e32.localMatrix) ?? o5;
    if (!this._fastTransformUpdatesEnabled)
      return s27.clearShaderTransformation(), s27.transformation = t23, s27.geometries.forEach((t24) => {
        t24.transformation = o27;
      }), void this.resetEdgeObject(a26);
    const n26 = s27.transformation, m15 = s27.geometries[0].transformation, f25 = t23, l33 = o27, c34 = c6(T9, n26, m15), h23 = c6(b7, f25, l33);
    s27.shaderTransformation = f25, this._setFastMaterialTransformation({ matA: c34, matB: h23 });
    const g16 = () => l33;
    for (const r38 of s27.geometries)
      r38.shaderTransformer = g16;
    this.resetEdgeObject(a26);
  }
  alignWithElevation(t23, e32, s27, o27) {
    if (!this._fastTransformUpdatesEnabled)
      return void super.alignWithElevation(t23, e32, s27, o27);
    null != s27 && l17(this.elevationContext.featureExpressionInfoContext, s27);
    const i20 = (r38, a26) => c18(r38, t23, this.elevationContext, e32, a26), { stageObject: n26 } = this;
    if (!n26.geometries[0].material.parameters.modelTransformation)
      return;
    const m15 = n26.transformation, f25 = n26.geometries[0].transformation, g16 = c6(T9, m15, f25), d19 = n4(u17, n26.shaderTransformation);
    this.alignedSampledElevation = p6(this, this.elevationContext, t23.spatialReference, i20, e32, d19), n26.shaderTransformation = d19;
    const p19 = n26.geometries[0].shaderTransformation, j13 = c6(b7, d19, p19);
    this._setFastMaterialTransformation({ matA: g16, matB: j13 }), this.resetEdgeObject(o27);
  }
  _setFastMaterialTransformation({ matA: t23, matB: e32 }) {
    const { stageObject: a26 } = this;
    if (0 === a26.geometries.length)
      return;
    const i20 = a26.geometries[0].localOrigin, n26 = q2(O11, g(p15, i20.vec3, -1)), f25 = c6(j6, n26, t23), l33 = c6(E9, n26, e32), c34 = h3(j6, f25), h23 = c6(E9, l33, c34);
    for (const r38 of a26.geometries)
      r38.material.setParameters({ modelTransformation: h23 });
  }
};
var p15 = n2();
var T9 = e12();
var b7 = e12();
var u17 = e12();
var j6 = e12();
var E9 = e12();
var O11 = e12();

// node_modules/@arcgis/core/views/3d/layers/graphics/MeshFastUpdateProcessor.js
var e25 = class {
  constructor() {
    this._fastTransformOriginalMaterials = /* @__PURE__ */ new Map(), this._fastTransformClonedMaterials = /* @__PURE__ */ new Map(), this._graphicReferenceCount = 0;
  }
  enable(e32, r38, t23) {
    e32.enableFastTransformUpdates((e33) => {
      if (this._graphicReferenceCount <= 1) {
        if (this._fastTransformOriginalMaterials.has(e33))
          return e33;
        const a26 = r38.byMaterial(e33);
        return this._fastTransformOriginalMaterials.set(e33, a26), r38.delete(e33), e33;
      }
      const s27 = new I5(e33.parameters);
      return t23.stage.add(s27), this._fastTransformClonedMaterials.set(s27, e33), s27;
    }, t23.localOriginFactory);
  }
  disable(a26, e32, r38) {
    const t23 = /* @__PURE__ */ new Set(), s27 = /* @__PURE__ */ new Set();
    a26.disableFastTransformUpdates((a27) => {
      if (!this._fastTransformClonedMaterials.has(a27)) {
        const r39 = a27, i21 = this._fastTransformOriginalMaterials.get(r39);
        return e32.has(i21.uid) ? (t23.add(r39), e32.byUid(i21.uid).material) : (s27.add(r39), i21.material);
      }
      const i20 = a27, n26 = this._fastTransformClonedMaterials.get(i20);
      return this._fastTransformClonedMaterials.delete(i20), r38.stage.remove(i20), i20.dispose(), n26;
    });
    for (const i20 of t23)
      this._fastTransformOriginalMaterials.delete(i20), r38.stage.remove(i20), i20.dispose();
    for (const i20 of s27) {
      const a27 = this._fastTransformOriginalMaterials.get(i20);
      this._fastTransformOriginalMaterials.delete(i20), e32.set(a27.uid, a27);
    }
  }
  onAddGraphic() {
    this._graphicReferenceCount++;
  }
  onRemoveGraphic(a26, e32, r38) {
    this._graphicReferenceCount--, this.disable(a26, e32, r38);
  }
  forEachMaterialInfo(a26) {
    this._fastTransformOriginalMaterials.forEach(a26);
  }
  forEachClonedMaterial(a26) {
    this._fastTransformClonedMaterials.forEach(a26);
  }
  destroy(a26) {
    a26.removeMany(Array.from(this._fastTransformClonedMaterials.keys())), a26.removeMany(Array.from(this._fastTransformOriginalMaterials.values(), ({ material: a27 }) => a27)), this._fastTransformClonedMaterials.clear(), this._fastTransformOriginalMaterials.clear();
  }
};
var r31 = class {
  constructor() {
    this._byUid = /* @__PURE__ */ new Map(), this._byMaterial = /* @__PURE__ */ new Map();
  }
  get materials() {
    return Array.from(this._byUid.values(), (a26) => a26.material);
  }
  byUid(a26) {
    return this._byUid.get(a26);
  }
  byMaterial(a26) {
    return this._byMaterial.get(a26);
  }
  set(a26, e32) {
    this._byUid.set(a26, e32), this._byMaterial.set(e32.material, e32);
  }
  delete(a26) {
    var _a;
    const e32 = (_a = this._byMaterial.get(a26)) == null ? void 0 : _a.uid;
    e32 && (this._byUid.delete(e32), this._byMaterial.delete(a26));
  }
  has(a26) {
    return this._byUid.has(a26);
  }
  forEachMaterialInfo(a26) {
    this._byUid.forEach(a26);
  }
  clear() {
    this._byUid.clear(), this._byMaterial.clear();
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DMeshFillSymbolLayer.js
var be2 = ["mesh"];
var ye2 = class extends h13 {
  constructor(e32, t23, r38, o27) {
    super(e32, t23, r38, o27), this._materialInfoCache = new r31(), this._fastUpdateProcessor = new e25(), this._textures = /* @__PURE__ */ new Map(), this.ensureDrapedStatus(false);
  }
  async doLoad() {
    t15.DRAW_MESH_GEOMETRY_NORMALS && (this._debugVertexNormalMaterial = new X3({ color: [1, 0, 1, 1] }), this._debugFaceNormalMaterial = new X3({ color: [0, 1, 1, 1] }));
  }
  destroy() {
    super.destroy(), this._context.stage.removeMany(this._materialInfoCache.materials), this._context.stage.removeMany(Array.from(this._textures.values())), this._materialInfoCache.clear(), this._textures.clear(), this._fastUpdateProcessor.destroy(this._context.stage);
  }
  createGraphics3DGraphic(e32) {
    const t23 = e32.graphic;
    if (!this._validateGeometry(t23.geometry, be2, "fill on mesh-3d"))
      return null;
    const r38 = this.setGraphicElevationContext(t23, new o12()), o27 = e32.renderingInfo;
    return this._createAs3DShape(t23, o27, r38, t23.uid);
  }
  onRemoveGraphic(e32) {
    this._fastUpdateProcessor.onRemoveGraphic(e32, this._materialInfoCache, this._context);
  }
  layerOpacityChanged(e32, t23) {
    const r38 = this._getLayerOpacity();
    this._updateMaterialParameters((e33) => {
      e33.material.setParameters({ layerOpacity: r38 });
      const t24 = e33.material.parameters;
      this._setMaterialTransparentParameter(t24, e33), e33.material.setParameters({ transparent: t24.transparent });
    }), e32.forEach((e33) => {
      const o27 = t23(e33);
      null != o27 && o27.layerOpacityChanged(r38, this._context.isAsync);
    });
  }
  layerElevationInfoChanged(e32, t23) {
    return this.updateGraphics3DGraphicElevationInfo(e32, t23, p5);
  }
  slicePlaneEnabledChanged(e32, t23) {
    return this._updateMaterialParameters(({ material: e33 }) => {
      e33.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled });
    }), e32.forEach((e33) => {
      const r38 = t23(e33);
      null != r38 && r38.slicePlaneEnabledChanged(this._context.slicePlaneEnabled, this._context.isAsync);
    }), true;
  }
  physicalBasedRenderingChanged() {
    const e32 = this._usePBR();
    return this._updateMaterialParameters(({ material: t23 }) => t23.setParameters({ usePBR: e32 })), true;
  }
  updateTransform(e32, t23, r38, o27) {
    const a26 = this._context.renderCoordsHelper.spatialReference, n26 = Ie, { origin: s27, transform: i20 } = r38;
    switch (zn(t23, o(Oe, s27.x, s27.y, s27.z ?? 0), n26, a26), o27) {
      case a15.EnableFastUpdates:
        this._fastUpdateProcessor.enable(e32, this._materialInfoCache, this._context);
        break;
      case a15.DisableFastUpdates:
        this._fastUpdateProcessor.disable(e32, this._materialInfoCache, this._context);
        break;
      case a15.UpdateFastLocalOrigin:
        e32.updateFastLocalOrigin(n26, i20, this._context.localOriginFactory);
    }
    const { elevationContext: l33 } = e32;
    l33.centerPointInElevationSR = this._getCenterPointInElevationSR(n26);
    const { elevationProvider: u23, renderCoordsHelper: c34 } = this._context, h23 = (e33, t24) => c18(e33, u23, l33, c34, t24);
    return e32.alignedSampledElevation = p6(e32, l33, u23.spatialReference, h23, c34, n26), e32.updateTransform(n26, i20, this._context.isAsync), true;
  }
  _requiresSymbolVertexColors() {
    return this._drivenProperties.color || this._drivenProperties.opacity;
  }
  _colorOrTextureUid(t23) {
    return null == t23 ? "-" : t23 instanceof h4 ? t23.toHex() : t23.contentHash;
  }
  _materialPropertiesDefault(e32, t23) {
    const r38 = this._requiresSymbolVertexColors(), o27 = !!e32.vertexAttributes.color, a26 = !!e32.vertexAttributes.tangent;
    return { hasSymbolVertexColors: r38, hasVertexColors: o27, hasVertexTangents: a26, uid: `vc:${o27},vt:${a26},vct${t23},svc:${r38}` };
  }
  _textureTransformUid(e32) {
    const { offset: t23, scale: r38, rotation: o27 } = e32 ?? Ne;
    return `${t23[0]},${t23[1]},${o27},${r38[0]},${r38[1]}`;
  }
  _materialProperties(e32, t23, r38) {
    const o27 = this._materialPropertiesDefault(e32, r38);
    if (!t23.material)
      return o27;
    const { color: a26, colorTexture: n26, colorTextureTransform: s27, normalTexture: i20, normalTextureTransform: l33, doubleSided: u23, alphaCutoff: c34, alphaMode: m15 } = t23.material, h23 = this._colorOrTextureUid(a26), f25 = this._colorOrTextureUid(n26), p19 = this._textureTransformUid(s27), d19 = this._colorOrTextureUid(i20), g16 = this._textureTransformUid(l33);
    if (o27.color = a26, o27.colorTexture = n26, o27.normalTexture = i20, o27.uid = `${o27.uid},cmuid:${h23},ctmuid:${f25},cttuid:${p19},ntmuid:${d19},nttuid:${g16},ds:${u23},ac:${c34},am:${m15}`, t23.material instanceof c12) {
      const { metallic: e33, roughness: r39, metallicRoughnessTexture: a27, metallicRoughnessTextureTransform: n27, emissiveColor: i21, emissiveTexture: u24, emissiveTextureTransform: c35, occlusionTexture: m16, occlusionTextureTransform: h24 } = t23.material, f26 = this._colorOrTextureUid(a27), p20 = this._textureTransformUid(n27), d20 = this._colorOrTextureUid(i21), g17 = this._colorOrTextureUid(u24), x10 = this._textureTransformUid(c35), _13 = this._colorOrTextureUid(m16), T11 = this._textureTransformUid(h24);
      o27.metallic = e33, o27.roughness = r39, o27.metallicRoughnessTexture = a27, o27.emissiveColor = i21, o27.emissiveTexture = u24, o27.occlusionTexture = m16, o27.colorTextureTransform = this._convertTextureTransform(s27), o27.normalTextureTransform = this._convertTextureTransform(l33), o27.emissiveTextureTransform = this._convertTextureTransform(c35), o27.occlusionTextureTransform = this._convertTextureTransform(h24), o27.metallicRoughnessTextureTransform = this._convertTextureTransform(n27), o27.uid = `${o27.uid},mrm:${e33},mrr:${r39},mrt:${f26},mrtt:${p20},emuid:${d20},etmuid:${g17},ett:${x10},otmuid:${_13},ott:${T11}`;
    }
    return o27;
  }
  _convertTextureTransform(e32) {
    if (!e32)
      return null;
    const { scale: r38, offset: o27, rotation: a26 } = e32;
    return { scale: r38, offset: o27, rotation: M(a26) };
  }
  _setInternalColorValueParameters(t23, r38) {
    r38.diffuse = h4.toUnitRGB(t23), r38.opacity = t23.a;
  }
  _getLoadableTextureResource(e32) {
    return e32.data ? e32.data : e32.url;
  }
  _getInternalTextureId(e32) {
    const t23 = this._getInternalTexture(e32, i9.Opaque);
    return null != t23 ? t23.id : null;
  }
  _getInternalTexture(e32, t23) {
    const r38 = this._getLoadableTextureResource(e32);
    if (!r38)
      return null;
    const o27 = `${e32.contentHash}/${t23}`;
    let a26 = this._textures.get(o27);
    return a26 || (a26 = new w3(t11(r38) ? r38.data : r38, { mipmap: true, wrap: this._castTextureWrap(e32.wrap), noUnpackFlip: true, preMultiplyAlpha: !t11(r38) && t23 !== i9.Opaque, encoding: t11(r38) && null != r38.encoding ? r38.encoding : void 0 }), this._textures.set(o27, a26), this._context.stage.add(a26), this._context.stage.loadImmediate(a26)), a26;
  }
  _castTextureWrap(e32 = "repeat") {
    if ("string" == typeof e32) {
      const t23 = this._castTextureWrapIndividual(e32);
      return { s: t23, t: t23 };
    }
    return { s: this._castTextureWrapIndividual(e32.horizontal), t: this._castTextureWrapIndividual(e32.vertical) };
  }
  _castTextureWrapIndividual(e32) {
    switch (e32) {
      case "clamp":
        return D2.CLAMP_TO_EDGE;
      case "mirror":
        return D2.MIRRORED_REPEAT;
      default:
        return D2.REPEAT;
    }
  }
  _setInternalMaterialParameters(t23, r38) {
    if (null != t23.color && this._setInternalColorValueParameters(t23.color, r38), null != t23.colorTexture) {
      const e32 = this._getInternalTexture(t23.colorTexture, r38.textureAlphaMode);
      null != e32 ? (r38.textureId = e32.id, r38.textureAlphaPremultiplied = !!e32.parameters.preMultiplyAlpha) : r38.textureId = void 0;
    }
    null != t23.normalTexture && (r38.normalTextureId = this._getInternalTextureId(t23.normalTexture)), null != t23.emissiveColor && (r38.emissiveFactor = h4.toUnitRGB(t23.emissiveColor)), null != t23.emissiveTexture && (r38.emissiveTextureId = this._getInternalTextureId(t23.emissiveTexture)), null != t23.occlusionTexture && (r38.occlusionTextureId = this._getInternalTextureId(t23.occlusionTexture)), null != t23.metallicRoughnessTexture && (r38.metallicRoughnessTextureId = this._getInternalTextureId(t23.metallicRoughnessTexture)), r38.colorTextureTransformMatrix = r13(t23.colorTextureTransform), r38.normalTextureTransformMatrix = r13(t23.normalTextureTransform), r38.occlusionTextureTransformMatrix = r13(t23.occlusionTextureTransform), r38.emissiveTextureTransformMatrix = r13(t23.emissiveTextureTransform), r38.metallicRoughnessTextureTransformMatrix = r13(t23.metallicRoughnessTextureTransform);
  }
  _setExternalMaterialParameters(t23) {
    const r38 = this._drivenProperties.color;
    let o27 = null != this.symbolLayer.material ? this.symbolLayer.material.colorMixMode : null;
    if (r38)
      t23.externalColor = _3;
    else {
      const r39 = null != this.symbolLayer.material ? this.symbolLayer.material.color : null;
      null != r39 ? t23.externalColor = h4.toUnitRGBA(r39) : (o27 = null, t23.externalColor = _3);
    }
    o27 && (t23.colorMixMode = o27), t23.castShadows = !!this.symbolLayer.castShadows;
  }
  _hasTransparentVertexColors(e32) {
    const t23 = e32.vertexAttributes.color;
    if (null == t23)
      return false;
    for (let r38 = 3; r38 < t23.length; r38 += 4)
      if (255 !== t23[r38])
        return true;
    return false;
  }
  _getOrCreateMaterial(t23, r38) {
    var _a, _b, _c;
    const o27 = (_a = r38.material) == null ? void 0 : _a.color, a26 = (_b = r38.material) == null ? void 0 : _b.colorTexture, n26 = (_c = r38.material) == null ? void 0 : _c.alphaMode, s27 = "blend" === n26, i20 = !("opaque" === n26) && (this._hasTransparentVertexColors(t23) || null != o27 && o27.a < 1 || null != a26 && a26.transparent || s27), l33 = this._materialProperties(t23, r38, i20), u23 = this._materialInfoCache.byUid(l33.uid);
    if (u23)
      return u23.material;
    const c34 = { uid: l33.uid, material: null, isComponentTransparent: i20, alphaMode: r38.material ? r38.material.alphaMode : "opaque" }, m15 = u8({ normalTexture: l33.normalTexture, metallicRoughnessTexture: l33.metallicRoughnessTexture, metallicFactor: l33.metallic, roughnessFactor: l33.roughness, emissiveTexture: l33.emissiveTexture, emissiveFactor: h4.toUnitRGB(l33.emissiveColor), occlusionTexture: l33.occlusionTexture }), h23 = { usePBR: this._usePBR(), isSchematic: m15, hasVertexColors: l33.hasVertexColors, hasSymbolColors: l33.hasSymbolVertexColors, hasVertexTangents: l33.hasVertexTangents, ambient: f3, diffuse: l2, opacity: 1, doubleSided: true, doubleSidedType: "winding-order", cullFace: n9.None, layerOpacity: this._getLayerOpacity(), hasSlicePlane: this._context.slicePlaneEnabled, initTextureTransparent: true };
    h23.mrrFactors = m15 ? [...r16] : [l33.metallic, l33.roughness, n10[2]], r38.material && (h23.doubleSided = r38.material.doubleSided, h23.cullFace = r38.material.doubleSided ? n9.None : n9.Back, h23.textureAlphaCutoff = r38.material.alphaCutoff), this._setExternalMaterialParameters(h23), this._setMaterialTransparentParameter(h23, c34), this._setInternalMaterialParameters(l33, h23);
    const f25 = new I5(h23);
    return c34.material = f25, this._materialInfoCache.set(l33.uid, c34), this._context.stage.add(f25), f25;
  }
  _usePBR() {
    return this._context.physicalBasedRenderingEnabled;
  }
  _setMaterialTransparentParameter(e32, t23) {
    e32.transparent = this.needsDrivenTransparentPass || t23.isComponentTransparent || e32.layerOpacity < 1 || e32.opacity < 1 || e32.externalColor && e32.externalColor[3] < 1, "auto" === t23.alphaMode ? e32.textureAlphaMode = e32.transparent ? i9.MaskBlend : i9.Opaque : e32.textureAlphaMode = "opaque" === t23.alphaMode ? i9.Opaque : "mask" === t23.alphaMode ? i9.Mask : i9.Blend;
  }
  _addDebugNormals(e32, t23) {
    const r38 = t23.length, o27 = e32.spatialReference.isGeographic ? 20015077 / 180 : 1, a26 = 0.1 * Math.max(e32.extent.width * o27, e32.extent.height * o27, e32.extent.zmax - e32.extent.zmin), n26 = [], s27 = [], i20 = [], l33 = [];
    for (let p19 = 0; p19 < r38; p19++) {
      const e33 = t23[p19], r39 = e33.vertexAttributes.get(O3.POSITION), o28 = e33.vertexAttributes.get(O3.NORMAL), u24 = e33.indices.get(O3.POSITION), c35 = e33.indices.get(O3.NORMAL), m16 = r39.data, d19 = o28.data;
      for (let t24 = 0; t24 < u24.length; t24++) {
        const e34 = 3 * u24[t24], r40 = 3 * c35[t24];
        for (let t25 = 0; t25 < 3; t25++)
          n26.push(m16[e34 + t25]);
        for (let t25 = 0; t25 < 3; t25++)
          n26.push(m16[e34 + t25] + d19[r40 + t25] * a26);
        if (s27.push(s27.length), s27.push(s27.length), t24 % 3 == 0) {
          this._calculateFaceNormal(m16, u24, t24, je2), this._getFaceVertices(m16, u24, t24, Oe, we, Me), u(Oe, Oe, we), u(Oe, Oe, Me), g(Oe, Oe, 1 / 3);
          for (let e35 = 0; e35 < 3; e35++)
            i20.push(Oe[e35]);
          for (let e35 = 0; e35 < 3; e35++)
            i20.push(Oe[e35] + je2[e35] * a26);
          l33.push(l33.length), l33.push(l33.length);
        }
      }
    }
    const u23 = t23[0].transformation, c34 = new b4(this._debugVertexNormalMaterial, [[O3.POSITION, new s9(n26, 3, true)]], [[O3.POSITION, s27]], null, e15.Line);
    t23.push(c34), c34.transformation = u23;
    const m15 = new b4(this._debugFaceNormalMaterial, [[O3.POSITION, new s9(i20, 3, true)]], [[O3.POSITION, l33]], null, e15.Line);
    m15.transformation = u23, t23.push(m15);
  }
  _createAs3DShape(e32, t23, r38, o27) {
    const a26 = e32.geometry;
    if ("mesh" !== a26.type)
      return null;
    const n26 = this._createGeometryInfo(a26, t23, o27);
    if (null == n26)
      return null;
    const { geometries: s27, objectTransformation: i20 } = n26;
    t15.DRAW_MESH_GEOMETRY_NORMALS && this._addDebugNormals(a26, s27);
    const l33 = new V3({ geometries: s27, layerUid: this._context.layer.uid, graphicUid: o27 });
    l33.transformation = i20;
    const u23 = u7(this.symbolLayer, { opacity: this._getLayerOpacity() }), c34 = null != u23 ? new m5(s27[0].material, [u23], { mergeGeometries: true, hasSlicePlane: this._context.slicePlaneEnabled }) : null, m15 = new d14(this, l33, s27, null, null, p6, r38, c34);
    this._fastUpdateProcessor.onAddGraphic(), m15.needsElevationUpdates = p5(r38.mode), m15.useObjectOriginAsAttachmentOrigin = true, r38.centerPointInElevationSR = this._getCenterPointInElevationSR(l33.transformation);
    const { elevationProvider: h23, renderCoordsHelper: f25 } = this._context, p19 = (e33, t24) => c18(e33, h23, r38, f25, t24);
    return m15.alignedSampledElevation = p6(m15, r38, h23.spatialReference, p19, f25), m15;
  }
  _getCenterPointInElevationSR(e32) {
    const t23 = Z(0, 0, 0, null != this._context.elevationProvider.spatialReference ? this._context.elevationProvider.spatialReference : null);
    return Fn([e32[12], e32[13], e32[14]], this._context.renderCoordsHelper.spatialReference, t23), t23;
  }
  _createComponentNormals(e32, t23, r38, o27) {
    switch (r38.shading || "flat") {
      default:
      case "source":
        return this._createComponentNormalsSource(e32, t23, r38, o27);
      case "flat":
        return this._createComponentNormalsFlat(e32, o27);
      case "smooth":
        return this._createComponentNormalsSmooth(e32, o27);
    }
  }
  _createComponentNormalsSource(e32, t23, r38, o27) {
    if (null == t23)
      return this._createComponentNormalsFlat(e32, o27);
    let a26 = false;
    if (!r38.trustSourceNormals)
      for (let n26 = 0; n26 < o27.length; n26 += 3) {
        this._calculateFaceNormal(e32, o27, n26, je2);
        for (let e33 = 0; e33 < 3; e33++) {
          const r39 = 3 * o27[n26 + e33];
          Oe[0] = t23[r39], Oe[1] = t23[r39 + 1], Oe[2] = t23[r39 + 2], P(je2, Oe) < 0 && (t23[r39] = -t23[r39], t23[r39 + 1] = -t23[r39 + 1], t23[r39 + 2] = -t23[r39 + 2], a26 = true);
        }
      }
    return new ve(t23, o27, a26);
  }
  _createComponentNormalsFlat(e32, t23) {
    const r38 = t12(t23.length), o27 = new Array(3 * t23.length);
    for (let a26 = 0; a26 < t23.length; a26 += 3) {
      const n26 = this._calculateFaceNormal(e32, t23, a26, je2);
      for (let e33 = 0; e33 < 3; e33++)
        r38[a26 + e33] = n26[e33], o27[a26 + e33] = a26 / 3;
    }
    return new ve(r38, o27, false);
  }
  _createComponentNormalsSmooth(e32, t23) {
    const r38 = {};
    for (let n26 = 0; n26 < t23.length; n26 += 3) {
      const o28 = this._calculateFaceNormal(e32, t23, n26, je2);
      for (let e33 = 0; e33 < 3; e33++) {
        const a27 = t23[n26 + e33];
        let s27 = r38[a27];
        s27 || (s27 = { normal: n2(), count: 0 }, r38[a27] = s27), u(s27.normal, s27.normal, o28), s27.count++;
      }
    }
    const o27 = t12(3 * t23.length), a26 = new Array(3 * t23.length);
    for (let n26 = 0; n26 < t23.length; n26++) {
      const e33 = r38[t23[n26]];
      1 !== e33.count && (z(e33.normal, e33.normal), e33.count = 1);
      for (let t24 = 0; t24 < 3; t24++)
        o27[3 * n26 + t24] = e33.normal[t24];
      a26[n26] = n26;
    }
    return new ve(o27, a26, false);
  }
  _getFaceVertices(e32, t23, r38, o27, a26, n26) {
    const s27 = 3 * t23[r38], i20 = 3 * t23[r38 + 1], l33 = 3 * t23[r38 + 2];
    o27[0] = e32[s27], o27[1] = e32[s27 + 1], o27[2] = e32[s27 + 2], a26[0] = e32[i20], a26[1] = e32[i20 + 1], a26[2] = e32[i20 + 2], n26[0] = e32[l33], n26[1] = e32[l33 + 1], n26[2] = e32[l33 + 2];
  }
  _calculateFaceNormal(e32, t23, r38, o27) {
    return this._getFaceVertices(e32, t23, r38, Oe, we, Me), e6(we, we, Oe), e6(Me, Me, Oe), _(Oe, we, Me), z(o27, Oe), o27;
  }
  _getOrCreateComponents(e32) {
    return e32.components ?? Ee;
  }
  _createPositionBuffer(e32, t23) {
    let r38 = e32.vertexAttributes.position;
    const o27 = t23.reprojection === Fe.ECEF ? t23.transformBeforeProject : null;
    if (null != o27 && (r38 = r11(new Float64Array(r38.length), r38, o27)), t23.reprojection === Fe.NONE)
      return t23.needsBufferCopy ? new Float64Array(r38) : r38;
    const a26 = null != o27 ? r38 : new Float64Array(r38.length);
    return yn(r38, e32.spatialReference, 0, a26, this._context.renderCoordsHelper.spatialReference, 0, r38.length / 3), a26;
  }
  _createNormalBuffer(e32, t23, r38) {
    let o27 = e32.vertexAttributes.normal;
    if (null == o27)
      return null;
    const a26 = r38.reprojection === Fe.ECEF ? r38.transformBeforeProject : null;
    null != a26 && (o27 = M4(o27, new Float32Array(o27.length), a26));
    if ("local" === this._context.graphicsCoreOwner.view.viewingMode || r38.reprojection === Fe.NONE)
      return r38.needsBufferCopy && e32.vertexAttributes.normal === o27 ? new Float32Array(o27) : o27;
    const n26 = e32.vertexAttributes.position, s27 = null != a26 ? o27 : new Float32Array(o27.length);
    return _5(o27, n26, t23, e32.spatialReference, s27);
  }
  _createTangentBuffer(e32, t23, r38) {
    let o27 = e32.vertexAttributes.tangent;
    if (null == o27)
      return null;
    const a26 = r38.reprojection === Fe.ECEF ? r38.transformBeforeProject : null;
    null != a26 && (o27 = O4(o27, new Float32Array(o27.length), a26));
    if ("local" === this._context.graphicsCoreOwner.view.viewingMode || r38.reprojection === Fe.NONE)
      return r38.needsBufferCopy && e32.vertexAttributes.normal === o27 ? new Float32Array(o27) : o27;
    const n26 = e32.vertexAttributes.position, s27 = null != a26 ? o27 : new Float32Array(o27.length);
    return R3(o27, n26, t23, e32.spatialReference, s27);
  }
  _createColorBuffer(e32) {
    return e32.vertexAttributes.color;
  }
  _createSymbolColorBuffer(e32) {
    var _a, _b;
    if (this._requiresSymbolVertexColors()) {
      const t23 = this._getVertexOpacityAndColor(e32), r38 = e14((_b = (_a = this.symbolLayer) == null ? void 0 : _a.material) == null ? void 0 : _b.colorMixMode), o27 = new Uint8Array(4);
      return r12(t23, r38, o27), o27;
    }
    return null;
  }
  _createBuffers(e32, t23) {
    const r38 = e32.vertexAttributes && e32.vertexAttributes.position;
    if (!r38)
      return this.logger.warn("Mesh geometry must contain position vertex attributes"), null;
    const o27 = e32.vertexAttributes.normal, a26 = e32.vertexAttributes.uv, n26 = e32.vertexAttributes.tangent;
    if (null != o27 && o27.length !== r38.length)
      return this.logger.warn("Mesh normal vertex buffer must contain the same number of elements as the position buffer"), null;
    if (null != n26 && n26.length / 4 != r38.length / 3)
      return this.logger.warn("Mesh tangent vertex buffer must contain the same number of elements as the position buffer"), null;
    if (null != a26 && a26.length / 2 != r38.length / 3)
      return this.logger.warn("Mesh uv vertex buffer must contain the same number of elements as the position buffer"), null;
    const s27 = this._computeReprojectionInfo(e32), i20 = this._createPositionBuffer(e32, s27), u23 = this._createColorBuffer(e32), c34 = this._createSymbolColorBuffer(t23), m15 = this._createNormalBuffer(e32, i20, s27), h23 = this._createTangentBuffer(e32, i20, s27);
    return { positionBuffer: i20, normalBuffer: m15, tangentBuffer: h23, uvBuffer: a26, colorBuffer: u23, symbolColorBuffer: c34, objectTransformation: s27.reprojection === Fe.NONE && null != s27.objectTransformation ? s27.objectTransformation : this._transformOriginLocal(e32, i20, m15, h23), geometryTransformation: s27.reprojection === Fe.NONE && null != s27.geometryTransformation ? s27.geometryTransformation : e12() };
  }
  _computeReprojectionInfo(e32) {
    var _a;
    const { vertexSpace: t23 } = e32, r38 = t23.isRelative, o27 = t23.isGeoreferenced ? this._context.renderCoordsHelper.viewingMode === l14.Local ? Fe.NONE : Fe.ECEF : Fe.NONE;
    if (r38) {
      const { origin: r39 } = t23, a26 = e12(), i20 = ((_a = e32.transform) == null ? void 0 : _a.localMatrix) ?? o5;
      if (o27 === Fe.NONE) {
        zn(e32.spatialReference, r39, a26, this._context.renderCoordsHelper.spatialReference);
        return { reprojection: o27, objectTransformation: a26, geometryTransformation: r10(i20), needsBufferCopy: false };
      }
      const m15 = q2(e12(), r39);
      return c6(m15, m15, i20), { reprojection: o27, transformBeforeProject: m15, needsBufferCopy: true };
    }
    return { reprojection: o27, needsBufferCopy: true };
  }
  _transformOriginLocal(e32, t23, a26, n26) {
    const s27 = this._context.renderCoordsHelper.spatialReference, u23 = e32.anchor;
    Ce[0] = u23.x, Ce[1] = u23.y, Ce[2] = u23.z ?? 0;
    const c34 = e12();
    return zn(e32.spatialReference, Ce, c34, s27), h3(Pe, c34), r11(t23, t23, Pe), null == a26 && null == n26 || (a7(Ae, c34), o6(Ae, Ae), null != a26 && n8(a26, a26, Ae), null != n26 && n8(n26, n26, Ae, 4)), c34;
  }
  _validateFaces(e32, t23) {
    const r38 = e32.vertexAttributes.position.length / 3, o27 = t23.faces;
    if (o27) {
      let e33 = -1;
      for (let t24 = 0; t24 < o27.length; t24++) {
        const r39 = o27[t24];
        r39 > e33 && (e33 = r39);
      }
      if (r38 <= e33)
        return this.logger.warn(`Vertex index ${e33} is out of bounds of the mesh position buffer`), false;
    } else if (r38 % 3 != 0)
      return this.logger.warn("Mesh position buffer length must be a multiple of 9 if no component faces are defined (3 values per vertex * 3 vertices per triangle)"), false;
    return true;
  }
  _getOrCreateFaces(e32, t23) {
    return t23.faces ?? y4(e32.vertexAttributes.position.length / 3);
  }
  _isOutsideClippingArea(e32) {
    if (!this._context.clippingExtent)
      return false;
    const t23 = e32.vertexAttributes && e32.vertexAttributes.position;
    if (!t23)
      return false;
    const r38 = this._context.elevationProvider.spatialReference;
    let o27;
    const a26 = t23.length / 3;
    return null == r38 || e32.spatialReference.equals(r38) ? o27 = t23 : (o27 = new Float64Array(t23.length), yn(e32.vertexAttributes.position, e32.spatialReference, 0, o27, r38, 0, a26)), P2(Re), c5(Re, o27, 0, a26), !V(Re, this._context.clippingExtent);
  }
  _createGeometryInfo(e32, t23, r38) {
    if (!Cn(e32.spatialReference, this._context.graphicsCoreOwner.view.spatialReference))
      return this.logger.warn("Geometry spatial reference is not compatible with the view"), null;
    if (this._isOutsideClippingArea(e32))
      return null;
    const o27 = this._createBuffers(e32, t23);
    if (null == o27)
      return null;
    const { positionBuffer: a26, uvBuffer: n26, colorBuffer: s27, symbolColorBuffer: i20, normalBuffer: l33, tangentBuffer: u23, objectTransformation: c34, geometryTransformation: m15 } = o27, h23 = this._getOrCreateComponents(e32), f25 = new Array();
    let p19 = false;
    for (const d19 of h23) {
      if (!this._validateFaces(e32, d19))
        return null;
      const t24 = this._getOrCreateFaces(e32, d19);
      if (0 === t24.length)
        continue;
      const o28 = this._createComponentNormals(a26, l33, d19, t24);
      o28.didFlipNormals && (p19 = true);
      const c35 = [[O3.POSITION, new s9(a26, 3, true)], [O3.NORMAL, new s9(o28.normals, 3, true)]], h24 = [[O3.POSITION, t24], [O3.NORMAL, o28.indices]];
      null != s27 && (c35.push([O3.COLOR, new s9(s27, 4, true)]), h24.push([O3.COLOR, t24])), null != i20 && (c35.push([O3.SYMBOLCOLOR, new s9(i20, 4, true)]), h24.push([O3.SYMBOLCOLOR, l11(t24.length)])), null != n26 && (c35.push([O3.UV0, new s9(n26, 2, true)]), h24.push([O3.UV0, t24])), null != u23 && (c35.push([O3.TANGENT, new s9(u23, 4, true)]), h24.push([O3.TANGENT, t24]));
      const g16 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: r38, layerUid: this._context.layer.uid }), x10 = this._getOrCreateMaterial(e32, d19), _13 = new b4(x10, c35, h24, null, e15.Mesh, g16);
      _13.transformation = m15, f25.push(_13);
    }
    return p19 && this.logger.warn("Normals have been automatically flipped to be consistent with the counter clock wise face winding order. It is better to generate mesh geometries that have consistent normals."), { geometries: f25, objectTransformation: c34 };
  }
  _updateMaterialParameters(e32) {
    this._materialInfoCache.forEachMaterialInfo(e32), this._fastUpdateProcessor.forEachMaterialInfo(e32), this._fastUpdateProcessor.forEachClonedMaterial((e33, t23) => {
      t23.setParameters(e33.parameters);
    });
  }
  test() {
    return { ...super.test(), materials: this._materialInfoCache.materials };
  }
};
var ve = class {
  constructor(e32, t23, r38) {
    this.normals = e32, this.indices = t23, this.didFlipNormals = r38;
  }
};
var Ce = n2();
var Oe = n2();
var we = n2();
var Me = n2();
var je2 = n2();
var Pe = e12();
var Ae = e11();
var Ie = e12();
var Re = i3();
var Ee = [new g4()];
var Ne = new c11();
var Fe;
!function(e32) {
  e32[e32.NONE = 0] = "NONE", e32[e32.ECEF = 1] = "ECEF";
}(Fe || (Fe = {}));

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DLodInstanceGraphicLayer.js
var f19 = class {
  constructor(e32, t23, i20, n26) {
    this.graphics3DSymbolLayer = e32, this.instanceIndex = t23, this.elevationAligner = i20, this.elevationContext = n26, this.type = "lod-instance", this._highlights = /* @__PURE__ */ new Set(), this.alignedSampledElevation = 0, this.isElevationSource = false, this.needsElevationUpdates = false;
  }
  initialize() {
  }
  setVisibility(e32) {
    const t23 = this._lodRenderer.instanceData;
    e32 !== t23.getVisible(this.instanceIndex) && t23.setVisible(this.instanceIndex, e32);
  }
  destroy() {
    null != this.instanceIndex && (this._lodRenderer.instanceData.removeInstance(this.instanceIndex), this.graphics3DSymbolLayer.notifyDestroyGraphicLayer(this));
  }
  alignWithElevation(e32, t23, i20) {
    if (this.elevationAligner) {
      l17(this.elevationContext.featureExpressionInfoContext, i20);
      const n26 = (i21, n27) => c18(i21, e32, this.elevationContext, t23, n27), s27 = this.elevationAligner(this, this.elevationContext, e32.spatialReference, n26, t23);
      null != s27 && (this.alignedSampledElevation = s27);
    }
  }
  getCenterObjectSpace(e32 = n2()) {
    return this._lodRenderer.instanceData.getCombinedLocalTransform(this.instanceIndex, I11), O(e32, this._lodRenderer.baseBoundingSphere.center, I11);
  }
  getBoundingBoxObjectSpace(e32 = i3()) {
    this._lodRenderer.instanceData.getCombinedLocalTransform(this.instanceIndex, I11);
    const n26 = this._lodRenderer.baseBoundingBox;
    P2(e32);
    for (let s27 = 0; s27 < 8; ++s27)
      o(v8, 0 == (1 & s27) ? n26[0] : n26[3], 0 == (2 & s27) ? n26[1] : n26[4], 0 == (4 & s27) ? n26[2] : n26[5]), O(v8, v8, I11), h2(e32, v8);
    return e32;
  }
  computeAttachmentOrigin(e32) {
    this._lodRenderer.instanceData.getGlobalTransform(this.instanceIndex, I11), e32.render.origin[0] += I11[12], e32.render.origin[1] += I11[13], e32.render.origin[2] += I11[14], e32.render.num++;
  }
  async getProjectedBoundingBox(e32, i20, n26, a26, r38) {
    const c34 = this.getBoundingBoxObjectSpace(r38), d19 = b8, m15 = w2(c34) ? 1 : d19.length;
    this._lodRenderer.instanceData.getGlobalTransform(this.instanceIndex, I11);
    for (let s27 = 0; s27 < m15; s27++) {
      const e33 = d19[s27];
      v8[0] = c34[e33[0]], v8[1] = c34[e33[1]], v8[2] = c34[e33[2]], O(v8, v8, I11), p16[3 * s27] = v8[0], p16[3 * s27 + 1] = v8[1], p16[3 * s27 + 2] = v8[2];
    }
    if (!e32(p16, 0, m15))
      return null;
    P2(c34);
    let u23 = null;
    this.calculateRelativeScreenBounds && (u23 = this.calculateRelativeScreenBounds());
    for (let t23 = 0; t23 < 3 * m15; t23 += 3) {
      for (let e33 = 0; e33 < 3; e33++)
        c34[e33] = Math.min(c34[e33], p16[t23 + e33]), c34[e33 + 3] = Math.max(c34[e33 + 3], p16[t23 + e33]);
      u23 && n26.push({ location: p16.slice(t23, t23 + 3), screenSpaceBoundingRect: u23 });
    }
    if (i20 && (E(c34, x5), "absolute-height" !== this.elevationContext.mode)) {
      let e33;
      const t23 = V2(c34, i20.service.spatialReference, i20);
      try {
        e33 = await i20.service.queryElevation(x5[0], x5[1], a26, t23, "ground");
      } catch (f25) {
      }
      null != e33 && Y(c34, 0, 0, -this.alignedSampledElevation + e33);
    }
    return c34;
  }
  addObjectState(e32, t23) {
    if (e32 === t10.Highlight) {
      const i20 = new r14(e32);
      this._addHighlightId(i20), t23.addExternal((e33) => {
        this._removeHighlightId(e33);
      }, i20);
    }
  }
  removeObjectState(e32) {
    this._highlights.forEach((t23) => e32.remove(t23));
  }
  _addHighlightId(e32) {
    this._highlights.add(e32), this._lodRenderer.instanceData.setHighlight(this.instanceIndex, true);
  }
  _removeHighlightId(e32) {
    this._highlights.delete(e32), this._lodRenderer.instanceData.setHighlight(this.instanceIndex, this._highlights.size > 0);
  }
  get _lodRenderer() {
    return this.graphics3DSymbolLayer.lodRenderer;
  }
};
var p16 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var v8 = n2();
var x5 = n2();
var b8 = [[0, 1, 2], [3, 1, 2], [0, 4, 2], [3, 4, 2], [0, 1, 5], [3, 1, 5], [0, 4, 5], [3, 4, 5]];
var I11 = e12();

// node_modules/@arcgis/core/views/3d/layers/graphics/lodResourceUtils.js
function o21(o27) {
  const s27 = new Array();
  return o27.stageResources.geometries.forEach((n26) => {
    const r38 = o27.stageResources.textures;
    s27.push(new e22(n26, r38));
  }), { components: s27, minScreenSpaceRadius: o27.lodThreshold ?? 0, pivotOffset: o27.pivotOffset };
}
function s23(e32) {
  return { levels: e32.map((e33) => o21(e33)) };
}

// node_modules/@arcgis/core/views/3d/layers/graphics/webStyleUtils.js
async function r32(r38) {
  var _a;
  if (null === r38 || null == r38.styleName && null == r38.styleUrl)
    return null;
  const o27 = r38.name;
  if (null == o27)
    throw new s2("symbolstyleutils:style-symbol-reference-name-missing", "Missing name in style symbol reference");
  const u23 = { portal: r38.portal }, i20 = await c8(r38, u23).catch(() => null);
  if (null === i20)
    return null;
  const m15 = h5(o27, i20.data);
  if (m15 && !((_a = m15.formatInfos) == null ? void 0 : _a.some((l33) => "gltf_basisu" === l33.type)))
    return null;
  const a26 = await d5(i20, o27, u23, "webRef", (l33, t23) => d4(l33, t23, ["gltf_basisu", "gltf"])).catch(() => null);
  if (null === a26 || "point-3d" !== a26.type)
    return null;
  const y12 = a26.symbolLayers.items[0];
  return "object" === y12.type ? y12.resource : null;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/BackedBufferObject.js
var r33 = class {
  constructor(r38, i20, s27) {
    this._elementSize = i20, this._buffer = c17.createVertex(r38, F2.STATIC_DRAW), this.resize(s27);
  }
  destroy() {
    this._buffer.dispose();
  }
  get elementSize() {
    return this._elementSize;
  }
  get capacity() {
    return this._capacity;
  }
  get array() {
    return this._array;
  }
  get buffer() {
    return this._buffer;
  }
  get memoryUsage() {
    return { cpu: this._capacity * this._elementSize, gpu: this._capacity * this._elementSize };
  }
  copyRange(e32, t23, r38, i20 = 0) {
    const s27 = new Uint8Array(this.array, e32 * this.elementSize, (t23 - e32) * this.elementSize);
    new Uint8Array(r38.array, i20 * this.elementSize).set(s27);
  }
  transferAll() {
    this._buffer.setData(this._array);
  }
  transferRange(e32, t23) {
    const r38 = e32 * this._elementSize, i20 = t23 * this._elementSize;
    this._buffer.setSubData(new Uint8Array(this._array), r38, r38, i20);
  }
  resize(e32) {
    const t23 = e32 * this._elementSize, r38 = new ArrayBuffer(t23);
    this._array && (e32 >= this._capacity ? new Uint8Array(r38).set(new Uint8Array(this._array)) : new Uint8Array(r38).set(new Uint8Array(this._array).subarray(0, e32 * this._elementSize))), this._array = r38, this._buffer.setSize(t23), this._capacity = e32;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/RenderInstanceData.js
var c28 = class {
  constructor(t23) {
    this.modelOriginHi = t23.getField(O3.MODELORIGINHI, i5), this.modelOriginLo = t23.getField(O3.MODELORIGINLO, i5), this.model = t23.getField(O3.MODEL, l9), this.modelNormal = t23.getField(O3.MODELNORMAL, l9), this.featureAttribute = t23.getField(O3.INSTANCEFEATUREATTRIBUTE, c9), this.color = t23.getField(O3.INSTANCECOLOR, x3), this.objectAndLayerIdColor = t23.getField(O3.INSTANCEOBJECTANDLAYERIDCOLOR, x3);
  }
};
var f20 = class {
  constructor(t23, i20) {
    this._headIndex = 0, this._tailIndex = 0, this._firstIndex = null, this._captureFirstIndex = true, this._updating = false, this._prevHeadIndex = 0, this._resized = false, this._rctx = t23, this._instanceBufferLayout = i20, this._elementSize = i20.stride, this._capacity = 1;
  }
  destroy() {
    this._buffer && this._buffer.destroy();
  }
  get buffer() {
    return this._buffer.buffer;
  }
  get view() {
    return this._view;
  }
  get capacity() {
    return this._capacity;
  }
  get size() {
    const t23 = this._headIndex, i20 = this._tailIndex;
    return t23 >= i20 ? t23 - i20 : t23 + this._capacity - i20;
  }
  get isEmpty() {
    return this._headIndex === this._tailIndex;
  }
  get isFull() {
    return this._tailIndex === (this._headIndex + 1) % this._capacity;
  }
  get headIndex() {
    return this._headIndex;
  }
  get tailIndex() {
    return this._tailIndex;
  }
  get firstIndex() {
    return this._firstIndex;
  }
  get memoryUsage() {
    return this._buffer ? this._buffer.memoryUsage : { cpu: 0, gpu: 0 };
  }
  reset() {
    this._headIndex = 0, this._tailIndex = 0, this._firstIndex = null;
  }
  startUpdateCycle() {
    this._captureFirstIndex = true;
  }
  beginUpdate() {
    s7(!this._updating, "already updating"), this._updating = true, this._prevHeadIndex = this._headIndex;
  }
  endUpdate() {
    s7(this._updating, "not updating"), this.size < r * this.capacity && this._shrink(), this._resized ? (this._buffer.transferAll(), this._resized = false) : this._transferRange(this._prevHeadIndex, this._headIndex), this._updating = false;
  }
  allocateHead() {
    s7(this._updating, "not updating"), this.isFull && this._grow();
    const t23 = this.headIndex;
    return this._captureFirstIndex && (this._firstIndex = t23, this._captureFirstIndex = false), this._incrementHead(), s7(this._headIndex !== this._tailIndex, "invalid pointers"), t23;
  }
  freeTail() {
    s7(this._updating, "not updating"), s7(this.size > 0, "invalid size");
    const t23 = this._tailIndex === this._firstIndex;
    this._incrementTail(), t23 && (this._firstIndex = this._tailIndex);
  }
  _grow() {
    const t23 = Math.max(u18, Math.floor(this._capacity * n));
    this._resize(t23);
  }
  _shrink() {
    const t23 = Math.max(u18, Math.floor(this._capacity * e3));
    this._resize(t23);
  }
  _resize(t23) {
    if (s7(this._updating, "not updating"), t23 === this._capacity)
      return;
    const i20 = new r33(this._rctx, this._elementSize, t23);
    if (this._buffer) {
      this._firstIndex && (this._firstIndex = (this._firstIndex + this._capacity - this._tailIndex) % this._capacity);
      const t24 = this.size, e32 = this._compactInstances(i20);
      s7(e32 === t24, "invalid compaction"), this._buffer.destroy(), this._tailIndex = 0, this._headIndex = e32, this._prevHeadIndex = 0;
    }
    this._resized = true, this._capacity = t23, this._buffer = i20, this._view = new c28(this._instanceBufferLayout.createView(this._buffer.array));
  }
  _compactInstances(t23) {
    const i20 = this._headIndex, e32 = this._tailIndex;
    return e32 < i20 ? (this._buffer.copyRange(e32, i20, t23), i20 - e32) : e32 > i20 ? (this._buffer.copyRange(e32, this._capacity, t23), i20 > 0 && this._buffer.copyRange(0, i20, t23, this._capacity - e32), i20 + (this._capacity - e32)) : 0;
  }
  _incrementHead(t23 = 1) {
    this._headIndex = (this._headIndex + t23) % this._capacity;
  }
  _incrementTail(t23 = 1) {
    this._tailIndex = (this._tailIndex + t23) % this._capacity;
  }
  _transferRange(t23, i20) {
    t23 < i20 ? this._buffer.transferRange(t23, i20) : t23 > i20 && (i20 > 0 && this._buffer.transferRange(0, i20), this._buffer.transferRange(t23, this._capacity));
  }
};
var u18 = 64;

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/InstanceData.js
var M7;
function R7(t23) {
  let e32 = H3().mat4f64(O3.LOCALTRANSFORM).mat4f64(O3.GLOBALTRANSFORM).vec4f64(O3.BOUNDINGSPHERE).vec3f64(O3.MODELORIGIN).mat3f(O3.MODEL).mat3f(O3.MODELNORMAL).vec2f(O3.MODELSCALEFACTORS);
  return t23.includes(O3.FEATUREATTRIBUTE) && (e32 = e32.vec4f(O3.FEATUREATTRIBUTE)), t23.includes(O3.COLOR) && (e32 = e32.vec4u8(O3.COLOR)), t23.includes(O3.OBJECTANDLAYERIDCOLOR) && (e32 = e32.vec4u8(O3.OBJECTANDLAYERIDCOLOR)), e32 = e32.u8(O3.STATE).u8(O3.LODLEVEL), e32;
}
!function(t23) {
  t23[t23.ALLOCATED = 1] = "ALLOCATED", t23[t23.DEFAULT_ACTIVE = 2] = "DEFAULT_ACTIVE", t23[t23.VISIBLE = 4] = "VISIBLE", t23[t23.HIGHLIGHT = 8] = "HIGHLIGHT", t23[t23.HIGHLIGHT_ACTIVE = 16] = "HIGHLIGHT_ACTIVE", t23[t23.REMOVE = 32] = "REMOVE", t23[t23.TRANSFORM_CHANGED = 64] = "TRANSFORM_CHANGED", t23[t23.ACTIVE = 18] = "ACTIVE";
}(M7 || (M7 = {}));
var C6 = class {
  constructor(t23) {
    this.localTransform = t23.getField(O3.LOCALTRANSFORM, b2), this.globalTransform = t23.getField(O3.GLOBALTRANSFORM, b2), this.modelOrigin = t23.getField(O3.MODELORIGIN, T4), this.model = t23.getField(O3.MODEL, l9), this.modelNormal = t23.getField(O3.MODELNORMAL, l9), this.modelScaleFactors = t23.getField(O3.MODELSCALEFACTORS, u5), this.boundingSphere = t23.getField(O3.BOUNDINGSPHERE, h6), this.featureAttribute = t23.getField(O3.FEATUREATTRIBUTE, c9), this.color = t23.getField(O3.COLOR, x3), this.objectAndLayerIdColor = t23.getField(O3.OBJECTANDLAYERIDCOLOR, x3), this.state = t23.getField(O3.STATE, d6), this.lodLevel = t23.getField(O3.LODLEVEL, d6);
  }
};
var y8 = class extends m2 {
  constructor(t23, e32) {
    super(t23), this.events = new n3(), this._capacity = 0, this._size = 0, this._next = 0, this._layout = R7(e32), this._capacity = u18, this._buffer = this._layout.createBuffer(this._capacity), this._view = new C6(this._buffer);
  }
  get capacity() {
    return this._capacity;
  }
  get size() {
    return this._size;
  }
  get view() {
    return this._view;
  }
  addInstance() {
    this._size + 1 > this._capacity && this._grow();
    const t23 = this._findSlot();
    return this._view.state.set(t23, M7.ALLOCATED), this._size++, this.events.emit("instances-changed"), t23;
  }
  removeInstance(t23) {
    const e32 = this._view.state;
    s7(t23 >= 0 && t23 < this._capacity && 0 != (e32.get(t23) & M7.ALLOCATED), "invalid instance handle"), this._getStateFlag(t23, M7.ACTIVE) ? this._setStateFlags(t23, M7.REMOVE) : this.freeInstance(t23), this.events.emit("instances-changed");
  }
  freeInstance(t23) {
    const e32 = this._view.state;
    s7(t23 >= 0 && t23 < this._capacity && 0 != (e32.get(t23) & M7.ALLOCATED), "invalid instance handle"), e32.set(t23, 0), this._size--;
  }
  setLocalTransform(t23, e32, s27 = true) {
    this._view.localTransform.setMat(t23, e32), s27 && this.updateModelTransform(t23);
  }
  getLocalTransform(t23, e32) {
    this._view.localTransform.getMat(t23, e32);
  }
  setGlobalTransform(t23, e32, s27 = true) {
    this._view.globalTransform.setMat(t23, e32), s27 && this.updateModelTransform(t23);
  }
  getGlobalTransform(t23, e32) {
    this._view.globalTransform.getMat(t23, e32);
  }
  updateModelTransform(t23) {
    const e32 = this._view, s27 = w6, i20 = D3;
    e32.localTransform.getMat(t23, V5), e32.globalTransform.getMat(t23, H4);
    const a26 = c6(H4, H4, V5);
    o(s27, a26[12], a26[13], a26[14]), e32.modelOrigin.setVec(t23, s27), a7(i20, a26), e32.model.setMat(t23, i20);
    const r38 = p2(w6, a26);
    r38.sort(), e32.modelScaleFactors.set(t23, 0, r38[1]), e32.modelScaleFactors.set(t23, 1, r38[2]), u6(i20, i20), o6(i20, i20), e32.modelNormal.setMat(t23, i20), this._setStateFlags(t23, M7.TRANSFORM_CHANGED), this.events.emit("instance-transform-changed", { index: t23 });
  }
  getModelTransform(t23, e32) {
    const s27 = this._view;
    s27.model.getMat(t23, D3), s27.modelOrigin.getVec(t23, w6), e32[0] = D3[0], e32[1] = D3[1], e32[2] = D3[2], e32[3] = 0, e32[4] = D3[3], e32[5] = D3[4], e32[6] = D3[5], e32[7] = 0, e32[8] = D3[6], e32[9] = D3[7], e32[10] = D3[8], e32[11] = 0, e32[12] = w6[0], e32[13] = w6[1], e32[14] = w6[2], e32[15] = 1;
  }
  applyShaderTransformation(t23, e32) {
    null != this.shaderTransformation && this.shaderTransformation.applyTransform(this, t23, e32);
  }
  getCombinedModelTransform(t23, e32) {
    return this.getModelTransform(t23, e32), null != this.shaderTransformation && this.shaderTransformation.applyTransform(this, t23, e32), e32;
  }
  getCombinedLocalTransform(t23, e32) {
    this._view.localTransform.getMat(t23, e32), null != this.shaderTransformation && this.shaderTransformation.applyTransform(this, t23, e32);
  }
  getCombinedMaxScaleFactor(t23) {
    let e32 = this._view.modelScaleFactors.get(t23, 1);
    return null != this.shaderTransformation && (this.shaderTransformation.scaleFactor(w6, this, t23), e32 *= Math.max(w6[0], w6[1], w6[2])), e32;
  }
  getCombinedMedianScaleFactor(t23) {
    let e32 = this._view.modelScaleFactors.get(t23, 0);
    return null != this.shaderTransformation && (this.shaderTransformation.scaleFactor(w6, this, t23), e32 *= b9(w6[0], w6[1], w6[2])), e32;
  }
  getModel(t23, e32) {
    this._view.model.getMat(t23, e32);
  }
  setFeatureAttribute(t23, e32) {
    this._view.featureAttribute.setVec(t23, e32);
  }
  getFeatureAttribute(t23, e32) {
    this._view.featureAttribute.getVec(t23, e32);
  }
  setColor(t23, e32) {
    this._view.color.setVec(t23, e32);
  }
  setObjectAndLayerIdColor(t23, e32) {
    this._view.objectAndLayerIdColor.setVec(t23, e32);
  }
  setVisible(t23, e32) {
    e32 !== this.getVisible(t23) && (this._setStateFlag(t23, M7.VISIBLE, e32), this.events.emit("instance-visibility-changed", { index: t23 }));
  }
  getVisible(t23) {
    return this._getStateFlag(t23, M7.VISIBLE);
  }
  setHighlight(t23, e32) {
    e32 !== this.getHighlight(t23) && (this._setStateFlag(t23, M7.HIGHLIGHT, e32), this.events.emit("instance-highlight-changed"));
  }
  getHighlight(t23) {
    return this._getStateFlag(t23, M7.HIGHLIGHT);
  }
  getState(t23) {
    return this._view.state.get(t23);
  }
  getLodLevel(t23) {
    return this._view.lodLevel.get(t23);
  }
  countFlags(t23) {
    let e32 = 0;
    for (let s27 = 0; s27 < this._capacity; ++s27) {
      this.getState(s27) & t23 && ++e32;
    }
    return e32;
  }
  _setStateFlags(t23, e32) {
    const s27 = this._view.state;
    e32 = s27.get(t23) | e32, s27.set(t23, e32);
  }
  _clearStateFlags(t23, e32) {
    const s27 = this._view.state;
    e32 = s27.get(t23) & ~e32, s27.set(t23, e32);
  }
  _setStateFlag(t23, e32, s27) {
    s27 ? this._setStateFlags(t23, e32) : this._clearStateFlags(t23, e32);
  }
  _getStateFlag(t23, e32) {
    return !!(this._view.state.get(t23) & e32);
  }
  _grow() {
    this._capacity = Math.max(u18, Math.floor(this._capacity * n)), this._buffer = this._layout.createBuffer(this._capacity).copyFrom(this._buffer), this._view = new C6(this._buffer);
  }
  _findSlot() {
    const t23 = this._view.state;
    let e32 = this._next;
    for (; t23.get(e32) & M7.ALLOCATED; )
      e32 = e32 + 1 === this._capacity ? 0 : e32 + 1;
    return this._next = e32 + 1 === this._capacity ? 0 : e32 + 1, e32;
  }
};
function b9(t23, e32, s27) {
  return Math.max(Math.min(t23, e32), Math.min(Math.max(t23, e32), s27));
}
e([y({ constructOnly: true })], y8.prototype, "shaderTransformation", void 0), e([y()], y8.prototype, "_size", void 0), e([y({ readOnly: true })], y8.prototype, "size", null), y8 = e([a3("esri.views.3d.webgl-engine.lib.lodRendering.InstanceData")], y8);
var w6 = n2();
var D3 = e11();
var V5 = e12();
var H4 = e12();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/InstanceOctree.js
var n21 = class extends W2 {
  constructor(e32, r38) {
    super((t23) => C4(this._instanceData.view.boundingSphere.getVec(t23, this._tmpSphere)), { maximumDepth: 25 }), this._instanceData = e32, this._boundingSphere = r38, this._tmpSphere = _6(), this._tmpMat4 = e12();
  }
  addInstance(t23) {
    const s27 = this._instanceData.view.boundingSphere, i20 = this._instanceData.getCombinedModelTransform(t23, this._tmpMat4);
    O(this._tmpSphere, this._boundingSphere.center, i20), this._tmpSphere[3] = this._boundingSphere.radius * l12(i20), s27.setVec(t23, this._tmpSphere), this.add([t23]);
  }
  removeInstance(t23) {
    this.remove([t23]);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/LevelSelector.js
var e26 = class {
  constructor(e32, i20) {
    this._worldSpaceRadius = e32, this._minScreenSpaceRadii = i20;
  }
  selectLevel(e32, i20, t23) {
    const c34 = t23.computeScreenPixelSizeAt(e32), r38 = this._worldSpaceRadius * i20 / c34;
    let s27 = 0;
    for (let a26 = 1; a26 < this._minScreenSpaceRadii.length; ++a26)
      r38 >= this._minScreenSpaceRadii[a26] && (s27 = a26);
    return s27;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/LodComponentData.js
var u19 = class {
  constructor(s27, o27) {
    const i20 = s27.renderContext.rctx, n26 = o27.geometry;
    this._materialRepository = s27.materialRepository, n26.material.setParameters({ instancedDoublePrecision: true });
    const u23 = n26.material.createBufferWriter(), f25 = u23.vertexBufferLayout, d19 = u23.elementCount(n26), p19 = f25.createBuffer(d19);
    u23.write(null, null, n26, p19, 0), this.geometry = n26, this.material = n26.material, this.glMaterials = new r21(n26.material, this._materialRepository), this.vertexBufferLayout = f25, this.vbo = c17.createVertex(i20, F2.STATIC_DRAW, p19.buffer), this.vao = new r18(i20, E2, { geometry: r9(f25) }, { geometry: this.vbo }), this.vertexCount = d19;
  }
  destroy() {
    this.glMaterials.destroy(), this.vbo.dispose(), this.vao.dispose();
  }
  get boundingInfo() {
    return this.geometry.boundingInfo;
  }
  get triangleCount() {
    return this.vertexCount / 3;
  }
  intersect(r38, t23, e32, a26, m15, l33, u23, f25) {
    const d19 = this.geometry.id;
    this.material.intersect(this.geometry, r38.transform.transform, r38, e32, a26, (e33, a27, p19, c34, y12) => {
      if (e33 >= 0) {
        if (null != t23 && !t23(r38.rayBegin, r38.rayEnd, e33))
          return;
        const c35 = new s13(l33.layerUid, l33.graphicUid(m15), d19, p19, u23, f25);
        if ((null == r38.results.min.drapedLayerOrder || y12 >= r38.results.min.drapedLayerOrder) && (null == r38.results.min.dist || e33 < r38.results.min.dist) && r38.results.min.set(i12.LOD, c35, e33, a27, r38.transform.transform, y12), r38.options.store !== t17.MIN && (null == r38.results.max.drapedLayerOrder || y12 >= r38.results.max.drapedLayerOrder) && (null == r38.results.max.dist || e33 > r38.results.max.dist) && r38.results.max.set(i12.LOD, c35, e33, a27, r38.transform.transform, y12), r38.options.store === t17.ALL) {
          const t24 = M5(r38.results.min.ray);
          t24.set(i12.LOD, c35, e33, a27, r38.transform.transform, y12), r38.results.all.push(t24);
        }
      }
    });
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/LodLevel.js
var a22 = class _a {
  static async create(e32, r38, i20) {
    const s27 = await Promise.allSettled(r38.components.map((n26) => e32.controller.schedule(() => new u19(e32, n26), i20))), c34 = s27.map((n26) => "fulfilled" === n26.status ? n26.value : null).filter(R);
    if (a2(i20) || c34.length !== s27.length) {
      c34.forEach((n26) => n26.destroy()), s3(i20);
      for (const n26 of s27)
        if ("rejected" === n26.status)
          throw n26.reason;
    }
    return new _a(r38.minScreenSpaceRadius, c34);
  }
  constructor(n26, o27) {
    this.minScreenSpaceRadius = n26, this.components = o27;
  }
  destroy() {
    this.components.forEach((n26) => n26.destroy());
  }
  intersect(n26, o27, t23, e32, r38, i20, s27) {
    this.components.forEach((c34) => c34.intersect(n26, o27, t23, e32, r38, i20, this.boundingSphere, s27));
  }
  get boundingBox() {
    if (null == this._boundingBox) {
      const n26 = P2();
      this.components.forEach((o27) => {
        null != o27.boundingInfo && (h2(n26, o27.boundingInfo.bbMin), h2(n26, o27.boundingInfo.bbMax));
      }), this._boundingBox = n26;
    }
    return this._boundingBox;
  }
  get boundingSphere() {
    if (null == this._boundingSphere) {
      const n26 = this.boundingBox, o27 = n2();
      E(n26, o27), this._boundingSphere = { center: o27, radius: 0.5 * T3(n26) };
    }
    return this._boundingSphere;
  }
  get triangleCount() {
    return this.components.reduce((n26, o27) => n26 + o27.triangleCount, 0);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/LodRenderer.js
var B4 = (e32) => {
  const t23 = e32.baseBoundingSphere.radius, r38 = e32.levels.map((e33) => e33.minScreenSpaceRadius);
  return new e26(t23, r38);
};
var q6 = class extends m2 {
  constructor(e32, t23) {
    super(e32), this.type = i12.LOD, this.isGround = false, this._handles = new t(), this._levels = [], this._defaultRenderInstanceData = [new Array()], this._highlightRenderInstanceData = [new Array()], this._allRenderInstanceData = [this._defaultRenderInstanceData[0], this._highlightRenderInstanceData[0]], this._instanceIndex = 0, this._cycleStartIndex = 0, this._slicePlane = false, this._camera = new $(), this._updateCyclesWithStaticCamera = -1, this._needFullCycle = false, this.slots = [E4.OPAQUE_MATERIAL, E4.TRANSPARENT_MATERIAL], this.canRender = true, this._instanceData = new y8({ shaderTransformation: e32.shaderTransformation }, e32.optionalFields), this._handles.add(t23.registerTask(I2.LOD_RENDERER, this));
  }
  initialize() {
    this._instanceBufferLayout = z3(this.optionalFields), this._glInstanceBufferLayout = r9(this._instanceBufferLayout, 1), this._handles.add([this._instanceData.events.on("instances-changed", () => this._requestUpdateCycle()), this._instanceData.events.on("instance-transform-changed", ({ index: e32 }) => {
      this._requestUpdateCycle(), this.metadata.notifyGraphicGeometryChanged(e32);
    }), this._instanceData.events.on("instance-visibility-changed", ({ index: e32 }) => {
      this._requestUpdateCycle(true), this.metadata.notifyGraphicVisibilityChanged(e32);
    }), this._instanceData.events.on("instance-highlight-changed", () => this._requestUpdateCycle(true))]);
  }
  destroy() {
    this._handles.destroy();
  }
  get _enableLevelSelection() {
    return this.symbol.levels.length > 1;
  }
  get levels() {
    return this._levels;
  }
  get baseBoundingBox() {
    return this._levels[this._levels.length - 1].boundingBox;
  }
  get baseBoundingSphere() {
    return this._levels[this._levels.length - 1].boundingSphere;
  }
  get baseMaterial() {
    return this._levels[this._levels.length - 1].components[0].material;
  }
  get slicePlaneEnabled() {
    return this._slicePlane;
  }
  set slicePlaneEnabled(e32) {
    this._slicePlane = e32;
  }
  get layerUid() {
    return this.metadata.layerUid;
  }
  get instanceData() {
    return this._instanceData;
  }
  get memoryUsage() {
    const e32 = { cpu: 0, gpu: 0 };
    return this._allRenderInstanceData.forEach((t23) => t23.forEach((t24) => {
      e32.cpu += t24.memoryUsage.cpu, e32.gpu += t24.memoryUsage.gpu;
    })), e32;
  }
  get renderStats() {
    const e32 = this._instanceData.size, t23 = [];
    return this._levels.forEach((e33, r38) => {
      const a26 = this._allRenderInstanceData[0][r38].size + this._allRenderInstanceData[1][r38].size, s27 = e33.triangleCount;
      t23.push({ renderedInstances: a26, renderedTriangles: a26 * s27, trianglesPerInstance: s27 });
    }), { totalInstances: e32, renderedInstances: t23.reduce((e33, t24) => e33 + t24.renderedInstances, 0), renderedTriangles: t23.reduce((e33, t24) => e33 + t24.renderedTriangles, 0), levels: t23 };
  }
  async initializeRenderContext(e32, t23) {
    this._context = e32;
    const a26 = e32.renderContext.rctx, s27 = await Promise.allSettled(this.symbol.levels.map((r38) => (this._defaultRenderInstanceData[0].push(new f20(a26, this._instanceBufferLayout)), this._highlightRenderInstanceData[0].push(new f20(a26, this._instanceBufferLayout)), a22.create(e32, r38, t23)))), o27 = s27.map((e33) => "fulfilled" === e33.status ? e33.value : null).filter(R);
    if (a2(t23) || o27.length !== s27.length) {
      o27.forEach((e33) => e33.destroy()), s3(t23);
      for (const e33 of s27)
        if ("rejected" === e33.status)
          throw e33.reason;
    }
    this._levels = o27, this._levelSelector = B4(this);
  }
  uninitializeRenderContext() {
    this._invalidateOctree(), this._levels.forEach((e32) => e32.destroy()), this._defaultRenderInstanceData[0].forEach((e32) => e32.destroy()), this._highlightRenderInstanceData[0].forEach((e32) => e32.destroy());
  }
  get needsTransparentPass() {
    return this._levels.some((e32) => e32.components.some((e33) => e33.material.requiresSlot(E4.TRANSPARENT_MATERIAL, h8.Color)));
  }
  get needsHighlight() {
    return this._highlightRenderInstanceData[0].some((e32) => e32.size > 0);
  }
  prepareRender(e32) {
    if (!t15.LOD_INSTANCE_RENDERER_DISABLE_UPDATES) {
      if (this._enableLevelSelection) {
        const t23 = e32.bindParameters.contentCamera.equals(this._camera);
        this._camera.copyFrom(e32.bindParameters.contentCamera), t23 || this._requestUpdateCycle();
      }
      this._needFullCycle && (this.runTask(C3), this._needFullCycle = false);
    }
  }
  prepareTechniques(e32) {
    if (!this.baseMaterial.isVisible() || !this.baseMaterial.isVisibleForOutput(e32.output))
      return null;
    const t23 = this._getInstanceDatas(e32.output);
    if (!t23)
      return null;
    const r38 = new Array();
    return t23.forEach((t24) => this.levels.forEach((a26, s27) => {
      a26.components.forEach((a27) => r38.push(this._beginComponent(e32, t24[s27], a27)));
    })), r38;
  }
  render(e32, t23) {
    const r38 = this._getInstanceDatas(e32.output);
    if (!r38)
      return;
    let a26 = 0;
    e32.rctx.bindVAO(), r38.forEach((r39) => this.levels.forEach((s27, n26) => {
      s27.components.forEach((s28) => this._renderComponent(e32, t23[a26++], r39[n26], s28, n26));
    }));
  }
  _getInstanceDatas(e32) {
    const t23 = e32 !== h8.Highlight && e32 !== h8.ShadowHighlight, r38 = e32 !== h8.ShadowExcludeHighlight;
    return t23 && r38 ? this._allRenderInstanceData : t23 ? this._defaultRenderInstanceData : r38 ? this._highlightRenderInstanceData : null;
  }
  intersect(e32, t23, r38, a26) {
    if (!this.baseMaterial.isVisible() || null == this._octree)
      return;
    const s27 = n2();
    e6(s27, a26, r38);
    const n26 = (s28) => {
      this._instanceData.getCombinedModelTransform(s28, K3), e32.transform.set(K3), O(Y3, r38, e32.transform.inverse), O(J, a26, e32.transform.inverse);
      const n27 = this._instanceData.getState(s28), i20 = this._instanceData.getLodLevel(s28), o27 = this._levels.length;
      s7(0 != (n27 & M7.ACTIVE), "invalid instance state"), s7(i20 >= 0 && i20 < o27, "invaid lod level"), this._levels[i20].intersect(e32, t23, Y3, J, s28, this.metadata, o27);
    };
    this.baseMaterial.parameters.verticalOffset ? this._octree.forEach(n26) : this._octree.forEachAlongRay(r38, s27, n26);
  }
  queryDepthRange(e32) {
    return this._queryDepthRangeOctree(e32);
  }
  notifyShaderTransformationChanged() {
    this._invalidateOctree(), this._requestUpdateCycle();
  }
  get _octree() {
    var _a;
    if (null == this._octreeCached) {
      const e32 = this._instanceData, t23 = (_a = e32.view) == null ? void 0 : _a.state;
      if (!t23)
        return null;
      this._octreeCached = new n21(e32, this.baseBoundingSphere);
      for (let r38 = 0; r38 < e32.capacity; ++r38)
        t23.get(r38) & M7.ACTIVE && this._octreeCached.addInstance(r38);
    }
    return this._octreeCached;
  }
  _invalidateOctree() {
    this._octreeCached = l(this._octreeCached);
  }
  _queryDepthRangeOctree(e32) {
    if (null == this._octree)
      return { near: 1 / 0, far: -1 / 0 };
    const t23 = e32.viewForward, r38 = this._octree.findClosest(t23, W2.DepthOrder.FRONT_TO_BACK, e32.frustum), a26 = this._octree.findClosest(t23, W2.DepthOrder.BACK_TO_FRONT, e32.frustum);
    if (null == r38 || null == a26)
      return { near: 1 / 0, far: -1 / 0 };
    const s27 = e32.eye, n26 = this._instanceData.view;
    n26.boundingSphere.getVec(r38, W5), e6(W5, W5, s27);
    const i20 = P(W5, t23) - W5[3];
    n26.boundingSphere.getVec(a26, W5), e6(W5, W5, s27);
    const o27 = P(W5, t23) + W5[3];
    return { near: Math.max(e32.near, i20), far: Math.min(e32.far, o27) };
  }
  _requestUpdateCycle(e32 = false) {
    this._updateCyclesWithStaticCamera = -1, this._cycleStartIndex = this._instanceIndex, e32 && (this._needFullCycle = true, this._context.requestRender());
  }
  _startUpdateCycle() {
    this._updateCyclesWithStaticCamera++, this._allRenderInstanceData.forEach((e32) => e32.forEach((e33) => e33.startUpdateCycle()));
  }
  get running() {
    return this._instanceData.size > 0 && this._updateCyclesWithStaticCamera < 1;
  }
  runTask(e32) {
    const { _enableLevelSelection: t23, _camera: r38, _levelSelector: a26 } = this;
    this._allRenderInstanceData.forEach((e33) => e33.forEach((e34) => e34.beginUpdate()));
    const s27 = this._instanceData, n26 = s27.view;
    let i20 = s27.size;
    const o27 = s27.capacity;
    let l33 = this._instanceIndex;
    for (let c34 = 0; c34 < i20 && !e32.done; ++c34) {
      l33 === this._cycleStartIndex && this._startUpdateCycle();
      const c35 = n26.state.get(l33);
      let h23 = 0;
      if (!(c35 & M7.ALLOCATED)) {
        l33 = l33 + 1 === o27 ? 0 : l33 + 1, i20++;
        continue;
      }
      const d19 = n26.lodLevel.get(l33);
      if (c35 & M7.DEFAULT_ACTIVE && this._defaultRenderInstanceData[0][d19].freeTail(), c35 & M7.HIGHLIGHT_ACTIVE && this._highlightRenderInstanceData[0][d19].freeTail(), c35 & M7.REMOVE)
        s27.freeInstance(l33);
      else if (c35 & M7.VISIBLE) {
        let e33 = 0;
        t23 && (n26.modelOrigin.getVec(l33, k4), e33 = a26.selectLevel(k4, s27.getCombinedMedianScaleFactor(l33), r38)), h23 = c35 & ~(M7.ACTIVE | M7.TRANSFORM_CHANGED), e33 >= 0 && (c35 & M7.HIGHLIGHT ? (P8(this._highlightRenderInstanceData[0][e33], n26, l33), h23 |= M7.HIGHLIGHT_ACTIVE) : (P8(this._defaultRenderInstanceData[0][e33], n26, l33), h23 |= M7.DEFAULT_ACTIVE)), n26.state.set(l33, h23), n26.lodLevel.set(l33, e33);
      } else
        h23 = c35 & ~(M7.ACTIVE | M7.TRANSFORM_CHANGED), n26.state.set(l33, h23);
      if (null != this._octreeCached) {
        const e33 = !!(c35 & M7.ACTIVE), t24 = !!(h23 & M7.ACTIVE);
        !e33 && t24 ? this._octreeCached.addInstance(l33) : e33 && !t24 ? this._octreeCached.removeInstance(l33) : e33 && t24 && c35 & M7.TRANSFORM_CHANGED && (this._octreeCached.removeInstance(l33), this._octreeCached.addInstance(l33));
      }
      l33 = l33 + 1 === o27 ? 0 : l33 + 1, e32.madeProgress();
    }
    this._instanceIndex = l33, this._allRenderInstanceData.forEach((e33) => e33.forEach((e34) => e34.endUpdate())), this._context.requestRender();
  }
  _beginComponent(e32, t23, r38) {
    const { bindParameters: a26, rctx: s27, output: n26 } = e32;
    if (0 === t23.size || !r38.material.requiresSlot(a26.slot, e32.output))
      return null;
    const i20 = r38.glMaterials.load(s27, a26.slot, n26);
    return null != i20 ? i20.beginSlot(a26) : null;
  }
  _renderComponent(e32, t23, r38, a26, s27) {
    var _a;
    if (!t23)
      return;
    const { bindParameters: n26, rctx: i20 } = e32;
    (_a = i20.appleAmdDriverHelper) == null ? void 0 : _a.resetIndicesType();
    const o27 = i20.bindTechnique(t23, a26.material.parameters, n26);
    i20.bindVAO(a26.vao), t23.ensureAttributeLocations(a26.vao), o27.bindDraw(Z3, n26, a26.material.parameters), t15.LOD_INSTANCE_RENDERER_COLORIZE_BY_LEVEL && e32.output === h8.Color && (o27.setUniform4fv("externalColor", Q3[Math.min(s27, Q3.length - 1)]), o27.setUniform1i("colorMixMode", P4.replace));
    const l33 = i20.capabilities.instancing, c34 = r38.capacity, h23 = r38.headIndex, d19 = r38.tailIndex, u23 = r38.firstIndex, m15 = this._glInstanceBufferLayout, p19 = (e33, s28) => {
      R5(i20, E2, r38.buffer, m15, e33), l33.drawArraysInstanced(t23.primitiveType, 0, a26.vertexCount, s28 - e33), o8(i20, E2, r38.buffer, m15);
    };
    a26.material.parameters.transparent && null != u23 ? h23 > d19 ? (s7(u23 >= d19 && u23 <= h23, "invalid firstIndex"), p19(u23, h23), p19(d19, u23)) : h23 < d19 && (u23 <= h23 ? (s7(u23 >= 0 && u23 <= h23, "invalid firstIndex"), p19(u23, h23), p19(d19, c34), p19(0, u23)) : (s7(u23 >= d19 && u23 <= c34, "invalid firstIndex"), p19(u23, c34), p19(0, h23), p19(d19, u23))) : h23 > d19 ? p19(d19, h23) : h23 < d19 && (p19(0, h23), p19(d19, c34)), i20.bindVAO(null);
  }
};
function P8(e32, t23, r38) {
  const a26 = e32.allocateHead();
  G4(t23, r38, e32.view, a26);
}
function G4(e32, t23, r38, a26) {
  s10(e32.modelOrigin, t23, r38.modelOriginHi, r38.modelOriginLo, a26), r38.model.copyFrom(a26, e32.model, t23), r38.modelNormal.copyFrom(a26, e32.modelNormal, t23), e32.color && r38.color && r38.color.copyFrom(a26, e32.color, t23), e32.objectAndLayerIdColor && r38.objectAndLayerIdColor && r38.objectAndLayerIdColor.copyFrom(a26, e32.objectAndLayerIdColor, t23), e32.featureAttribute && r38.featureAttribute && r38.featureAttribute.copyFrom(a26, e32.featureAttribute, t23);
}
function z3(e32) {
  let t23 = H3().vec3f(O3.MODELORIGINHI).vec3f(O3.MODELORIGINLO).mat3f(O3.MODEL).mat3f(O3.MODELNORMAL);
  return null != e32 && e32.includes("featureAttribute") && (t23 = t23.vec4f(O3.INSTANCEFEATUREATTRIBUTE)), null != e32 && e32.includes("color") && (t23 = t23.vec4u8(O3.INSTANCECOLOR)), null != e32 && e32.includes("objectAndLayerIdColor") && (t23 = t23.vec4u8(O3.INSTANCEOBJECTANDLAYERIDCOLOR)), t23;
}
e([y({ constructOnly: true })], q6.prototype, "symbol", void 0), e([y({ constructOnly: true })], q6.prototype, "optionalFields", void 0), e([y({ constructOnly: true })], q6.prototype, "metadata", void 0), e([y({ constructOnly: true })], q6.prototype, "shaderTransformation", void 0), e([y()], q6.prototype, "_instanceData", void 0), e([y()], q6.prototype, "_cycleStartIndex", void 0), e([y({ readOnly: true })], q6.prototype, "_enableLevelSelection", null), e([y()], q6.prototype, "_updateCyclesWithStaticCamera", void 0), e([y({ readOnly: true })], q6.prototype, "running", null), q6 = e([a3("esri.views.3d.webgl-engine.lib.lodRendering.LodRenderer")], q6);
var k4 = n2();
var W5 = n6();
var K3 = e12();
var Y3 = n2();
var J = n2();
var Q3 = [r6(1, 0, 1, 1), r6(0, 0, 1, 1), r6(0, 1, 0, 1), r6(1, 1, 0, 1), r6(1, 0, 0, 1)];
var Z3 = new N();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DObjectSymbolLayer.js
var me2 = class {
  constructor(e32, t23, s27, r38, i20, a26, o27, n26, l33, c34, h23, d19) {
    this.lodResources = e32, this.lodRenderer = t23, this.stageResources = s27, this.originalMaterialParameters = r38, this.resourceSize = i20, this.isEsriSymbolResource = a26, this.isWosr = o27, this.resourceBoundingBox = n26, this.symbolSize = l33, this.extentPadding = c34, this.physicalBasedRenderingEnabled = h23, this.pivotOffset = d19;
  }
};
var pe2 = class extends h13 {
  getCachedSize() {
    const [e32, t23, s27] = null != this._resources ? this._resources.symbolSize : [1, 1, 1];
    return { width: e32, depth: t23, height: s27 };
  }
  constructor(e32, t23, s27, r38) {
    super(e32, t23, s27, r38), this._resources = null, this._optionalFields = new Array(), this._instanceIndexToGraphicUid = /* @__PURE__ */ new Map(), this._hasLoadedPBRTextures = false, this._disposeResourceHandles = new Array(), this.skipHighSymbolLodsChanged = false, this.ensureDrapedStatus(false), this._hasLoadedPBRTextures = s27.physicalBasedRenderingEnabled;
  }
  async doLoad(e32) {
    if (!this._drivenProperties.size) {
      if (I7(this.symbolLayer))
        throw new Error();
    }
    if (this._isPrimitive) {
      const t23 = this.symbolLayer.resource, s27 = t23 && o16(t23.primitive) ? t23.primitive : d3;
      this._resources = await this._createResourcesForPrimitive(s27, e32);
    } else {
      const t23 = await r32(this.symbol.styleOrigin), s27 = (t23 == null ? void 0 : t23.href) ?? this.symbolLayer.resource.href;
      this._resources = await this._createResourcesForUrl(s27, e32);
    }
    this.layerOpacityChanged(), this.slicePlaneEnabledChanged(), this.physicalBasedRenderingChanged(), this.complexity = this.computeComplexity();
  }
  get extentPadding() {
    return null != this._resources ? this._resources.extentPadding : 0;
  }
  get _isPrimitive() {
    var _a;
    return !((_a = this.symbolLayer.resource) == null ? void 0 : _a.href);
  }
  get lodRenderer() {
    var _a;
    return (_a = this._resources) == null ? void 0 : _a.lodRenderer;
  }
  _setMaterialTransparencyParams(e32, t23 = ((_b) => (_b = ((_a) => (_a = this.symbolLayer) == null ? void 0 : _a.material)()) == null ? void 0 : _b.color)()) {
    const s27 = this._getCombinedOpacity(t23), r38 = s27 < 1 || this.needsDrivenTransparentPass;
    return e32.transparent = r38, e32.opacity = s27, e32.cullFace = r38 ? n9.None : n9.Back, e32;
  }
  async _createResourcesForPrimitive(t23, r38) {
    const i20 = this.symbolLayer, a26 = i3(c7(t23)), o27 = e5(F(a26)), n26 = e5(t2(o27, i20)), l33 = s4(n26), h23 = false, d19 = false, m15 = { usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: true, mrrFactors: [...r16], ambient: l2, diffuse: l2, hasSlicePlane: this._context.slicePlaneEnabled, hasSliceHighlight: false, castShadows: this.symbolLayer.castShadows, offsetTransparentBackfaces: !this.symbolLayer.isPrimitive }, p19 = !!m15.usePBR;
    this._setMaterialTransparencyParams(m15);
    const u23 = this.symbol;
    if ("point-3d" === u23.type && u23.verticalOffset) {
      const { screenLength: e32, minWorldLength: t24, maxWorldLength: r39 } = u23.verticalOffset;
      m15.verticalOffset = { screenLength: u4(e32), minWorldLength: t24 || 0, maxWorldLength: null != r39 ? r39 : 1 / 0 }, m15.castShadows = false;
    }
    if (this._context.screenSizePerspectiveEnabled && (m15.screenSizePerspective = this._context.sharedResources.screenSizePerspectiveSettings), this._drivenProperties.color)
      m15.externalColor = _3;
    else {
      const t24 = null != i20.material ? i20.material.color : null, s27 = null != t24 ? h4.toUnitRGBA(t24) : _3;
      m15.externalColor = s27;
    }
    this._fastUpdates = O6(this._context.renderer, this._fastVisualVariableConvertOptions(a26, n26, o27, null)), m15.isInstanced = true, this._fastUpdates ? (Object.assign(m15, this._fastUpdates.materialParameters), this._optionalFields.push(O3.FEATUREATTRIBUTE)) : this._hasPerInstanceColor() && (m15.hasInstancedColor = true, this._optionalFields.push(O3.COLOR)), has("enable-feature:objectAndLayerId-rendering") && this._optionalFields.push(O3.OBJECTANDLAYERIDCOLOR);
    const _13 = new I5(m15), g16 = u11(t23, _13);
    if (!g16)
      throw new Error(`Unknown object symbol primitive: ${t23}`);
    const b15 = o15(g16).map((e32) => ({ opacity: 1, transparent: e32.parameters.transparent })), R10 = await this._createStageResources(g16, p19, r38), x10 = await this._createLodRenderer(g16, r38);
    return new me2(g16, x10, R10, b15, o27, h23, d19, a26, n26, l33, p19, null);
  }
  async _createResourcesForUrl(e32, t23) {
    var _a, _b;
    const r38 = { materialParamsMixin: { isInstanced: true, hasSlicePlane: this._context.slicePlaneEnabled, castShadows: this.symbolLayer.castShadows }, streamDataRequester: this._context.streamDataRequester, cache: this._context.sharedResources.objectResourceCache };
    this._fastUpdates = O6(this._context.renderer, this._fastVisualVariableConvertOptions(null, null, null, null)), this._fastUpdates ? (Object.assign(r38.materialParamsMixin, this._fastUpdates.materialParameters), this._optionalFields.push(O3.FEATUREATTRIBUTE)) : this._hasPerInstanceColor() && (r38.materialParamsMixin.hasInstancedColor = true, this._optionalFields.push(O3.COLOR)), has("enable-feature:objectAndLayerId-rendering") && this._optionalFields.push(O3.OBJECTANDLAYERIDCOLOR);
    const i20 = this.symbol;
    if ("point-3d" === i20.type && i20.verticalOffset) {
      const { screenLength: e33, minWorldLength: t24, maxWorldLength: a27 } = i20.verticalOffset;
      r38.materialParamsMixin.verticalOffset = { screenLength: u4(e33), minWorldLength: t24 || 0, maxWorldLength: null != a27 ? a27 : 1 / 0 }, r38.materialParamsMixin.castShadows = false;
    }
    r38.signal = t23, r38.usePBR = this._context.physicalBasedRenderingEnabled, r38.skipHighLods = this._context.skipHighSymbolLods;
    const a26 = r38.usePBR, o27 = await X2(e32, r38), n26 = o27.isEsriSymbolResource, l33 = o27.isWosr, h23 = s23(o27.lods);
    h23.levels.sort((e33, t24) => e33.minScreenSpaceRadius - t24.minScreenSpaceRadius);
    const d19 = this._context, m15 = this.symbolLayer.material, p19 = this._getExternalColorParameters(m15), u23 = (_b = (_a = this.symbolLayer) == null ? void 0 : _a.material) == null ? void 0 : _b.color, f25 = this._getCombinedOpacity(u23, { hasIntrinsicColor: true }), _13 = this.needsDrivenTransparentPass, g16 = o15(h23), b15 = o15(h23).map((e33) => ({ opacity: e33.parameters.opacity || 1, transparent: e33.parameters.transparent }));
    g16.forEach((e33) => {
      const t24 = e33.parameters;
      e33.setParameters(p19);
      const s27 = t24.opacity * f25, r39 = s27 < 1 || _13 || t24.transparent;
      e33.setParameters({ opacity: s27, transparent: r39 }), d19.screenSizePerspectiveEnabled && e33.setParameters({ screenSizePerspective: d19.sharedResources.screenSizePerspectiveSettings });
    });
    const P14 = o27.referenceBoundingBox, R10 = e5(F(P14)), x10 = e5(h23.levels[0].pivotOffset), v13 = e5(t2(R10, this.symbolLayer)), L8 = s4(v13), S14 = this._fastUpdates;
    G2(S14, this._context.renderer, this._fastVisualVariableConvertOptions(P14, v13, R10, x10)) && g16.forEach((e33) => e33.setParameters(S14.materialParameters));
    const E14 = await this._createStageResources(h23, a26, t23), j13 = await this._createLodRenderer(h23, t23);
    return new me2(h23, j13, E14, b15, R10, n26, l33, P14, v13, L8, a26, x10);
  }
  _addDisposeResource(e32) {
    this._disposeResourceHandles.push(e32);
  }
  async _createStageResources(e32, s27, r38) {
    const i20 = this._context.stage, a26 = o15(e32);
    s27 !== this._context.physicalBasedRenderingEnabled && this.physicalBasedRenderingChanged(), i20.addMany(a26), this._addDisposeResource(() => i20.removeMany(a26));
    const o27 = r24(e32);
    i20.addMany(o27), this._addDisposeResource(() => i20.removeMany(o27)), await i20.load(o27, r38), s3(r38);
    const n26 = s14(e32);
    return i20.addMany(n26), this._addDisposeResource(() => i20.removeMany(n26)), { materials: a26, textures: o27, geometries: n26 };
  }
  async _createLodRenderer(e32, t23) {
    const s27 = this._context.stage, r38 = { layerUid: this._context.layer.uid, graphicUid: (e33) => this._instanceIndexToGraphicUid.get(e33), notifyGraphicGeometryChanged: (e33) => this._context.notifyGraphicGeometryChanged(this._instanceIndexToGraphicUid.get(e33)), notifyGraphicVisibilityChanged: (e33) => this._context.notifyGraphicVisibilityChanged(this._instanceIndexToGraphicUid.get(e33)) }, i20 = this._fastUpdates, a26 = i20 ? { applyTransform: (e33, t24, s28) => {
      e33.getFeatureAttribute(t24, _e2), n4(s28, Q(i20.materialParameters, _e2, s28));
    }, scaleFactor: (e33, t24, s28) => {
      t24.getFeatureAttribute(s28, _e2), W4(e33, i20.materialParameters, _e2);
    } } : null, o27 = new q6({ symbol: e32, optionalFields: this._optionalFields, metadata: r38, shaderTransformation: a26 }, this._context.scheduler);
    return o27.slicePlaneEnabled = this._context.slicePlaneEnabled, this._addDisposeResource(() => {
      s27.removeRenderPlugin(o27), o27.destroy();
    }), await s27.addRenderPlugin(o27.slots, o27, t23), o27;
  }
  _getExternalColorParameters(t23) {
    const s27 = {};
    return this._drivenProperties.color ? s27.externalColor = _3 : null != t23 && null != t23.color ? s27.externalColor = h4.toUnitRGBA(t23.color) : (s27.externalColor = _3, s27.colorMixMode = "ignore"), s27;
  }
  destroy() {
    super.destroy(), this._cleanupResources();
  }
  _cleanupResources() {
    this._disposeResourceHandles.forEach((e32) => e32()), this._disposeResourceHandles.length = 0, this._resources = null;
  }
  createGraphics3DGraphic(e32) {
    const t23 = e32.graphic;
    if (!this._validateGeometry(t23.geometry))
      return null;
    const s27 = u13(t23.geometry);
    if (null == s27)
      return this.logger.warn(`unsupported geometry type for icon symbol: ${t23.geometry.type}`), null;
    const r38 = this.setGraphicElevationContext(t23, new o12()), i20 = e32.renderingInfo;
    return this._createAs3DShape(t23, s27, i20, r38, t23.uid, e32.layer.uid);
  }
  notifyDestroyGraphicLayer(e32) {
    this._instanceIndexToGraphicUid.delete(e32.instanceIndex);
  }
  graphicLayerToGraphicId() {
    return 0;
  }
  layerOpacityChanged() {
    var _a, _b;
    if (null == this._resources)
      return;
    const e32 = this._drivenProperties.opacity, t23 = !this._isPrimitive, s27 = this._resources.stageResources.materials, r38 = this._resources.originalMaterialParameters;
    for (let i20 = 0; i20 < s27.length; i20++) {
      const a26 = s27[i20], o27 = (_b = (_a = this.symbolLayer) == null ? void 0 : _a.material) == null ? void 0 : _b.color, n26 = r38[i20], l33 = this._getCombinedOpacity(o27, { hasIntrinsicColor: t23 }) * n26.opacity, c34 = l33 < 1 || e32 || n26.transparent;
      a26.setParameters({ opacity: l33, transparent: c34 }), this._isPrimitive && a26.setParameters({ cullFace: c34 ? n9.None : n9.Back });
    }
  }
  layerElevationInfoChanged(e32, t23) {
    return this.updateGraphics3DGraphicElevationInfo(e32, t23, p5);
  }
  slicePlaneEnabledChanged() {
    if (null == this._resources)
      return true;
    this._resources.lodRenderer.slicePlaneEnabled = this._context.slicePlaneEnabled;
    for (const e32 of this._resources.stageResources.materials)
      e32.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled });
    return true;
  }
  physicalBasedRenderingChanged() {
    if (null == this._resources)
      return true;
    const { stageResources: e32, isWosr: t23 } = this._resources;
    for (const s27 of e32.materials)
      this._isPrimitive ? s27.setParameters({ usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: true }) : t23 || s27.setParameters({ usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: false });
    return false !== this._hasLoadedPBRTextures || true !== this._context.physicalBasedRenderingEnabled || (this._hasLoadedPBRTextures = true, false);
  }
  applyRendererDiff(e32, t23) {
    if (null == this._resources)
      return e21.RecreateSymbol;
    const { stageResources: { materials: s27 }, lodRenderer: r38, resourceBoundingBox: i20, symbolSize: a26, resourceSize: o27, pivotOffset: n26 } = this._resources;
    for (const l33 in e32.diff) {
      if ("visualVariables" !== l33)
        return e21.RecreateSymbol;
      if (!G2(this._fastUpdates, t23, this._fastVisualVariableConvertOptions(i20, a26, o27, n26)))
        return e21.RecreateSymbol;
      for (const e33 of s27)
        e33.setParameters(this._fastUpdates.materialParameters);
      r38.notifyShaderTransformationChanged();
    }
    return e21.FastUpdate;
  }
  computeComplexity() {
    if (null == this._resources)
      return super.computeComplexity();
    const e32 = this._resources.lodResources, t23 = n14(e32.levels[0]).reduce((e33, t24) => e33 + t24.indices.get(O3.POSITION).length, 0) / 3, s27 = (e33) => Array.from(e33.vertexAttributes.values()).reduce((e34, t24) => e34 + m(t24.data), 0) + Array.from(e33.indices.values()).reduce((e34, t24) => e34 + m(t24), 0), i20 = r24(e32).reduce((e33, t24) => e33 + (t24.parameters.encoding && "image/ktx2" === t24.parameters.encoding ? t24.memoryEstimate : t24.memoryEstimate / 4), 0) + s14(e32).reduce((e33, t24) => e33 + s27(t24), 0);
    return { primitivesPerFeature: t23, primitivesPerCoordinate: 0, drawCallsPerFeature: 0, estimated: false, memory: { ...F4(this.symbol, this.symbolLayer), resourceBytes: i20 } };
  }
  _hasLodRenderer() {
    return null != this._resources;
  }
  _createAs3DShape(e32, t23, s27, r38, i20, a26) {
    if (!this._hasLodRenderer() || null == this._resources)
      return null;
    const o27 = this.getFastUpdateAttrValues(e32), n26 = this._context.clippingExtent;
    if (In(t23, ue2, this._context.elevationProvider.spatialReference), null != n26 && !y3(n26, ue2))
      return null;
    const l33 = this._requiresTerrainElevation(r38), c34 = this._computeGlobalTransform(t23, r38, fe2, ge2), h23 = this._computeLocalTransform(this._resources, this.symbolLayer, s27, ye3), d19 = this._resources.lodRenderer.instanceData, m15 = d19.addInstance();
    this._instanceIndexToGraphicUid.set(m15, i20), d19.setLocalTransform(m15, h23, false), d19.setGlobalTransform(m15, c34), o27 && d19.setFeatureAttribute(m15, o27), null == this._fastUpdates && this._hasPerInstanceColor() && d19.setColor(m15, k3(s27.color, s27.opacity, 255)), null != this._context.stage.renderView.objectAndLayerIdRenderHelper && d19.setObjectAndLayerIdColor(m15, this._context.stage.renderView.objectAndLayerIdRenderHelper.getObjectAndLayerIdColor({ graphicUid: i20, layerUid: a26 }));
    const p19 = new f19(this, m15, g7, r38);
    return l33 && (p19.alignedSampledElevation = ge2.sampledElevation), p19.needsElevationUpdates = p5(r38.mode), p9(p19, t23, this._context.elevationProvider), p19;
  }
  _computeGlobalTransform(e32, t23, s27, r38) {
    return c18(e32, this._context.elevationProvider, t23, this._context.renderCoordsHelper, r38), ue2[0] = e32.x, ue2[1] = e32.y, ue2[2] = r38.z, zn(e32.spatialReference, ue2, s27, this._context.renderCoordsHelper.spatialReference), s27;
  }
  _computeLocalTransform(e32, t23, s27, r38) {
    return r5(r38), this._applyObjectRotation(s27, false, r38), this._applyObjectRotation(t23, true, r38), this._applyObjectScale(e32, s27, r38), this._applyAnchor(e32, t23, r38), r38;
  }
  _applyObjectScale(e32, t23, s27) {
    var _a;
    if ((_a = this._fastUpdates) == null ? void 0 : _a.requiresShaderTransformation)
      return;
    const r38 = this._drivenProperties.size && t23.size ? t23.size : e32.symbolSize, i20 = B2(r38, e32.symbolSize, e32.resourceSize, this._context.renderCoordsHelper.unitInMeters);
    1 === i20[0] && 1 === i20[1] && 1 === i20[2] || f6(s27, s27, i20);
  }
  prepareSymbolLayerPatch(e32) {
    if ("partial" !== e32.diff.type)
      return;
    const t23 = e32.diff.diff;
    this._preparePatchTransform(e32, t23), this._preparePatchColor(e32, t23);
  }
  updateGeometry(e32, t23) {
    if (null == this._resources)
      return true;
    const s27 = t23 && u13(t23);
    if (null == s27)
      return false;
    const r38 = this.getGeometryElevationMode(t23);
    return e32.elevationContext.mode === r38 && (this._computeGlobalTransform(s27, e32.elevationContext, fe2, ge2), this._requiresTerrainElevation(e32.elevationContext) && (e32.alignedSampledElevation = ge2.sampledElevation), this._resources.lodRenderer.instanceData.setGlobalTransform(e32.instanceIndex, fe2, true), p9(e32, s27, this._context.elevationProvider), true);
  }
  _preparePatchTransform(e32, t23) {
    if (!(t23.heading || t23.tilt || t23.roll || t23.width || t23.height || t23.depth || t23.anchor || t23.anchorPosition))
      return;
    if (null == this._resources)
      return;
    const s27 = (e33, t24, s28) => (null != e33 && "complete" === e33.type ? e33.newValue : t24) ?? s28, r38 = s27(t23.heading, this.symbolLayer.heading, 0), i20 = s27(t23.tilt, this.symbolLayer.tilt, 0), a26 = s27(t23.roll, this.symbolLayer.roll, 0), o27 = s27(t23.width, this.symbolLayer.width, void 0), n26 = s27(t23.height, this.symbolLayer.height, void 0), l33 = s27(t23.depth, this.symbolLayer.depth, void 0), c34 = s27(t23.anchor, this.symbolLayer.anchor, void 0), h23 = s27(t23.anchorPosition, this.symbolLayer.anchorPosition, void 0);
    delete t23.heading, delete t23.tilt, delete t23.roll, delete t23.width, delete t23.height, delete t23.depth, delete t23.anchor, delete t23.anchorPosition;
    const d19 = { heading: r38, tilt: i20, roll: a26, anchor: c34, anchorPosition: h23 }, m15 = this._resources;
    this.loadStatus === l19.LOADED && e32.symbolLayerStatePatches.push(() => {
      m15.symbolSize = e5(t2(m15.resourceSize, { width: o27, height: n26, depth: l33, isPrimitive: this.symbolLayer.isPrimitive }));
    }), e32.graphics3DGraphicPatches.push((e33, t24) => {
      const s28 = this._computeLocalTransform(m15, d19, t24, ye3), r39 = e33.instanceIndex;
      m15.lodRenderer.instanceData.setLocalTransform(r39, s28, true);
    });
  }
  _preparePatchColor(t23, s27) {
    if (!s27.material || "partial" !== s27.material.type)
      return;
    const r38 = s27.material.diff;
    if (!r38.color || "complete" !== r38.color.type || null == r38.color.newValue || null == r38.color.oldValue)
      return;
    const i20 = r38.color.newValue, a26 = null != i20 ? h4.toUnitRGBA(i20) : _3;
    delete r38.color;
    const o27 = this._resources;
    null != o27 && t23.graphics3DGraphicPatches.push((e32) => {
      let t24;
      this._hasPerInstanceColor() ? (o27.lodRenderer.instanceData.setColor(e32.instanceIndex, a26), t24 = this._setMaterialTransparencyParams({}, i20)) : t24 = this._setMaterialTransparencyParams({ externalColor: a26 }, i20);
      for (const s28 of o27.stageResources.materials)
        s28.setParameters(t24);
    });
  }
  _requiresTerrainElevation(e32) {
    return "absolute-height" !== e32.mode;
  }
  _applyObjectRotation(e32, t23, s27) {
    var _a;
    if (!((_a = this._fastUpdates) == null ? void 0 : _a.requiresShaderTransformation) || !t23)
      return S4(e32.heading, e32.tilt, e32.roll, s27);
  }
  _computeAnchor(e32, t23, s27) {
    const r38 = n2();
    switch (s27.anchor) {
      case "center":
        r4(r38, E(e32)), j(r38, r38);
        break;
      case "top": {
        const t24 = E(e32);
        o(r38, -t24[0], -t24[1], -e32[5]);
        break;
      }
      case "bottom": {
        const t24 = E(e32);
        o(r38, -t24[0], -t24[1], -e32[2]);
        break;
      }
      case "relative": {
        const t24 = E(e32), i20 = F(e32), a26 = s27.anchorPosition, o27 = a26 ? r2(a26.x, a26.y, a26.z) : f3;
        c3(r38, i20, o27), u(r38, r38, t24), j(r38, r38);
        break;
      }
      default:
        null != t23 ? j(r38, t23) : r4(r38, f3);
    }
    return r38;
  }
  _applyAnchor(e32, t23, s27) {
    var _a;
    if ((_a = this._fastUpdates) == null ? void 0 : _a.requiresShaderTransformation)
      return;
    const r38 = this._computeAnchor(e32.resourceBoundingBox, e32.pivotOffset, t23);
    r38 && i4(s27, s27, r38);
  }
  _hasPerInstanceColor() {
    return this._drivenProperties.color || this._drivenProperties.opacity;
  }
  _fastVisualVariableConvertOptions(e32, t23, s27, r38) {
    const i20 = null != e32 ? e5(F(e32)) : l2, a26 = null != e32 ? this._computeAnchor(e32, r38, this.symbolLayer) : f3, o27 = this._context.renderCoordsHelper.unitInMeters, n26 = B2(null != t23 ? t23 : void 0, t23, s27, o27), l33 = r2(this.symbolLayer.tilt || 0, this.symbolLayer.roll || 0, this.symbolLayer.heading || 0);
    return new B({ size: true, color: true, rotation: true, opacity: false }, i20, t23 ?? l2, o27, a26, n26, l33);
  }
};
var ue2 = n2();
var ye3 = e12();
var fe2 = e12();
var _e2 = n6();
var ge2 = new R6();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Path.js
var e27 = class {
  constructor(t23, i20, s27, e32) {
    this.vertices = t23, this.positionsES = i20, this.offset = e32;
    const n26 = t23.length, r38 = Math.floor(n26 / 2), v13 = this.offset + 3 * r38, g16 = s27[v13], f25 = s27[v13 + 1], c34 = s27[v13 + 2];
    this.origin = r2(g16, f25, c34), this.positions = t12(3 * n26);
    const a26 = this.offset + 3 * n26;
    for (let o27 = this.offset; o27 < a26; o27 += 3)
      this.positions[o27] = s27[o27] - g16, this.positions[o27 + 1] = s27[o27 + 1] - f25, this.positions[o27 + 2] = s27[o27 + 2] - c34;
    this.updatePathVertexInformation();
  }
  updatePathVertexInformation() {
    const o27 = this.vertices.length, h23 = this.vertices[0];
    let e32 = this.offset;
    const n26 = this.positions;
    h23.vRight[0] = n26[e32 + 3] - n26[e32], h23.vRight[1] = n26[e32 + 4] - n26[e32 + 1], h23.vRight[2] = n26[e32 + 5] - n26[e32 + 2], e32 += 3;
    let r38 = s4(h23.vRight);
    h23.vMinSiblingLength = r38, z(h23.vRight, h23.vRight);
    let v13 = h23;
    for (let g16 = 1; g16 < o27; ++g16) {
      const h24 = this.vertices[g16];
      if (h24.vLeft = v13.vRight, g16 < o27 - 1) {
        h24.vRight[0] = n26[e32 + 3] - n26[e32], h24.vRight[1] = n26[e32 + 4] - n26[e32 + 1], h24.vRight[2] = n26[e32 + 5] - n26[e32 + 2];
        const s27 = s4(h24.vRight);
        h24.vMinSiblingLength = Math.min(r38, s27), r38 = s27, z(h24.vRight, h24.vRight);
      } else
        r4(h24.vRight, h24.vLeft), h24.vMinSiblingLength = r38;
      v13 = h24, e32 += 3;
    }
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathBuilder.js
var r34 = class {
  constructor(s27, r38, h23, o27, p19, n26 = {}) {
    this.path = s27, this.profile = r38, this.extruder = h23, this.startCap = o27, this.endCap = p19, this.options = n26, this._extrusionVertexCount = 0;
    const l33 = this.path.vertices.length - 2;
    this.numExtrusionProfiles = h23.numProfilesPerJoin() * l33 + 2, this.numVerticesTotal = r38.vertices.length * this.numExtrusionProfiles, this.startCap.vertexBufferStart = this.numVerticesTotal;
    const a26 = this.startCap.numVertices;
    this.numVerticesTotal += a26, this.endCap.vertexBufferStart = this.numVerticesTotal;
    const u23 = this.endCap.numVertices;
    this.numVerticesTotal += u23, this.pathVertexData = f8(1 * this.numVerticesTotal), this.profileRightAxes = t12(4 * this.numVerticesTotal), this.profileUpAxes = t12(4 * this.numVerticesTotal), this.profileVertexAndNormals = t12(4 * this.numVerticesTotal), this.positions = o7(s27.positions, s27.offset, 3 * s27.vertices.length), this._rebuildGeometry(), this.buildTopology();
  }
  emitVertex(t23, e32, i20, s27, r38) {
    const h23 = 4 * this._extrusionVertexCount;
    if (this.profileRightAxes[h23] = e32.right[0], this.profileRightAxes[h23 + 1] = e32.right[1], this.profileRightAxes[h23 + 2] = e32.right[2], this.profileUpAxes[h23] = e32.up[0], this.profileUpAxes[h23 + 1] = e32.up[1], this.profileUpAxes[h23 + 2] = e32.up[2], this.profileVertexAndNormals[h23] = i20[0], this.profileVertexAndNormals[h23 + 1] = i20[1], this.profileVertexAndNormals[h23 + 2] = s27[0], this.profileVertexAndNormals[h23 + 3] = s27[1], this.pathVertexData[this._extrusionVertexCount] = t23, r38) {
      const e33 = this.path.vertices[t23], i21 = e33.maxStretchDistance;
      this.profileRightAxes[h23 + 3] = e33.rotationRight[0] * i21, this.profileUpAxes[h23 + 3] = e33.rotationRight[1] * i21;
    } else
      this.profileRightAxes[h23 + 3] = 0, this.profileUpAxes[h23 + 3] = 0;
    ++this._extrusionVertexCount;
  }
  emitCapVertex(t23, e32, i20, s27, r38, h23) {
    const o27 = 4 * this._extrusionVertexCount;
    this.profileRightAxes[o27] = e32.right[0], this.profileRightAxes[o27 + 1] = e32.right[1], this.profileRightAxes[o27 + 2] = e32.right[2], this.profileRightAxes[o27 + 3] = r38, this.profileUpAxes[o27] = e32.up[0], this.profileUpAxes[o27 + 1] = e32.up[1], this.profileUpAxes[o27 + 2] = e32.up[2], this.profileUpAxes[o27 + 3] = h23, this.profileVertexAndNormals[o27] = i20[0], this.profileVertexAndNormals[o27 + 1] = i20[1], this.profileVertexAndNormals[o27 + 2] = s27[0], this.profileVertexAndNormals[o27 + 3] = s27[1], this.pathVertexData[this._extrusionVertexCount] = t23, ++this._extrusionVertexCount;
  }
  _rebuildGeometry() {
    this._extrusionVertexCount = 0;
    const { positions: t23, offset: i20, vertices: s27 } = this.path;
    this.positions = o7(t23, i20, 3 * s27.length);
    let r38 = 0;
    const h23 = (t24, e32, i21, s28, h24) => this.emitCapVertex(r38, t24, e32, i21, s28, h24), o27 = (t24, e32, i21, s28) => this.emitVertex(r38, t24, e32, i21, s28);
    for (this.startCap.rebuildConnectingProfileGeometry(s27[r38], this.profile, h23), r38 = 1; r38 < s27.length - 1; ++r38)
      this.extruder.extrude(s27[r38], this.profile, o27);
    this.endCap.rebuildConnectingProfileGeometry(s27[r38], this.profile, h23), r38 = 0, this.startCap.rebuildCapGeometry(s27[r38], h23), r38 = s27.length - 1, this.endCap.rebuildCapGeometry(s27[r38], h23);
  }
  buildTopology() {
    const t23 = this.profile.vertices.length, e32 = this.profile.numSegments, i20 = this.numExtrusionProfiles - 1;
    let r38 = 3 * (2 * (e32 * i20));
    this.startCap.indexBufferStart = r38, this.startCap.firstProfileVertexIndex = 0, r38 += this.startCap.numIndices, this.endCap.indexBufferStart = r38, this.endCap.firstProfileVertexIndex = t23 * (this.numExtrusionProfiles - 1);
    const h23 = new Array(), o27 = new Array(), p19 = new Array(), n26 = (t24, e33, i21) => {
      h23.push(t24), h23.push(e33), h23.push(i21), o27.push(t24), o27.push(e33), o27.push(i21), p19.push(this.pathVertexData[t24]), p19.push(this.pathVertexData[e33]), p19.push(this.pathVertexData[i21]);
    };
    for (let s27 = 0; s27 < e32; ++s27) {
      const e33 = this.profile.indices[2 * s27], r39 = this.profile.indices[2 * s27 + 1];
      for (let s28 = 0; s28 < i20; ++s28) {
        const i21 = s28 * t23 + e33, h24 = (s28 + 1) * t23 + r39, o28 = s28 * t23 + r39;
        n26(i21, (s28 + 1) * t23 + e33, h24), n26(i21, h24, o28);
      }
    }
    this.startCap.buildTopology(this.path.vertices[0], n26), this.endCap.buildTopology(this.path.vertices[this.path.vertices.length - 1], n26), this.vertexIndices = t6(h23), this.normalIndices = t6(o27), this.pathVertexIndices = t6(p19);
  }
  onPathChanged() {
    this._rebuildGeometry();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathCapBuilder.js
var o22 = class {
  rebuildConnectingProfileGeometry(e32, t23, s27) {
    for (let i20 = 0; i20 < t23.vertices.length; ++i20)
      s27(e32.frame, t23.vertices[i20], t23.normals[i20], 0, 0);
  }
};
var l27 = class extends o22 {
  constructor() {
    super(), this.numVertices = 0, this.numIndices = 0;
  }
  rebuildCapGeometry() {
  }
  buildTopology() {
  }
};
var h18 = class extends o22 {
  constructor(e32, t23 = 0, s27 = false) {
    super(), this.profile = e32, this.profilePlaneOffset = t23, this.flip = s27;
  }
  get numVertices() {
    return this.profile.vertices.length;
  }
  get numIndices() {
    return 3 * this.profile.numSegments;
  }
  rebuildConnectingProfileGeometry(e32, t23, s27) {
    const i20 = this.profilePlaneOffset;
    for (let r38 = 0; r38 < t23.vertices.length; ++r38)
      s27(e32.frame, t23.vertices[r38], t23.normals[r38], i20, 0);
  }
  rebuildCapGeometry(t23, s27) {
    const i20 = this.profile, r38 = this.flip ? 1 : -1, n26 = this.profilePlaneOffset, o27 = m9;
    r7(o27, 0, 0);
    for (let e32 = 0; e32 < i20.vertices.length; ++e32)
      s27(t23.frame, i20.vertices[e32], o27, n26, r38);
  }
  buildTopology(e32, t23) {
    const s27 = this.profile, i20 = this.vertexBufferStart + s27.indices[0];
    for (let r38 = 1; r38 < s27.numSegments; ++r38) {
      const e33 = s27.indices[2 * r38], n26 = s27.indices[2 * r38 + 1], o27 = this.vertexBufferStart + e33, l33 = this.vertexBufferStart + n26;
      this.flip ? t23(l33, o27, i20) : t23(i20, o27, l33);
    }
  }
};
var f21 = class extends o22 {
  constructor(e32) {
    super(), this.flip = false, this.sign = 0, this.breakNormals = false, this.numSegments = 3, this.profile = e32.profile, this.flip = e32.flip, this.sign = this.flip ? 1 : -1, this.breakNormals = e32.breakNormals, this.numSegments = e32.subdivisions;
  }
  get numVertices() {
    let e32 = this.profile.vertices.length * (this.numSegments - 1) + this.profile.poles.length;
    return this.breakNormals && (e32 += this.profile.vertices.length), e32;
  }
  get numIndices() {
    let e32 = 0;
    const t23 = this.profile;
    e32 += 2 * t23.numSegments * (this.numSegments - 1);
    for (let s27 = 0; s27 < t23.numSegments; ++s27) {
      const i20 = t23.indices[2 * s27], r38 = t23.indices[2 * s27 + 1];
      t23.poleIndices[i20] === t23.poleIndices[r38] ? e32 += 1 : e32 += 2;
    }
    return 3 * e32;
  }
  rebuildCapGeometry(n26, o27) {
    const l33 = this.profile, h23 = n26.frame, f25 = 0.5 * this.sign, a26 = c29, p19 = m9;
    r7(p19, 0, 0);
    for (const e32 of l33.poles)
      e32.normal ? o27(h23, e32.position, e32.normal, f25, 0) : o27(h23, e32.position, p19, f25, this.sign);
    if (this.breakNormals)
      for (let e32 = 0; e32 < l33.vertices.length; ++e32)
        o27(h23, l33.vertices[e32], l33.normals[e32], 0, 0);
    for (let e32 = 0; e32 < this.numSegments - 1; ++e32) {
      const n27 = (1 - (e32 + 1) / this.numSegments) * Math.PI * 0.5, c34 = Math.sin(n27), m15 = Math.cos(n27);
      for (let e33 = 0; e33 < l33.vertices.length; ++e33) {
        const n28 = l33.poles[l33.poleIndices[e33]];
        o4(a26, l33.vertices[e33], n28.position), l8(a26, a26, c34), n28.normal ? (s6(a26, a26, n28.position), o27(h23, a26, n28.normal, f25 * m15, 0)) : (v(p19, a26), l8(p19, p19, c34), s6(a26, a26, n28.position), o27(h23, a26, p19, f25 * m15, this.sign * m15));
      }
    }
  }
  buildTopology(e32, t23) {
    const s27 = this.profile, i20 = this.breakNormals ? this.vertexBufferStart + s27.poles.length : this.firstProfileVertexIndex, r38 = this.breakNormals ? this.vertexBufferStart + s27.poles.length + s27.vertices.length : this.vertexBufferStart + s27.poles.length;
    for (let n26 = 0; n26 < s27.numSegments; ++n26) {
      const e33 = s27.indices[2 * n26], o27 = s27.indices[2 * n26 + 1], l33 = this.vertexBufferStart + s27.poleIndices[e33], h23 = this.vertexBufferStart + s27.poleIndices[o27];
      let f25 = i20 + e33, c34 = i20 + o27;
      for (let i21 = 0; i21 < this.numSegments - 1; ++i21) {
        const n27 = r38 + i21 * s27.vertices.length + e33, l34 = r38 + i21 * s27.vertices.length + o27;
        this.flip ? (t23(n27, c34, f25), t23(c34, n27, l34)) : (t23(f25, c34, n27), t23(l34, n27, c34)), f25 = n27, c34 = l34;
      }
      this.flip ? (t23(l33, c34, f25), l33 !== h23 && t23(l33, h23, c34)) : (t23(f25, c34, l33), l33 !== h23 && t23(c34, h23, l33));
    }
  }
};
var c29 = n7();
var m9 = n7();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathExtruder.js
var c30 = class {
  numProfilesPerJoin() {
    return 1;
  }
  extrude(s27, t23, e32) {
    for (let r38 = 0; r38 < t23.vertices.length; ++r38)
      e32(s27.frame, t23.vertices[r38], t23.normals[r38], false);
  }
};
var u20 = class {
  constructor(s27, t23) {
    this.cutoffAngle = s27, this.numBendSubdivisions = t23;
  }
  numProfilesPerJoin() {
    return this.numBendSubdivisions + 1;
  }
  extrude(t23, r38, i20) {
    const n26 = l28, { rotationAngle: o27, rotationRight: c34, frame: u23 } = t23;
    if (Math.abs(o27) >= this.cutoffAngle) {
      const m15 = t23.rotationFrameUp;
      for (let l33 = 0; l33 < this.numBendSubdivisions + 1; ++l33) {
        g2(h19, 0.5 * -o27 + l33 * o27 / this.numBendSubdivisions, m15), a23(n26, u23, h19);
        for (let s27 = 0; s27 < r38.vertices.length; ++s27) {
          if (j4(r38.vertices[s27], c34) * o27 >= 0)
            i20(n26, r38.vertices[s27], r38.normals[s27], false);
          else {
            i20(u23, t23.applyMiterStretch(f22, r38.vertices[s27]), r38.normals[s27], true);
          }
        }
      }
    } else
      for (let s27 = 0; s27 < this.numBendSubdivisions + 1; ++s27)
        for (let n27 = 0; n27 < r38.vertices.length; ++n27) {
          const s28 = j4(r38.vertices[n27], c34) * o27 >= 0;
          i20(u23, t23.applyMiterStretch(f22, r38.vertices[n27]), r38.normals[n27], !s28);
        }
  }
};
var m10 = class {
  constructor() {
    this.up = n2(), this.right = n2();
  }
};
function a23(s27, t23, e32) {
  O(s27.up, t23.up, e32), O(s27.right, t23.right, e32);
}
var f22 = n7();
var h19 = e12();
var l28 = new m10();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathGeometry.js
var e28 = class extends b4 {
  constructor(r38, e32, o27, n26, s27, i20, h23) {
    super(r38, e32, o27, null, e15.Mesh, h23), this.path = n26, this.geometrySR = s27, this.stencilWidth = i20;
  }
};
var o23;
function n22(t23) {
  return "path" in t23;
}
!function(t23) {
  t23[t23.World = 0] = "World", t23[t23.Path = 1] = "Path";
}(o23 || (o23 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathGeometryData.js
var m11 = class {
  constructor(t23) {
    this.builder = t23;
  }
  onPathChanged(t23) {
    this.builder.onPathChanged();
  }
};
var x6 = class extends m11 {
  constructor(t23) {
    super(t23), this.vertexAttributeColor = r6(255, 255, 255, 255), this.size = new Array(), this.vertexAttributePosition = t12(3 * this.builder.numVerticesTotal), this.vertexAttributeNormal = new Int16Array(2 * this.builder.numVerticesTotal);
  }
  bakeVertexColors(t23) {
    this.vertexAttributeColor[0] = 255 * t23[0], this.vertexAttributeColor[1] = 255 * t23[1], this.vertexAttributeColor[2] = 255 * t23[2], this.vertexAttributeColor[3] = 255 * (t23.length > 3 ? t23[3] : 1);
  }
  bake(n26) {
    this.size = n26;
    const { numVerticesTotal: l33, pathVertexData: u23, path: c34, positions: b15, profileRightAxes: d19, profileUpAxes: A12, profileVertexAndNormals: p19 } = this.builder;
    for (let m15 = 0; m15 < l33; ++m15) {
      let l34 = u23[m15];
      const x10 = 0 === l34 || l34 === c34.vertices.length - 1;
      l34 *= 3;
      const I16 = E10;
      let P14 = 0, V9 = 0;
      const w9 = 4 * m15, D6 = o(C7, d19[w9], d19[w9 + 1], d19[w9 + 2]), L8 = o(N2, A12[w9], A12[w9 + 1], A12[w9 + 2]), T11 = r7(f23, p19[w9] * n26[0], p19[w9 + 1] * n26[1]);
      if (x10)
        _(I16, L8, D6), P14 = d19[w9 + 3] * n26[0], V9 = A12[w9 + 3];
      else {
        const n27 = O12, h23 = R8;
        r7(n27, d19[w9 + 3], A12[w9 + 3]);
        const l35 = q3(n27);
        v(n27, n27);
        const u24 = j4(T11, n27);
        if (Math.abs(u24) > l35) {
          r7(h23, -n27[1], n27[0]);
          const e32 = j4(T11, h23);
          l8(n27, n27, l35 * Math.sign(u24)), l8(h23, h23, e32), s6(T11, n27, h23);
        }
        o(I16, 0, 0, 0);
      }
      const j13 = o(g12, D6[0] * T11[0] + L8[0] * T11[1], D6[1] * T11[0] + L8[1] * T11[1], D6[2] * T11[0] + L8[2] * T11[1]), M12 = 3 * m15;
      this.vertexAttributePosition[M12] = b15[l34] + j13[0] + I16[0] * P14, this.vertexAttributePosition[M12 + 1] = b15[l34 + 1] + j13[1] + I16[1] * P14, this.vertexAttributePosition[M12 + 2] = b15[l34 + 2] + j13[2] + I16[2] * P14;
      const k11 = r7(f23, p19[w9 + 2], p19[w9 + 3]);
      n19(this.vertexAttributeNormal, m15, D6[0] * k11[0] + L8[0] * k11[1] + I16[0] * V9, D6[1] * k11[0] + L8[1] * k11[1] + I16[1] * V9, D6[2] * k11[0] + L8[2] * k11[1] + I16[2] * V9);
    }
  }
  createGeometryData() {
    const t23 = this.builder.vertexIndices.length;
    return new P9([[O3.POSITION, new s9(this.vertexAttributePosition, 3, true)], [O3.NORMALCOMPRESSED, new s9(this.vertexAttributeNormal, 2, true)], [O3.COLOR, new s9(this.vertexAttributeColor, 4)]], [[O3.POSITION, this.builder.vertexIndices], [O3.NORMALCOMPRESSED, this.builder.normalIndices], [O3.COLOR, l11(t23)]]);
  }
  onPathChanged(t23) {
    super.onPathChanged(t23), this.bake(this.size);
  }
  intersect(t23, e32, i20) {
    const s27 = this.builder.vertexIndices, r38 = new s9(this.vertexAttributePosition, 3), o27 = s27.length / 3;
    g5(t23, e32, 0, o27, s27, r38, void 0, void 0, i20);
  }
};
var I12 = class extends m11 {
  constructor(t23, e32, i20, s27) {
    super(t23), this.sizeAttributeValue = e32, this.colorAttributeValue = i20, this.opacityAttributeValue = s27, this.vvData = null, this.baked = new x6(t23), this.vvData = t12(4 * this.builder.path.vertices.length);
    for (let r38 = 0; r38 < this.builder.path.vertices.length; ++r38) {
      this.vvData[4 * r38] = e32, this.vvData[4 * r38 + 1] = i20, this.vvData[4 * r38 + 2] = s27;
      const t24 = 0 === r38 || r38 === this.builder.path.vertices.length - 1;
      this.vvData[4 * r38 + 3] = t24 ? 1 : 0;
    }
  }
  createGeometryData() {
    return new P9([[O3.POSITION, new s9(this.builder.positions, 3, true)], [O3.PROFILERIGHT, new s9(this.builder.profileRightAxes, 4, true)], [O3.PROFILEUP, new s9(this.builder.profileUpAxes, 4, true)], [O3.PROFILEVERTEXANDNORMAL, new s9(this.builder.profileVertexAndNormals, 4, true)], [O3.FEATUREVALUE, new s9(this.vvData, 4, true)]], [[O3.POSITION, this.builder.pathVertexIndices], [O3.PROFILERIGHT, this.builder.vertexIndices], [O3.PROFILEUP, this.builder.vertexIndices], [O3.PROFILEVERTEXANDNORMAL, this.builder.vertexIndices], [O3.FEATUREVALUE, this.builder.pathVertexIndices]]);
  }
  onPathChanged(t23) {
    super.onPathChanged(t23);
    const e32 = t23.getMutableAttribute(O3.POSITION);
    e32 && (e32.data = this.builder.positions);
  }
};
var P9 = class {
  constructor(t23, e32) {
    this.vertexAttributes = t23, this.indices = e32;
  }
};
var f23 = n7();
var O12 = n7();
var R8 = n7();
var g12 = n2();
var E10 = n2();
var C7 = n2();
var N2 = n2();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/pathGeometryUtils.js
function l29(t23, r38) {
  let g16 = null;
  const v13 = t23.vertices.length, l33 = 0.99619469809, R10 = n2(), y12 = n2(), k11 = n2(), L8 = n2(), q10 = n2(), x10 = n2(), G7 = h7();
  let M12 = t23.vertices[0];
  r4(y12, r38), o(R10, 0, 1, 0), wt(M12.vRight, y12, R10, R10, k11, y12, l33), r4(M12.frame.up, y12), r4(M12.frame.right, k11);
  const U7 = t23.positions;
  let b15 = t23.offset;
  g16 = M12;
  for (let p19 = 1; p19 < v13; ++p19) {
    M12 = t23.vertices[p19], u(q10, M12.vLeft, M12.vRight);
    let r39 = s4(q10);
    r39 > 0 ? (r39 = 1 / Math.sqrt(r39), q10[0] = q10[0] * r39, q10[1] = q10[1] * r39, q10[2] = q10[2] * r39) : (q10[0] = M12.vRight[0], q10[1] = M12.vRight[1], q10[2] = M12.vRight[2]), x10[0] = U7[b15] + g16.frame.up[0], x10[1] = U7[b15 + 1] + g16.frame.up[1], x10[2] = U7[b15 + 2] + g16.frame.up[2], b15 += 3;
    const a26 = o(j7, U7[b15], U7[b15 + 1], U7[b15 + 2]);
    T5(a26, q10, G7);
    q4(G7, p(x10, M12.vLeft), L8) ? (L8[0] -= U7[b15], L8[1] -= U7[b15 + 1], L8[2] -= U7[b15 + 2], z(y12, L8), _(k11, q10, y12), z(k11, k11)) : wt(q10, g16.frame.up, g16.frame.right, R10, k11, y12, l33), r4(M12.frame.up, y12), r4(M12.frame.right, k11), g16 = M12;
  }
}
var j7 = n2();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathProfile.js
var n23 = class {
  constructor() {
    this.vertices = new Array(), this.normals = new Array(), this.indices = new Array(), this.poles = new Array(), this.poleIndices = new Array();
  }
  addVertex(t23, s27) {
    return this.vertices.push(t5(t23)), this.normals.push(t5(s27)), this.vertices.length - 1;
  }
  addPole(t23, s27 = null) {
    return this.poles.push({ position: t5(t23), normal: s27 ? t5(s27) : null }), this.poles.length - 1;
  }
  addSegment(t23, e32 = null) {
    this.indices.push(t23.v0), this.indices.push(t23.v1), e32 && (this.poleIndices.push(e32.v0), this.poleIndices.push(e32.v1));
  }
  get numSegments() {
    return this.indices.length / 2;
  }
  translate(t23, e32) {
    for (const s27 of this.vertices)
      s27[0] += t23, s27[1] += e32;
    for (const s27 of this.poles)
      s27.position[0] += t23, s27.position[1] += e32;
  }
};
var o24 = { top: [0, -0.5], bottom: [0, 0.5] };
function r35(e32) {
  const r38 = 0.5, d19 = c19, a26 = new n23(), i20 = { v0: 0, v1: 0 };
  a26.addPole(r8(0, 0));
  for (let s27 = 0; s27 < d19; ++s27) {
    const e33 = 2 * s27 * Math.PI / d19, n26 = Math.cos(e33), o27 = Math.sin(e33), i21 = r8(n26 * r38, o27 * r38), c35 = r8(n26, o27);
    a26.addVertex(i21, c35);
  }
  for (let t23 = 0; t23 < d19 - 1; ++t23) {
    const e33 = { v0: t23, v1: t23 + 1 };
    a26.addSegment(e33, i20);
  }
  const c34 = { v0: d19 - 1, v1: 0 };
  if (a26.addSegment(c34, i20), "center" !== e32) {
    const t23 = o24[e32];
    a26.translate(t23[0], t23[1]);
  }
  return a26;
}
var d15 = { center: r35("center"), top: r35("top"), bottom: r35("bottom") };
var a24 = { center: i16("center"), top: i16("top"), bottom: i16("bottom") };
function i16(e32) {
  const s27 = 1, r38 = 1, d19 = new n23(), a26 = r8(0.5 * -s27, 0.5 * -r38), i20 = r8(0.5 * s27, 0.5 * -r38), c34 = r8(0.5 * s27, 0.5 * r38), h23 = r8(0.5 * -s27, 0.5 * r38), l33 = r8(0, -1), v13 = r8(1, 0), p19 = r8(0, 1), m15 = r8(-1, 0);
  if (d19.addPole(r8(0, 0.5 * r38), p19), d19.addPole(r8(0, 0.5 * r38)), d19.addPole(r8(0, 0.5 * -r38)), d19.addPole(r8(0, 0.5 * -r38), l33), d19.addVertex(a26, l33), d19.addVertex(i20, l33), d19.addSegment({ v0: 0, v1: 1 }, { v0: 3, v1: 3 }), d19.addVertex(i20, v13), d19.addVertex(c34, v13), d19.addSegment({ v0: 2, v1: 3 }, { v0: 2, v1: 1 }), d19.addVertex(c34, p19), d19.addVertex(h23, p19), d19.addSegment({ v0: 4, v1: 5 }, { v0: 0, v1: 0 }), d19.addVertex(h23, m15), d19.addVertex(a26, m15), d19.addSegment({ v0: 6, v1: 7 }, { v0: 1, v1: 2 }), "center" !== e32) {
    const t23 = o24[e32];
    d19.translate(t23[0], t23[1]);
  }
  return d19;
}

// node_modules/@arcgis/core/chunks/mat2.js
function n24(t23, n26) {
  return t23[0] = n26[0], t23[1] = n26[1], t23[2] = n26[2], t23[3] = n26[3], t23;
}
function a25(t23) {
  return t23[0] = 1, t23[1] = 0, t23[2] = 0, t23[3] = 1, t23;
}
function r36(t23, n26, a26, r38, s27) {
  return t23[0] = n26, t23[1] = a26, t23[2] = r38, t23[3] = s27, t23;
}
function s24(t23, n26) {
  if (t23 === n26) {
    const a26 = n26[1];
    t23[1] = n26[2], t23[2] = a26;
  } else
    t23[0] = n26[0], t23[1] = n26[2], t23[2] = n26[1], t23[3] = n26[3];
  return t23;
}
function u21(t23, n26) {
  const a26 = n26[0], r38 = n26[1], s27 = n26[2], u23 = n26[3];
  let o27 = a26 * u23 - s27 * r38;
  return o27 ? (o27 = 1 / o27, t23[0] = u23 * o27, t23[1] = -r38 * o27, t23[2] = -s27 * o27, t23[3] = a26 * o27, t23) : null;
}
function o25(t23, n26) {
  const a26 = n26[0];
  return t23[0] = n26[3], t23[1] = -n26[1], t23[2] = -n26[2], t23[3] = a26, t23;
}
function e29(t23) {
  return t23[0] * t23[3] - t23[2] * t23[1];
}
function c31(t23, n26, a26) {
  const r38 = n26[0], s27 = n26[1], u23 = n26[2], o27 = n26[3], e32 = a26[0], c34 = a26[1], i20 = a26[2], f25 = a26[3];
  return t23[0] = r38 * e32 + u23 * c34, t23[1] = s27 * e32 + o27 * c34, t23[2] = r38 * i20 + u23 * f25, t23[3] = s27 * i20 + o27 * f25, t23;
}
function i17(t23, n26, a26) {
  const r38 = n26[0], s27 = n26[1], u23 = n26[2], o27 = n26[3], e32 = Math.sin(a26), c34 = Math.cos(a26);
  return t23[0] = r38 * c34 + u23 * e32, t23[1] = s27 * c34 + o27 * e32, t23[2] = r38 * -e32 + u23 * c34, t23[3] = s27 * -e32 + o27 * c34, t23;
}
function f24(t23, n26, a26) {
  const r38 = n26[0], s27 = n26[1], u23 = n26[2], o27 = n26[3], e32 = a26[0], c34 = a26[1];
  return t23[0] = r38 * e32, t23[1] = s27 * e32, t23[2] = u23 * c34, t23[3] = o27 * c34, t23;
}
function l30(t23, n26) {
  const a26 = Math.sin(n26), r38 = Math.cos(n26);
  return t23[0] = r38, t23[1] = a26, t23[2] = -a26, t23[3] = r38, t23;
}
function h20(t23, n26) {
  return t23[0] = n26[0], t23[1] = 0, t23[2] = 0, t23[3] = n26[1], t23;
}
function M8(t23) {
  return "mat2(" + t23[0] + ", " + t23[1] + ", " + t23[2] + ", " + t23[3] + ")";
}
function b10(t23) {
  return Math.sqrt(t23[0] ** 2 + t23[1] ** 2 + t23[2] ** 2 + t23[3] ** 2);
}
function m12(t23, n26, a26, r38) {
  return t23[2] = r38[2] / r38[0], a26[0] = r38[0], a26[1] = r38[1], a26[3] = r38[3] - t23[2] * a26[1], [t23, n26, a26];
}
function d16(t23, n26, a26) {
  return t23[0] = n26[0] + a26[0], t23[1] = n26[1] + a26[1], t23[2] = n26[2] + a26[2], t23[3] = n26[3] + a26[3], t23;
}
function p17(t23, n26, a26) {
  return t23[0] = n26[0] - a26[0], t23[1] = n26[1] - a26[1], t23[2] = n26[2] - a26[2], t23[3] = n26[3] - a26[3], t23;
}
function y9(t23, n26) {
  return t23[0] === n26[0] && t23[1] === n26[1] && t23[2] === n26[2] && t23[3] === n26[3];
}
function x7(n26, a26) {
  const r38 = n26[0], s27 = n26[1], u23 = n26[2], o27 = n26[3], e32 = a26[0], c34 = a26[1], i20 = a26[2], f25 = a26[3], l33 = a4();
  return Math.abs(r38 - e32) <= l33 * Math.max(1, Math.abs(r38), Math.abs(e32)) && Math.abs(s27 - c34) <= l33 * Math.max(1, Math.abs(s27), Math.abs(c34)) && Math.abs(u23 - i20) <= l33 * Math.max(1, Math.abs(u23), Math.abs(i20)) && Math.abs(o27 - f25) <= l33 * Math.max(1, Math.abs(o27), Math.abs(f25));
}
function g13(t23, n26, a26) {
  return t23[0] = n26[0] * a26, t23[1] = n26[1] * a26, t23[2] = n26[2] * a26, t23[3] = n26[3] * a26, t23;
}
function j8(t23, n26, a26, r38) {
  return t23[0] = n26[0] + a26[0] * r38, t23[1] = n26[1] + a26[1] * r38, t23[2] = n26[2] + a26[2] * r38, t23[3] = n26[3] + a26[3] * r38, t23;
}
var S10 = c31;
var q7 = p17;
var _11 = Object.freeze(Object.defineProperty({ __proto__: null, LDU: m12, add: d16, adjoint: o25, copy: n24, determinant: e29, equals: x7, exactEquals: y9, frob: b10, fromRotation: l30, fromScaling: h20, identity: a25, invert: u21, mul: S10, multiply: c31, multiplyScalar: g13, multiplyScalarAndAdd: j8, rotate: i17, scale: f24, set: r36, str: M8, sub: q7, subtract: p17, transpose: s24 }, Symbol.toStringTag, { value: "Module" }));

// node_modules/@arcgis/core/chunks/mat2f64.js
function e30() {
  return [1, 0, 0, 1];
}
function r37(e32) {
  return [e32[0], e32[1], e32[2], e32[3]];
}
function t22(e32, r38, t23, n26) {
  return [e32, r38, t23, n26];
}
function n25(e32, r38) {
  return new Float64Array(e32, r38, 4);
}
var o26 = Object.freeze(Object.defineProperty({ __proto__: null, clone: r37, create: e30, createView: n25, fromValues: t22 }, Symbol.toStringTag, { value: "Module" }));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathVertex.js
var L6 = class {
  constructor() {
    this.vLeft = n2(), this.vRight = n2(), this.vMinSiblingLength = 0, this.frame = new m10();
  }
  setFrameFromUpVector(t23) {
    r4(this.frame.up, t23), u(I13, this.vLeft, this.vRight), z(I13, I13), g(y10, this.frame.up, P(I13, this.frame.up)), e6(D4, I13, y10), z(D4, D4), _(this.frame.right, D4, this.frame.up);
  }
  get foldingAngle() {
    return Math.PI - this.rotationAngle;
  }
};
var j9 = class extends L6 {
  get rotationFrameUp() {
    return this.frame.up;
  }
  get rotationRight() {
    return l10;
  }
  get rotationAngle() {
    g(P10, this.frame.up, P(this.frame.up, this.vLeft)), e6(P10, this.vLeft, P10), j(P10, P10), z(P10, P10), g(w7, this.frame.up, P(this.frame.up, this.vRight)), e6(w7, this.vRight, w7), z(w7, w7), _(F5, this.rotationFrameUp, this.vLeft);
    return Math.sign(P(F5, this.vRight)) * (Math.PI - l4(P(P10, w7)));
  }
  get maxStretchDistance() {
    return Math.abs(this.vMinSiblingLength / Math.cos(0.5 * this.foldingAngle));
  }
  applyMiterStretch(t23, i20) {
    const r38 = this.rotationAngle;
    if (Math.abs(r38) <= 0)
      return i20;
    const e32 = b(Math.cos(0.5 * r38));
    return r7(t23, (e32 - 1 + 1) * i20[0], i20[1]);
  }
};
var b11 = class extends L6 {
  get rotationFrameUp() {
    const t23 = Math.sign(P(this.frame.right, this.vRight));
    return _(S11, this.vRight, this.vLeft), g(S11, S11, t23), z(S11, S11);
  }
  get rotationRight() {
    const t23 = this.rotationFrameUp, s27 = P(t23, this.frame.up), i20 = P(t23, this.frame.right);
    return g(k5, this.frame.up, -i20), g(x8, this.frame.right, s27), u(k5, k5, x8), z(k5, k5), A10(U2, this.frame, k5), U2;
  }
  get rotationAngle() {
    const s27 = Math.sign(P(this.frame.right, this.vRight));
    return j(F5, this.vLeft), -s27 * (Math.PI - l4(P(F5, this.vRight)));
  }
  get maxStretchDistance() {
    return Math.abs(this.vMinSiblingLength * b(Math.cos(0.5 * this.foldingAngle)));
  }
  applyMiterStretch(t23, r38) {
    const h23 = this.rotationAngle;
    if (0 === Math.abs(h23))
      return r38;
    const a26 = b(Math.cos(0.5 * h23)), n26 = this.rotationRight, o27 = r36(E11, 1 + (a26 - 1) * n26[0] * n26[0], (a26 - 1) * n26[0] * n26[1], (a26 - 1) * n26[0] * n26[1], 1 + (a26 - 1) * n26[1] * n26[1]);
    return _4(t23, r38, o27);
  }
};
function A10(t23, s27, i20) {
  r7(t23, P(i20, s27.right), P(i20, s27.up));
}
function d17(t23) {
  switch (t23) {
    case o23.World:
      return new j9();
    case o23.Path:
      return new b11();
  }
}
var S11 = n2();
var U2 = n7();
var k5 = n2();
var x8 = n2();
var F5 = n2();
var P10 = n2();
var w7 = n2();
var y10 = n2();
var I13 = n2();
var D4 = n2();
var E11 = e30();

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/PathTechnique.js
var N3 = /* @__PURE__ */ new Map([[O3.POSITION, 0], [O3.PROFILERIGHT, 1], [O3.PROFILEUP, 2], [O3.PROFILEVERTEXANDNORMAL, 3], [O3.FEATUREVALUE, 4]]);
var C8 = class extends n13 {
  constructor() {
    super(...arguments), this.ambient = r2(0.2, 0.2, 0.2), this.diffuse = r2(0.8, 0.8, 0.8), this.specular = r2(0, 0, 0), this.opacity = 1, this.origin = n2(), this.modelTransformation = null;
  }
};
var E12 = class _E extends e16 {
  initializeConfiguration(e32, o27) {
    o27.spherical = e32.viewingMode === l14.Global, o27.doublePrecisionRequiresObfuscation = e32.rctx.driverTest.doublePrecisionRequiresObfuscation.result;
  }
  initializeProgram(e32) {
    return new i11(e32.rctx, _E.shader.get().build(this.configuration), N3);
  }
  initializePipeline() {
    const e32 = this.configuration.transparencyPassType, o27 = this.configuration, t23 = e32 === o9.NONE, i20 = e32 === o9.FrontFace;
    return W3({ blending: o27.output !== h8.Color && o27.output !== h8.Alpha || !o27.transparent ? null : t23 ? c16 : A4(e32), culling: o27.hasSlicePlane && !o27.transparent && o27.doubleSidedMode !== i10.None ? o10 : null, depthTest: { func: l16(e32) }, depthWrite: t23 || i20 ? a11 : null, colorWrite: _7, stencilWrite: o27.hasOccludees ? e17 : null, stencilTest: o27.hasOccludees ? f10 : null, polygonOffset: t23 || i20 ? null : _8 });
  }
};
E12.shader = new t14(O8, () => import("./Path.glsl-FZO745U4.js"));
var M9 = class extends s11 {
  constructor() {
    super(...arguments), this.output = h8.Color, this.doubleSidedMode = i10.None, this.transparencyPassType = o9.NONE, this.spherical = false, this.receiveShadows = false, this.receiveAmbientOcclusion = false, this.vvSize = false, this.vvColor = false, this.vvOpacity = false, this.hasSlicePlane = false, this.transparent = false, this.hasOccludees = false, this.hasMultipassTerrain = false, this.cullAboveGround = false, this.doublePrecisionRequiresObfuscation = false;
  }
};
e([r17({ count: h8.COUNT })], M9.prototype, "output", void 0), e([r17({ count: i10.COUNT })], M9.prototype, "doubleSidedMode", void 0), e([r17({ count: o9.COUNT })], M9.prototype, "transparencyPassType", void 0), e([r17()], M9.prototype, "spherical", void 0), e([r17()], M9.prototype, "receiveShadows", void 0), e([r17()], M9.prototype, "receiveAmbientOcclusion", void 0), e([r17()], M9.prototype, "vvSize", void 0), e([r17()], M9.prototype, "vvColor", void 0), e([r17()], M9.prototype, "vvOpacity", void 0), e([r17()], M9.prototype, "hasSlicePlane", void 0), e([r17()], M9.prototype, "transparent", void 0), e([r17()], M9.prototype, "hasOccludees", void 0), e([r17()], M9.prototype, "hasMultipassTerrain", void 0), e([r17()], M9.prototype, "cullAboveGround", void 0), e([r17()], M9.prototype, "doublePrecisionRequiresObfuscation", void 0), e([r17({ constValue: c14.Disabled })], M9.prototype, "pbrMode", void 0), e([r17({ constValue: true })], M9.prototype, "hasVvInstancing", void 0), e([r17({ constValue: false })], M9.prototype, "useCustomDTRExponentForWater", void 0), e([r17({ constValue: false })], M9.prototype, "useFillLights", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/PathMaterial.js
var b12 = class _b extends d7 {
  constructor(e32) {
    super(e32, new g14()), this.supportsEdges = true, this._vertexAttributeLocations = N3, this._configuration = new M9(), this._vertexBufferLayout = _b.getVertexBufferLayout();
  }
  getConfiguration(e32, t23) {
    return this._configuration.output = e32, this._configuration.vvSize = !!this.parameters.vvSize, this._configuration.vvColor = !!this.parameters.vvColor, this._configuration.vvOpacity = !!this.parameters.vvOpacity, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.transparent = this.parameters.transparent, this._configuration.hasOccludees = this.parameters.hasOccludees, e32 !== h8.Color && e32 !== h8.Alpha || (this._configuration.doubleSidedMode = this.parameters.doubleSided && "normal" === this.parameters.doubleSidedType ? i10.View : this.parameters.doubleSided && "winding-order" === this.parameters.doubleSidedType ? i10.WindingOrder : i10.None, this._configuration.receiveShadows = this.parameters.receiveShadows, this._configuration.receiveAmbientOcclusion = !!t23.ssaoHelper.active && this.parameters.receiveSSAO), this._configuration.transparencyPassType = t23.transparencyPassType, this._configuration.hasMultipassTerrain = t23.multipassTerrain.enabled, this._configuration.cullAboveGround = t23.multipassTerrain.cullAboveGround, this._configuration;
  }
  isVisibleForOutput(e32) {
    return e32 !== h8.Shadow && e32 !== h8.ShadowExcludeHighlight && e32 !== h8.ShadowHighlight || this.parameters.castShadows;
  }
  isVisible() {
    return super.isVisible() && this.parameters.opacity > 0;
  }
  intersect(r38, i20, a26, s27, o27, h23) {
    const c34 = r38;
    if (!n22(c34))
      return;
    const u23 = c34.path, l33 = [this.parameters.size[0], this.parameters.size[1]];
    if (this.parameters.vvSize) {
      const { offset: t23, factor: r39, minSize: i21, maxSize: a27 } = this.parameters.vvSize, s28 = u23.sizeAttributeValue;
      l33[0] *= i(t23[0] + s28 * r39[0], i21[0], a27[0]), l33[1] *= i(t23[2] + s28 * r39[2], i21[2], a27[2]);
    }
    const d19 = Math.max(l33[0], l33[1]), p19 = r38.boundingInfo;
    if (null == p19)
      return void this._intersectTriangles(u23, l33, s27, o27, h23);
    const m15 = a5(p19.bbMin[0] - d19, p19.bbMin[1] - d19, p19.bbMin[2] - d19, p19.bbMax[0] + d19, p19.bbMax[1] + d19, p19.bbMax[2] + d19), b15 = [o27[0] - s27[0], o27[1] - s27[1], o27[2] - s27[2]], S14 = Math.sqrt(b15[0] * b15[0] + b15[1] * b15[1] + b15[2] * b15[2]), g16 = [S14 / b15[0], S14 / b15[1], S14 / b15[2]];
    I4(m15, s27, g16, a26.tolerance) && this._intersectTriangles(u23, l33, s27, o27, h23);
  }
  _intersectTriangles(e32, t23, r38, i20, a26) {
    e32.baked.size && e32.baked.size[0] === t23[0] && e32.baked.size[1] === t23[1] || e32.baked.bake(t23), e32.baked.intersect(r38, i20, a26);
  }
  createBufferWriter() {
    return new r15(this._vertexBufferLayout);
  }
  requiresSlot(e32, t23) {
    switch (t23) {
      case h8.Shadow:
      case h8.ShadowHighlight:
      case h8.ShadowExcludeHighlight:
        if (!this.parameters.castShadows)
          return false;
      case h8.Color:
      case h8.Alpha:
      case h8.Depth:
      case h8.Normal:
      case h8.Highlight:
      case h8.ObjectAndLayerIdColor:
        return e32 === (this.parameters.transparent ? E4.TRANSPARENT_MATERIAL : E4.OPAQUE_MATERIAL) || e32 === E4.DRAPED_MATERIAL;
      default:
        return false;
    }
  }
  createGLMaterial(e32) {
    return new S12(e32);
  }
  static getVertexBufferLayout() {
    return H3().vec3f(O3.POSITION).vec4f(O3.PROFILERIGHT).vec4f(O3.PROFILEUP).vec4f(O3.PROFILEVERTEXANDNORMAL).vec4f(O3.FEATUREVALUE);
  }
};
var S12 = class extends t13 {
  _updateOccludeeState(e32) {
    e32.hasOccludees !== this._material.parameters.hasOccludees && this._material.setParameters({ hasOccludees: e32.hasOccludees });
  }
  _updateShadowState(e32) {
    null != this.technique && e32.shadowMap.enabled === this.technique.configuration.receiveShadows || this._material.setParameters({ receiveShadows: e32.shadowMap.enabled });
  }
  beginSlot(e32) {
    return this._output !== h8.Color && this._output !== h8.Alpha || (this._updateShadowState(e32), this._updateOccludeeState(e32)), this.ensureTechnique(E12, e32);
  }
};
var g14 = class extends C8 {
  constructor() {
    super(...arguments), this.doubleSided = false, this.doubleSidedType = "normal", this.receiveSSAO = true, this.receiveShadows = false, this.castShadows = true, this.hasSlicePlane = false, this.transparent = false, this.hasOccludees = false;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DPathSymbolLayer.js
var ee3 = ["polyline"];
var te3 = class extends h13 {
  constructor(e32, t23, i20, s27) {
    super(e32, t23, i20, s27), this._intrinsicSize = r8(1, 1), this._upVectorAlignment = o23.Path, this._stencilWidth = 0.1, this.ensureDrapedStatus(false);
  }
  async doLoad() {
    var _a, _b, _c, _d;
    const t23 = null != this.symbolLayer.width ? this.symbolLayer.width : this.symbolLayer.height, i20 = null != this.symbolLayer.height ? this.symbolLayer.height : t23;
    this._vvConvertOptions = new B({ size: true, color: true, rotation: false, opacity: true }, [1, 1, 1], [t23, 1, i20], this._context.renderCoordsHelper.unitInMeters), this._fastUpdates = ((_b = (_a = this._context.renderer) == null ? void 0 : _a.visualVariables) == null ? void 0 : _b.length) > 0 ? O6(this._context.renderer, this._vvConvertOptions) : null;
    const s27 = this.symbolLayer.anchor || "center";
    this._upVectorAlignment = "heading" === this.symbolLayer.profileRotation ? o23.World : o23.Path;
    const o27 = this.symbolLayer.profile || "circle";
    switch (o27) {
      default:
      case "circle":
        this._profile = d15[s27];
        break;
      case "quad":
        this._profile = a24[s27];
    }
    switch (this.symbolLayer.join) {
      case "round":
        this._extruder = new u20(0, o14);
        break;
      case "bevel":
        this._extruder = new u20(0, 1);
        break;
      case "miter":
        this._extruder = new u20(0.8 * Math.PI, 1);
        break;
      default:
        this._extruder = new c30();
    }
    const l33 = this.symbolLayer.cap || "butt";
    switch (l33) {
      case "none":
        this._startCap = new l27(), this._endCap = new l27();
        break;
      case "butt":
      default:
        this._startCap = new h18(this._profile, 0), this._endCap = new h18(this._profile, 0, true);
        break;
      case "square":
        this._startCap = new h18(this._profile, -0.5), this._endCap = new h18(this._profile, 0.5, true);
        break;
      case "round": {
        const e32 = "quad" === o27;
        this._startCap = new f21({ profile: this._profile, flip: false, breakNormals: e32, subdivisions: t19 }), this._endCap = new f21({ profile: this._profile, flip: true, breakNormals: e32, subdivisions: t19 });
        break;
      }
    }
    const c34 = (_d = (_c = this.symbolLayer) == null ? void 0 : _c.material) == null ? void 0 : _d.color, p19 = this._getCombinedOpacityAndColor(c34), m15 = e5(p19), d19 = p19[3], f25 = d19 < 1 || this.needsDrivenTransparentPass, u23 = { diffuse: m15, ambient: m15, opacity: d19, transparent: f25, hasVertexColors: false, hasSlicePlane: this._context.slicePlaneEnabled, castShadows: this.symbolLayer.castShadows, cullFace: f25 || "none" === l33 ? n9.None : n9.Back, offsetTransparentBackfaces: true };
    if (!this._drivenProperties.size && (r7(this._intrinsicSize, t23, i20), !O7(this._intrinsicSize[0]) || !O7(this._intrinsicSize[1])))
      throw new s2("graphics3dpathsymbollayer:invalid-size", "Symbol sizes may not be negative values");
    if (this._fastUpdates && this._fastUpdates.visualVariables.size || l8(this._intrinsicSize, this._intrinsicSize, 1 / this._context.renderCoordsHelper.unitInMeters), this._fastUpdates) {
      const e32 = { ...u23, ...this._fastUpdates.materialParameters, size: e10(this._intrinsicSize) };
      this._material = new b12(e32);
    } else
      u23.hasVertexColors = this._drivenProperties.color || this._drivenProperties.opacity, u23.normalType = a10.Compressed, this._material = new I5(u23);
    this._material.setParameters({ usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: true }), this._context.stage.add(this._material);
  }
  destroy() {
    super.destroy(), this._context.stage.remove(this._material), this._material = null;
  }
  createGraphics3DGraphic(e32) {
    const t23 = e32.graphic;
    if (!this._validateGeometry(t23.geometry, ee3, this.symbolLayer.type))
      return null;
    const i20 = this.setGraphicElevationContext(t23, new o12()), s27 = e32.renderingInfo;
    return this._createAs3DShape(t23, s27, i20, t23.uid);
  }
  layerOpacityChanged() {
    var _a, _b;
    const e32 = (_b = (_a = this.symbolLayer) == null ? void 0 : _a.material) == null ? void 0 : _b.color, t23 = this._getCombinedOpacity(e32), i20 = t23 < 1 || this.needsDrivenTransparentPass;
    this._material.setParameters({ opacity: t23, transparent: i20 });
  }
  layerElevationInfoChanged(e32, t23) {
    return this.updateGraphics3DGraphicElevationInfo(e32, t23, p5);
  }
  slicePlaneEnabledChanged() {
    return this._material.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled }), true;
  }
  physicalBasedRenderingChanged() {
    return this._material.setParameters({ usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: true }), true;
  }
  applyRendererDiff(e32, t23) {
    for (const i20 in e32.diff) {
      if ("visualVariables" !== i20)
        return e21.RecreateSymbol;
      if (!G2(this._fastUpdates, t23, this._vvConvertOptions))
        return e21.RecreateSymbol;
      this._material.setParameters(this._fastUpdates.materialParameters);
    }
    return e21.FastUpdate;
  }
  _getVertexData(e32) {
    let t23 = 0;
    const i20 = e32.paths, s27 = [], r38 = e32.spatialReference, a26 = this._context.elevationProvider.spatialReference, o27 = this._context.renderCoordsHelper.spatialReference;
    for (const c34 of i20)
      t23 += c34.length;
    const n26 = t7(3 * t23);
    let l33, h23 = 0;
    for (const c34 of i20) {
      s27.push({ offset: h23, numVertices: c34.length });
      for (const t24 of c34)
        n26[h23++] = t24[0], n26[h23++] = t24[1], n26[h23++] = e32.hasZ ? t24[2] : 0;
    }
    return null == a26 || r38.equals(a26) || yn(n26, r38, 0, n26, a26, 0, t23) ? (null == a26 || a26.equals(o27) ? l33 = e13(n26) : (l33 = t7(3 * t23), yn(n26, a26, 0, l33, o27, 0, t23)), { pathVertexDataInfos: s27, vertexDataES: n26, vertexDataRS: l33 }) : null;
  }
  _createAs3DShape(e32, r38, a26, o27) {
    var _a, _b, _c;
    const n26 = e32.geometry, h23 = this._getVertexData(n26);
    if (null == h23)
      return this.logger.warn("PathSymbol3DLayer geometry failed to be created (failed to project geometry to view spatial reference)"), null;
    if (0 === h23.pathVertexDataInfos.length)
      return 0 !== n26.paths.length && n26.paths.some((e33) => e33.length > 0) || this.logger.warn("PathSymbol3DLayer geometry failed to be created (no paths were defined)"), null;
    const c34 = new Array(), p19 = n26.spatialReference, y12 = i3(), b15 = this._context.renderCoordsHelper, v13 = new r19(h23.vertexDataES);
    for (const m15 of h23.pathVertexDataInfos) {
      const n27 = m15.numVertices;
      if (n27 < 2)
        continue;
      const g16 = m15.offset;
      if (null != this._context.clippingExtent && (P2(y12), c5(y12, h23.vertexDataES, g16, n27), !V(y12, this._context.clippingExtent)))
        continue;
      const w10 = new Array(), x10 = g16 + 3 * n27;
      for (let e33 = g16; e33 < x10; e33 += 3) {
        v13.offset = e33;
        const t23 = f11(v13, this._context.elevationProvider, a26, b15);
        o(oe3, h23.vertexDataRS[e33], h23.vertexDataRS[e33 + 1], h23.vertexDataRS[e33 + 2]), b15.setAltitude(oe3, t23), h23.vertexDataRS[e33] = oe3[0], h23.vertexDataRS[e33 + 1] = oe3[1], h23.vertexDataRS[e33 + 2] = oe3[2], w10.push(d17(this._upVectorAlignment));
      }
      const P15 = new e27(w10, h23.vertexDataES, h23.vertexDataRS, g16);
      ie3(P15, this._upVectorAlignment, this._context.renderCoordsHelper);
      const j13 = new r34(P15, this._profile, this._extruder, this._startCap, this._endCap);
      let S14 = null;
      if (this._fastUpdates) {
        const t23 = this._fastUpdates.visualVariables, i20 = X((_a = t23.size) == null ? void 0 : _a.field, e32) ?? 0, s27 = X((_b = t23.color) == null ? void 0 : _b.field, e32) ?? 0, r39 = X((_c = t23.opacity) == null ? void 0 : _c.field, e32) ?? 0;
        S14 = new I12(j13, i20, s27, r39);
      } else {
        const e33 = [this._intrinsicSize[0], this._intrinsicSize[1]];
        if (this._drivenProperties.size) {
          const t24 = r38.size;
          e33[0] *= se3(t24[0], "symbol-value" === t24[2] ? this.symbolLayer.height || 0 : t24[2], this.symbolLayer.width || 0), e33[1] *= se3(t24[2], "symbol-value" === t24[0] ? this.symbolLayer.width || 0 : t24[0], this.symbolLayer.height || 0);
        }
        let t23;
        this._drivenProperties.color && (t23 = r38.color), this._drivenProperties.opacity && null != r38.opacity && (t23 = t23 ? [t23[0], t23[1], t23[2], r38.opacity] : [1, 1, 1, r38.opacity]);
        const i20 = new x6(j13);
        i20.bake(e33), t23 && i20.bakeVertexColors(t23), S14 = i20;
      }
      const { vertexAttributes: D6, indices: C11 } = S14.createGeometryData(), L8 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: o27, layerUid: this._context.layer.uid }), V9 = new e28(this._material, D6, C11, S14, p19, this._stencilWidth, L8);
      V9.transformation = i4(e12(), o5, j13.path.origin), c34.push(V9);
    }
    if (0 === c34.length)
      return null;
    const w9 = new V3({ geometries: c34, layerUid: this._context.layer.uid, graphicUid: o27 }), P14 = new p7(this, w9, c34, null, null, (e33, t23, i20, s27, r39) => ae3(e33, t23, s27, r39, this._upVectorAlignment), a26);
    return P14.alignedSampledElevation = 0, P14.needsElevationUpdates = p5(a26.mode), P14;
  }
};
function ie3(e32, t23, i20) {
  const { origin: s27, positions: r38 } = e32;
  let a26 = e32.offset;
  switch (t23) {
    default:
    case o23.World:
      for (const t24 of e32.vertices)
        oe3[0] = r38[a26++] + s27[0], oe3[1] = r38[a26++] + s27[1], oe3[2] = r38[a26++] + s27[2], i20.worldUpAtPosition(oe3, oe3), t24.setFrameFromUpVector(oe3);
      break;
    case o23.Path:
      oe3[0] = r38[a26] + s27[0], oe3[1] = r38[a26 + 1] + s27[1], oe3[2] = r38[a26 + 2] + s27[2], i20.worldUpAtPosition(oe3, oe3), l29(e32, oe3);
  }
}
function se3(e32, t23, i20) {
  switch (e32) {
    case "symbol-value":
      return i20;
    case "proportional":
      return t23;
    default:
      return e32;
  }
}
function re3(e32, t23, i20, s27) {
  let r38 = 0;
  const { origin: a26, vertices: o27, positions: n26, positionsES: h23 } = e32, c34 = e32.offset + 3 * o27.length;
  for (let p19 = e32.offset; p19 < c34; p19 += 3)
    o(oe3, h23[p19], h23[p19 + 1], h23[p19 + 2]), i20(oe3, ne3), r38 += ne3.sampledElevation, oe3[0] = n26[p19] + a26[0], oe3[1] = n26[p19 + 1] + a26[1], oe3[2] = n26[p19 + 2] + a26[2], s27.setAltitude(oe3, ne3.z), n26[p19] = oe3[0] - a26[0], n26[p19 + 1] = oe3[1] - a26[1], n26[p19 + 2] = oe3[2] - a26[2];
  return e32.updatePathVertexInformation(), r38 / o27.length;
}
function ae3(e32, t23, i20, s27, r38) {
  const a26 = e32.stageObject, o27 = a26.geometries;
  let n26 = 0;
  for (const l33 of o27) {
    if (!n22(l33))
      continue;
    const e33 = l33.path, o28 = e33.builder.path;
    n26 += re3(o28, t23, i20, s27), r38 !== o23.World && ie3(o28, r38, s27), e33.onPathChanged(l33), l33.invalidateBoundingInfo(), a26.geometryVertexAttrsUpdated(l33);
  }
  return n26 / o27.length;
}
var oe3 = n2();
var ne3 = new R6();

// node_modules/@arcgis/core/views/3d/layers/support/uvUtils.js
function T10(t23, s27, n26, r38, e32 = 1) {
  if (n26.isGeographic && r38 === l14.Global) {
    const t24 = t7(s27.length), o27 = s27.length, r39 = A(n26);
    for (let n27 = 0; n27 < o27; n27 += 3)
      Yn(s27, n27, t24, n27, r39);
    s27 = t24;
  }
  r7(y11, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
  for (let o27 = 0; o27 < s27.length; o27 += 3)
    y11[0] = Math.min(y11[0], s27[o27]), y11[1] = Math.min(y11[1], s27[o27 + 1]);
  const m15 = y11[0] % e32, a26 = y11[1] % e32, c34 = y11[0] - m15, i20 = y11[1] - a26;
  for (let o27 = 0; o27 < s27.length; o27 += 3) {
    const n27 = o27 / 3 * 4;
    t23[n27] = (s27[o27] - c34) / e32, t23[n27 + 1] = (s27[o27 + 1] - i20) / e32, t23[n27 + 2] = c34 / e32, t23[n27 + 3] = i20 / e32;
  }
}
function j10(t23, s27, c34, i20, f25 = 1) {
  o(Y4, 1, 0, 0), o(_12, 0, 1, 0), o(k6, 0, 0, 1), U3(E13, c34), G5(c34, F6) && O13(F6, Y4, _12, k6, i20, E13), r7(y11, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY), r7(A11, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
  for (let o27 = 0; o27 < c34.length; o27 += 3) {
    o(V6, c34[o27], c34[o27 + 1], c34[o27 + 2]);
    const t24 = P(Y4, V6), s28 = P(_12, V6);
    y11[0] = Math.min(y11[0], t24), y11[1] = Math.min(y11[1], s28), A11[0] = Math.max(A11[0], t24), A11[1] = Math.max(A11[1], s28);
  }
  const I16 = P(k6, E13);
  z4(P11, y11[0], y11[1], I16, Y4, _12, k6), z4(v9, A11[0], y11[1], I16, Y4, _12, k6), z4(x9, y11[0], A11[1], I16, Y4, _12, k6), e6(v9, v9, P11), g(v9, v9, 0.5), e6(x9, x9, P11), g(x9, x9, 0.5), u(P11, P11, v9), u(P11, P11, x9);
  const l33 = y11[0] % f25, h23 = y11[1] % f25, u23 = y11[0] - l33, N7 = y11[1] - h23;
  for (let o27 = 0; o27 < c34.length; o27 += 3) {
    o(V6, c34[o27], c34[o27 + 1], c34[o27 + 2]);
    const e32 = o27 / 3, m15 = 4 * e32;
    t23[m15] = (P(Y4, V6) - u23) / f25, t23[m15 + 1] = (P(_12, V6) - N7) / f25, t23[m15 + 2] = u23 / f25, t23[m15 + 3] = N7 / f25;
    const a26 = 9 * e32;
    for (let t24 = 0; t24 < 3; t24++)
      s27[a26 + t24] = P11[t24], s27[a26 + t24 + 3] = v9[t24], s27[a26 + t24 + 6] = x9[t24];
  }
}
var E13 = n2();
var V6 = n2();
var F6 = h7();
var Y4 = n2();
var _12 = n2();
var k6 = n2();
var y11 = n7();
var A11 = n7();
var P11 = n2();
var v9 = n2();
var x9 = n2();
function G5(t23, o27) {
  const s27 = t23.length / 3 - 1;
  return j5(t23, o27, 0, Math.floor(s27 / 3), Math.floor(s27 * (2 / 3)));
}
function O13(t23, o27, s27, e32, a26, l33) {
  null != a26 ? (a26.basisMatrixAtPosition(l33, S13), o(d18, S13[0], S13[1], S13[2]), o(w8, S13[4], S13[5], S13[6]), o(D5, S13[8], S13[9], S13[10])) : (o(d18, 1, 0, 0), o(w8, 0, 1, 0), o(D5, 0, 0, 1));
  const h23 = W(t23);
  P(h23, D5) < 0 && g(h23, h23, -1), r4(e32, h23);
  const u23 = P(h23, w8), N7 = P(h23, d18);
  Math.abs(u23) < Math.abs(N7) ? (q(o27, d18, h23, -N7), z(o27, o27), _(s27, o27, h23), z(s27, s27), g(s27, s27, -1)) : (q(s27, w8, h23, -u23), z(s27, s27), _(o27, s27, h23), z(o27, o27));
}
var S13 = e12();
var d18 = n2();
var w8 = n2();
var D5 = n2();
function U3(t23, o27) {
  o(q8, 0, 0, 0);
  for (let s27 = 0; s27 < o27.length - 3; s27 += 3)
    q8[0] += o27[s27], q8[1] += o27[s27 + 1], q8[2] += o27[s27 + 2];
  g(t23, q8, 1 / (o27.length / 3 - 1));
}
var q8 = n2();
function z4(t23, o27, s27, r38, e32, m15, a26) {
  o(t23, o27 * e32[0] + s27 * m15[0] + r38 * a26[0], o27 * e32[1] + s27 * m15[1] + r38 * a26[1], o27 * e32[2] + s27 * m15[2] + r38 * a26[2]);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/PatternTechnique.js
var j11 = class _j extends e16 {
  initializeProgram(e32) {
    return new i11(e32.rctx, _j.shader.get().build(this.configuration), U4);
  }
  _setPipelineState(e32, o27) {
    const r38 = this.configuration, i20 = e32 === o9.NONE, s27 = e32 === o9.FrontFace;
    return W3({ blending: r38.output === h8.Color || r38.output === h8.Alpha ? i20 ? c16 : A4(e32) : null, culling: h9(r38.cullFace), depthTest: { func: l16(e32) }, depthWrite: i20 ? r38.writeDepth ? a11 : null : E3(e32), colorWrite: _7, stencilWrite: r38.hasOccludees ? e17 : null, stencilTest: r38.hasOccludees ? o27 ? o11 : f10 : null, polygonOffset: i20 || s27 ? r38.polygonOffset ? C9 : null : a12(r38.enableOffset) });
  }
  initializePipeline() {
    return this._occludeePipelineState = this._setPipelineState(this.configuration.transparencyPassType, true), this._setPipelineState(this.configuration.transparencyPassType, false);
  }
  getPipelineState(e32, t23) {
    return t23 ? this._occludeePipelineState : super.getPipelineState(e32, t23);
  }
};
j11.shader = new t14(P6, () => import("./Pattern.glsl-PBSXP6UK.js"));
var C9 = { factor: 1, units: 1 };
var N4 = class extends s11 {
  constructor() {
    super(...arguments), this.output = h8.Color, this.cullFace = n9.None, this.transparencyPassType = o9.NONE, this.hasSlicePlane = false, this.hasVertexColors = false, this.polygonOffset = false, this.writeDepth = true, this.hasOccludees = false, this.enableOffset = true, this.hasMultipassTerrain = false, this.cullAboveGround = false, this.vvColor = false;
  }
};
e([r17({ count: h8.COUNT })], N4.prototype, "output", void 0), e([r17({ count: n9.COUNT })], N4.prototype, "cullFace", void 0), e([r17({ count: a16.COUNT })], N4.prototype, "style", void 0), e([r17({ count: o9.COUNT })], N4.prototype, "transparencyPassType", void 0), e([r17()], N4.prototype, "hasSlicePlane", void 0), e([r17()], N4.prototype, "hasVertexColors", void 0), e([r17()], N4.prototype, "polygonOffset", void 0), e([r17()], N4.prototype, "writeDepth", void 0), e([r17()], N4.prototype, "hasOccludees", void 0), e([r17()], N4.prototype, "patternSpacing", void 0), e([r17()], N4.prototype, "lineWidth", void 0), e([r17()], N4.prototype, "enableOffset", void 0), e([r17()], N4.prototype, "draped", void 0), e([r17()], N4.prototype, "hasMultipassTerrain", void 0), e([r17()], N4.prototype, "cullAboveGround", void 0), e([r17()], N4.prototype, "vvColor", void 0), e([r17({ constValue: false })], N4.prototype, "hasVvInstancing", void 0), e([r17({ constValue: false })], N4.prototype, "vvSize", void 0), e([r17({ constValue: false })], N4.prototype, "vvOpacity", void 0);
var U4 = /* @__PURE__ */ new Map([[O3.POSITION, 0], [O3.COLOR, 3], [O3.UVMAPSPACE, 4], [O3.COLORFEATUREATTRIBUTE, 5], [O3.BOUNDINGRECT, 6]]);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/PatternMaterial.js
var b13 = class extends e18 {
  constructor(t23) {
    super(t23, new v10()), this.supportsEdges = true, this._vertexAttributeLocations = U4, this._configuration = new N4();
  }
  getConfiguration(t23, e32) {
    return this._configuration.output = t23, this._configuration.cullFace = this.parameters.cullFace, this._configuration.hasVertexColors = this.parameters.hasVertexColors && !this.parameters.vvColor, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.polygonOffset = this.parameters.polygonOffset, this._configuration.writeDepth = this.parameters.writeDepth, this._configuration.style = this.parameters.style, this._configuration.patternSpacing = this.parameters.patternSpacing, this._configuration.lineWidth = this.parameters.lineWidth, this._configuration.draped = this.parameters.draped, this._configuration.transparencyPassType = e32.transparencyPassType, this._configuration.enableOffset = e32.camera.relativeElevation < S3, this._configuration.hasMultipassTerrain = e32.multipassTerrain.enabled, this._configuration.cullAboveGround = e32.multipassTerrain.cullAboveGround, this._configuration.vvColor = !!this.parameters.vvColor, this._configuration;
  }
  requiresSlot(t23, e32) {
    if (e32 === h8.Color || e32 === h8.Alpha || e32 === h8.Highlight || e32 === h8.Depth && this.parameters.writeLinearDepth) {
      if (t23 === E4.DRAPED_MATERIAL)
        return true;
      if (e32 === h8.Highlight)
        return t23 === E4.OPAQUE_MATERIAL;
      return t23 === (this.parameters.writeDepth ? E4.TRANSPARENT_MATERIAL : E4.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL);
    }
    return false;
  }
  createGLMaterial(t23) {
    return new O14(t23);
  }
  createBufferWriter() {
    const t23 = H3().vec3f(O3.POSITION).vec4f(O3.UVMAPSPACE);
    return this.parameters.draped || t23.mat3f(O3.BOUNDINGRECT), this.parameters.vvColor ? t23.f32(O3.COLORFEATUREATTRIBUTE) : t23.vec4u8(O3.COLOR), new P12(t23);
  }
};
var O14 = class extends t13 {
  _updateParameters(t23) {
    return this.ensureTechnique(j11, t23);
  }
  _updateOccludeeState(t23) {
    t23.hasOccludees !== this._material.parameters.hasOccludees && this._material.setParameters({ hasOccludees: t23.hasOccludees });
  }
  beginSlot(t23) {
    return this._output !== h8.Color && this._output !== h8.Alpha || this._updateOccludeeState(t23), this._updateParameters(t23);
  }
};
var P12 = class extends r15 {
  write(t23, i20, s27, a26, o27) {
    for (const n26 of this.vertexBufferLayout.fields.keys()) {
      const h23 = s27.vertexAttributes.get(n26), c34 = s27.indices.get(n26);
      if (h23 && c34)
        switch (n26) {
          case O3.UVMAPSPACE: {
            s7(4 === h23.size);
            const t24 = a26.getField(n26, c9);
            t24 && p4(c34, h23.data, t24, o27);
            break;
          }
          case O3.BOUNDINGRECT: {
            s7(9 === h23.size);
            const r38 = a26.getField(n26, l9);
            r38 && this.writeBoundingRect(c34, h23.data, t23, r38, o27);
            break;
          }
          default:
            E5(n26, h23, c34, t23, i20, a26, o27);
        }
    }
  }
  writeBoundingRect(t23, e32, r38, i20, s27) {
    const a26 = r38, o27 = i20.typedBuffer, n26 = i20.typedBufferStride, h23 = t23.length;
    s27 *= n26;
    for (let u23 = 0; u23 < h23; ++u23) {
      const r39 = 9 * t23[u23], i21 = e32[r39], h24 = e32[r39 + 1], l33 = e32[r39 + 2];
      o27[s27] = a26[0] * i21 + a26[4] * h24 + a26[8] * l33 + a26[12], o27[s27 + 1] = a26[1] * i21 + a26[5] * h24 + a26[9] * l33 + a26[13], o27[s27 + 2] = a26[2] * i21 + a26[6] * h24 + a26[10] * l33 + a26[14];
      for (let t24 = 3; t24 < 9; ++t24)
        o27[s27 + t24] = e32[r39 + t24];
      s27 += n26;
    }
  }
};
var v10 = class extends t16 {
  constructor() {
    super(...arguments), this.color = r6(1, 1, 1, 1), this.writeDepth = true, this.writeLinearDepth = false, this.hasVertexColors = false, this.polygonOffset = false, this.hasSlicePlane = false, this.cullFace = n9.None, this.hasOccludees = false, this.style = a16.Cross, this.patternSpacing = 10, this.lineWidth = 1, this.draped = true;
  }
};

// node_modules/@arcgis/core/views/3d/layers/support/patternUtils.js
function s25(e32, r38) {
  const a26 = (e32 == null ? void 0 : e32.pattern) ?? null;
  return null == a26 ? new f13(r38) : "none" === a26.style || "solid" === a26.style ? ("none" === a26.style && (r38.color = r6(0, 0, 0, 0), r38.transparent = true), new f13(r38)) : (r38.style = l31(a26.style), new b13(r38));
}
function l31(t23) {
  switch (t23) {
    case "horizontal":
      return a16.Horizontal;
    case "vertical":
      return a16.Vertical;
    case "cross":
      return a16.Cross;
    case "forward-diagonal":
      return a16.ForwardDiagonal;
    case "backward-diagonal":
      return a16.BackwardDiagonal;
    case "diagonal-cross":
      return a16.DiagonalCross;
    default:
      return;
  }
}
function c32(t23) {
  return t23.material instanceof b13 && !t23.material.parameters.draped;
}
function u22(t23, e32) {
  if (c32(t23)) {
    const n26 = t23.vertexAttributes.get(O3.POSITION).data, o27 = t23.getMutableAttribute(O3.UVMAPSPACE).data, i20 = t23.getMutableAttribute(O3.BOUNDINGRECT).data;
    j10(o27, i20, n26, e32);
  }
}
function m13(t23, r38, a26, n26, o27) {
  const i20 = u10(t23, r38, a26, n26, o27), s27 = t23.stageObject.geometries;
  for (const e32 of s27)
    u22(e32, o27);
  return i20;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DPolygonFillSymbolLayer.js
var z5 = ["polyline", "polygon", "extent"];
var H5 = new B({ size: false, color: true, rotation: false, opacity: false });
var W6 = class _W extends h13 {
  constructor(e32, t23, i20, r38) {
    super(e32, t23, i20, r38), this._needsUV = false, this._hasOutline = false;
  }
  async doLoad() {
    this._fastUpdates = O6(this._context.renderer, H5);
  }
  _ensureMaterials() {
    this._ensureFillMaterial(), this._ensureOutlineMaterial();
  }
  _ensureFillMaterial() {
    var _a, _b, _c;
    if (null != this._material)
      return;
    const e32 = (_b = (_a = this.symbolLayer) == null ? void 0 : _a.material) == null ? void 0 : _b.color, t23 = this._getCombinedOpacityAndColor(e32);
    this._material = s25(this.symbolLayer, { color: t23, transparent: t23[3] < 1 || this.needsDrivenTransparentPass, polygonOffset: false, hasVertexColors: true, writeLinearDepth: true, draped: this.draped, hasSlicePlane: this._context.slicePlaneEnabled, ...(_c = this._fastUpdates) == null ? void 0 : _c.materialParameters }), this._needsUV = this._material instanceof b13, this._context.stage.add(this._material);
  }
  _ensureOutlineMaterial() {
    const e32 = this.symbolLayer.outline;
    if (this._outlineMaterial || !this._isValidOutline(e32))
      return;
    this._hasOutline = true;
    const i20 = (t23) => {
      const i21 = n12(e32.pattern);
      return new B3({ width: t23, color: this._getOutlineColor(), hasPolygonOffset: true, hasSlicePlane: this._context.slicePlaneEnabled, isClosed: true, stipplePattern: i21, stippleScaleWithLineWidth: true, cap: n20(e32.patternCap || "butt") });
    };
    this._outlineMaterial = i20(u4(e32.size)), this._context.stage.add(this._outlineMaterial);
  }
  _isValidOutline(e32) {
    return null != e32 && null != e32.size && e32.size > 0 && null != e32.color && (null == e32.pattern || "style" !== e32.pattern.type || "none" !== e32.pattern.style);
  }
  destroy() {
    super.destroy(), this._context.stage.remove(this._material), this._material = null, this._context.stage.remove(this._outlineMaterial), this._outlineMaterial = null;
  }
  createGraphics3DGraphic(e32) {
    const t23 = e32.graphic;
    if (!this._validateGeometry(t23.geometry, z5, this.symbolLayer.type))
      return null;
    const i20 = this._getVertexOpacityAndColor(e32.renderingInfo, 255), r38 = this.setGraphicElevationContext(t23, new o12());
    return this.ensureDrapedStatus("on-the-ground" === r38.mode), this._ensureMaterials(), this.draped ? this._createAsOverlay(t23, i20) : this._createAs3DShape(t23, i20, r38);
  }
  applyRendererDiff(e32, t23) {
    for (const i20 in e32.diff) {
      if ("visualVariables" !== i20)
        return e21.RecreateSymbol;
      if (!G2(this._fastUpdates, t23, H5))
        return e21.RecreateSymbol;
      this._material && this._material.setParameters(this._fastUpdates.materialParameters);
    }
    return e21.FastUpdate;
  }
  layerOpacityChanged() {
    var _a, _b;
    if (null != this._material) {
      const e32 = this._material.parameters.color, t23 = (_b = (_a = this.symbolLayer) == null ? void 0 : _a.material) == null ? void 0 : _b.color, i20 = this._getCombinedOpacity(t23);
      this._material.setParameters({ color: [e32[0], e32[1], e32[2], i20], transparent: i20 < 1 || this.needsDrivenTransparentPass });
    }
    if (null != this._outlineMaterial) {
      const e32 = this._outlineMaterial.parameters.color;
      this._outlineMaterial.setParameters({ color: [e32[0], e32[1], e32[2], this._getOutlineOpacity()] });
    }
  }
  layerElevationInfoChanged(e32, t23, i20) {
    const r38 = this._elevationContext.mode, o27 = d8(_W.elevationModeChangeTypes, i20, r38);
    if (o27 !== T6.UPDATE)
      return o27;
    const n26 = m3(r38);
    return this.updateGraphics3DGraphicElevationInfo(e32, t23, () => n26);
  }
  slicePlaneEnabledChanged() {
    if (this._material && this._material.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled }), this._outlineMaterial) {
      const e32 = { hasSlicePlane: this._context.slicePlaneEnabled };
      this._outlineMaterial.setParameters(e32);
    }
    return true;
  }
  physicalBasedRenderingChanged() {
    return true;
  }
  _createAs3DShape(e32, t23, i20) {
    var _a;
    const r38 = c25(e32.geometry);
    if (!r38)
      return null;
    const o27 = p12(r38, this._context.elevationProvider, this._context.renderCoordsHelper, i20), n26 = new k7(o27, t23, this._context.layer.uid, e32.uid), s27 = n26.renderData.position.length / 3;
    if (this._needsUV && (n26.uvMapSpace = t12(4 * s27, true), n26.boundingRect = t7(9 * s27, true), j10(n26.uvMapSpace, n26.boundingRect, n26.renderData.position, this._context.renderCoordsHelper)), n26.objectAndLayerIdColor = (_a = this._context.stage.renderView) == null ? void 0 : _a.getObjectAndLayerIdColor(n26), this._createAs3DShapeFill(e32, n26), this._hasOutline && this._createAs3DShapeOutline(n26), this._logGeometryCreationWarnings(n26.renderData, r38.rings, "rings", "FillSymbol3DLayer"), 0 === n26.outGeometries.length)
      return null;
    const a26 = new V3({ geometries: n26.outGeometries, castShadow: false, layerUid: this._context.layer.uid, graphicUid: e32.uid }), c34 = new p7(this, a26, n26.outGeometries, null, null, m13, i20);
    return c34.alignedSampledElevation = n26.renderData.sampledElevation, c34.needsElevationUpdates = m3(i20.mode), c34;
  }
  _createAs3DShapeFill(e32, t23) {
    var _a;
    const r38 = t23.renderData.polygons;
    for (const { position: a26, mapPositions: l33, holeIndices: h23, index: u23, count: d19 } of r38) {
      if (null != this._context.clippingExtent && (P2(N5), c5(N5, l33), !V(N5, this._context.clippingExtent)))
        continue;
      const r39 = i8(l33, h23, 3);
      if (0 === r39.length)
        continue;
      const m15 = (_a = this._fastUpdates) == null ? void 0 : _a.visualVariables.color, _13 = s21({ material: this._material, indices: r39, mapPositions: l33, attributeData: { position: a26, color: m15 ? null : t23.color, colorFeature: m15 ? X(m15.field, e32) : null, uvMapSpace: this._needsUV ? o7(t23.uvMapSpace, 4 * u23, 4 * d19) : null, boundingRect: this._needsUV ? a8(t23.boundingRect, 9 * u23, 9 * d19) : null, objectAndLayerIdColor: t23.objectAndLayerIdColor } });
      t23.outGeometries.push(_13);
    }
  }
  _createAs3DShapeOutline(e32) {
    if (!this._hasOutline)
      return;
    const t23 = e32.renderData.outlines;
    for (let i20 = 0; i20 < t23.length; ++i20) {
      const { mapPositions: r38, position: a26 } = t23[i20];
      if (null != this._context.clippingExtent && (P2(N5), c5(N5, r38), !V(N5, this._context.clippingExtent)))
        continue;
      const l33 = h11(this._outlineMaterial, { overlayInfo: null, removeDuplicateStartEnd: true, mapPositions: r38, attributeData: { position: a26 } }, e32.objectAndLayerIdColor);
      e32.outGeometries.push(l33);
    }
  }
  _createAsOverlay(e32, t23) {
    var _a;
    const i20 = c25(e32.geometry);
    if (null == i20)
      return null;
    this._material.renderPriority = this._renderPriority + this._renderPriorityStep / 2, null != this._outlineMaterial && (this._outlineMaterial.renderPriority = this._renderPriority);
    const r38 = l24(i20, this._context.overlaySR), n26 = new q9(r38, t23, this._context.layer.uid, e32.uid), s27 = n26.renderData.position.length / 3;
    return this._needsUV && (n26.uvMapSpace = t12(4 * s27, true), T10(n26.uvMapSpace, n26.renderData.position, this._context.overlaySR, this._context.graphicsCoreOwner.view.state.viewingMode)), n26.outBoundingBox = P2(), n26.objectAndLayerIdColor = (_a = this._context.stage.renderView) == null ? void 0 : _a.getObjectAndLayerIdColor(n26), this._createAsOverlayFill(e32, n26), this._hasOutline && this._createAsOverlayOutline(n26), this._logGeometryCreationWarnings(n26.renderData, i20.rings, "rings", "FillSymbol3DLayer"), 0 === n26.outGeometries.length ? null : new u16(this, n26.outGeometries, n26.outBoundingBox, this._context.drapeSourceRenderer);
  }
  _createAsOverlayFill(e32, t23) {
    var _a;
    const r38 = t23.renderData.polygons;
    for (const { position: l33, holeIndices: c34, index: h23, count: u23 } of r38) {
      const r39 = P2(N5);
      if (c5(r39, l33), !V(r39, this._context.clippingExtent))
        continue;
      const d19 = i8(l33, c34, 3);
      if (0 === d19.length)
        continue;
      o2(t23.outBoundingBox, r39);
      const m15 = (_a = this._fastUpdates) == null ? void 0 : _a.visualVariables.color, _13 = s21({ material: this._material, indices: d19, attributeData: { position: l33, color: m15 ? null : t23.color, colorFeature: m15 ? X(m15.field, e32) : null, uvMapSpace: this._needsUV ? o7(t23.uvMapSpace, 4 * h23, 4 * u23) : null, objectAndLayerIdColor: t23.objectAndLayerIdColor } });
      t23.outGeometries.push(new a13(_13, t23));
    }
  }
  _createAsOverlayOutline(e32) {
    if (!this._hasOutline)
      return;
    const t23 = e32.renderData.outlines;
    for (let i20 = 0; i20 < t23.length; ++i20) {
      const { position: r38 } = t23[i20];
      if (P2(N5), c5(N5, r38), !V(N5, this._context.clippingExtent))
        continue;
      o2(e32.outBoundingBox, N5);
      const l33 = h11(this._outlineMaterial, { overlayInfo: { spatialReference: this._context.overlaySR, renderCoordsHelper: this._context.renderCoordsHelper }, removeDuplicateStartEnd: true, attributeData: { position: r38 } }, e32.objectAndLayerIdColor);
      e32.outGeometries.push(new a13(l33, e32));
    }
  }
  _getOutlineOpacity() {
    var _a, _b;
    const e32 = (_b = (_a = this.symbolLayer) == null ? void 0 : _a.outline) == null ? void 0 : _b.color;
    return (this.draped ? 1 : this._getLayerOpacity()) * (null != e32 ? e32.a : 0);
  }
  _getOutlineColor() {
    var _a, _b;
    const t23 = (_b = (_a = this.symbolLayer) == null ? void 0 : _a.outline) == null ? void 0 : _b.color, i20 = this._getOutlineOpacity();
    return k3(null != t23 ? h4.toUnitRGB(t23) : null, i20);
  }
  test() {
    return { ...super.test(), createAsOverlay: (e32, t23) => this._createAsOverlay(e32, t23), createAs3DShape: (e32, t23, i20) => this._createAs3DShape(e32, t23, i20) };
  }
};
W6.elevationModeChangeTypes = { definedChanged: T6.RECREATE, staysOnTheGround: T6.NONE, onTheGroundChanged: T6.RECREATE };
var N5 = i3();
var k7 = class extends p11 {
  constructor(e32, t23, i20, r38) {
    super(e32, i20, r38), this.color = t23;
  }
};
var q9 = class extends p11 {
  constructor(e32, t23, i20, r38) {
    super(e32, i20, r38), this.color = t23;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextTextureFactory.js
var i18 = class {
  constructor(r38, t23, n26) {
    this._renderer = new i14(r38, t23, n26);
  }
  get key() {
    return this._renderer.key;
  }
  get baselineAnchorY() {
    return 1 - this._renderer.firstRenderedBaselinePosition / this._renderer.renderedHeight;
  }
  get displayWidth() {
    return this._renderer.displayWidth;
  }
  get displayHeight() {
    return this._renderer.displayHeight;
  }
  create() {
    const e32 = r27(s26, this._renderer.renderedWidth, this._renderer.renderedHeight), i20 = e32.getContext("2d");
    return i20.save(), this._renderer.render(i20, 0, 0), i20.restore(), new w3(e32, { wrap: { s: D2.CLAMP_TO_EDGE, t: D2.CLAMP_TO_EDGE }, noUnpackFlip: false, mipmap: true, preMultiplyAlpha: true });
  }
};
var s26 = { canvas: null };

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DTextSymbolLayer.js
var z6 = [0, 0, 1];
var C10 = class extends h13 {
  constructor(e32, t23, r38, n26) {
    super(e32, t23, r38, n26), this._elevationOptions = { supportsOffsetAdjustment: true, supportsOnTheGround: false }, this.ensureDrapedStatus(false);
  }
  async doLoad() {
    if (!this._drivenProperties.size) {
      const t23 = I7(this.symbolLayer.size);
      if (t23)
        throw new s2("graphics3dtextsymbollayer:invalid-size", t23);
    }
    await this._createTextRenderParameters();
  }
  async _createTextRenderParameters() {
    const e32 = this._context.graphicsCoreOwner.view.state.rasterPixelRatio;
    this._textRenderParameters = await s19.fromSymbol(this.symbolLayer, e32);
  }
  destroy() {
    super.destroy();
  }
  createGraphics3DGraphic(e32) {
    const t23 = e32.graphic, r38 = u13(t23.geometry);
    if (null == r38)
      return this.logger.warn(`unsupported geometry type for text symbol: ${t23.geometry.type}`), null;
    const n26 = this.symbolLayer.text;
    if (null == n26 || "" === n26)
      return null;
    const s27 = o3(this.symbol) && this.symbol.hasVisibleVerticalOffset() ? this.symbol.verticalOffset : null;
    if (null != s27 && !l6(this.symbolLayer))
      return this.logger.errorOncePerTick(`Callouts and vertical offset on text symbols are currently only supported with 'center' horizontal alignment (not with '${this.symbolLayer.horizontalAlignment}' alignment)`), null;
    const i20 = new t21(s27, this.symbolLayer.horizontalAlignment, f16(this.symbolLayer.verticalAlignment));
    return this._createAs3DShape(t23, r38, n26, i20);
  }
  createLabel(e32, t23, r38, n26) {
    const s27 = e32.graphic, i20 = u13(s27.geometry);
    if (null == i20)
      return this.logger.warn(`unsupported geometry type for label: ${s27.geometry.type}`), null;
    const o27 = t23.text;
    return !o27 || /^\s+$/.test(o27) ? null : this._createAs3DShape(s27, i20, o27, t23, r38, n26);
  }
  setGraphicElevationContext(e32, t23, r38 = 0) {
    const n26 = super.setGraphicElevationContext(e32, t23);
    return n26.addOffsetRenderUnits(r38), n26;
  }
  layerOpacityChanged() {
    return this.logger.warn("layer opacity change not yet implemented in Graphics3DTextSymbolLayer"), false;
  }
  layerElevationInfoChanged(e32, t23) {
    return G6(e32, t23, (e33, t24) => {
      this.updateGraphicElevationContext(t24, e33);
    }), T6.UPDATE;
  }
  slicePlaneEnabledChanged(e32, t23) {
    return G6(e32, t23, (e33) => {
      for (const t24 of e33.stageObject.geometries)
        t24.material.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled });
    }), true;
  }
  physicalBasedRenderingChanged() {
    return true;
  }
  get pixelRatioChanged() {
    return false;
  }
  updateGraphicElevationContext(e32, t23) {
    const r38 = t23.elevationContext;
    this.setGraphicElevationContext(e32, r38, null != t23.metadata ? t23.metadata.elevationOffset : 0), t23.needsElevationUpdates = m3(r38.mode) || "absolute-height" === r38.mode;
  }
  _defaultElevationInfoNoZ() {
    return U5;
  }
  _createAs3DShape(e32, o27, l33, a26, m15, f25) {
    var _a;
    const g16 = this.setGraphicElevationContext(e32, new o12(), a26.elevationOffset), y12 = "polyline" === ((_a = e32.geometry) == null ? void 0 : _a.type), b15 = e32.uid;
    let v13 = null, P14 = null;
    if (null == f25) {
      const e33 = c24(a26.horizontalPlacement);
      v13 = new i18(l33, e33, this._textRenderParameters);
      let r38 = null;
      if (null != this._context.sharedResources.textures) {
        P14 = this._context.sharedResources.textures.fromData(v13.key, () => v13.create(), () => {
          null != r38 && r38.release();
        });
        const e34 = this._context.stage.renderView.textureRepository.acquire(P14.texture.id);
        if (null == e34 || T(e34))
          return P14.release(), null;
        r38 = e34;
      }
    }
    const O15 = R9(v13, a26), _13 = { occlusionTest: true, screenOffset: a26.screenOffset, anchorPosition: O15, polygonOffset: true, color: [1, 1, 1, 1], centerOffsetUnits: a26.centerOffsetUnits, drawInSecondSlot: true };
    if (null != f25 ? _13.textureId = f25.id : null != P14 && (_13.textureId = P14.texture.id), null != a26.verticalOffset) {
      const { screenLength: e33, minWorldLength: t23, maxWorldLength: n26 } = a26.verticalOffset;
      _13.verticalOffset = { screenLength: u4(e33), minWorldLength: t23 || 0, maxWorldLength: null != n26 ? n26 : 1 / 0 };
    }
    if (this._context.screenSizePerspectiveEnabled) {
      const { screenSizePerspectiveSettings: e33, screenSizePerspectiveSettingsLabels: t23 } = this._context.sharedResources;
      _13.screenSizePerspective = t23.overridePadding(this._textRenderParameters.haloSize + this._textRenderParameters.definition.background.padding[0]), _13.screenSizePerspectiveAlignment = e33;
    }
    let C11;
    if (y12 && (_13.shaderPolygonOffset = 1e-4), _13.hasSlicePlane = this._context.slicePlaneEnabled, null != m15) {
      const e33 = JSON.stringify(_13);
      C11 = m15.get(e33), null == C11 && (C11 = new K(_13), m15.add(e33, C11));
    } else
      C11 = new K(_13);
    const G7 = a26.translation, U7 = v13 ? r8(v13.displayWidth, v13.displayHeight) : f7, D6 = a26.centerOffset, A12 = ot2(C11, z6, G7, null, U7, D6, [0, 0], null), T11 = c21(this._context, o27, A12, g16, b15);
    if (null == T11)
      return null;
    const W8 = new p7(this, T11.object, [A12], null == m15 ? [C11] : null, P14, p6, g16);
    W8.alignedSampledElevation = T11.sampledElevation, W8.needsElevationUpdates = m3(g16.mode) || "absolute-height" === g16.mode;
    const { displayWidth: I16, displayHeight: k11 } = null != v13 ? v13 : a26;
    W8.getScreenSize = (e33 = n7()) => (e33[0] = I16, e33[1] = k11, e33);
    const $3 = new t18(a26.elevationOffset, l33);
    return W8.metadata = $3, p9(W8, o27, this._context.elevationProvider), W8;
  }
};
function G6(e32, t23, r38) {
  e32 && e32.forEach((e33) => {
    const n26 = t23(e33);
    null != n26 && r38(n26, e33.graphic);
  });
}
function R9(e32, t23) {
  if ("baseline" === t23.verticalPlacement) {
    const r39 = r28[t23.horizontalPlacement], s27 = null != e32 ? e32.baselineAnchorY : 0;
    return r8(r39, s27);
  }
  const r38 = i15(t23.horizontalPlacement, t23.verticalPlacement);
  return o19[r38];
}
var U5 = { mode: "relative-to-ground", offset: 0 };

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/internal/waterMaterialUtils.js
var e31 = { "calm-small": { waveStrength: 5e-3, perturbationStrength: 0.02, textureRepeat: 12, waveVelocity: 0.01 }, "rippled-small": { waveStrength: 0.02, perturbationStrength: 0.09, textureRepeat: 32, waveVelocity: 0.07 }, "slight-small": { waveStrength: 0.05, perturbationStrength: 0.07, textureRepeat: 28, waveVelocity: 0.1 }, "moderate-small": { waveStrength: 0.075, perturbationStrength: 0.07, textureRepeat: 24, waveVelocity: 0.1 }, "calm-medium": { waveStrength: 3125e-6, perturbationStrength: 0.01, textureRepeat: 8, waveVelocity: 0.02 }, "rippled-medium": { waveStrength: 0.035, perturbationStrength: 0.015, textureRepeat: 12, waveVelocity: 0.07 }, "slight-medium": { waveStrength: 0.06, perturbationStrength: 0.015, textureRepeat: 8, waveVelocity: 0.12 }, "moderate-medium": { waveStrength: 0.09, perturbationStrength: 0.03, textureRepeat: 4, waveVelocity: 0.12 }, "calm-large": { waveStrength: 0.01, perturbationStrength: 0, textureRepeat: 4, waveVelocity: 0.05 }, "rippled-large": { waveStrength: 0.025, perturbationStrength: 0.01, textureRepeat: 8, waveVelocity: 0.11 }, "slight-large": { waveStrength: 0.06, perturbationStrength: 0.02, textureRepeat: 3, waveVelocity: 0.13 }, "moderate-large": { waveStrength: 0.14, perturbationStrength: 0.03, textureRepeat: 2, waveVelocity: 0.15 } };

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DWaterSymbolLayer.js
var I14 = ["polyline", "polygon", "extent"];
var V7 = class _V extends h13 {
  constructor(e32, t23, r38, o27) {
    super(e32, t23, r38, o27);
  }
  async doLoad() {
  }
  destroy() {
    super.destroy(), this._context.stage.remove(this._material), this._material = null;
  }
  createGraphics3DGraphic(e32) {
    const t23 = e32.graphic;
    if (!this._validateGeometry(t23.geometry, I14, this.symbolLayer.type))
      return null;
    const r38 = this.setGraphicElevationContext(t23, new o12());
    return this.ensureDrapedStatus("on-the-ground" === r38.mode), this.ensureMaterial(), this.draped ? this._createAsOverlay(t23) : this._createAs3DShape(t23, r38, t23.uid);
  }
  ensureMaterial() {
    if (null != this._material)
      return;
    const t23 = new A5(), r38 = this.symbolLayer.color;
    null != r38 && (t23.color = h4.toUnitRGBA(r38));
    const o27 = this._getCombinedOpacity(r38, { hasIntrinsicColor: true });
    t23.color = [t23.color[0], t23.color[1], t23.color[2], o27], t23.transparent = o27 < 1 || this.needsDrivenTransparentPass, t23.waveDirection = null != this.symbolLayer.waveDirection ? _V.headingVectorFromAngle(this.symbolLayer.waveDirection) : r8(0, 0);
    const n26 = this.symbolLayer.waveStrength + "-" + this.symbolLayer.waterbodySize, s27 = e31[n26];
    t23.waveStrength = s27.waveStrength, t23.waveTextureRepeat = s27.textureRepeat, t23.waveVelocity = s27.waveVelocity, t23.flowStrength = s27.perturbationStrength, t23.hasSlicePlane = this._context.slicePlaneEnabled, t23.isDraped = this.draped, this._material = new d9(t23), this._context.stage.add(this._material);
  }
  layerOpacityChanged() {
    if (null == this._material)
      return;
    const e32 = this._material.parameters.color, t23 = this._getCombinedOpacity(this.symbolLayer.color, { hasIntrinsicColor: true }), r38 = t23 < 1 || this.needsDrivenTransparentPass;
    this._material.setParameters({ color: [e32[0], e32[1], e32[2], t23], transparent: r38 });
  }
  layerElevationInfoChanged(e32, t23, r38) {
    const o27 = this._elevationContext.mode, i20 = d8(_V.elevationModeChangeTypes, r38, o27);
    if (i20 !== T6.UPDATE)
      return i20;
    const n26 = m3(o27);
    return this.updateGraphics3DGraphicElevationInfo(e32, t23, () => n26);
  }
  slicePlaneEnabledChanged() {
    return null != this._material && this._material.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled }), true;
  }
  physicalBasedRenderingChanged() {
    return true;
  }
  _createAs3DShape(e32, t23, r38) {
    var _a;
    const o27 = c25(e32.geometry);
    if (null == o27)
      return null;
    const i20 = p12(o27, this._context.elevationProvider, this._context.renderCoordsHelper, t23), n26 = i20.position.length / 3, s27 = t7(2 * n26);
    this._createUVCoordsFromVertices(s27, i20.mapPositions, n26, this._context.elevationProvider.spatialReference);
    const a26 = new k8(i20, s27, this._context.layer.uid, e32.uid);
    if (a26.objectAndLayerIdColor = (_a = this._context.stage.renderView) == null ? void 0 : _a.getObjectAndLayerIdColor(a26), this._create3DShapeGeometries(a26), this._logGeometryCreationWarnings(a26.renderData, o27.rings, "rings", "WaterSymbol3DLayer"), 0 === a26.outGeometries.length)
      return null;
    const l33 = new V3({ geometries: a26.outGeometries, castShadow: false, layerUid: this._context.layer.uid, graphicUid: r38 }), c34 = new p7(this, l33, a26.outGeometries, null, null, u10, t23);
    return c34.alignedSampledElevation = a26.renderData.sampledElevation, c34.needsElevationUpdates = m3(t23.mode), c34;
  }
  _createUVCoordsFromVertices(e32, r38, i20, n26) {
    const a26 = H2(n26);
    C2(M10);
    for (let t23 = 0; t23 < i20; t23++)
      r7(W7, r38[3 * t23], r38[3 * t23 + 1]), f4(M10, W7);
    l3(M10, M10, a26);
    const l33 = M10[0] % _V.unitSizeOfTexture, c34 = M10[1] % _V.unitSizeOfTexture;
    B5[0] = M10[0] - l33, B5[1] = M10[1] - c34;
    for (let t23 = 0; t23 < i20; t23++)
      e32[2 * t23] = (r38[3 * t23] * a26 - B5[0]) / _V.unitSizeOfTexture, e32[2 * t23 + 1] = (r38[3 * t23 + 1] * a26 - B5[1]) / _V.unitSizeOfTexture;
  }
  _create3DShapeGeometries(e32) {
    const t23 = e32.renderData.polygons, o27 = e32.uvCoords;
    for (const { count: i20, index: n26, position: s27, mapPositions: a26, holeIndices: l33 } of t23) {
      if (null != this._context.clippingExtent && (P2(z7), c5(z7, a26), !V(z7, this._context.clippingExtent)))
        continue;
      const t24 = i8(a26, l33, 3);
      if (0 === t24.length)
        continue;
      const u23 = a8(o27, 2 * n26, 2 * i20), d19 = u14({ material: this._material, indices: t24, mapPositions: a26, attributeData: { position: s27, uv0: u23 } }, e32.objectAndLayerIdColor);
      e32.outGeometries.push(d19);
    }
  }
  _createAsOverlay(e32) {
    var _a;
    const t23 = c25(e32.geometry);
    if (null == t23)
      return null;
    this._material.renderPriority = this._renderPriority;
    const r38 = l24(t23, this._context.overlaySR), o27 = r38.position.length / 3, i20 = t7(2 * o27);
    this._createUVCoordsFromVertices(i20, r38.position, o27, this._context.overlaySR);
    const n26 = new F7(r38, i20, this._context.layer.uid, e32.uid);
    return n26.objectAndLayerIdColor = (_a = this._context.stage.renderView) == null ? void 0 : _a.getObjectAndLayerIdColor(n26), n26.outBoundingBox = P2(), this._createAsOverlayWater(n26), this._logGeometryCreationWarnings(n26.renderData, t23.rings, "rings", "WaterSymbol3DLayer"), 0 === n26.outGeometries.length ? null : new u16(this, n26.outGeometries, n26.outBoundingBox, this._context.drapeSourceRenderer);
  }
  _createAsOverlayWater(e32) {
    const t23 = e32.uvCoords, o27 = e32.renderData.polygons;
    for (const { position: i20, holeIndices: n26, index: s27, count: a26 } of o27) {
      if (P2(z7), c5(z7, i20), !V(z7, this._context.clippingExtent))
        continue;
      o2(e32.outBoundingBox, z7);
      const o28 = i8(i20, n26, 3);
      if (0 === o28.length)
        continue;
      const l33 = a8(t23, 2 * s27, 2 * a26), d19 = u14({ material: this._material, indices: o28, attributeData: { position: i20, uv0: l33 } }, e32.objectAndLayerIdColor);
      e32.outGeometries.push(new a13(d19, e32));
    }
  }
  static headingVectorFromAngle(e32) {
    const t23 = n7(), r38 = r3(e32);
    return t23[0] = Math.sin(r38), t23[1] = Math.cos(r38), t23;
  }
  test() {
    return { ...super.test(), create3DShape: (e32) => this._createAs3DShape(e32.graphic, e32.elevationContext, e32.graphicUid), ensureMaterial: () => this.ensureMaterial() };
  }
};
V7.unitSizeOfTexture = 100, V7.elevationModeChangeTypes = { definedChanged: T6.RECREATE, staysOnTheGround: T6.NONE, onTheGroundChanged: T6.RECREATE };
var B5 = n7();
var M10 = i2();
var W7 = n7();
var z7 = i3();
var k8 = class extends p11 {
  constructor(e32, t23, r38, o27) {
    super(e32, r38, o27), this.uvCoords = t23;
  }
};
var F7 = class extends p11 {
  constructor(e32, t23, r38, o27) {
    super(e32, r38, o27), this.uvCoords = t23;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DSymbolLayerFactory.js
function c33(o27, e32, t23, i20) {
  var _a;
  const m15 = ((_a = h21[o27.type]) == null ? void 0 : _a[e32.type]) || l32[e32.type];
  return m15 ? new m15(o27, e32, t23, i20) : (s.getLogger("esri.views.3d.layers.graphics.Graphics3DSymbolLayerFactory").error("GraphicsLayerFactory#make", `unknown symbol type ${e32.type}`), null);
}
var l32 = { icon: re2, object: pe2, line: I10, path: te3, fill: W6, extrude: ee, text: C10, water: V7 };
var h21 = { "mesh-3d": { fill: ye2 } };

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DSymbol.js
var m14 = class extends r23 {
  set symbol(e32) {
    this._symbol = e32, e32.symbolLayers.forEach((t23, r38) => {
      const s27 = this.symbolLayers[r38];
      null != s27 && (s27.symbol = e32, s27.symbolLayer = t23);
    });
  }
  get symbol() {
    return this._symbol;
  }
  constructor(e32, t23, r38) {
    super(t23.schedule), this._symbol = e32, this._context = t23, this._backgroundLayers = r38, this._destroyed = false, this.symbolLayers = new Array(), this.referenced = 0, this._extentPadding = 0;
  }
  async doLoad(e32) {
    let o27 = this._symbol.symbolLayers;
    this._extentPadding = 0, this._backgroundLayers && (o27 = this._backgroundLayers.concat(o27));
    const a26 = o27.length;
    for (; this.symbolLayers.length < o27.length; )
      this.symbolLayers.push(null);
    this.symbolLayers.length = o27.length;
    const n26 = [];
    for (let t23 = 0; t23 < a26; t23++) {
      const s27 = o27.at(t23);
      if (false === s27.enabled)
        continue;
      p18.renderPriority = 1 - (1 + t23) / a26, p18.renderPriorityStep = 1 / a26, p18.ignoreDrivers = s27.ignoreDrivers;
      const i20 = c33(this.symbol, s27, this._context, p18), y12 = h(e32, () => {
        this.symbolLayers[t23] = null, i20.destroy();
      });
      y12 && n26.push(y12), this.symbolLayers[t23] = i20;
    }
    if (await a6(this.symbolLayers, async (e33, t23) => {
      if (null != e33)
        try {
          await e33.load(), this._extentPadding += Math.max(this._extentPadding, e33.extentPadding);
        } catch {
          this.symbolLayers[t23] = null;
        }
    }), n26.forEach((e33) => e33.remove()), s3(e32), this.symbolLayers.length && !this.symbolLayers.some((e33) => !!e33))
      throw new Error();
  }
  getSymbolLayerSize(e32) {
    const t23 = this.symbolLayers[e32];
    return null != t23 ? t23.getCachedSize() : null;
  }
  get extentPadding() {
    return this._extentPadding;
  }
  get symbologySnappingSupported() {
    return this.symbolLayers.some((e32) => null != e32 && e32.queryForSnapping);
  }
  createGraphics3DGraphic(e32, t23) {
    const r38 = e32.graphic, s27 = this.symbolLayers.map((t24) => (t24 == null ? void 0 : t24.createGraphics3DGraphic(e32)) ?? null), a26 = this._context.arcade || this._context.featureExpressionInfoContext && this._context.featureExpressionInfoContext.arcade && this._context.featureExpressionInfoContext.arcade.modules || null;
    return new S9(r38, t23 || this, s27, e32.layer, a26);
  }
  get complexity() {
    return d12(this.symbolLayers.map((e32) => null != e32 ? e32.complexity : null));
  }
  globalPropertyChanged(e32, t23) {
    const r38 = this.symbolLayers.length;
    for (let s27 = 0; s27 < r38; s27++) {
      const r39 = this.symbolLayers[s27], o27 = (e33) => {
        const t24 = e33.layers[s27];
        return t24 instanceof p7 ? t24 : null;
      };
      if (null != r39 && !r39.globalPropertyChanged(e32, t23, o27))
        return false;
    }
    return true;
  }
  applyRendererDiff(e32, t23) {
    return this.loadStatus !== l19.LOADED ? e21.RecreateSymbol : this.symbolLayers.reduce((r38, s27) => r38 !== e21.RecreateSymbol && null != s27 ? Math.min(r38, s27.applyRendererDiff(e32, t23)) : r38, e21.FastUpdate);
  }
  prepareSymbolPatch(e32) {
    if (this.loadStatus === l19.FAILED)
      return;
    if ("partial" !== e32.diff.type)
      return;
    const t23 = e32.diff.diff;
    if (!t23.symbolLayers || "partial" !== t23.symbolLayers.type)
      return;
    const r38 = t23.symbolLayers.diff;
    this.symbolLayers.forEach((t24, s27) => {
      if (null == t24)
        return;
      const o27 = r38[s27];
      if (o27) {
        const r39 = { diff: o27, graphics3DGraphicPatches: [], symbolLayerStatePatches: [] };
        t24.prepareSymbolLayerPatch(r39), e32.symbolStatePatches.push(...r39.symbolLayerStatePatches), r39.graphics3DGraphicPatches.length && e32.graphics3DGraphicPatches.push((e33, t25) => {
          const o28 = e33.layers[s27];
          null != o28 && r39.graphics3DGraphicPatches.forEach((e34) => e34(o28, t25));
        });
      }
    });
  }
  updateGeometry(e32, t23) {
    return this._updateGeometryOrTransform(e32, (e33, r38) => e33.updateGeometry(r38, t23));
  }
  updateTransform(e32, t23, r38, s27) {
    return this._updateGeometryOrTransform(e32, (e33, o27) => e33.updateTransform(o27, t23, r38, s27));
  }
  _updateGeometryOrTransform(e32, t23) {
    for (let r38 = 0; r38 < this.symbolLayers.length; r38++) {
      const s27 = this.symbolLayers[r38];
      if (null == s27)
        continue;
      const o27 = e32.layers[r38];
      if (!o27 || !t23(s27, o27))
        return false;
    }
    return true;
  }
  onRemoveGraphic(e32) {
    for (let t23 = 0; t23 < this.symbolLayers.length; t23++) {
      const r38 = this.symbolLayers[t23];
      if (null == r38)
        continue;
      const s27 = e32.layers[t23];
      null != s27 && r38.onRemoveGraphic(s27);
    }
  }
  getFastUpdateStatus() {
    let e32 = 0, t23 = 0, r38 = 0;
    return this.symbolLayers.forEach((s27) => {
      null != s27 && (s27.loadStatus === l19.LOADING ? e32++ : s27.isFastUpdatesEnabled() ? r38++ : t23++);
    }), { loading: e32, slow: t23, fast: r38 };
  }
  async queryForSnapping(t23, r38, o27, a26) {
    const n26 = this.symbolLayers.filter(R).filter((e32) => null != e32.queryForSnapping).map((e32) => e32.queryForSnapping(t23, r38, o27, a26)), l33 = await Promise.all(n26);
    return s3(a26), l33.flat();
  }
  destroy() {
    if (this.destroyed)
      console.error("Graphics3DSymbol.destroy called when already destroyed!");
    else {
      super.destroy();
      for (const e32 of this.symbolLayers)
        null != e32 && e32.destroy();
      this.symbolLayers.length = 0, this._destroyed = true;
    }
  }
  get destroyed() {
    return this._destroyed;
  }
};
var p18 = new s20();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DWebStyleSymbol.js
var i19 = class extends r23 {
  constructor(t23, s27, r38) {
    super(s27), this.symbol = t23, this._convert = r38, this.symbologySnappingSupported = false, this.graphics3DSymbol = null, this.referenced = 0;
  }
  getSymbolLayerSize(t23) {
    return null != this.graphics3DSymbol ? this.graphics3DSymbol.getSymbolLayerSize(t23) : null;
  }
  get symbolLayers() {
    return null != this.graphics3DSymbol ? this.graphics3DSymbol.symbolLayers : [];
  }
  get extentPadding() {
    return null != this.graphics3DSymbol ? this.graphics3DSymbol.extentPadding : 0;
  }
  async doLoad(t23) {
    const s27 = await this.symbol.fetchSymbol({ signal: t23 });
    s27.id = this.symbol.id, this.graphics3DSymbol = this._convert(s27), null != this.graphics3DSymbol && await this.graphics3DSymbol.load();
  }
  createGraphics3DGraphic(t23) {
    return null != this.graphics3DSymbol ? this.graphics3DSymbol.createGraphics3DGraphic(t23, this) : null;
  }
  get complexity() {
    return null != this.graphics3DSymbol ? this.graphics3DSymbol.complexity : y6;
  }
  globalPropertyChanged(t23, s27) {
    return null != this.graphics3DSymbol && this.graphics3DSymbol.globalPropertyChanged(t23, s27);
  }
  applyRendererDiff(s27, r38) {
    return null != this.graphics3DSymbol ? this.graphics3DSymbol.applyRendererDiff(s27, r38) : e21.RecreateSymbol;
  }
  prepareSymbolPatch(t23) {
    null != this.graphics3DSymbol && this.graphics3DSymbol.prepareSymbolPatch(t23);
  }
  updateGeometry(t23, s27) {
    return null != this.graphics3DSymbol && this.graphics3DSymbol.updateGeometry(t23, s27);
  }
  updateTransform(t23, s27, r38, i20) {
    var _a;
    return ((_a = this.graphics3DSymbol) == null ? void 0 : _a.updateTransform(t23, s27, r38, i20)) ?? false;
  }
  onRemoveGraphic() {
  }
  getFastUpdateStatus() {
    return null != this.graphics3DSymbol ? this.graphics3DSymbol.getFastUpdateStatus() : { loading: 1, fast: 0, slow: 0 };
  }
  destroy() {
    null != this.graphics3DSymbol && this.graphics3DSymbol.destroy(), this.graphics3DSymbol = void 0, super.destroy();
  }
  get destroyed() {
    return void 0 === this.graphics3DSymbol;
  }
};

// node_modules/@arcgis/core/views/3d/support/intersectionUtils.js
function h22(r38, n26, t23, i20) {
  return b14(r38, n26, t23, k9(i20, n26, t23, true));
}
function j12(r38, c34, u23, o27) {
  const s27 = P(u23, e6(r38, o27, c34));
  return u(r38, c34, g(r38, u23, s27));
}
var g15 = { dir: n2(), len: 0, clip: n7() };
function k9(r38, n26, i20, s27) {
  const f25 = g15;
  return r38 ? (i20 && s27 && (f25.len = x(n26, i20)), r4(f25.dir, r38)) : s27 ? (f25.len = x(n26, i20), e6(f25.dir, i20, n26), g(f25.dir, f25.dir, 1 / f25.len)) : (e6(f25.dir, i20, n26), z(f25.dir, f25.dir)), f25;
}
function v11(r38, t23, i20) {
  const e32 = P(W(r38), i20.dir), c34 = -R4(r38, t23);
  if (c34 < 0 && e32 >= 0)
    return false;
  if (e32 > -1e-6 && e32 < 1e-6)
    return c34 > 0;
  if ((c34 < 0 || e32 < 0) && !(c34 < 0 && e32 < 0))
    return true;
  const u23 = c34 / e32;
  return e32 > 0 ? u23 < i20.clip[1] && (i20.clip[1] = u23) : u23 > i20.clip[0] && (i20.clip[0] = u23), i20.clip[0] <= i20.clip[1];
}
function b14(r38, n26, t23, i20) {
  i20.clip[0] = 0, i20.clip[1] = t23 ? i20.len : Number.MAX_VALUE;
  for (let e32 = 0; e32 < r38.length; e32++)
    if (!v11(r38[e32], n26, i20))
      return false;
  return true;
}

// node_modules/@arcgis/core/views/3d/support/FrustumExtentIntersection.js
var M11 = 0.5 * Math.PI;
var F8 = M11 / Math.PI * 180;
var N6 = class {
  constructor(t23) {
    this._renderCoordsHelper = t23.renderCoordsHelper, this._extent = new Array(4), this._planes = new Array(6), this._maxSpan = 0, this._center = { origin: n2(), direction: n2() };
    for (let e32 = 0; e32 < 4; e32++)
      this._extent[e32] = { origin: n2(), direction: n2(), cap: { next: null, direction: n2() } }, this._planes[e32] = h7();
    this._planes[l13.NEAR] = h7(), this._planes[l13.FAR] = h7(), this._planesWithoutFar = this._planes.slice(0, 5);
  }
  update(t23, e32, i20, r38 = true) {
    const a26 = this._extent;
    this._toRenderBoundingExtent(t23, e32, i20), u(this._center.origin, a26[0].origin, a26[2].origin), g(this._center.origin, this._center.origin, 0.5), this._renderCoordsHelper.worldUpAtPosition(this._center.origin, this._center.direction), r38 || g(this._center.direction, this._center.direction, -1);
    for (let n26 = 0; n26 < 4; n26++) {
      const t24 = a26[n26];
      this._renderCoordsHelper.worldUpAtPosition(t24.origin, t24.direction);
      const e33 = a26[3 === n26 ? 0 : n26 + 1];
      t24.cap.next = e33.origin, H(t24.cap.direction, t24.origin, e33.origin), P3(t24.direction, t24.cap.direction, t24.origin, this._planes[n26]), r38 || g(t24.direction, t24.direction, -1);
    }
    P3(a26[0].cap.direction, a26[1].cap.direction, a26[0].origin, this._planes[l13.NEAR]), r38 ? L2(this._planes[l13.NEAR], this._planes[l13.FAR]) : (p3(this._planes[l13.FAR], this._planes[l13.NEAR]), L2(this._planes[l13.NEAR], this._planes[l13.NEAR])), this._maxSpan = Math.max(Math.abs(t23[0] - t23[2]), Math.abs(t23[1] - t23[3])), this._maxSpanSpatialReference = e32, this._minGlobalAltitude = 0.9 * A(this._maxSpanSpatialReference).radius;
  }
  isVisibleInFrustum(t23, e32, i20 = false) {
    if (null == t23)
      return false;
    if (this._renderCoordsHelper.viewingMode === l14.Global) {
      const i21 = this._maxSpanSpatialReference.isGeographic ? F8 : M11 * e32;
      if (this._maxSpan > i21)
        return true;
      if (null != t23.altitude && t23.altitude >= this._minGlobalAltitude)
        return this._isVisibleInFrustumGlobal(t23);
    }
    if (0 === this._maxSpan) {
      const e33 = this._extent[0];
      return !(i20 || !t23.intersectsRay(p(e33.origin, e33.direction)));
    }
    for (let n26 = 0; n26 < this._extent.length; n26++) {
      const e33 = this._extent[n26];
      if (!i20 && t23.intersectsRay(p(e33.origin, e33.direction)))
        return true;
      if (t23.intersectsLineSegment(b3(e33.origin, e33.cap.next, V8), e33.cap.direction))
        return true;
    }
    const r38 = i20 ? this._planes : this._planesWithoutFar;
    for (let n26 = 0; n26 < t23.lines.length; n26++) {
      const e33 = t23.lines[n26];
      if (h22(r38, e33.origin, e33.endpoint, e33.direction))
        return true;
    }
    return false;
  }
  _toRenderBoundingExtentGlobal(t23, r38, n26) {
    const o27 = 5;
    y2(t23, U6), U6[2] = n26, zn(r38, U6, v12, this._renderCoordsHelper.spatialReference), h3(I15, v12), P2(L7);
    for (const { x0: i20, x1: s27, y0: c34, y1: l33 } of k10)
      for (let p19 = 0; p19 < o27; p19++) {
        const h23 = p19 / (o27 - 1);
        U6[0] = s5(t23[i20], t23[s27], h23), U6[1] = s5(t23[c34], t23[l33], h23), U6[2] = n26, Hn(U6, r38, U6, this._renderCoordsHelper.spatialReference), O(U6, U6, I15), h2(L7, U6);
      }
    o(this._extent[0].origin, L7[0], L7[1], L7[2]), o(this._extent[1].origin, L7[3], L7[1], L7[2]), o(this._extent[2].origin, L7[3], L7[4], L7[2]), o(this._extent[3].origin, L7[0], L7[4], L7[2]);
    for (let e32 = 0; e32 < 4; ++e32)
      O(this._extent[e32].origin, this._extent[e32].origin, v12);
  }
  _toRenderBoundingExtentLocal(t23, e32, i20) {
    kn(t23, e32, P13, this._renderCoordsHelper.spatialReference), o(this._extent[0].origin, P13[0], P13[1], i20), o(this._extent[1].origin, P13[2], P13[1], i20), o(this._extent[2].origin, P13[2], P13[3], i20), o(this._extent[3].origin, P13[0], P13[3], i20);
  }
  _toRenderBoundingExtent(e32, i20, r38) {
    switch (this._renderCoordsHelper.viewingMode) {
      case l14.Global:
        this._toRenderBoundingExtentGlobal(e32, i20, r38);
        break;
      case l14.Local:
        this._toRenderBoundingExtentLocal(e32, i20, r38);
        break;
      default:
        n5(this._renderCoordsHelper.viewingMode);
    }
  }
  _isVisibleInFrustumGlobal(t23) {
    if (R4(t23.planes[l13.NEAR], this._center.origin) < 0 && P(this._center.direction, t23.direction) < 0)
      return true;
    for (let e32 = 0; e32 < 4; e32++) {
      const i20 = this._extent[e32];
      if (R4(t23.planes[l13.NEAR], i20.origin) < 0 && P(i20.direction, t23.direction) < 0)
        return true;
    }
    return false;
  }
};
var k10 = [{ x0: 0, y0: 1, x1: 2, y1: 1 }, { x0: 0, y0: 3, x1: 2, y1: 3 }, { x0: 0, y0: 1, x1: 0, y1: 3 }, { x0: 2, y0: 1, x1: 2, y1: 3 }];
var U6 = n2();
var v12 = e12();
var I15 = e12();
var L7 = i3();
var P13 = i2();
var V8 = v2();

export {
  a17 as a,
  l18 as l,
  L3 as L,
  A6 as A,
  r22 as r,
  e24 as e,
  e21 as e2,
  l19 as l2,
  P7 as P,
  n15 as n,
  L5 as L2,
  S8 as S,
  e23 as e3,
  i13 as i,
  l21 as l3,
  n19 as n2,
  o20 as o,
  s16 as s,
  i14 as i2,
  c24 as c,
  n18 as n3,
  s18 as s2,
  t21 as t,
  s19 as s3,
  m14 as m,
  i19 as i3,
  j12 as j,
  N6 as N
};
//# sourceMappingURL=chunk-YOWAMJJI.js.map
