import {
  m as m2
} from "./chunk-XYSQCP5F.js";
import {
  e as e6
} from "./chunk-XACNEHDM.js";
import {
  c,
  m
} from "./chunk-EHQZFPMP.js";
import {
  o as o2
} from "./chunk-WH76OAIT.js";
import {
  t
} from "./chunk-AB23UNQC.js";
import {
  e as e5
} from "./chunk-WVOBJDWI.js";
import {
  e as e4
} from "./chunk-PV5KBAYL.js";
import {
  e as e3
} from "./chunk-YVVROPAO.js";
import {
  a
} from "./chunk-3I3GE5YW.js";
import {
  i2 as i
} from "./chunk-BO2REVMA.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  e as e2
} from "./chunk-CW7LIPBH.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import {
  e
} from "./chunk-7EG7BYWF.js";

// node_modules/@arcgis/core/chunks/CloudsComposition.glsl.js
function v() {
  const r = new i();
  r.attributes.add(O.POSITION, "vec2"), r.varyings.add("worldRay", "vec3");
  const { vertex: v2, fragment: f2 } = r;
  return v2.uniforms.add(new e4("inverseProjectionMatrix", (e7, r2) => r2.camera.inverseProjectionMatrix), new e4("inverseViewMatrix", (r2, i2) => e(u, i2.camera.viewMatrix))), v2.code.add(o`void main(void) {
vec3 posViewNear = (inverseProjectionMatrix * vec4(position, -1.0, 1.0)).xyz;
worldRay = (inverseViewMatrix * vec4(posViewNear, 0.0)).xyz;
gl_Position = vec4(position, 1.0, 1.0);
}`), f2.include(e5), f2.include(a), r.include(m, { pbrMode: c.Disabled, lightingSphericalHarmonicsOrder: 2 }), r.include(t), r.include(e6), r.include(o2), r.include(m2, { instancedDoublePrecision: false }), f2.uniforms.add(new e3("cameraPosition", (e7, r2) => r2.camera.eye)), f2.code.add(o`void main() {
vec4 cloudsColor = renderClouds(normalize(worldRay), cameraPosition);
fragColor = vec4((1.0 - totalFadeInOut) * cloudsColor.rgb, cloudsColor.a);
}`), r;
}
var u = e2();
var f = Object.freeze(Object.defineProperty({ __proto__: null, build: v }, Symbol.toStringTag, { value: "Module" }));

export {
  v,
  f
};
//# sourceMappingURL=chunk-7NHQKERX.js.map
