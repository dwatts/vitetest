import {
  o as o2
} from "./chunk-6OVHX5ZO.js";
import {
  o
} from "./chunk-N6RC4PHI.js";
import {
  Z as Z2
} from "./chunk-CFEAJLOI.js";
import {
  yt
} from "./chunk-IG234GCS.js";
import {
  Z,
  i as i2
} from "./chunk-AQ7R6V4L.js";
import {
  i
} from "./chunk-EKJ2DJIR.js";
import {
  n
} from "./chunk-7KH4CLS5.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-HMVAPW5X.js";

// node_modules/@arcgis/core/layers/graphics/data/FeatureStore.js
var h = i2();
var m = class {
  constructor(e) {
    this.geometryInfo = e, this._boundsStore = new o(), this._featuresById = /* @__PURE__ */ new Map(), this._markedIds = /* @__PURE__ */ new Set(), this.events = new n(), this.featureAdapter = o2;
  }
  get geometryType() {
    return this.geometryInfo.geometryType;
  }
  get hasM() {
    return this.geometryInfo.hasM;
  }
  get hasZ() {
    return this.geometryInfo.hasZ;
  }
  get numFeatures() {
    return this._featuresById.size;
  }
  get fullBounds() {
    return this._boundsStore.fullBounds;
  }
  get storeStatistics() {
    let e = 0;
    return this._featuresById.forEach((t) => {
      null != t.geometry && t.geometry.coords && (e += t.geometry.coords.length);
    }), { featureCount: this._featuresById.size, vertexCount: e / (this.hasZ ? this.hasM ? 4 : 3 : this.hasM ? 3 : 2) };
  }
  getFullExtent(e) {
    if (null == this.fullBounds)
      return null;
    const [t, s3, r, o3] = this.fullBounds;
    return { xmin: t, ymin: s3, xmax: r, ymax: o3, spatialReference: Z2(e) };
  }
  add(e) {
    this._add(e), this._emitChanged();
  }
  addMany(e) {
    for (const t of e)
      this._add(t);
    this._emitChanged();
  }
  clear() {
    this._featuresById.clear(), this._boundsStore.clear(), this._emitChanged();
  }
  removeById(e) {
    const t = this._featuresById.get(e);
    return t ? (this._remove(t), this._emitChanged(), t) : null;
  }
  removeManyById(e) {
    this._boundsStore.invalidateIndex();
    for (const t of e) {
      const e2 = this._featuresById.get(t);
      e2 && this._remove(e2);
    }
    this._emitChanged();
  }
  forEachBounds(e, t) {
    for (const s3 of e) {
      const e2 = this._boundsStore.get(s3.objectId);
      e2 && t(Z(h, e2));
    }
  }
  getFeature(e) {
    return this._featuresById.get(e);
  }
  has(e) {
    return this._featuresById.has(e);
  }
  forEach(e) {
    this._featuresById.forEach((t) => e(t));
  }
  forEachInBounds(e, t) {
    this._boundsStore.forEachInBounds(e, (e2) => {
      t(this._featuresById.get(e2));
    });
  }
  startMarkingUsedFeatures() {
    this._boundsStore.invalidateIndex(), this._markedIds.clear();
  }
  sweep() {
    let e = false;
    this._featuresById.forEach((t, s3) => {
      this._markedIds.has(s3) || (e = true, this._remove(t));
    }), this._markedIds.clear(), e && this._emitChanged();
  }
  _emitChanged() {
    this.events.emit("changed", void 0);
  }
  _add(t) {
    if (!t)
      return;
    const r = t.objectId;
    if (null == r)
      return void s.getLogger("esri.layers.graphics.data.FeatureStore").error(new s2("featurestore:invalid-feature", "feature id is missing", { feature: t }));
    const o3 = this._featuresById.get(r);
    let a;
    if (this._markedIds.add(r), o3 ? (t.displayId = o3.displayId, a = this._boundsStore.get(r), this._boundsStore.delete(r)) : null != this.onFeatureAdd && this.onFeatureAdd(t), null == t.geometry || !t.geometry.coords || !t.geometry.coords.length)
      return this._boundsStore.set(r, null), void this._featuresById.set(r, t);
    a = yt(null != a ? a : i(), t.geometry, this.geometryInfo.hasZ, this.geometryInfo.hasM), null != a && this._boundsStore.set(r, a), this._featuresById.set(r, t);
  }
  _remove(e) {
    null != this.onFeatureRemove && this.onFeatureRemove(e);
    const t = e.objectId;
    return this._markedIds.delete(t), this._boundsStore.delete(t), this._featuresById.delete(t), e;
  }
};

export {
  m
};
//# sourceMappingURL=chunk-3BTM6YO4.js.map
