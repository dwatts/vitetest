import {
  l as l2
} from "./chunk-NN3U3NPJ.js";
import {
  b
} from "./chunk-IQRLZSBX.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  l
} from "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-HMVAPW5X.js";

// node_modules/@arcgis/core/views/layers/WMSLayerView.js
var i = (i2) => {
  let m = class extends i2 {
    initialize() {
      this.exportImageParameters = new l2({ layer: this.layer });
    }
    destroy() {
      this.exportImageParameters = l(this.exportImageParameters);
    }
    get exportImageVersion() {
      var _a;
      return (_a = this.exportImageParameters) == null ? void 0 : _a.commitProperty("version"), this.commitProperty("timeExtent"), (this._get("exportImageVersion") || 0) + 1;
    }
    fetchPopupFeatures(e2) {
      const { layer: t } = this;
      if (!e2)
        return Promise.reject(new s("wmslayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: t }));
      const { popupEnabled: o } = t;
      if (!o)
        return Promise.reject(new s("wmslayerview:fetchPopupFeatures", "popupEnabled should be true", { popupEnabled: o }));
      const s2 = this.createFetchPopupFeaturesQuery(e2);
      if (!s2)
        return Promise.resolve([]);
      const { extent: p, width: a2, height: i3, x: m2, y: n } = s2;
      if (!(p && a2 && i3))
        throw new s("wmslayerview:fetchPopupFeatures", "WMSLayer does not support fetching features.", { extent: p, width: a2, height: i3 });
      return t.fetchFeatureInfo(p, a2, i3, m2, n);
    }
  };
  return e([y()], m.prototype, "exportImageParameters", void 0), e([y({ readOnly: true })], m.prototype, "exportImageVersion", null), e([y()], m.prototype, "layer", void 0), e([y(b)], m.prototype, "timeExtent", void 0), m = e([a("esri.layers.mixins.WMSLayerView")], m), m;
};

export {
  i
};
//# sourceMappingURL=chunk-IGK2M4ZM.js.map
