import {
  I
} from "./chunk-LVVQ2RQY.js";
import {
  p
} from "./chunk-M6OG7C2T.js";
import {
  r
} from "./chunk-GOK5MP3B.js";
import {
  f,
  h,
  l as l2
} from "./chunk-H7RDAEPY.js";
import {
  n3 as n,
  s2,
  t2 as t
} from "./chunk-V76KGJFU.js";
import {
  l
} from "./chunk-HB2SQRT2.js";
import {
  E,
  T,
  a,
  c
} from "./chunk-7I33FAWS.js";
import {
  o
} from "./chunk-DWOEYHKS.js";
import {
  s2 as s
} from "./chunk-HMVAPW5X.js";

// node_modules/@arcgis/core/layers/support/PromiseQueue.js
var n2 = class {
  constructor() {
    this._tasks = new Array(), this._running = r(false);
  }
  get length() {
    return this._tasks.length;
  }
  get running() {
    return this._running.value;
  }
  destroy() {
    this.cancelAll();
  }
  runTask(s3) {
    for (; !s3.done && this._process(s3); )
      s3.madeProgress();
  }
  push(s3, t2, e) {
    return this._running.value = true, new Promise((r2, n3) => this._tasks.push(new i(r2, n3, s3, t2, e)));
  }
  unshift(s3, t2, e) {
    return this._running.value = true, new Promise((r2, n3) => this._tasks.unshift(new i(r2, n3, s3, t2, e)));
  }
  _process(r2) {
    var _a;
    if (0 === this._tasks.length)
      return false;
    const n3 = this._tasks.shift();
    try {
      const i2 = a(n3.signal);
      if (i2 && !n3.abortCallback)
        n3.reject(c());
      else {
        const s3 = i2 ? (_a = n3.abortCallback) == null ? void 0 : _a.call(n3, c()) : n3.callback(r2);
        T(s3) ? s3.then(n3.resolve, n3.reject) : n3.resolve(s3);
      }
    } catch (i2) {
      n3.reject(i2);
    }
    return this._running.value = this._tasks.length > 0, true;
  }
  cancelAll() {
    const s3 = c();
    for (const t2 of this._tasks)
      if (t2.abortCallback) {
        const e = t2.abortCallback(s3);
        t2.resolve(e);
      } else
        t2.reject(s3);
    this._tasks.length = 0, this._running.value = false;
  }
};
var i = class {
  constructor(s3, t2, e, r2 = void 0, n3 = void 0) {
    this.resolve = s3, this.reject = t2, this.callback = e, this.signal = r2, this.abortCallback = n3;
  }
};

// node_modules/@arcgis/core/views/support/Scheduler.js
function c2() {
  return new N.Scheduler();
}
var g;
var I2;
!function(e) {
  e[e.YIELD = 1] = "YIELD";
}(g || (g = {})), function(e) {
  e.RESOURCE_CONTROLLER_IMMEDIATE = "immediate", e.RESOURCE_CONTROLLER = "schedule", e.SLIDE = "slide", e.STREAM_DATA_LOADER = "stream loader", e.ELEVATION_QUERY = "elevation query", e.TERRAIN_SURFACE = "terrain", e.SURFACE_GEOMETRY_UPDATES = "surface geometry updates", e.LOD_RENDERER = "LoD renderer", e.GRAPHICS_CORE = "Graphics3D", e.I3S_CONTROLLER = "I3S", e.POINT_CLOUD_LAYER = "point cloud", e.FEATURE_TILE_FETCHER = "feature fetcher", e.OVERLAY = "overlay", e.STAGE = "stage", e.GRAPHICS_DECONFLICTOR = "graphics deconflictor", e.FILTER_VISIBILITY = "Graphics3D filter visibility", e.SCALE_VISIBILITY = "Graphics3D scale visibility", e.FRUSTUM_VISIBILITY = "Graphics3D frustum visibility", e.POINT_OF_INTEREST_FREQUENT = "POI frequent", e.POINT_OF_INTEREST_INFREQUENT = "POI infrequent", e.LABELER = "labeler", e.FEATURE_QUERY_ENGINE = "feature query", e.FEATURE_TILE_TREE = "feature tile tree", e.FEATURE_TILE_TREE_ACTIVE = "fast feature tile tree", e.ELEVATION_ALIGNMENT = "elevation alignment", e.TEXT_TEXTURE_ATLAS = "text texture atlas", e.TEXTURE_UNLOAD = "texture unload", e.LINE_OF_SIGHT_TOOL = "line of sight tool", e.LINE_OF_SIGHT_TOOL_INTERACTIVE = "interactive line of sight tool", e.ELEVATION_PROFILE = "elevation profile", e.SNAPPING = "snapping", e.SHADOW_ACCUMULATOR = "shadow accumulator", e.CLOUDS_GENERATOR = "clouds generator", e[e.NONE = 0] = "NONE", e[e.TEST_PRIO = 1] = "TEST_PRIO";
}(I2 || (I2 = {}));
var R = 0;
var p2 = /* @__PURE__ */ new Map([[I2.RESOURCE_CONTROLLER_IMMEDIATE, R], [I2.RESOURCE_CONTROLLER, 4], [I2.SLIDE, R], [I2.STREAM_DATA_LOADER, R], [I2.ELEVATION_QUERY, R], [I2.TERRAIN_SURFACE, 1], [I2.SURFACE_GEOMETRY_UPDATES, 1], [I2.LOD_RENDERER, 2], [I2.GRAPHICS_CORE, 2], [I2.I3S_CONTROLLER, 2], [I2.POINT_CLOUD_LAYER, 2], [I2.FEATURE_TILE_FETCHER, 2], [I2.OVERLAY, 4], [I2.STAGE, 4], [I2.GRAPHICS_DECONFLICTOR, 4], [I2.FILTER_VISIBILITY, 4], [I2.SCALE_VISIBILITY, 4], [I2.FRUSTUM_VISIBILITY, 4], [I2.CLOUDS_GENERATOR, 4], [I2.POINT_OF_INTEREST_FREQUENT, 6], [I2.POINT_OF_INTEREST_INFREQUENT, 30], [I2.LABELER, 8], [I2.FEATURE_QUERY_ENGINE, 8], [I2.FEATURE_TILE_TREE, 16], [I2.FEATURE_TILE_TREE_ACTIVE, R], [I2.ELEVATION_ALIGNMENT, 12], [I2.TEXT_TEXTURE_ATLAS, 12], [I2.TEXTURE_UNLOAD, 12], [I2.LINE_OF_SIGHT_TOOL, 16], [I2.LINE_OF_SIGHT_TOOL_INTERACTIVE, R], [I2.SNAPPING, R], [I2.SHADOW_ACCUMULATOR, 30]]);
function f2(e) {
  return p2.has(e) ? p2.get(e) : "number" == typeof e ? e : 1;
}
var L = n(6.5);
var A = n(1);
var b = n(30);
var S = n(1e3 / 30);
var O = n(100);
var k = 0.9;
var N;
var U;
!function(a2) {
  class n3 {
    get updating() {
      return this._updating.value;
    }
    _updatingChanged() {
      this._updating.value = this._tasks.some((e) => e.needsUpdate);
    }
    constructor() {
      this._updating = r(true), this._microTaskQueued = false, this._frameNumber = 0, this.performanceInfo = { total: new s2("total"), tasks: /* @__PURE__ */ new Map() }, this._frameTaskTimes = /* @__PURE__ */ new Map(), this._budget = new c3(), this._state = I.INTERACTING, this._tasks = new l(), this._runQueue = new l(), this._load = 0, this._idleStateCallbacks = new l(), this._idleUpdatesStartFired = false, this._forceTask = false, this._debug = false, this._debugHandle = l2(() => p.SCHEDULER_LOG_SLOW_TASKS, (e2) => this._debug = e2, h);
      for (const t2 of Object.keys(I2))
        this.performanceInfo.tasks.set(I2[t2], new s2(I2[t2]));
      const e = this;
      this._test = { FRAME_SAFETY_BUDGET: L, INTERACTING_BUDGET: S, IDLE_BUDGET: O, get availableBudget() {
        return e._budget.budget;
      }, usedBudget: 0, getBudget: () => e._budget, setBudget: (t2) => e._budget = t2, updateTask: (e2) => this._updateTask(e2), getState: (e2) => this._getState(e2), getRuntime: (e2) => this._getRuntime(e2), frameTaskTimes: this._frameTaskTimes, resetRuntimes: () => this._resetRuntimes(), getRunning: () => this._getRunning() };
    }
    destroy() {
      this._tasks.toArray().forEach((e) => e.remove()), this._tasks.clear(), o(this._debugHandle), this._microTaskQueued = false, this._updatingChanged();
    }
    taskRunningChanged(e) {
      this._updatingChanged(), e && this._budget.remaining > 0 && !this._microTaskQueued && (this._microTaskQueued = true, queueMicrotask(() => {
        this._microTaskQueued && (this._microTaskQueued = false, this._budget.remaining > 0 && this._schedule() && this.frame());
      }));
    }
    registerTask(e, t2) {
      const s3 = f2(e), i2 = new u(this, e, t2, s3);
      return this._tasks.push(i2), this._updatingChanged(), this.performanceInfo.tasks.has(e) || this.performanceInfo.tasks.set(e, new s2(e)), i2;
    }
    registerIdleStateCallbacks(e, t2) {
      const s3 = { idleBegin: e, idleEnd: t2 };
      this._idleStateCallbacks.push(s3), this.state === I.IDLE && this._idleUpdatesStartFired && s3.idleBegin();
      const r2 = this;
      return { remove: () => this._removeIdleStateCallbacks(s3), set idleBegin(e2) {
        r2._idleUpdatesStartFired && (s3.idleEnd(), r2._state === I.IDLE && e2()), s3.idleBegin = e2;
      }, set idleEnd(e2) {
        s3.idleEnd = e2;
      } };
    }
    get load() {
      return this._load;
    }
    set state(e) {
      this._state !== e && (this._state = e, this.state !== I.IDLE && this._idleUpdatesStartFired && (this._idleUpdatesStartFired = false, this._idleStateCallbacks.forAll((e2) => e2.idleEnd())));
    }
    get state() {
      return this._state;
    }
    updateBudget(e) {
      this._test.usedBudget = 0, ++this._frameNumber;
      let t2 = L, s3 = e.frameDuration, r2 = A;
      switch (this.state) {
        case I.IDLE:
          t2 = n(0), s3 = n(Math.max(O, e.frameDuration)), r2 = b;
          break;
        case I.INTERACTING:
          s3 = n(Math.max(S, e.frameDuration));
        case I.ANIMATING:
      }
      return s3 = n(s3 - e.elapsedFrameTime - t2), this.state !== I.IDLE && s3 < A && !this._forceTask ? (this._forceTask = true, false) : (s3 = n(Math.max(s3, r2)), this._budget.reset(s3, this.state), this._updateLoad(), this._schedule());
    }
    frame() {
      switch (this._forceTask = false, this._microTaskQueued = false, this.state) {
        case I.IDLE:
          this._idleUpdatesStartFired || (this._idleUpdatesStartFired = true, this._idleStateCallbacks.forAll((e) => e.idleBegin())), this._runIdle();
          break;
        case I.INTERACTING:
          this._runInteracting();
          break;
        default:
          this._runAnimating();
      }
      this._test.usedBudget = this._budget.elapsed;
    }
    stopFrame() {
      this._budget.reset(n(0), this._state), this._budget.madeProgress();
    }
    _removeIdleStateCallbacks(e) {
      this._idleUpdatesStartFired && e.idleEnd(), this._idleStateCallbacks.removeUnordered(e);
    }
    removeTask(e) {
      this._tasks.removeUnordered(e), this._runQueue.removeUnordered(e), this._updatingChanged();
    }
    _updateTask(e) {
      this._tasks.forAll((t2) => {
        t2.name === e && t2.setPriority(e);
      });
    }
    _getState(e) {
      if (this._runQueue.some((t3) => t3.name === e))
        return U.SCHEDULED;
      let t2 = U.IDLE;
      return this._tasks.forAll((s3) => {
        s3.name === e && s3.needsUpdate && (s3.schedulePriority <= 1 ? t2 = U.READY : t2 !== U.READY && (t2 = U.WAITING));
      }), t2;
    }
    _getRuntime(e) {
      let t2 = 0;
      return this._tasks.forAll((s3) => {
        s3.name === e && (t2 += s3.runtime);
      }), t2;
    }
    _resetRuntimes() {
      this._tasks.forAll((e) => e.runtime = 0);
    }
    _getRunning() {
      const e = /* @__PURE__ */ new Map();
      if (this._tasks.forAll((t3) => {
        t3.needsUpdate && e.set(t3.name, (e.get(t3.name) || 0) + 1);
      }), 0 === e.size)
        return null;
      let t2 = "";
      return e.forEach((e2, s3) => {
        t2 += e2 > 1 ? ` ${e2}x ${s3}` : ` ${s3}`;
      }), t2;
    }
    _runIdle() {
      this._run();
    }
    _runInteracting() {
      this._run();
    }
    _runAnimating() {
      this._run();
    }
    _updateLoad() {
      const e = this._tasks.reduce((e2, t2) => t2.needsUpdate ? ++e2 : e2, 0);
      this._load = this._load * k + e * (1 - k);
    }
    _schedule() {
      for (this._runQueue.filterInPlace((e) => !!e.needsUpdate || (e.schedulePriority = e.basePriority, false)), this._tasks.forAll((e) => {
        e.basePriority === R && e.needsUpdate && !this._runQueue.includes(e) && e.blockFrame !== this._frameNumber && this._runQueue.unshift(e);
      }); 0 === this._runQueue.length; ) {
        let e = false, t2 = 0;
        if (this._tasks.forAll((s3) => {
          if (s3.needsUpdate && 0 !== s3.schedulePriority && s3.basePriority !== R && s3.blockFrame !== this._frameNumber)
            if (e = true, t2 = Math.max(t2, s3.basePriority), 1 === s3.schedulePriority)
              s3.schedulePriority = 0, this._runQueue.push(s3);
            else
              --s3.schedulePriority;
        }), !e)
          return this._updatingChanged(), false;
      }
      return this._updatingChanged(), true;
    }
    _run() {
      const e = this._budget.now();
      this._startFrameTaskTimes();
      do {
        for (; this._runQueue.length > 0; ) {
          const r2 = this._budget.now(), i2 = this._runQueue.pop();
          this._budget.resetProgress();
          try {
            i2.task.runTask(this._budget) === g.YIELD && (i2.blockFrame = this._frameNumber);
          } catch (s3) {
            s.getLogger("esri.views.support.Scheduler").error(`Exception in task "${i2.name}"`, s3);
          }
          !this._budget.hasProgressed && i2.blockFrame !== this._frameNumber && i2.needsUpdate && (i2.name, I2.I3S_CONTROLLER, i2.blockFrame = this._frameNumber), i2.schedulePriority = i2.basePriority;
          const a3 = this._budget.now() - r2;
          if (i2.runtime += a3, this._frameTaskTimes.set(i2.priority, this._frameTaskTimes.get(i2.priority) + a3), this._debug && a3 > 2 * this._budget.budget && console.log("Task", i2.name, "used", a3, "of max", this._budget.budget, "ms"), this._budget.remaining <= 0)
            return this._updatingChanged(), void this._recordFrameTaskTimes(this._budget.now() - e);
        }
      } while (this._schedule());
      this._updatingChanged(), this._recordFrameTaskTimes(this._budget.now() - e);
    }
    _startFrameTaskTimes() {
      for (const e of Object.keys(I2))
        this._frameTaskTimes.set(I2[e], 0);
    }
    _recordFrameTaskTimes(e) {
      this._frameTaskTimes.forEach((e2, t2) => this.performanceInfo.tasks.get(t2).record(e2)), this.performanceInfo.total.record(e);
    }
    get test() {
      return this._test;
    }
  }
  a2.Scheduler = n3;
  class u {
    get task() {
      return this._task.value;
    }
    get updating() {
      return this._queue.running;
    }
    constructor(t2, s3, r2, i2) {
      this._scheduler = t2, this.name = s3, this._basePriority = i2, this.blockFrame = 0, this.runtime = 0, this._queue = new n2(), this._handles = new t(), this.schedulePriority = this._basePriority, this._task = r(null != r2 ? r2 : this._queue), this._handles.add(f(() => this.task.running, (e) => t2.taskRunningChanged(e)));
    }
    remove() {
      this.processQueue(C), this._scheduler.removeTask(this), this.schedule = F.schedule, this.reschedule = F.reschedule, this._handles.destroy();
    }
    get basePriority() {
      return this._basePriority;
    }
    setPriority(e) {
      this.name = e;
      const t2 = f2(e);
      this._basePriority !== R && 0 === this.schedulePriority || (this.schedulePriority = t2), this._basePriority = t2;
    }
    get priority() {
      return this.name;
    }
    set priority(e) {
      this.setPriority(e);
    }
    get needsUpdate() {
      return this.updating || this.task.running;
    }
    schedule(e, t2, s3) {
      return this._queue.push(e, t2, s3);
    }
    reschedule(e, t2, s3) {
      return this._queue.unshift(e, t2, s3);
    }
    processQueue(e) {
      this._queue.runTask(e);
    }
  }
  class c3 {
    constructor() {
      this._begin = "undefined" != typeof performance ? performance.now() : 0, this._budget = 0, this._state = I.IDLE, this._done = false, this._progressed = false, this._enabled = true;
    }
    run(e) {
      return !this.done && (true === e() && this.madeProgress(), true);
    }
    get done() {
      return this._done;
    }
    get budget() {
      return this._budget;
    }
    madeProgress() {
      return this._progressed = true, this._done = this.elapsed >= this._budget && this._enabled, this._done;
    }
    get state() {
      return this._state;
    }
    get enabled() {
      return this._enabled;
    }
    set enabled(e) {
      this._enabled = e;
    }
    reset(e, t2) {
      this._begin = this.now(), this._budget = e, this._state = t2, this.resetProgress();
    }
    get remaining() {
      return Math.max(this._budget - this.elapsed, 0);
    }
    now() {
      return performance.now();
    }
    get elapsed() {
      return performance.now() - this._begin;
    }
    resetProgress() {
      this._progressed = false, this._done = false;
    }
    get hasProgressed() {
      return this._progressed;
    }
  }
  a2.Budget = c3;
}(N || (N = {})), function(e) {
  e.SCHEDULED = "s", e.READY = "r", e.WAITING = "w", e.IDLE = "i";
}(U || (U = {}));
var C = (() => {
  const e = new N.Budget();
  return e.enabled = false, e;
})();
var P = class {
  remove() {
  }
  processQueue() {
  }
  schedule(e, t2, s3) {
    try {
      if (a(t2)) {
        const e2 = c();
        return s3 ? Promise.resolve(s3(e2)) : Promise.reject(e2);
      }
      return E(e(C));
    } catch (r2) {
      return Promise.reject(r2);
    }
  }
  reschedule(e, t2, s3) {
    return this.schedule(e, t2, s3);
  }
};
var F = new P();

export {
  n2 as n,
  c2 as c,
  g,
  I2 as I,
  C,
  F
};
//# sourceMappingURL=chunk-KRCNIFX2.js.map
