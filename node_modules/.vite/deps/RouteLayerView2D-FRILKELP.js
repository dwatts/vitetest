import {
  i
} from "./chunk-3AKVKVHP.js";
import "./chunk-RLCH4JTX.js";
import {
  oe
} from "./chunk-XJSQN3VD.js";
import {
  f
} from "./chunk-IVHBK5M6.js";
import "./chunk-U7ACAW2W.js";
import "./chunk-HVV5CDLD.js";
import "./chunk-JNPHM5XV.js";
import "./chunk-X6M7YYU3.js";
import "./chunk-HMHRXSML.js";
import "./chunk-JXKASHKJ.js";
import "./chunk-WGM2OLIG.js";
import "./chunk-3MPC6MVT.js";
import "./chunk-UBY6VMKB.js";
import "./chunk-ULFDJHIR.js";
import {
  d
} from "./chunk-TYEEWKIN.js";
import "./chunk-LYNC7OVT.js";
import {
  C,
  O,
  S2 as S,
  T,
  c,
  j2 as j,
  m
} from "./chunk-N6TMG5T2.js";
import "./chunk-3QGLF4DO.js";
import "./chunk-OKNF37G2.js";
import "./chunk-5W2MUQQG.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-VF625TQS.js";
import "./chunk-UXWYXWGD.js";
import "./chunk-PX3Q44FM.js";
import "./chunk-XYJMHUDA.js";
import "./chunk-CSLWFQJE.js";
import "./chunk-MRDUXF66.js";
import "./chunk-IVABPLLZ.js";
import "./chunk-FS3VDXRM.js";
import "./chunk-BWIRPDWB.js";
import "./chunk-XP6ESZGI.js";
import "./chunk-RKM5MXYH.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-TBHRKIAA.js";
import "./chunk-EFDT2ZDW.js";
import "./chunk-USNIBKH4.js";
import "./chunk-BBJLFBMQ.js";
import "./chunk-J6SRKANJ.js";
import "./chunk-RBDJB3ZY.js";
import "./chunk-RRRAGAMB.js";
import "./chunk-ERFCZMKG.js";
import "./chunk-C2GW4T2D.js";
import "./chunk-SO7CVIZK.js";
import "./chunk-YAWND7HF.js";
import "./chunk-FJYIB7HF.js";
import "./chunk-JORCYNDS.js";
import "./chunk-BZUKDBTT.js";
import "./chunk-7YCGPGGL.js";
import "./chunk-GPABU246.js";
import "./chunk-KILCBNKU.js";
import "./chunk-K4WBDIIJ.js";
import "./chunk-H3DKDGMJ.js";
import "./chunk-FB6EWBGE.js";
import "./chunk-TRGMWULG.js";
import "./chunk-WTPQKRQM.js";
import "./chunk-AER5JAFS.js";
import "./chunk-7HZ72XIE.js";
import "./chunk-ALPCRJS4.js";
import "./chunk-WDZ5AAFL.js";
import "./chunk-XL7RF4A6.js";
import "./chunk-ZL3HOHNK.js";
import "./chunk-PR2OEILG.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-MVWFPLOX.js";
import "./chunk-X3YW4YOG.js";
import "./chunk-IG234GCS.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-BA6PBZHC.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-D3BOGOKY.js";
import "./chunk-QOWAKGE4.js";
import "./chunk-3TTW7E7W.js";
import "./chunk-RWWB77SD.js";
import "./chunk-ZMFGNDTK.js";
import "./chunk-UL64BLDS.js";
import "./chunk-EG6CFIHA.js";
import "./chunk-CMNAZRWU.js";
import "./chunk-P4PDTNIU.js";
import "./chunk-G2DTL6AE.js";
import "./chunk-Q6HN54VB.js";
import "./chunk-Z3GCSCQI.js";
import "./chunk-UU2XJGLA.js";
import "./chunk-CGJNVOU3.js";
import "./chunk-YA7WDOJK.js";
import "./chunk-FVR25IMN.js";
import "./chunk-EV77QZBT.js";
import "./chunk-467UETSR.js";
import "./chunk-SHFLRM67.js";
import "./chunk-YGUWDSEH.js";
import "./chunk-LO3LAMAS.js";
import "./chunk-EFRTD25L.js";
import "./chunk-EAGDM3GO.js";
import "./chunk-W2YWKOK7.js";
import "./chunk-YOTOWDJK.js";
import "./chunk-ND7XUHDE.js";
import "./chunk-XG5SDOKD.js";
import "./chunk-UQHDCOJC.js";
import "./chunk-MF3HZ6GV.js";
import "./chunk-SNAARWF3.js";
import "./chunk-FQZ2JEHK.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-G3Q2URFK.js";
import "./chunk-D5NSNTGJ.js";
import "./chunk-63ERNIOV.js";
import "./chunk-QNFDBY7V.js";
import "./chunk-RVQLSA5X.js";
import "./chunk-5KLICR5E.js";
import "./chunk-YYTXJF6W.js";
import "./chunk-NLWV7Q6F.js";
import "./chunk-JB7FDW5N.js";
import "./chunk-SS3YG6J3.js";
import "./chunk-5IYCCZ54.js";
import "./chunk-JLSXEPY6.js";
import "./chunk-VMTVUE47.js";
import "./chunk-GDZM4A6K.js";
import "./chunk-XWGNMTES.js";
import "./chunk-6NNEHJYI.js";
import "./chunk-BNBT4QTW.js";
import "./chunk-3FQOSG5O.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-JNDFAMXY.js";
import "./chunk-NTEKJWGF.js";
import "./chunk-TFIKV5RU.js";
import "./chunk-KW6QQDGN.js";
import "./chunk-AQ7R6V4L.js";
import "./chunk-DOQ3SAAR.js";
import "./chunk-4BXK4H4L.js";
import "./chunk-SLVNG7FV.js";
import "./chunk-OZXJDVTE.js";
import {
  n
} from "./chunk-DU6E4DU3.js";
import "./chunk-4CZO65BK.js";
import "./chunk-DEZCXTA3.js";
import "./chunk-RRJGZKNX.js";
import "./chunk-PL5Q4C6Y.js";
import "./chunk-A6VKJXIH.js";
import "./chunk-KFSY6ZZH.js";
import {
  V
} from "./chunk-7EQSYZHW.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-GGOVZ2GK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-WLWP35G2.js";
import "./chunk-JPW73GY2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-Z2ZUNW5S.js";
import "./chunk-7L7Z2HXM.js";
import "./chunk-75NKPXTR.js";
import "./chunk-EUVARFSM.js";
import "./chunk-3VUFACNT.js";
import "./chunk-ZEEBL7ZN.js";
import "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-SJ2GJCS2.js";
import {
  h,
  l
} from "./chunk-H7RDAEPY.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import "./chunk-JL3TJGVW.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-43LWRDQS.js";
import "./chunk-R6YKST3K.js";
import "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-MP6GH2AC.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import "./chunk-7I33FAWS.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import {
  R
} from "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/RouteLayerView2D.js
var y2 = Object.freeze({ remove() {
}, pause() {
}, resume() {
} });
var k = ["route-info", "direction-line", "direction-point", "polygon-barrier", "polyline-barrier", "point-barrier", "stop"];
var v = { graphic: null, property: null, oldValue: null, newValue: null };
function M(t) {
  return t instanceof m || t instanceof c || t instanceof C || t instanceof T || t instanceof j || t instanceof S || t instanceof O;
}
function V2(t) {
  return V.isCollection(t) && t.length && M(t.at(0));
}
function j2(t) {
  return Array.isArray(t) && t.length > 0 && M(t[0]);
}
var G = class extends f(d) {
  constructor() {
    super(...arguments), this._graphics = new V(), this._highlightIds = /* @__PURE__ */ new Map(), this._networkFeatureMap = /* @__PURE__ */ new Map(), this._networkGraphicMap = /* @__PURE__ */ new Map();
  }
  get _routeItems() {
    return new n({ getCollections: () => null == this.layer || this.destroyed ? [] : [null != this.layer.routeInfo ? new V([this.layer.routeInfo]) : null, this.layer.directionLines, this.layer.directionPoints, this.layer.polygonBarriers, this.layer.polylineBarriers, this.layer.pointBarriers, this.layer.stops] });
  }
  initialize() {
    this.updatingHandles.addOnCollectionChange(() => this._routeItems, (t) => this._routeItemsChanged(t), h);
  }
  destroy() {
    var _a;
    this._networkFeatureMap.clear(), this._networkGraphicMap.clear(), this._graphics.removeAll(), (_a = this._get("_routeItems")) == null ? void 0 : _a.destroy();
  }
  attach() {
    this._createGraphicsView();
  }
  detach() {
    this._destroyGraphicsView();
  }
  async fetchPopupFeatures(t) {
    return this._graphicsView.hitTest(t).filter((t2) => !!t2.popupTemplate);
  }
  highlight(t) {
    let r;
    r = M(t) ? [this._getNetworkFeatureUid(t)] : j2(t) ? t.map((t2) => this._getNetworkFeatureUid(t2)) : V2(t) ? t.map((t2) => this._getNetworkFeatureUid(t2)).toArray() : [t.uid];
    const i2 = r.filter(R);
    return i2.length ? (this._addHighlight(i2), { remove: () => this._removeHighlight(i2) }) : y2;
  }
  async hitTest(t, r) {
    if (this.suspended)
      return null;
    const i2 = this._graphicsView.hitTest(t).filter(R).map((t2) => this._networkGraphicMap.get(t2));
    if (!i2.length)
      return null;
    const { layer: s } = this;
    return i2.reverse().map((e2) => ({ type: "route", layer: s, mapPoint: t, networkFeature: e2 }));
  }
  isUpdating() {
    return this._graphicsView.updating;
  }
  moveStart() {
  }
  moveEnd() {
  }
  update(t) {
    this._graphicsView.processUpdate(t);
  }
  viewChange() {
    this._graphicsView.viewChange();
  }
  _addHighlight(t) {
    for (const e2 of t)
      if (this._highlightIds.has(e2)) {
        const t2 = this._highlightIds.get(e2);
        this._highlightIds.set(e2, t2 + 1);
      } else
        this._highlightIds.set(e2, 1);
    this._updateHighlight();
  }
  _createGraphic(t) {
    const e2 = t.toGraphic();
    return e2.layer = this.layer, e2.sourceLayer = this.layer, e2;
  }
  _createGraphicsView() {
    const t = this.view, e2 = () => this.requestUpdate(), r = new i(t.featuresTilingScheme);
    this._graphicsView = new oe({ container: r, graphics: this._graphics, requestUpdateCallback: e2, view: t }), this.container.addChild(r), this._updateHighlight();
  }
  _destroyGraphicsView() {
    this.container.removeChild(this._graphicsView.container), this._graphicsView.destroy();
  }
  _getDrawOrder(t) {
    const e2 = this._networkGraphicMap.get(t);
    return k.indexOf(e2.type);
  }
  _getNetworkFeatureUid(t) {
    return this._networkFeatureMap.has(t) ? this._networkFeatureMap.get(t).uid : null;
  }
  _removeHighlight(t) {
    for (const e2 of t)
      if (this._highlightIds.has(e2)) {
        const t2 = this._highlightIds.get(e2) - 1;
        0 === t2 ? this._highlightIds.delete(e2) : this._highlightIds.set(e2, t2);
      }
    this._updateHighlight();
  }
  _routeItemsChanged(t) {
    if (t.removed.length) {
      this._graphics.removeMany(t.removed.map((t2) => {
        const e2 = this._networkFeatureMap.get(t2);
        return this._networkFeatureMap.delete(t2), this._networkGraphicMap.delete(e2), e2;
      }));
      for (const e2 of t.removed)
        this.removeHandles(e2);
    }
    if (t.added.length) {
      this._graphics.addMany(t.added.map((t2) => {
        const e2 = this._createGraphic(t2);
        return null == e2.symbol ? null : (this._networkFeatureMap.set(t2, e2), this._networkGraphicMap.set(e2, t2), e2);
      }).filter(R));
      for (const e2 of t.added)
        this.addHandles([l(() => e2.geometry, (t2, r) => {
          this._updateGraphic(e2, "geometry", t2, r);
        }), l(() => e2.symbol, (t2, r) => {
          this._updateGraphic(e2, "symbol", t2, r);
        })], e2);
      this._graphics.sort((t2, e2) => this._getDrawOrder(t2) - this._getDrawOrder(e2));
    }
  }
  _updateGraphic(t, e2, r, i2) {
    if (!this._networkFeatureMap.has(t)) {
      const e3 = this._createGraphic(t);
      return this._networkFeatureMap.set(t, e3), this._networkGraphicMap.set(e3, t), void this._graphics.add(e3);
    }
    const s = this._networkFeatureMap.get(t);
    s[e2] = r, v.graphic = s, v.property = e2, v.oldValue = i2, v.newValue = r, this._graphicsView.graphicUpdateHandler(v);
  }
  _updateHighlight() {
    const t = Array.from(this._highlightIds.keys());
    this._graphicsView.setHighlight(t);
  }
};
e([y()], G.prototype, "_graphics", void 0), e([y()], G.prototype, "_routeItems", null), G = e([a("esri.views.2d.layers.RouteLayerView2D")], G);
var I = G;
export {
  I as default
};
//# sourceMappingURL=RouteLayerView2D-FRILKELP.js.map
