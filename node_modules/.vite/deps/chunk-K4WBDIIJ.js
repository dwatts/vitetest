import {
  c
} from "./chunk-FB6EWBGE.js";
import {
  T,
  e
} from "./chunk-TRGMWULG.js";
import {
  E,
  a
} from "./chunk-WTPQKRQM.js";
import {
  A,
  B,
  F,
  G,
  M,
  U,
  V,
  X,
  n,
  t as t2
} from "./chunk-BCDDCNQ2.js";
import {
  n as n2
} from "./chunk-63ERNIOV.js";
import {
  i,
  t
} from "./chunk-DWOEYHKS.js";
import {
  s2 as s
} from "./chunk-HMVAPW5X.js";

// node_modules/@arcgis/core/views/webgl/RenderbufferDescriptor.js
var i2 = class {
  constructor(t3, i3, h2 = i3) {
    this.internalFormat = t3, this.width = i3, this.height = h2, this.multisampled = false, this.samples = 1;
  }
};
function h(i3) {
  return i3.width <= 0 || i3.height <= 0 || null == i3.internalFormat ? 0 : i3.width * i3.height * E(i3.internalFormat);
}

// node_modules/@arcgis/core/views/webgl/Renderbuffer.js
var n3 = class {
  constructor(e2, i3) {
    this._context = e2, this._descriptor = i3, this.type = e.RenderBuffer, this._context.instanceCounter.increment(V.Renderbuffer, this);
    const n4 = this._context.gl;
    this.glName = n4.createRenderbuffer(), this._context.bindRenderbuffer(this);
    const { width: o, height: h2, internalFormat: c2, multisampled: f } = i3;
    if (f) {
      if (this._context.type !== n2.WEBGL2)
        throw new Error("Multisampled renderbuffers are not supported in WebGL1!");
      n4.renderbufferStorageMultisample(n4.RENDERBUFFER, this.samples, c2, o, h2);
    } else
      n4.renderbufferStorage(n4.RENDERBUFFER, c2, o, h2);
  }
  get descriptor() {
    return this._descriptor;
  }
  get samples() {
    const e2 = this._descriptor.samples, t3 = this._context.parameters.maxSamples;
    return e2 ? Math.min(e2, t3) : t3;
  }
  get gpuMemoryUsage() {
    return h(this._descriptor);
  }
  resize(e2, t3) {
    const r = this._descriptor;
    if (r.width === e2 && r.height === t3)
      return;
    r.width = e2, r.height = t3;
    const s2 = this._context.gl;
    if (this._context.bindRenderbuffer(this), r.multisampled) {
      s2.renderbufferStorageMultisample(s2.RENDERBUFFER, this.samples, r.internalFormat, r.width, r.height);
    } else
      s2.renderbufferStorage(s2.RENDERBUFFER, r.internalFormat, r.width, r.height);
  }
  dispose() {
    this._context && (this._context.gl.deleteRenderbuffer(this.glName), this._context.instanceCounter.decrement(V.Renderbuffer, this), this._context = i(this._context));
  }
};

// node_modules/@arcgis/core/views/webgl/FramebufferObject.js
var E2 = s.getLogger("esri.views.webgl.FramebufferObject");
var x = class _x {
  constructor(t3, e2, i3 = null) {
    this._context = t3, this._glName = null, this._colorAttachments = /* @__PURE__ */ new Map(), this._depthBuffer = null, this._stencilBuffer = null, this._depthStencilTexture = null, this._initialized = false, t3.instanceCounter.increment(V.FramebufferObject, this);
    const r = g(e2) ? e2 : new T(this._context, e2);
    if (this._colorAttachments.set(X.COLOR_ATTACHMENT0, r), this._validateTextureDescriptor(r.descriptor), this._validateColorAttachmentPoint(X.COLOR_ATTACHMENT0), null != i3)
      if (b(i3))
        this._context.capabilities.depthTexture || console.error("Setting the depth/stencil texture as an attachment requires WEBGL_depth_texture or WebGL2"), this._depthStencilTexture = g(i3) ? i3 : new T(this._context, i3), this._validateTextureDescriptor(this._depthStencilTexture.descriptor);
      else {
        const t4 = A2(i3) ? i3 : new n3(this._context, i3), e3 = t4.descriptor;
        e3.internalFormat === B.STENCIL_INDEX8 ? this._stencilBuffer = t4 : this._depthBuffer = t4, this._validateRenderBufferDescriptor(e3);
      }
  }
  dispose() {
    var _a, _b;
    if (0 === this._colorAttachments.size && !this._glName)
      return;
    const t3 = this._context.getBoundFramebufferObject();
    if (this._colorAttachments.forEach((t4, e2) => {
      var _a2;
      return (_a2 = this.detachColorTexture(e2)) == null ? void 0 : _a2.dispose();
    }), (_a = this.detachDepthStencilBuffer()) == null ? void 0 : _a.dispose(), (_b = this.detachDepthStencilTexture()) == null ? void 0 : _b.dispose(), this._glName) {
      this._context.gl.deleteFramebuffer(this._glName), this._glName = null;
    }
    this._context.bindFramebuffer(t3), this._context.instanceCounter.decrement(V.FramebufferObject, this);
  }
  get glName() {
    return this._glName;
  }
  get colorTexture() {
    return this._colorAttachments.get(X.COLOR_ATTACHMENT0);
  }
  get depthStencilAttachment() {
    return this._depthStencilTexture || this._depthBuffer || this._stencilBuffer;
  }
  get depthStencilTexture() {
    return this._depthStencilTexture;
  }
  get width() {
    var _a;
    const t3 = this._colorAttachments.get(X.COLOR_ATTACHMENT0);
    return ((_a = t3 == null ? void 0 : t3.descriptor) == null ? void 0 : _a.width) ?? 0;
  }
  get height() {
    var _a;
    const t3 = this._colorAttachments.get(X.COLOR_ATTACHMENT0);
    return ((_a = t3 == null ? void 0 : t3.descriptor) == null ? void 0 : _a.height) ?? 0;
  }
  get gpuMemoryUsage() {
    var _a;
    return [...this._colorAttachments].reduce((t3, [e2, i3]) => t3 + i3.gpuMemoryUsage, ((_a = this.depthStencilAttachment) == null ? void 0 : _a.gpuMemoryUsage) ?? 0);
  }
  getColorTexture(t3) {
    const e2 = this._colorAttachments.get(t3);
    return e2 && g(e2) ? e2 : null;
  }
  attachColorTexture(t3, e2 = X.COLOR_ATTACHMENT0) {
    var _a;
    if (!t3)
      return;
    this._validateColorAttachmentPoint(e2);
    const i3 = t3.descriptor;
    this._validateTextureDescriptor(i3), (_a = this.detachColorTexture(e2)) == null ? void 0 : _a.dispose(), this._initialized && (this._context.bindFramebuffer(this), this._framebufferTexture2D(t3.glName, e2)), this._colorAttachments.set(e2, t3);
  }
  detachColorTexture(t3 = X.COLOR_ATTACHMENT0) {
    const e2 = this._colorAttachments.get(t3);
    if (e2)
      return this._initialized && (this._context.bindFramebuffer(this), this._framebufferTexture2D(null, t3)), this._colorAttachments.delete(t3), e2;
  }
  setColorTextureTarget(t3, e2 = X.COLOR_ATTACHMENT0) {
    const i3 = this._colorAttachments.get(e2);
    i3 && this._framebufferTexture2D(i3.glName, e2, t3);
  }
  attachDepthStencil(t3) {
    if (t3)
      switch (t3.type) {
        case e.Texture:
          return this._attachDepthStencilTexture(t3);
        case e.RenderBuffer:
          return this._attachDepthStencilBuffer(t3);
      }
  }
  _attachDepthStencilTexture(t3) {
    var _a;
    if (null == t3)
      return;
    const e2 = t3.descriptor;
    e2.pixelFormat !== G.DEPTH_STENCIL && e2.pixelFormat !== G.DEPTH24_STENCIL8 && console.error("Depth/Stencil texture must have a pixel type of DEPTH_STENCIL!"), e2.dataType !== U.UNSIGNED_INT_24_8 && console.error("Depth/Stencil texture must have data type of UNSIGNED_INT_24_8!"), this._context.capabilities.depthTexture || console.error("Extension WEBGL_depth_texture isn't supported therefore it is no possible to set the depth/stencil texture!"), this._validateTextureDescriptor(e2), this._disposeDepthStencilAttachments(), this._initialized && (this._context.bindFramebuffer(this), this._framebufferTexture2D(t3.glName, t2)), (_a = this._depthStencilTexture) == null ? void 0 : _a.dispose(), this._depthStencilTexture = t3;
  }
  detachDepthStencilTexture() {
    const t3 = this._depthStencilTexture;
    return t3 && this._initialized && (this._context.bindFramebuffer(this), this._framebufferTexture2D(null, t2)), this._depthStencilTexture = null, t3;
  }
  _attachDepthStencilBuffer(t3) {
    var _a;
    if (null == t3)
      return;
    const e2 = t3.descriptor;
    if (e2.internalFormat !== B.DEPTH_STENCIL && e2.internalFormat !== B.DEPTH_COMPONENT16 && console.error("Depth/Stencil buffer must have correct internalFormat"), this._validateRenderBufferDescriptor(e2), this._disposeDepthStencilAttachments(), this._initialized) {
      this._context.bindFramebuffer(this);
      const i3 = this._context.gl, r = this._getGLAttachmentPoint(e2);
      i3.framebufferRenderbuffer(n.FRAMEBUFFER, r, i3.RENDERBUFFER, t3.glName);
    }
    (_a = this._depthBuffer) == null ? void 0 : _a.dispose(), this._depthBuffer = t3;
  }
  detachDepthStencilBuffer() {
    const t3 = this._depthBuffer;
    if (t3 && this._initialized) {
      this._context.bindFramebuffer(this);
      const e2 = this._context.gl, i3 = this._getGLAttachmentPoint(t3.descriptor);
      e2.framebufferRenderbuffer(n.FRAMEBUFFER, i3, e2.RENDERBUFFER, null), t3.dispose();
    }
    return this._depthBuffer = null, t3;
  }
  copyToTexture(t3, e2, i3, r, s2, h2, n4) {
    (t3 < 0 || e2 < 0 || s2 < 0 || h2 < 0) && console.error("Offsets cannot be negative!"), (i3 <= 0 || r <= 0) && console.error("Copy width and height must be greater than zero!");
    const o = n4.descriptor;
    n4.descriptor.target !== M.TEXTURE_2D && console.error("Texture target must be TEXTURE_2D!"), (null == (o == null ? void 0 : o.width) || null == (o == null ? void 0 : o.height) || t3 + i3 > this.width || e2 + r > this.height || s2 + i3 > o.width || h2 + r > o.height) && console.error("Bad dimensions, the current input values will attempt to read or copy out of bounds!");
    const c2 = this._context, a2 = c2.bindTexture(n4, T.TEXTURE_UNIT_FOR_UPDATES);
    c2.setActiveTexture(T.TEXTURE_UNIT_FOR_UPDATES), c2.bindFramebuffer(this), c2.gl.copyTexSubImage2D(M.TEXTURE_2D, 0, s2, h2, t3, e2, i3, r), c2.bindTexture(a2, T.TEXTURE_UNIT_FOR_UPDATES);
  }
  readPixels(t3, e2, i3, r, s2, h2, n4) {
    (i3 <= 0 || r <= 0) && console.error("Copy width and height must be greater than zero!"), n4 || console.error("Target memory is not initialized!"), this._context.bindFramebuffer(this);
    this._context.gl.readPixels(t3, e2, i3, r, s2, h2, n4);
  }
  async readPixelsAsync(t3, e2, h2, n4, o, c2, a2) {
    if (this._context.type !== n2.WEBGL2)
      return a() && console.warn("Attempting to read pixels using pixel buffer object without WebGL2"), void this.readPixels(t3, e2, h2, n4, o, c2, a2);
    const u = this._context.gl, _ = c.createPixelPack(this._context, F.STREAM_READ, a2.byteLength);
    this._context.bindBuffer(_), this._context.bindFramebuffer(this), u.readPixels(t3, e2, h2, n4, o, c2, 0), this._context.unbindBuffer(A.PIXEL_PACK_BUFFER), await _.getSubDataAsync(a2), _.dispose();
  }
  resize(t3, e2) {
    var _a, _b, _c;
    if (this.width === t3 && this.height === e2)
      return;
    const i3 = { width: t3, height: e2 };
    R(i3, this._context.parameters.maxTextureSize), this._colorAttachments.forEach((t4) => t4.resize(i3.width, i3.height)), (_a = this._depthStencilTexture) == null ? void 0 : _a.resize(i3.width, i3.height), this._initialized && (R(i3, this._context.parameters.maxRenderbufferSize), (_b = this._depthBuffer) == null ? void 0 : _b.resize(i3.width, i3.height), (_c = this._stencilBuffer) == null ? void 0 : _c.resize(i3.width, i3.height), this._context.getBoundFramebufferObject() === this && this._context.bindFramebuffer(null), this._initialized = false);
  }
  initializeAndBind(t3 = n.FRAMEBUFFER) {
    const e2 = this._context.gl;
    if (this._initialized)
      return void e2.bindFramebuffer(t3, this.glName);
    this._glName && e2.deleteFramebuffer(this._glName);
    const i3 = e2.createFramebuffer();
    e2.bindFramebuffer(t3, i3), this._colorAttachments.forEach((e3, i4) => this._framebufferTexture2D(e3.glName, i4, N(e3), t3));
    const s2 = this._depthBuffer || this._stencilBuffer;
    if (s2) {
      const i4 = this._getGLAttachmentPoint(s2.descriptor);
      e2.framebufferRenderbuffer(t3, i4, e2.RENDERBUFFER, s2.glName);
    } else
      this._depthStencilTexture && this._framebufferTexture2D(this._depthStencilTexture.glName, e2.DEPTH_STENCIL_ATTACHMENT, N(this._depthStencilTexture), t3);
    if (a()) {
      e2.checkFramebufferStatus(t3) !== e2.FRAMEBUFFER_COMPLETE && console.error("Framebuffer is incomplete!");
    }
    this._glName = i3, this._initialized = true;
  }
  _framebufferTexture2D(t3, e2 = X.COLOR_ATTACHMENT0, i3 = M.TEXTURE_2D, r = n.FRAMEBUFFER, s2 = 0) {
    this._context.gl.framebufferTexture2D(r, e2, i3, t3, s2);
  }
  _disposeDepthStencilAttachments() {
    const t3 = this._context.gl;
    if (this._depthBuffer) {
      if (this._initialized) {
        this._context.bindFramebuffer(this);
        const e2 = this._getGLAttachmentPoint(this._depthBuffer.descriptor);
        t3.framebufferRenderbuffer(n.FRAMEBUFFER, e2, t3.RENDERBUFFER, null);
      }
      this._depthBuffer = t(this._depthBuffer);
    }
    this._stencilBuffer && (this._initialized && (this._context.bindFramebuffer(this), t3.framebufferRenderbuffer(n.FRAMEBUFFER, t3.STENCIL_ATTACHMENT, t3.RENDERBUFFER, null)), this._stencilBuffer = t(this._stencilBuffer)), this._depthStencilTexture && (this._initialized && (this._context.bindFramebuffer(this), this._framebufferTexture2D(null, t3.DEPTH_STENCIL_ATTACHMENT)), this._depthStencilTexture = t(this._depthStencilTexture));
  }
  _validateTextureDescriptor(t3) {
    t3.target !== M.TEXTURE_2D && t3.target !== M.TEXTURE_CUBE_MAP && console.error("Texture type must be TEXTURE_2D or TEXTURE_CUBE_MAP!"), R(t3, this._context.parameters.maxTextureSize), this._validateBufferDimensions(t3);
  }
  _validateRenderBufferDescriptor(t3) {
    R(t3, this._context.parameters.maxRenderbufferSize), this._validateBufferDimensions(t3);
  }
  _validateBufferDimensions(t3) {
    t3.width <= 0 && (t3.width = this.width), t3.height <= 0 && (t3.height = this.height), this.width > 0 && this.height > 0 && (this.width === t3.width && this.height === t3.height || console.error("Attachment size must match framebuffer size!"));
  }
  _getGLAttachmentPoint(t3) {
    switch (t3.internalFormat) {
      case B.DEPTH_COMPONENT16:
      case B.DEPTH_COMPONENT24:
      case B.DEPTH_COMPONENT32F:
        return this._context.gl.DEPTH_ATTACHMENT;
      case B.DEPTH24_STENCIL8:
      case B.DEPTH32F_STENCIL8:
      case B.DEPTH_STENCIL:
        return this._context.gl.DEPTH_STENCIL_ATTACHMENT;
      case B.STENCIL_INDEX8:
        return this._context.gl.STENCIL_ATTACHMENT;
    }
  }
  _validateColorAttachmentPoint(e2) {
    if (-1 === _x._MAX_COLOR_ATTACHMENTS) {
      const t3 = this._context.capabilities.drawBuffers;
      if (t3) {
        const e3 = this._context.gl;
        _x._MAX_COLOR_ATTACHMENTS = e3.getParameter(t3.MAX_COLOR_ATTACHMENTS);
      } else
        _x._MAX_COLOR_ATTACHMENTS = 1;
    }
    const i3 = e2 - X.COLOR_ATTACHMENT0;
    i3 + 1 > _x._MAX_COLOR_ATTACHMENTS && s.getLogger("esri.views.webgl.FrameBufferObject").error("esri.FrameBufferObject", `illegal attachment point for color attachment: ${i3 + 1}. Implementation supports up to ${_x._MAX_COLOR_ATTACHMENTS} color attachments`);
  }
};
function g(t3) {
  return null != t3 && "type" in t3 && t3.type === e.Texture;
}
function A2(t3) {
  return null != t3 && "type" in t3 && t3.type === e.RenderBuffer;
}
function b(t3) {
  return g(t3) || null != t3 && "pixelFormat" in t3;
}
function R(t3, e2) {
  const i3 = Math.max(t3.width, t3.height);
  if (i3 > e2) {
    E2.warn(`Resizing FBO attachment size ${t3.width}x${t3.height} to device limit ${e2}`);
    const r = e2 / i3;
    return t3.width = Math.round(t3.width * r), t3.height = Math.round(t3.height * r), false;
  }
  return true;
}
function N(t3) {
  return t3.descriptor.target === M.TEXTURE_CUBE_MAP ? M.TEXTURE_CUBE_MAP_POSITIVE_X : M.TEXTURE_2D;
}
x._MAX_COLOR_ATTACHMENTS = -1;

export {
  i2 as i,
  n3 as n,
  x,
  R
};
//# sourceMappingURL=chunk-K4WBDIIJ.js.map
