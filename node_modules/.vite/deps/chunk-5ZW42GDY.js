import {
  f
} from "./chunk-DOR4M5EA.js";
import {
  e
} from "./chunk-QS45OHBM.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  n
} from "./chunk-YGUWDSEH.js";
import {
  r2 as r
} from "./chunk-3CQBBMMD.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/ScreenSizePerspective.glsl.js
function c(e2) {
  e2.vertex.code.add(o`float screenSizePerspectiveMinSize(float size, vec4 factor) {
float nonZeroSize = 1.0 - step(size, 0.0);
return (
factor.z * (
1.0 +
nonZeroSize *
2.0 * factor.w / (
size + (1.0 - nonZeroSize)
)
)
);
}`), e2.vertex.code.add(o`float screenSizePerspectiveViewAngleDependentFactor(float absCosAngle) {
return absCosAngle * absCosAngle * absCosAngle;
}`), e2.vertex.code.add(o`vec4 screenSizePerspectiveScaleFactor(float absCosAngle, float distanceToCamera, vec4 params) {
return vec4(
min(params.x / (distanceToCamera - params.y), 1.0),
screenSizePerspectiveViewAngleDependentFactor(absCosAngle),
params.z,
params.w
);
}`), e2.vertex.code.add(o`float applyScreenSizePerspectiveScaleFactorFloat(float size, vec4 factor) {
return max(mix(size * factor.x, size, factor.y), screenSizePerspectiveMinSize(size, factor));
}`), e2.vertex.code.add(o`float screenSizePerspectiveScaleFloat(float size, float absCosAngle, float distanceToCamera, vec4 params) {
return applyScreenSizePerspectiveScaleFactorFloat(
size,
screenSizePerspectiveScaleFactor(absCosAngle, distanceToCamera, params)
);
}`), e2.vertex.code.add(o`vec2 applyScreenSizePerspectiveScaleFactorVec2(vec2 size, vec4 factor) {
return mix(size * clamp(factor.x, screenSizePerspectiveMinSize(size.y, factor) / max(1e-5, size.y), 1.0), size, factor.y);
}`), e2.vertex.code.add(o`vec2 screenSizePerspectiveScaleVec2(vec2 size, float absCosAngle, float distanceToCamera, vec4 params) {
return applyScreenSizePerspectiveScaleFactorVec2(size, screenSizePerspectiveScaleFactor(absCosAngle, distanceToCamera, params));
}`);
}
function t(e2) {
  e2.uniforms.add(new e("screenSizePerspective", (e3) => o2(e3.screenSizePerspective)));
}
function i(e2) {
  e2.uniforms.add(new e("screenSizePerspectiveAlignment", (e3) => o2(e3.screenSizePerspectiveAlignment || e3.screenSizePerspective)));
}
function o2(a2) {
  return r(n2, a2.parameters.divisor, a2.parameters.offset, a2.parameters.minPixelSize, a2.paddingPixelsOverride);
}
var n2 = n();

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js
function a(e2, r2) {
  const c2 = e2.vertex;
  r2.hasVerticalOffset ? (f2(c2), r2.hasScreenSizePerspective && (e2.include(c), i(c2), f(e2.vertex, r2)), c2.code.add(o`
      vec3 calculateVerticalOffset(vec3 worldPos, vec3 localOrigin) {
        float viewDistance = length((view * vec4(worldPos, 1.0)).xyz);
        ${r2.spherical ? o`vec3 worldNormal = normalize(worldPos + localOrigin);` : o`vec3 worldNormal = vec3(0.0, 0.0, 1.0);`}
        ${r2.hasScreenSizePerspective ? o`
            float cosAngle = dot(worldNormal, normalize(worldPos - cameraPosition));
            float verticalOffsetScreenHeight = screenSizePerspectiveScaleFloat(verticalOffset.x, abs(cosAngle), viewDistance, screenSizePerspectiveAlignment);` : o`
            float verticalOffsetScreenHeight = verticalOffset.x;`}
        // Screen sized offset in world space, used for example for line callouts
        float worldOffset = clamp(verticalOffsetScreenHeight * verticalOffset.y * viewDistance, verticalOffset.z, verticalOffset.w);
        return worldNormal * worldOffset;
      }

      vec3 addVerticalOffset(vec3 worldPos, vec3 localOrigin) {
        return worldPos + calculateVerticalOffset(worldPos, localOrigin);
      }
    `)) : c2.code.add(o`vec3 addVerticalOffset(vec3 worldPos, vec3 localOrigin) { return worldPos; }`);
}
var i2 = n();
function f2(r2) {
  r2.uniforms.add(new e("verticalOffset", (r3, t2) => {
    const { minWorldLength: l, maxWorldLength: o3, screenLength: c2 } = r3.verticalOffset, s = Math.tan(0.5 * t2.camera.fovY) / (0.5 * t2.camera.fullViewport[3]), a2 = t2.camera.pixelRatio || 1;
    return r(i2, c2 * a2, s, l, o3);
  }));
}

export {
  c,
  t,
  i,
  a,
  f2 as f
};
//# sourceMappingURL=chunk-5ZW42GDY.js.map
