import {
  c2,
  o as o6
} from "./chunk-ZYHVS2T2.js";
import {
  r as r3
} from "./chunk-IRBH32SX.js";
import {
  u
} from "./chunk-4YXJLES6.js";
import {
  c,
  m
} from "./chunk-EHQZFPMP.js";
import {
  a,
  o as o5,
  t as t2
} from "./chunk-WH76OAIT.js";
import {
  g
} from "./chunk-JHDKOKT6.js";
import {
  o as o3
} from "./chunk-CG3URTR2.js";
import {
  d as d2
} from "./chunk-RDWKBYTH.js";
import {
  n as n3
} from "./chunk-IBJTEQQG.js";
import {
  o as o2
} from "./chunk-SADO52IH.js";
import {
  e as e3
} from "./chunk-WVOBJDWI.js";
import {
  d
} from "./chunk-LIO6VZRI.js";
import {
  h
} from "./chunk-73PNWDTS.js";
import {
  t
} from "./chunk-PKS3ZVLN.js";
import {
  P
} from "./chunk-N3RXOITN.js";
import {
  f,
  p
} from "./chunk-DOR4M5EA.js";
import {
  e as e2
} from "./chunk-QS45OHBM.js";
import {
  e
} from "./chunk-WRFNQB7U.js";
import {
  o as o4
} from "./chunk-UUW6REOV.js";
import {
  s
} from "./chunk-Z3NHJA5D.js";
import {
  i2 as i
} from "./chunk-BO2REVMA.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import {
  n
} from "./chunk-YGUWDSEH.js";
import {
  r as r2
} from "./chunk-NLWV7Q6F.js";
import {
  n as n2
} from "./chunk-SS3YG6J3.js";
import {
  r2 as r
} from "./chunk-3CQBBMMD.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/WaterDistortion.glsl.js
function i2(t3) {
  t3.fragment.uniforms.add(new s("texWaveNormal", (e4) => e4.waveNormal), new s("texWavePerturbation", (e4) => e4.wavePertubation), new e2("waveParams", (e4) => r(f2, e4.waveStrength, e4.waveTextureRepeat, e4.flowStrength, e4.flowOffset)), new e("waveDirection", (t4) => r2(c3, t4.waveDirection[0] * t4.waveVelocity, t4.waveDirection[1] * t4.waveVelocity))), t3.include(o6), t3.fragment.code.add(o`const vec2  FLOW_JUMP = vec2(6.0/25.0, 5.0/24.0);
vec2 textureDenormalized2D(sampler2D _tex, vec2 _uv) {
return 2.0 * texture(_tex, _uv).rg - 1.0;
}
float sampleNoiseTexture(vec2 _uv) {
return texture(texWavePerturbation, _uv).b;
}
vec3 textureDenormalized3D(sampler2D _tex, vec2 _uv) {
return 2.0 * texture(_tex, _uv).rgb - 1.0;
}
float computeProgress(vec2 uv, float time) {
return fract(time);
}
float computeWeight(vec2 uv, float time) {
float progress = computeProgress(uv, time);
return 1.0 - abs(1.0 - 2.0 * progress);
}
vec3 computeUVPerturbedWeigth(sampler2D texFlow, vec2 uv, float time, float phaseOffset) {
float flowStrength = waveParams[2];
float flowOffset = waveParams[3];
vec2 flowVector = textureDenormalized2D(texFlow, uv) * flowStrength;
float progress = computeProgress(uv, time + phaseOffset);
float weight = computeWeight(uv, time + phaseOffset);
vec2 result = uv;
result -= flowVector * (progress + flowOffset);
result += phaseOffset;
result += (time - progress) * FLOW_JUMP;
return vec3(result, weight);
}
const float TIME_NOISE_TEXTURE_REPEAT = 0.3737;
const float TIME_NOISE_STRENGTH = 7.77;
vec3 getWaveLayer(sampler2D _texNormal, sampler2D _dudv, vec2 _uv, vec2 _waveDir, float time) {
float waveStrength = waveParams[0];
vec2 waveMovement = time * -_waveDir;
float timeNoise = sampleNoiseTexture(_uv * TIME_NOISE_TEXTURE_REPEAT) * TIME_NOISE_STRENGTH;
vec3 uv_A = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.0);
vec3 uv_B = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.5);
vec3 normal_A = textureDenormalized3D(_texNormal, uv_A.xy) * uv_A.z;
vec3 normal_B = textureDenormalized3D(_texNormal, uv_B.xy) * uv_B.z;
vec3 mixNormal = normalize(normal_A + normal_B);
mixNormal.xy *= waveStrength;
mixNormal.z = sqrt(1.0 - dot(mixNormal.xy, mixNormal.xy));
return mixNormal;
}
vec4 getSurfaceNormalAndFoam(vec2 _uv, float _time) {
float waveTextureRepeat = waveParams[1];
vec3 normal = getWaveLayer(texWaveNormal, texWavePerturbation, _uv * waveTextureRepeat, waveDirection, _time);
float foam  = normals2FoamIntensity(normal, waveParams[0]);
return vec4(normal, foam);
}`);
}
var f2 = n();
var c3 = n2();

// node_modules/@arcgis/core/chunks/WaterSurface.glsl.js
function S(S2) {
  const x2 = new i(), { vertex: _, fragment: F } = x2;
  p(_, S2), x2.include(o3, S2), x2.attributes.add(O.POSITION, "vec3"), x2.attributes.add(O.UV0, "vec2");
  const T = new e2("waterColor", (e4) => e4.color);
  if (S2.output === h.Color && S2.isDraped)
    return x2.varyings.add("vpos", "vec3"), _.uniforms.add(T), _.code.add(o`
        void main(void) {
          if (waterColor.a < ${o.float(t)}) {
            // Discard this vertex
            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
            return;
          }

          vpos = position;
          gl_Position = transformPosition(proj, view, vpos);
        }
    `), F.uniforms.add(T), F.code.add(o`void main() {
fragColor = waterColor;
}`), x2;
  switch (S2.output !== h.Color && S2.output !== h.Alpha || (x2.include(r3, S2), x2.include(d, S2), x2.varyings.add("vuv", "vec2"), x2.varyings.add("vpos", "vec3"), x2.varyings.add("vnormal", "vec3"), x2.varyings.add("vtbnMatrix", "mat3"), S2.hasMultipassTerrain && x2.varyings.add("depth", "float"), _.uniforms.add(T), _.code.add(o`
      void main(void) {
        if (waterColor.a < ${o.float(t)}) {
          // Discard this vertex
          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
          return;
        }

        vuv = uv0;
        vpos = position;

        vnormal = getLocalUp(vpos, localOrigin);
        vtbnMatrix = getTBNMatrix(vnormal);

        ${S2.hasMultipassTerrain ? "depth = (view * vec4(vpos, 1.0)).z;" : ""}

        gl_Position = transformPosition(proj, view, vpos);
        ${S2.output === h.Color ? "forwardLinearDepth();" : ""}
      }
    `)), x2.include(n3, S2), S2.output) {
    case h.Alpha:
      x2.include(P, S2), F.uniforms.add(T), F.code.add(o`
        void main() {
          discardBySlice(vpos);
          ${S2.hasMultipassTerrain ? "terrainDepthTest(gl_FragCoord, depth);" : ""}

          fragColor = vec4(waterColor.a);
        }
      `);
      break;
    case h.Color:
      x2.include(o5), x2.include(m, { pbrMode: c.Disabled, lightingSphericalHarmonicsOrder: 2 }), x2.include(i2), x2.include(P, S2), x2.include(u, S2), x2.include(c2, S2), F.uniforms.add(T, new o4("timeElapsed", (e4) => e4.timeElapsed), _.uniforms.get("view"), _.uniforms.get("localOrigin")), f(F, S2), F.include(e3), t2(F), a(F), F.code.add(o`
      void main() {
        discardBySlice(vpos);
        ${S2.hasMultipassTerrain ? "terrainDepthTest(gl_FragCoord, depth);" : ""}
        vec3 localUp = vnormal;
        // the created normal is in tangent space
        vec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);

        // we rotate the normal according to the tangent-bitangent-normal-Matrix
        vec3 n = normalize(vtbnMatrix * tangentNormalFoam.xyz);
        vec3 v = -normalize(vpos - cameraPosition);
        float shadow = ${S2.receiveShadows ? o`1.0 - readShadowMap(vpos, linearDepth)` : "1.0"};
        vec4 vPosView = view * vec4(vpos, 1.0);
        vec4 final = vec4(getSeaColor(n, v, mainLightDirection, waterColor.rgb, mainLightIntensity, localUp, shadow, tangentNormalFoam.w, vPosView.xyz, vpos + localOrigin), waterColor.w);

        // gamma correction
        fragColor = delinearizeGamma(final);
        fragColor = highlightSlice(fragColor, vpos);
        ${S2.transparencyPassType === o2.Color ? "fragColor = premultiplyAlpha(fragColor);" : ""}
      }
    `);
      break;
    case h.Normal:
      x2.include(r3, S2), x2.include(i2, S2), x2.include(P, S2), x2.varyings.add("vpos", "vec3"), x2.varyings.add("vuv", "vec2"), _.uniforms.add(T), _.code.add(o`
        void main(void) {
          if (waterColor.a < ${o.float(t)}) {
            // Discard this vertex
            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
            return;
          }

          vuv = uv0;
          vpos = position;

          gl_Position = transformPosition(proj, view, vpos);
        }
    `), F.uniforms.add(new o4("timeElapsed", (e4) => e4.timeElapsed)), F.code.add(o`void main() {
discardBySlice(vpos);
vec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);
tangentNormalFoam.xyz = normalize(tangentNormalFoam.xyz);
fragColor = vec4((tangentNormalFoam.xyz + vec3(1.0)) * 0.5, tangentNormalFoam.w);
}`);
      break;
    case h.Highlight:
      x2.include(g, S2), x2.varyings.add("vpos", "vec3"), _.uniforms.add(T), _.code.add(o`
      void main(void) {
        if (waterColor.a < ${o.float(t)}) {
          // Discard this vertex
          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
          return;
        }

        vpos = position;
        gl_Position = transformPosition(proj, view, vpos);
      }
    `), x2.include(P, S2), F.code.add(o`void main() {
discardBySlice(vpos);
outputHighlight();
}`);
      break;
    case h.ObjectAndLayerIdColor:
      x2.include(d2, S2), x2.varyings.add("vpos", "vec3"), _.uniforms.add(T), _.code.add(o`
      void main(void) {
        if (waterColor.a < ${o.float(t)}) {
          // Discard this vertex
          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
          return;
        }

        vpos = position;
        gl_Position = transformPosition(proj, view, vpos);
        forwardObjectAndLayerIdColor();
      }
    `), x2.include(P, S2), F.code.add(o`void main() {
discardBySlice(vpos);
outputObjectAndLayerIdColor();
}`);
  }
  return x2;
}
var x = Object.freeze(Object.defineProperty({ __proto__: null, build: S }, Symbol.toStringTag, { value: "Module" }));

export {
  S,
  x
};
//# sourceMappingURL=chunk-B76MSEZ4.js.map
