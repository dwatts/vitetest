import {
  a,
  t as t3
} from "./chunk-N4JKQR77.js";
import {
  b
} from "./chunk-BDX5TRUE.js";
import {
  e as e2
} from "./chunk-SMDDCTGQ.js";
import {
  t
} from "./chunk-UM64E5NS.js";
import {
  s
} from "./chunk-SGBMUZSF.js";
import {
  l,
  y
} from "./chunk-BDWD2ZNU.js";
import {
  s as s2
} from "./chunk-6S2FCH6S.js";
import {
  n as n2,
  r as r2,
  t as t2
} from "./chunk-3TTW7E7W.js";
import {
  T,
  h,
  q2 as q
} from "./chunk-FOEAKQNX.js";
import {
  p
} from "./chunk-LEDSC236.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import {
  P,
  _,
  e,
  g,
  o,
  r,
  u,
  z
} from "./chunk-TPJLFGOT.js";
import {
  n
} from "./chunk-CQX57DED.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/BufferVectorMath.js
var n3;
!function(n4) {
  function t4(n5, t5) {
    const c2 = n5[t5], o3 = n5[t5 + 1], r4 = n5[t5 + 2];
    return Math.sqrt(c2 * c2 + o3 * o3 + r4 * r4);
  }
  function c(n5, t5) {
    const c2 = n5[t5], o3 = n5[t5 + 1], r4 = n5[t5 + 2], u3 = 1 / Math.sqrt(c2 * c2 + o3 * o3 + r4 * r4);
    n5[t5] *= u3, n5[t5 + 1] *= u3, n5[t5 + 2] *= u3;
  }
  function o2(n5, t5, c2) {
    n5[t5] *= c2, n5[t5 + 1] *= c2, n5[t5 + 2] *= c2;
  }
  function r3(n5, t5, c2, o3, r4, u3 = t5) {
    (r4 = r4 || n5)[u3] = n5[t5] + c2[o3], r4[u3 + 1] = n5[t5 + 1] + c2[o3 + 1], r4[u3 + 2] = n5[t5 + 2] + c2[o3 + 2];
  }
  function u2(n5, t5, c2, o3, r4, u3 = t5) {
    (r4 = r4 || n5)[u3] = n5[t5] - c2[o3], r4[u3 + 1] = n5[t5 + 1] - c2[o3 + 1], r4[u3 + 2] = n5[t5 + 2] - c2[o3 + 2];
  }
  n4.length = t4, n4.normalize = c, n4.scale = o2, n4.add = r3, n4.subtract = u2;
}(n3 || (n3 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/GeometryUtil.js
var b2 = n3;
var d = [[-0.5, -0.5, 0.5], [0.5, -0.5, 0.5], [0.5, 0.5, 0.5], [-0.5, 0.5, 0.5], [-0.5, -0.5, -0.5], [0.5, -0.5, -0.5], [0.5, 0.5, -0.5], [-0.5, 0.5, -0.5]];
var j = [0, 0, 1, -1, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, -1];
var U = [0, 0, 1, 0, 1, 1, 0, 1];
var V = [0, 1, 2, 2, 3, 0, 4, 0, 3, 3, 7, 4, 1, 5, 6, 6, 2, 1, 1, 0, 4, 4, 5, 1, 3, 2, 6, 6, 7, 3, 5, 4, 7, 7, 6, 5];
var v = new Array(36);
for (let At = 0; At < 6; At++)
  for (let t4 = 0; t4 < 6; t4++)
    v[6 * At + t4] = At;
var x = new Array(36);
for (let At = 0; At < 6; At++)
  x[6 * At] = 0, x[6 * At + 1] = 1, x[6 * At + 2] = 2, x[6 * At + 3] = 2, x[6 * At + 4] = 3, x[6 * At + 5] = 0;
function C(t4, n4) {
  Array.isArray(n4) || (n4 = [n4, n4, n4]);
  const e3 = new Array(24);
  for (let s3 = 0; s3 < 8; s3++)
    e3[3 * s3] = d[s3][0] * n4[0], e3[3 * s3 + 1] = d[s3][1] * n4[1], e3[3 * s3 + 2] = d[s3][2] * n4[2];
  return new b(t4, [[O.POSITION, new s2(e3, 3, true)], [O.NORMAL, new s2(j, 3)], [O.UV0, new s2(U, 2)]], [[O.POSITION, V], [O.NORMAL, v], [O.UV0, x]]);
}
var F = [[-0.5, 0, -0.5], [0.5, 0, -0.5], [0.5, 0, 0.5], [-0.5, 0, 0.5], [0, -0.5, 0], [0, 0.5, 0]];
var G = [0, 1, -1, 1, 1, 0, 0, 1, 1, -1, 1, 0, 0, -1, -1, 1, -1, 0, 0, -1, 1, -1, -1, 0];
var k = [5, 1, 0, 5, 2, 1, 5, 3, 2, 5, 0, 3, 4, 0, 1, 4, 1, 2, 4, 2, 3, 4, 3, 0];
var E = [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7];
function q2(t4, n4) {
  Array.isArray(n4) || (n4 = [n4, n4, n4]);
  const e3 = new Array(18);
  for (let s3 = 0; s3 < 6; s3++)
    e3[3 * s3] = F[s3][0] * n4[0], e3[3 * s3 + 1] = F[s3][1] * n4[1], e3[3 * s3 + 2] = F[s3][2] * n4[2];
  return new b(t4, [[O.POSITION, new s2(e3, 3, true)], [O.NORMAL, new s2(G, 3)]], [[O.POSITION, k], [O.NORMAL, E]]);
}
var X = r2(-0.5, 0, -0.5);
var z2 = r2(0.5, 0, -0.5);
var B = r2(0, 0, 0.5);
var D = r2(0, 0.5, 0);
var Z = n2();
var H = n2();
var J = n2();
var K = n2();
var Q = n2();
e(Z, X, D), e(H, X, z2), _(J, Z, H), z(J, J), e(Z, z2, D), e(H, z2, B), _(K, Z, H), z(K, K), e(Z, B, D), e(H, B, X), _(Q, Z, H), z(Q, Q);
var W = [X, z2, B, D];
var Y = [0, -1, 0, J[0], J[1], J[2], K[0], K[1], K[2], Q[0], Q[1], Q[2]];
var $ = [0, 1, 2, 3, 1, 0, 3, 2, 1, 3, 0, 2];
var _2 = [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3];
function tt(t4, n4) {
  Array.isArray(n4) || (n4 = [n4, n4, n4]);
  const e3 = new Array(12);
  for (let s3 = 0; s3 < 4; s3++)
    e3[3 * s3] = W[s3][0] * n4[0], e3[3 * s3 + 1] = W[s3][1] * n4[1], e3[3 * s3 + 2] = W[s3][2] * n4[2];
  return new b(t4, [[O.POSITION, new s2(e3, 3, true)], [O.NORMAL, new s2(Y, 3)]], [[O.POSITION, $], [O.NORMAL, _2]]);
}
function nt(t4, n4, e3, s3, o2 = { uv: true }) {
  const r3 = -Math.PI, h2 = 2 * Math.PI, l2 = -Math.PI / 2, u2 = Math.PI, c = Math.max(3, Math.floor(e3)), a2 = Math.max(2, Math.floor(s3)), p2 = (c + 1) * (a2 + 1), f = t3(3 * p2), O3 = t3(3 * p2), I = t3(2 * p2), g2 = [];
  let M = 0;
  for (let i = 0; i <= a2; i++) {
    const t5 = [], e4 = i / a2, s4 = l2 + e4 * u2, o3 = Math.cos(s4);
    for (let l3 = 0; l3 <= c; l3++) {
      const u3 = l3 / c, a3 = r3 + u3 * h2, p3 = Math.cos(a3) * o3, i2 = Math.sin(s4), w = -Math.sin(a3) * o3;
      f[3 * M] = p3 * n4, f[3 * M + 1] = i2 * n4, f[3 * M + 2] = w * n4, O3[3 * M] = p3, O3[3 * M + 1] = i2, O3[3 * M + 2] = w, I[2 * M] = u3, I[2 * M + 1] = e4, t5.push(M), ++M;
    }
    g2.push(t5);
  }
  const A = new Array();
  for (let i = 0; i < a2; i++)
    for (let t5 = 0; t5 < c; t5++) {
      const n5 = g2[i][t5], e4 = g2[i][t5 + 1], s4 = g2[i + 1][t5 + 1], o3 = g2[i + 1][t5];
      0 === i ? (A.push(n5), A.push(s4), A.push(o3)) : i === a2 - 1 ? (A.push(n5), A.push(e4), A.push(s4)) : (A.push(n5), A.push(e4), A.push(s4), A.push(s4), A.push(o3), A.push(n5));
    }
  const m = [[O.POSITION, A], [O.NORMAL, A]], N = [[O.POSITION, new s2(f, 3, true)], [O.NORMAL, new s2(O3, 3, true)]];
  return o2.uv && (N.push([O.UV0, new s2(I, 2, true)]), m.push([O.UV0, A])), o2.offset && (m[0][0] = O.OFFSET, N[0][0] = O.OFFSET, m.push([O.POSITION, l(A.length)]), N.push([O.POSITION, new s2(Float64Array.from(o2.offset), 3, true)])), new b(t4, N, m);
}
function et(t4, n4, e3, s3) {
  const { vertexAttributes: o2, indices: r3 } = st(n4, e3, s3);
  return new b(t4, o2, r3);
}
function st(t4, n4, e3) {
  const s3 = t4;
  let o2, r3;
  if (e3)
    o2 = [0, -1, 0, 1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, -1, 0, 1, 0], r3 = [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 1, 1, 5, 2, 2, 5, 3, 3, 5, 4, 4, 5, 1];
  else {
    const t5 = s3 * (1 + Math.sqrt(5)) / 2;
    o2 = [-s3, t5, 0, s3, t5, 0, -s3, -t5, 0, s3, -t5, 0, 0, -s3, t5, 0, s3, t5, 0, -s3, -t5, 0, s3, -t5, t5, 0, -s3, t5, 0, s3, -t5, 0, -s3, -t5, 0, s3], r3 = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];
  }
  for (let a2 = 0; a2 < o2.length; a2 += 3)
    b2.scale(o2, a2, t4 / b2.length(o2, a2));
  let h2 = {};
  function l2(n5, e4) {
    n5 > e4 && ([n5, e4] = [e4, n5]);
    const s4 = n5.toString() + "." + e4.toString();
    if (h2[s4])
      return h2[s4];
    let r4 = o2.length;
    return o2.length += 3, b2.add(o2, 3 * n5, o2, 3 * e4, o2, r4), b2.scale(o2, r4, t4 / b2.length(o2, r4)), r4 /= 3, h2[s4] = r4, r4;
  }
  for (let a2 = 0; a2 < n4; a2++) {
    const t5 = r3.length, n5 = new Array(4 * t5);
    for (let e4 = 0; e4 < t5; e4 += 3) {
      const t6 = r3[e4], s4 = r3[e4 + 1], o3 = r3[e4 + 2], h3 = l2(t6, s4), u3 = l2(s4, o3), c2 = l2(o3, t6), a3 = 4 * e4;
      n5[a3] = t6, n5[a3 + 1] = h3, n5[a3 + 2] = c2, n5[a3 + 3] = s4, n5[a3 + 4] = u3, n5[a3 + 5] = h3, n5[a3 + 6] = o3, n5[a3 + 7] = c2, n5[a3 + 8] = u3, n5[a3 + 9] = h3, n5[a3 + 10] = u3, n5[a3 + 11] = c2;
    }
    r3 = n5, h2 = {};
  }
  const u2 = a(o2);
  for (let a2 = 0; a2 < u2.length; a2 += 3)
    b2.normalize(u2, a2);
  const c = [[O.POSITION, r3], [O.NORMAL, r3]];
  return { vertexAttributes: [[O.POSITION, new s2(a(o2), 3, true)], [O.NORMAL, new s2(u2, 3, true)]], indices: c };
}
function ot(t4, n4, e3, s3, o2, r3, h2, l2, u2 = null) {
  const c = e3 ? [e3[0], e3[1], e3[2]] : [0, 0, 0], a2 = n4 ? [n4[0], n4[1], n4[2]] : [0, 0, 1];
  h2 = h2 || [0, 0];
  const p2 = s3 ? [255 * s3[0], 255 * s3[1], 255 * s3[2], s3.length > 3 ? 255 * s3[3] : 255] : [255, 255, 255, 255], f = null != o2 && 2 === o2.length ? o2 : [1, 1], O3 = [[O.POSITION, new s2(c, 3, true)], [O.NORMAL, new s2(a2, 3, true)], [O.UV0, new s2(h2, h2.length)], [O.COLOR, new s2(p2, 4, true)], [O.SIZE, new s2(f, 2)]];
  if (null != r3) {
    const t5 = [r3[0], r3[1], r3[2], r3[3]];
    O3.push([O.AUXPOS1, new s2(t5, 4)]);
  }
  if (null != l2) {
    const t5 = [l2[0], l2[1], l2[2], l2[3]];
    O3.push([O.AUXPOS2, new s2(t5, 4)]);
  }
  return new b(t4, O3, null, null, e2.Point, u2);
}
var rt = [[-1, -1, 0], [1, -1, 0], [1, 1, 0], [-1, 1, 0]];
function ht(t4, n4 = rt) {
  const e3 = new Array(12);
  for (let a2 = 0; a2 < 4; a2++)
    for (let t5 = 0; t5 < 3; t5++)
      e3[3 * a2 + t5] = n4[a2][t5];
  const s3 = [0, 1, 2, 2, 3, 0], o2 = [0, 0, 1], r3 = [0, 0, 0, 0, 0, 0], h2 = [0, 0, 1, 0, 1, 1, 0, 1], l2 = [255, 255, 255, 255], u2 = [[O.POSITION, s3], [O.NORMAL, r3], [O.UV0, s3], [O.COLOR, r3]], c = [[O.POSITION, new s2(e3, 3, true)], [O.NORMAL, new s2(o2, 3, true)], [O.UV0, new s2(h2, 2, true)], [O.COLOR, new s2(l2, 4, true)]];
  return new b(t4, c, u2);
}
function lt(t4, n4, e3, s3, o2, r3 = true, h2 = true) {
  let l2 = 0;
  const u2 = e3, a2 = n4;
  let p2 = r2(0, l2, 0), f = r2(0, l2 + a2, 0), O3 = r2(0, -1, 0), I = r2(0, 1, 0);
  o2 && (l2 = a2, f = r2(0, 0, 0), p2 = r2(0, l2, 0), O3 = r2(0, 1, 0), I = r2(0, -1, 0));
  const w = [f, p2], g2 = [O3, I], M = s3 + 2, A = Math.sqrt(a2 * a2 + u2 * u2);
  if (o2)
    for (let i = s3 - 1; i >= 0; i--) {
      const t5 = i * (2 * Math.PI / s3), n5 = r2(Math.cos(t5) * u2, l2, Math.sin(t5) * u2);
      w.push(n5);
      const e4 = r2(a2 * Math.cos(t5) / A, -u2 / A, a2 * Math.sin(t5) / A);
      g2.push(e4);
    }
  else
    for (let i = 0; i < s3; i++) {
      const t5 = i * (2 * Math.PI / s3), n5 = r2(Math.cos(t5) * u2, l2, Math.sin(t5) * u2);
      w.push(n5);
      const e4 = r2(a2 * Math.cos(t5) / A, u2 / A, a2 * Math.sin(t5) / A);
      g2.push(e4);
    }
  const m = new Array(), N = new Array();
  if (r3) {
    for (let t5 = 3; t5 < w.length; t5++)
      m.push(1), m.push(t5 - 1), m.push(t5), N.push(0), N.push(0), N.push(0);
    m.push(w.length - 1), m.push(2), m.push(1), N.push(0), N.push(0), N.push(0);
  }
  if (h2) {
    for (let t5 = 3; t5 < w.length; t5++)
      m.push(t5), m.push(t5 - 1), m.push(0), N.push(t5), N.push(t5 - 1), N.push(1);
    m.push(0), m.push(2), m.push(w.length - 1), N.push(1), N.push(2), N.push(g2.length - 1);
  }
  const y2 = t3(3 * M);
  for (let c = 0; c < M; c++)
    y2[3 * c] = w[c][0], y2[3 * c + 1] = w[c][1], y2[3 * c + 2] = w[c][2];
  const S = t3(3 * M);
  for (let c = 0; c < M; c++)
    S[3 * c] = g2[c][0], S[3 * c + 1] = g2[c][1], S[3 * c + 2] = g2[c][2];
  const L = [[O.POSITION, m], [O.NORMAL, N]], b3 = [[O.POSITION, new s2(y2, 3, true)], [O.NORMAL, new s2(S, 3, true)]];
  return new b(t4, b3, L);
}
function ut(t4, l2, u2, f, O3, I, w) {
  const g2 = O3 ? t2(O3) : r2(1, 0, 0), M = I ? t2(I) : r2(0, 0, 0);
  w ?? (w = true);
  const A = n2();
  z(A, g2);
  const m = n2();
  g(m, A, Math.abs(l2));
  const N = n2();
  g(N, m, -0.5), u(N, N, M);
  const y2 = r2(0, 1, 0);
  Math.abs(1 - P(A, y2)) < 0.2 && o(y2, 0, 0, 1);
  const S = n2();
  _(S, A, y2), z(S, S), _(y2, S, A);
  const L = 2 * f + (w ? 2 : 0), b3 = f + (w ? 2 : 0), d2 = t3(3 * L), j2 = t3(3 * b3), U2 = t3(2 * L), V2 = new Array(3 * f * (w ? 4 : 2)), v2 = new Array(3 * f * (w ? 4 : 2));
  w && (d2[3 * (L - 2)] = N[0], d2[3 * (L - 2) + 1] = N[1], d2[3 * (L - 2) + 2] = N[2], U2[2 * (L - 2)] = 0, U2[2 * (L - 2) + 1] = 0, d2[3 * (L - 1)] = d2[3 * (L - 2)] + m[0], d2[3 * (L - 1) + 1] = d2[3 * (L - 2) + 1] + m[1], d2[3 * (L - 1) + 2] = d2[3 * (L - 2) + 2] + m[2], U2[2 * (L - 1)] = 1, U2[2 * (L - 1) + 1] = 1, j2[3 * (b3 - 2)] = -A[0], j2[3 * (b3 - 2) + 1] = -A[1], j2[3 * (b3 - 2) + 2] = -A[2], j2[3 * (b3 - 1)] = A[0], j2[3 * (b3 - 1) + 1] = A[1], j2[3 * (b3 - 1) + 2] = A[2]);
  const x2 = (t5, n4, e3) => {
    V2[t5] = n4, v2[t5] = e3;
  };
  let C2 = 0;
  const F2 = n2(), G2 = n2();
  for (let n4 = 0; n4 < f; n4++) {
    const t5 = n4 * (2 * Math.PI / f);
    g(F2, y2, Math.sin(t5)), g(G2, S, Math.cos(t5)), u(F2, F2, G2), j2[3 * n4] = F2[0], j2[3 * n4 + 1] = F2[1], j2[3 * n4 + 2] = F2[2], g(F2, F2, u2), u(F2, F2, N), d2[3 * n4] = F2[0], d2[3 * n4 + 1] = F2[1], d2[3 * n4 + 2] = F2[2], U2[2 * n4] = n4 / f, U2[2 * n4 + 1] = 0, d2[3 * (n4 + f)] = d2[3 * n4] + m[0], d2[3 * (n4 + f) + 1] = d2[3 * n4 + 1] + m[1], d2[3 * (n4 + f) + 2] = d2[3 * n4 + 2] + m[2], U2[2 * (n4 + f)] = n4 / f, U2[2 * n4 + 1] = 1;
    const e3 = (n4 + 1) % f;
    x2(C2++, n4, n4), x2(C2++, n4 + f, n4), x2(C2++, e3, e3), x2(C2++, e3, e3), x2(C2++, n4 + f, n4), x2(C2++, e3 + f, e3);
  }
  if (w) {
    for (let t5 = 0; t5 < f; t5++) {
      const n4 = (t5 + 1) % f;
      x2(C2++, L - 2, b3 - 2), x2(C2++, t5, b3 - 2), x2(C2++, n4, b3 - 2);
    }
    for (let t5 = 0; t5 < f; t5++) {
      const n4 = (t5 + 1) % f;
      x2(C2++, t5 + f, b3 - 1), x2(C2++, L - 1, b3 - 1), x2(C2++, n4 + f, b3 - 1);
    }
  }
  const k2 = [[O.POSITION, V2], [O.NORMAL, v2], [O.UV0, V2]], E2 = [[O.POSITION, new s2(d2, 3, true)], [O.NORMAL, new s2(j2, 3, true)], [O.UV0, new s2(U2, 2, true)]];
  return new b(t4, E2, k2);
}
function at(r3, u2, p2, O3, I, w, g2 = r2(0, 0, 0)) {
  const y2 = u2.length, S = t3(p2.length * y2 * 3 + (6 * O3.length || 0)), L = t3(p2.length * y2 * 3 + (O3 ? 6 : 0)), b3 = new Array(), d2 = new Array();
  let j2 = 0, U2 = 0;
  const V2 = n2(), v2 = n2(), x2 = n2(), C2 = n2(), F2 = n2(), G2 = n2(), k2 = n2(), E2 = n(), q3 = n2(), X2 = n2(), z3 = n2(), B2 = n2(), D2 = n2(), Z2 = h();
  o(q3, 0, 1, 0), e(v2, p2[1], p2[0]), z(v2, v2), w ? (u(E2, p2[0], g2), z(x2, E2)) : o(x2, 0, 0, 1), wt(v2, x2, q3, q3, F2, x2, gt), r(C2, x2), r(B2, F2);
  for (let t4 = 0; t4 < O3.length; t4++)
    g(G2, F2, O3[t4][0]), g(E2, x2, O3[t4][2]), u(G2, G2, E2), u(G2, G2, p2[0]), S[j2++] = G2[0], S[j2++] = G2[1], S[j2++] = G2[2];
  L[U2++] = -v2[0], L[U2++] = -v2[1], L[U2++] = -v2[2];
  for (let t4 = 0; t4 < I.length; t4++)
    b3.push(I[t4][0] > 0 ? I[t4][0] : -I[t4][0] - 1 + O3.length), b3.push(I[t4][1] > 0 ? I[t4][1] : -I[t4][1] - 1 + O3.length), b3.push(I[t4][2] > 0 ? I[t4][2] : -I[t4][2] - 1 + O3.length), d2.push(0), d2.push(0), d2.push(0);
  let H2 = O3.length;
  const J2 = O3.length - 1;
  for (let h2 = 0; h2 < p2.length; h2++) {
    let r4 = false;
    if (h2 > 0) {
      r(V2, v2), h2 < p2.length - 1 ? (e(v2, p2[h2 + 1], p2[h2]), z(v2, v2)) : r4 = true, u(X2, V2, v2), z(X2, X2), u(z3, p2[h2 - 1], C2), T(p2[h2], X2, Z2);
      q(Z2, p(z3, V2), E2) ? (e(E2, E2, p2[h2]), z(x2, E2), _(F2, X2, x2), z(F2, F2)) : wt(X2, C2, B2, q3, F2, x2, gt), r(C2, x2), r(B2, F2);
    }
    w && (u(E2, p2[h2], g2), z(D2, E2));
    for (let t4 = 0; t4 < y2; t4++)
      if (g(G2, F2, u2[t4][0]), g(E2, x2, u2[t4][1]), u(G2, G2, E2), z(k2, G2), L[U2++] = k2[0], L[U2++] = k2[1], L[U2++] = k2[2], u(G2, G2, p2[h2]), S[j2++] = G2[0], S[j2++] = G2[1], S[j2++] = G2[2], !r4) {
        const n4 = (t4 + 1) % y2;
        b3.push(H2 + t4), b3.push(H2 + y2 + t4), b3.push(H2 + n4), b3.push(H2 + n4), b3.push(H2 + y2 + t4), b3.push(H2 + y2 + n4);
        for (let t5 = 0; t5 < 6; t5++) {
          const n5 = b3.length - 6;
          d2.push(b3[n5 + t5] - J2);
        }
      }
    H2 += y2;
  }
  const K2 = p2[p2.length - 1];
  for (let t4 = 0; t4 < O3.length; t4++)
    g(G2, F2, O3[t4][0]), g(E2, x2, O3[t4][1]), u(G2, G2, E2), u(G2, G2, K2), S[j2++] = G2[0], S[j2++] = G2[1], S[j2++] = G2[2];
  const Q2 = U2 / 3;
  L[U2++] = v2[0], L[U2++] = v2[1], L[U2++] = v2[2];
  const W2 = H2 - y2;
  for (let t4 = 0; t4 < I.length; t4++)
    b3.push(I[t4][0] >= 0 ? H2 + I[t4][0] : -I[t4][0] - 1 + W2), b3.push(I[t4][2] >= 0 ? H2 + I[t4][2] : -I[t4][2] - 1 + W2), b3.push(I[t4][1] >= 0 ? H2 + I[t4][1] : -I[t4][1] - 1 + W2), d2.push(Q2), d2.push(Q2), d2.push(Q2);
  const Y2 = [[O.POSITION, b3], [O.NORMAL, d2]], $2 = [[O.POSITION, new s2(S, 3, true)], [O.NORMAL, new s2(L, 3, true)]];
  return new b(r3, $2, Y2);
}
function pt(t4, n4, e3, s3) {
  s(n4.length > 1, "createPolylineGeometry(): polyline needs at least 2 points"), s(3 === n4[0].length, "createPolylineGeometry(): malformed vertex"), s(null == e3 || e3.length === n4.length, "createPolylineGeometry: need same number of points and normals"), s(null == e3 || 3 === e3[0].length, "createPolylineGeometry(): malformed normal");
  const o2 = t(3 * n4.length), r3 = new Array(2 * (n4.length - 1));
  let h2 = 0, l2 = 0;
  for (let a2 = 0; a2 < n4.length; a2++) {
    for (let t5 = 0; t5 < 3; t5++)
      o2[h2++] = n4[a2][t5];
    a2 > 0 && (r3[l2++] = a2 - 1, r3[l2++] = a2);
  }
  const u2 = [], c = [];
  if (u2.push([O.POSITION, r3]), c.push([O.POSITION, new s2(o2, 3, true)]), e3) {
    const t5 = t3(3 * e3.length);
    let s4 = 0;
    for (let o3 = 0; o3 < n4.length; o3++)
      for (let n5 = 0; n5 < 3; n5++)
        t5[s4++] = e3[o3][n5];
    u2.push([O.NORMAL, r3]), c.push([O.NORMAL, new s2(t5, 3, true)]);
  }
  return s3 && (c.push([O.COLOR, new s2(s3, 4)]), u2.push([O.COLOR, y(s3.length / 4)])), new b(t4, c, u2, null, e2.Line);
}
function it(t4, n4 = t4) {
  const e3 = t4.vertexAttributes, s3 = e3.get(O.POSITION).data, o2 = e3.get(O.NORMAL).data;
  if (o2) {
    const t5 = n4.getMutableAttribute(O.NORMAL).data;
    for (let n5 = 0; n5 < o2.length; n5 += 3) {
      const e4 = o2[n5 + 1];
      t5[n5 + 1] = -o2[n5 + 2], t5[n5 + 2] = e4;
    }
  }
  if (s3) {
    const t5 = n4.getMutableAttribute(O.POSITION).data;
    for (let n5 = 0; n5 < s3.length; n5 += 3) {
      const e4 = s3[n5 + 1];
      t5[n5 + 1] = -s3[n5 + 2], t5[n5 + 2] = e4;
    }
  }
}
function It(t4, s3, o2, h2, l2) {
  return !(Math.abs(P(s3, t4)) > l2) && (_(o2, t4, s3), z(o2, o2), _(h2, o2, t4), z(h2, h2), true);
}
function wt(t4, n4, e3, s3, o2, r3, h2) {
  return It(t4, n4, o2, r3, h2) || It(t4, e3, o2, r3, h2) || It(t4, s3, o2, r3, h2);
}
var gt = 0.99619469809;
var Mt = n2();

export {
  C,
  q2 as q,
  tt,
  nt,
  et,
  st,
  ot,
  ht,
  lt,
  ut,
  at,
  pt,
  it,
  wt
};
//# sourceMappingURL=chunk-WRC5WFEM.js.map
