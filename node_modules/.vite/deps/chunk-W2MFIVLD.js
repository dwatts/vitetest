import {
  s as s2
} from "./chunk-2NUCTFTS.js";
import {
  a as a2,
  h as h2,
  y as y2
} from "./chunk-I7EXY23J.js";
import {
  B,
  V,
  c
} from "./chunk-DBIFU6GO.js";
import {
  C
} from "./chunk-2EO2WRP7.js";
import {
  o2
} from "./chunk-SMDDCTGQ.js";
import {
  e as e3
} from "./chunk-CW7LIPBH.js";
import {
  r,
  t
} from "./chunk-YGUWDSEH.js";
import {
  En
} from "./chunk-BNBT4QTW.js";
import {
  n as n2,
  q
} from "./chunk-7EG7BYWF.js";
import {
  h
} from "./chunk-RRJGZKNX.js";
import {
  O,
  o
} from "./chunk-TPJLFGOT.js";
import {
  f,
  n
} from "./chunk-CQX57DED.js";
import {
  l
} from "./chunk-H7RDAEPY.js";
import {
  m
} from "./chunk-JL3TJGVW.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a,
  e as e2
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  s
} from "./chunk-HMVAPW5X.js";

// node_modules/@arcgis/core/views/3d/analysis/AnalysisView3D.js
var s3 = (s5) => {
  let n3 = class extends m(s5) {
    constructor() {
      super(...arguments), this.parent = null, this._userInteractive = false, this._interactiveViewModelCount = 0;
    }
    get interactive() {
      return this._interactiveViewModelCount > 0 || this._userInteractive;
    }
    set interactive(e5) {
      this._userInteractive = e5;
    }
    get updating() {
      return false;
    }
    get visible() {
      return null == this.parent || this.parent.visible && !this.parent.suspended;
    }
    set visible(e5) {
      this._overrideIfSome("visible", e5);
    }
    forceInteractiveForViewModel() {
      return this._interactiveViewModelCount++, e2(() => this._interactiveViewModelCount--);
    }
  };
  return e([y({ readOnly: true })], n3.prototype, "type", void 0), e([y({ constructOnly: true })], n3.prototype, "analysis", void 0), e([y({ constructOnly: true })], n3.prototype, "parent", void 0), e([y({ constructOnly: true })], n3.prototype, "view", void 0), e([y({ type: Boolean })], n3.prototype, "interactive", null), e([y()], n3.prototype, "_userInteractive", void 0), e([y({ readOnly: true })], n3.prototype, "updating", null), e([y()], n3.prototype, "visible", null), e([y()], n3.prototype, "_interactiveViewModelCount", void 0), n3 = e([a("esri.views.3d.analysis.AnalysisView3D")], n3), n3;
};

// node_modules/@arcgis/core/views/3d/analysis/support/projectionUtils.js
function r2(r3, t5, i2, n3 = false) {
  const l2 = En(r3, t5);
  return null == l2 ? null : (l2.hasZ && !n3 || null == i2 || (l2.z = a2(i2, l2) ?? 0), l2);
}
function t2(o3, e5, r3) {
  r3.warnOnce(`Failed to project analysis geometry (id: '${o3.id}'), projection from spatial reference (wkid: '${e5.wkid}') to view spatial reference is not supported. Projection may be possible after calling projection.load().`);
}

// node_modules/@arcgis/core/core/analysisThemeUtils.js
function t3(o3) {
  return s2(o3, { ignoreAlpha: true }) > 225 ? new h([0, 0, 0, o3.a]) : new h([255, 255, 255, o3.a]);
}
function e4(o3, r3) {
  const t5 = new h(o3);
  return t5.a *= r3, t5;
}
function i(n3 = 1) {
  return e4(s.analysisTheme.accentColor, n3);
}
function u(n3 = 1) {
  return t3(i(n3));
}
function c2(n3 = 1) {
  return e4(s.analysisTheme.accentColor, n3).a;
}
function a3(n3 = 1) {
  return e4(s.analysisTheme.textColor, n3);
}
function s4(n3 = 1) {
  return t3(a3(n3));
}

// node_modules/@arcgis/core/views/3d/interactive/visualElements/VisualElement.js
var t4 = class {
  constructor(t5) {
    this._attached = false, this._resourcesCreated = false, this._visible = true, this.view = t5, this._handle = l(() => this.view.ready, (e5) => {
      this._resourcesCreated && (e5 ? this._createResources() : this._destroyResources());
    });
  }
  applyProps(e5) {
    let t5 = false;
    for (const s5 in e5)
      s5 in this ? "attached" === s5 ? t5 = e5[s5] : this[s5] = e5[s5] : console.error("Cannot set unknown property", s5);
    this.attached = t5;
  }
  destroy() {
    this.attached = false, this._handle.remove();
  }
  get attached() {
    return this._attached;
  }
  set attached(e5) {
    e5 !== this._attached && this.view._stage && (this._attached = e5, this._attached && !this._resourcesCreated ? this._createResources() : !this._attached && this._resourcesCreated && this._destroyResources(), this.onAttachedChange(e5));
  }
  onAttachedChange(e5) {
  }
  get visible() {
    return this._visible;
  }
  set visible(e5) {
    e5 !== this._visible && (this._visible = e5, this.attached && this.updateVisibility(e5));
  }
  _createResources() {
    this.createResources(), this._resourcesCreated = true, this.updateVisibility(this.visible);
  }
  _destroyResources() {
    this.destroyResources(), this._resourcesCreated = false;
  }
};

// node_modules/@arcgis/core/views/3d/interactive/visualElements/Object3DVisualElement.js
var a4 = class extends t4 {
  constructor(e5) {
    super(e5.view), this._resources = null, this._transform = e3();
  }
  get object() {
    return null != this._resources ? this._resources.object : null;
  }
  get transform() {
    return this._transform;
  }
  set transform(s5) {
    n2(this._transform, s5), null != this._resources && (this._resources.object.transformation = this._transform);
  }
  recreate() {
    this.attached && this.createResources();
  }
  recreateGeometry() {
    if (null == this._resources)
      return;
    const e5 = this._resources.object, s5 = this.view._stage;
    s5.removeMany(e5.geometries), e5.removeAllGeometries(), this.createGeometries(e5), e5.visible = this.visible, s5.addMany(e5.geometries);
  }
  createResources() {
    this.destroyResources();
    const e5 = this.view._stage;
    if (!e5)
      return;
    const s5 = new c(e5, { pickable: false, updatePolicy: C.SYNC }), r3 = new V({ castShadow: false });
    r3.transformation = this._transform, this.createExternalResources(), this.createGeometries(r3), e5.addMany(r3.geometries), this.forEachExternalMaterial((s6) => e5.add(s6)), e5.add(r3), s5.add(r3), r3.visible = this.visible, this._resources = { layer: s5, object: r3 };
  }
  destroyResources() {
    const e5 = this.view._stage;
    null != this._resources && e5 && (e5.remove(this._resources.object), this._resources.layer.destroy(), this.forEachExternalMaterial((s5) => {
      e5.remove(s5), s5.dispose();
    }), e5.removeMany(this._resources.object.geometries), this._resources.object.dispose(), this.destroyExternalResources(), this._resources = null);
  }
  updateVisibility(e5) {
    null != this._resources && (this._resources.object.visible = e5);
  }
};

// node_modules/@arcgis/core/views/3d/interactive/visualElements/LineVisualElement.js
var u2 = class extends a4 {
  constructor(e5, t5) {
    super(e5), this._hasExternalMaterial = false, this._hasExternalMaterial = null != t5, this._material = null != t5 ? t5 : new B({ width: 1, color: r(1, 0, 1, 1), stippleOffColor: null, stipplePattern: null, stipplePreferContinuous: true, isClosed: false, falloff: 0, innerColor: null, innerWidth: 1, hasPolygonOffset: false, renderOccluded: o2.OccludeAndTransparent, writeDepth: true }), this.applyProps(e5);
  }
  setGeometryFromRenderSpacePoint(e5, t5 = 1e3) {
    this.geometry = [[[e5[0] - t5, e5[1], e5[2]], [e5[0] + t5, e5[1], e5[2]]], [[e5[0], e5[1] - t5, e5[2]], [e5[0], e5[1] + t5, e5[2]]], [[e5[0], e5[1], e5[2] - t5], [e5[0], e5[1], e5[2] + t5]]];
  }
  setGeometryFromExtent(e5) {
    const t5 = this.view.spatialReference, s5 = n(), o3 = n(), a5 = 100, n3 = [];
    o(s5, e5[0], e5[1], a5), this.view.renderCoordsHelper.toRenderCoords(s5, t5, o3), n3.push([o3[0], o3[1], o3[2]]), o(s5, e5[2], e5[1], a5), this.view.renderCoordsHelper.toRenderCoords(s5, t5, o3), n3.push([o3[0], o3[1], o3[2]]), o(s5, e5[2], e5[3], a5), this.view.renderCoordsHelper.toRenderCoords(s5, t5, o3), n3.push([o3[0], o3[1], o3[2]]), o(s5, e5[0], e5[3], a5), this.view.renderCoordsHelper.toRenderCoords(s5, t5, o3), n3.push([o3[0], o3[1], o3[2]]), o(s5, e5[0], e5[1], a5), this.view.renderCoordsHelper.toRenderCoords(s5, t5, o3), n3.push([o3[0], o3[1], o3[2]]), o(s5, e5[0], e5[1], a5), this.view.renderCoordsHelper.toRenderCoords(s5, t5, o3), n3.push([o3[0], o3[1], o3[2]]), this.geometry = [n3];
  }
  setGeometryFromFrustum(e5) {
    const t5 = [];
    e5.lines.forEach((e6) => {
      t5.push([e6.origin[0], e6.origin[1], e6.origin[2]]), t5.push([e6.endpoint[0], e6.endpoint[1], e6.endpoint[2]]);
    }), this.geometry = [t5];
  }
  setGeometryFromBoundedPlane(e5) {
    const t5 = [], r3 = e5.origin, s5 = e5.basis1, o3 = e5.basis2, a5 = 0.5, n3 = n(), l2 = n(), m2 = n(), p = n();
    n3[0] = r3[0] - s5[0] * a5 - o3[0] * a5, n3[1] = r3[1] - s5[1] * a5 - o3[1] * a5, n3[2] = r3[2] - s5[2] * a5 - o3[2] * a5, l2[0] = r3[0] - s5[0] * a5 + o3[0] * a5, l2[1] = r3[1] - s5[1] * a5 + o3[1] * a5, l2[2] = r3[2] - s5[2] * a5 + o3[2] * a5, m2[0] = r3[0] + s5[0] * a5 + o3[0] * a5, m2[1] = r3[1] + s5[1] * a5 + o3[1] * a5, m2[2] = r3[2] + s5[2] * a5 + o3[2] * a5, p[0] = r3[0] + s5[0] * a5 - o3[0] * a5, p[1] = r3[1] + s5[1] * a5 - o3[1] * a5, p[2] = r3[2] + s5[2] * a5 - o3[2] * a5, t5.push([n3[0], n3[1], n3[2]]), t5.push([l2[0], l2[1], l2[2]]), t5.push([m2[0], m2[1], m2[2]]), t5.push([p[0], p[1], p[2]]), t5.push([n3[0], n3[1], n3[2]]), this.geometry = [t5];
  }
  setGeometryFromSegment(t5) {
    const r3 = t5.endRenderSpace;
    this.transform = q(f2, r3);
    const { points: s5 } = t5.createRenderGeometry(r3, this.view.renderCoordsHelper);
    this.geometry = [s5];
  }
  setGeometryFromSegments(t5, r3 = f) {
    this.transform = q(f2, r3), this.geometry = t5.map((e5) => e5.createRenderGeometry(r3, this.view.renderCoordsHelper).points);
  }
  getTransformedGeometry() {
    return null == this._geometry ? null : this._geometry.map((e5) => e5.map((e6) => O(n(), e6, this.transform)));
  }
  get renderOccluded() {
    return this._material.parameters.renderOccluded;
  }
  set renderOccluded(e5) {
    this._material.setParameters({ renderOccluded: e5 });
  }
  get geometry() {
    return this._geometry;
  }
  set geometry(e5) {
    this._geometry = e5, this.recreateGeometry();
  }
  get width() {
    return this._material.parameters.width;
  }
  set width(e5) {
    this._material.setParameters({ width: e5 });
  }
  get color() {
    return this._material.parameters.color;
  }
  set color(e5) {
    const t5 = 1 === e5[3];
    this._material.setParameters({ color: t(e5), writeDepth: t5 });
  }
  get innerWidth() {
    return this._material.parameters.innerWidth;
  }
  set innerWidth(e5) {
    this._material.setParameters({ innerWidth: e5 });
  }
  get innerColor() {
    return this._material.parameters.innerColor;
  }
  set innerColor(e5) {
    this._material.setParameters({ innerColor: null != e5 ? t(e5) : null });
  }
  get stipplePattern() {
    return this._material.parameters.stipplePattern;
  }
  set stipplePattern(e5) {
    null != this._material && this._material.setParameters({ stipplePattern: e5 });
  }
  get stippleOffColor() {
    return this._material.parameters.stippleOffColor;
  }
  set stippleOffColor(e5) {
    this._material.setParameters({ stippleOffColor: null != e5 ? t(e5) : null });
  }
  get stipplePreferContinuous() {
    return this._material.parameters.stipplePreferContinuous;
  }
  set stipplePreferContinuous(e5) {
    this._material.setParameters({ stipplePreferContinuous: e5 });
  }
  get falloff() {
    return this._material.parameters.falloff;
  }
  set falloff(e5) {
    this._material.setParameters({ falloff: e5 });
  }
  get polygonOffset() {
    return this._material.parameters.hasPolygonOffset;
  }
  set polygonOffset(e5) {
    this._material.setParameters({ hasPolygonOffset: e5 });
  }
  createExternalResources() {
  }
  destroyExternalResources() {
  }
  createGeometries(e5) {
    for (const t5 of y2(this.geometry)) {
      const r3 = h2(this._material, t5);
      e5.addGeometry(r3);
    }
  }
  forEachExternalMaterial(e5) {
    this._hasExternalMaterial || e5(this._material);
  }
};
var f2 = e3();

export {
  s3 as s,
  i,
  u,
  c2 as c,
  a3 as a,
  s4 as s2,
  t4 as t,
  a4 as a2,
  u2,
  r2 as r,
  t2
};
//# sourceMappingURL=chunk-W2MFIVLD.js.map
