import {
  o as o6
} from "./chunk-DC2RBHAS.js";
import {
  i as i7
} from "./chunk-3AKVKVHP.js";
import {
  Y,
  a,
  d as d3,
  e as e6,
  m as m2,
  n as n6,
  r as r4,
  r2 as r5,
  t as t7,
  t2 as t8,
  y
} from "./chunk-EDK6DVWD.js";
import "./chunk-RLCH4JTX.js";
import {
  oe
} from "./chunk-XJSQN3VD.js";
import {
  i as i6
} from "./chunk-74URQI6M.js";
import "./chunk-U7ACAW2W.js";
import "./chunk-HVV5CDLD.js";
import "./chunk-JNPHM5XV.js";
import "./chunk-X6M7YYU3.js";
import {
  n as n5,
  t2 as t6,
  w as w2
} from "./chunk-HMHRXSML.js";
import {
  h as h5,
  i as i5,
  o as o5,
  t as t5
} from "./chunk-JXKASHKJ.js";
import {
  e as e5
} from "./chunk-WGM2OLIG.js";
import {
  o as o4
} from "./chunk-R372VXTK.js";
import "./chunk-K5QQ6UU5.js";
import "./chunk-R7LS3BCI.js";
import "./chunk-3MPC6MVT.js";
import "./chunk-UBY6VMKB.js";
import "./chunk-ULFDJHIR.js";
import "./chunk-44OKOXKA.js";
import {
  h as h4
} from "./chunk-ZW3OKQGC.js";
import "./chunk-BSSEIP2H.js";
import "./chunk-FKUVQAN6.js";
import "./chunk-LYNC7OVT.js";
import "./chunk-4YQPCE3Y.js";
import "./chunk-3QGLF4DO.js";
import "./chunk-OKNF37G2.js";
import "./chunk-5W2MUQQG.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-VF625TQS.js";
import "./chunk-UXWYXWGD.js";
import "./chunk-PX3Q44FM.js";
import "./chunk-XYJMHUDA.js";
import "./chunk-CSLWFQJE.js";
import "./chunk-MRDUXF66.js";
import "./chunk-IVABPLLZ.js";
import "./chunk-FS3VDXRM.js";
import "./chunk-BWIRPDWB.js";
import "./chunk-XP6ESZGI.js";
import "./chunk-RKM5MXYH.js";
import "./chunk-A4HFWKMU.js";
import {
  E as E3,
  S,
  T
} from "./chunk-TBHRKIAA.js";
import "./chunk-EFDT2ZDW.js";
import "./chunk-PM77FW2O.js";
import "./chunk-USNIBKH4.js";
import "./chunk-BPITJIFG.js";
import "./chunk-BBJLFBMQ.js";
import {
  E as E2,
  F as F2,
  L as L2,
  M as M2,
  Q,
  R as R2,
  _,
  qe,
  ze
} from "./chunk-J6SRKANJ.js";
import "./chunk-RBDJB3ZY.js";
import "./chunk-RRRAGAMB.js";
import "./chunk-ERFCZMKG.js";
import "./chunk-C2GW4T2D.js";
import "./chunk-SO7CVIZK.js";
import "./chunk-YAWND7HF.js";
import "./chunk-FJYIB7HF.js";
import {
  s as s3
} from "./chunk-6ONSKTRS.js";
import {
  P as P2
} from "./chunk-QQ4DNBSC.js";
import "./chunk-HGOUCXFH.js";
import "./chunk-ZYPAFVYT.js";
import "./chunk-X65XM5YN.js";
import {
  m,
  n as n4,
  t as t4
} from "./chunk-JORCYNDS.js";
import "./chunk-BZUKDBTT.js";
import "./chunk-7YCGPGGL.js";
import {
  i as i4
} from "./chunk-GPABU246.js";
import "./chunk-KILCBNKU.js";
import "./chunk-XKYCNHCM.js";
import "./chunk-LIXBKTBN.js";
import "./chunk-DU3C7D26.js";
import {
  i as i3,
  n as n3,
  x
} from "./chunk-K4WBDIIJ.js";
import {
  u as u2
} from "./chunk-H3DKDGMJ.js";
import {
  c
} from "./chunk-FB6EWBGE.js";
import "./chunk-Z2RTGLQI.js";
import "./chunk-6FHMQNMS.js";
import {
  T as T2,
  e2 as e4
} from "./chunk-TRGMWULG.js";
import "./chunk-WTPQKRQM.js";
import "./chunk-SADO52IH.js";
import "./chunk-V66LHQVK.js";
import "./chunk-JP7O2ZWE.js";
import "./chunk-AER5JAFS.js";
import "./chunk-FKEHFW5J.js";
import "./chunk-7HZ72XIE.js";
import "./chunk-ALPCRJS4.js";
import "./chunk-WDZ5AAFL.js";
import "./chunk-XL7RF4A6.js";
import "./chunk-ZL3HOHNK.js";
import "./chunk-PR2OEILG.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-MVWFPLOX.js";
import "./chunk-X3YW4YOG.js";
import "./chunk-IG234GCS.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-BA6PBZHC.js";
import {
  t as t3
} from "./chunk-FF5LS3YE.js";
import {
  B,
  C as C2,
  D,
  E,
  F,
  G,
  I,
  L,
  O,
  P,
  R,
  U
} from "./chunk-BCDDCNQ2.js";
import "./chunk-D3BOGOKY.js";
import "./chunk-QOWAKGE4.js";
import "./chunk-3TTW7E7W.js";
import "./chunk-RWWB77SD.js";
import "./chunk-ZMFGNDTK.js";
import "./chunk-UL64BLDS.js";
import "./chunk-EG6CFIHA.js";
import "./chunk-CMNAZRWU.js";
import "./chunk-P4PDTNIU.js";
import "./chunk-G2DTL6AE.js";
import "./chunk-Q6HN54VB.js";
import "./chunk-Z3GCSCQI.js";
import "./chunk-UU2XJGLA.js";
import "./chunk-CGJNVOU3.js";
import "./chunk-YA7WDOJK.js";
import "./chunk-FVR25IMN.js";
import "./chunk-EV77QZBT.js";
import "./chunk-467UETSR.js";
import "./chunk-SHFLRM67.js";
import "./chunk-YGUWDSEH.js";
import "./chunk-LO3LAMAS.js";
import "./chunk-EFRTD25L.js";
import "./chunk-EAGDM3GO.js";
import {
  e as e7
} from "./chunk-7CCX4DKW.js";
import "./chunk-YOTOWDJK.js";
import "./chunk-ND7XUHDE.js";
import "./chunk-XG5SDOKD.js";
import "./chunk-UQHDCOJC.js";
import "./chunk-MF3HZ6GV.js";
import "./chunk-SNAARWF3.js";
import "./chunk-FQZ2JEHK.js";
import "./chunk-GZTLZ6RD.js";
import {
  w
} from "./chunk-G3BNSWI4.js";
import "./chunk-ICGBQNK3.js";
import "./chunk-7JB7RSO7.js";
import "./chunk-CEUJOC5P.js";
import "./chunk-G3Q2URFK.js";
import {
  e as e3
} from "./chunk-D5NSNTGJ.js";
import {
  n as n2,
  o as o3
} from "./chunk-63ERNIOV.js";
import "./chunk-XABSD6D5.js";
import {
  e as e2
} from "./chunk-DTEODQ6R.js";
import "./chunk-QNFDBY7V.js";
import "./chunk-RVQLSA5X.js";
import "./chunk-5KLICR5E.js";
import "./chunk-YYTXJF6W.js";
import "./chunk-GOK5MP3B.js";
import "./chunk-NLWV7Q6F.js";
import {
  M,
  f,
  h as h3,
  l as l3
} from "./chunk-JB7FDW5N.js";
import {
  r as r3
} from "./chunk-SS3YG6J3.js";
import "./chunk-5IYCCZ54.js";
import "./chunk-JLSXEPY6.js";
import "./chunk-VMTVUE47.js";
import "./chunk-GDZM4A6K.js";
import "./chunk-XWGNMTES.js";
import "./chunk-6NNEHJYI.js";
import "./chunk-BNBT4QTW.js";
import "./chunk-3FQOSG5O.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-JNDFAMXY.js";
import "./chunk-NTEKJWGF.js";
import "./chunk-TFIKV5RU.js";
import "./chunk-KW6QQDGN.js";
import "./chunk-AQ7R6V4L.js";
import {
  u
} from "./chunk-DOQ3SAAR.js";
import "./chunk-4BXK4H4L.js";
import "./chunk-SLVNG7FV.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-4CZO65BK.js";
import {
  d as d2
} from "./chunk-SVCGLUNW.js";
import "./chunk-DEZCXTA3.js";
import "./chunk-RRJGZKNX.js";
import "./chunk-PL5Q4C6Y.js";
import "./chunk-A6VKJXIH.js";
import "./chunk-KFSY6ZZH.js";
import "./chunk-7EQSYZHW.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-GGOVZ2GK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-WLWP35G2.js";
import "./chunk-JPW73GY2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import {
  i as i2
} from "./chunk-TEHNQYQD.js";
import {
  o as o2
} from "./chunk-TPJLFGOT.js";
import {
  n
} from "./chunk-CQX57DED.js";
import {
  r as r2
} from "./chunk-3CQBBMMD.js";
import "./chunk-Z2ZUNW5S.js";
import "./chunk-7L7Z2HXM.js";
import "./chunk-75NKPXTR.js";
import "./chunk-EUVARFSM.js";
import "./chunk-3VUFACNT.js";
import "./chunk-ZEEBL7ZN.js";
import "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-SJ2GJCS2.js";
import {
  h as h2,
  l as l2
} from "./chunk-H7RDAEPY.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import "./chunk-JL3TJGVW.js";
import "./chunk-JZM5YUHA.js";
import {
  j
} from "./chunk-43LWRDQS.js";
import "./chunk-R6YKST3K.js";
import {
  vt
} from "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-MP6GH2AC.js";
import {
  A,
  t2
} from "./chunk-V76KGJFU.js";
import "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import {
  C,
  h,
  r,
  s as s2
} from "./chunk-7I33FAWS.js";
import {
  e,
  i,
  l,
  o,
  t
} from "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import {
  d,
  has
} from "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/BitBlitRenderer.js
var _2 = class {
  constructor() {
    this._initialized = false;
  }
  dispose() {
    this._program = t(this._program), this._vertexArrayObject = t(this._vertexArrayObject);
  }
  render(r7, t10, e8, i11) {
    r7 && (this._initialized || this._initialize(r7), r7.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), r7.bindVAO(this._vertexArrayObject), r7.useProgram(this._program), t10.setSamplingMode(e8), r7.bindTexture(t10, 0), this._program.setUniform1i("u_tex", 0), this._program.setUniform1f("u_opacity", i11), r7.drawArrays(E.TRIANGLE_STRIP, 0, 4), r7.bindTexture(null, 0), r7.bindVAO());
  }
  _initialize(r7) {
    if (this._initialized)
      return true;
    const s6 = e5(r7, e6);
    if (!s6)
      return false;
    const o11 = new Int8Array(16);
    o11[0] = -1, o11[1] = -1, o11[2] = 0, o11[3] = 0, o11[4] = 1, o11[5] = -1, o11[6] = 1, o11[7] = 0, o11[8] = -1, o11[9] = 1, o11[10] = 0, o11[11] = 1, o11[12] = 1, o11[13] = 1, o11[14] = 1, o11[15] = 1;
    const _5 = e6.attributes, p = new u2(r7, _5, t4, { geometry: c.createVertex(r7, F.STATIC_DRAW, o11) });
    return this._program = s6, this._vertexArrayObject = p, this._initialized = true, true;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/MaterialManager.js
var t9 = (e8) => e8 === T.HITTEST || e8 === T.LABEL_ALPHA;
var a2 = (e8) => (t9(e8) ? 1 : 0) | (e8 === T.HIGHLIGHT ? 2 : 0);
var s4 = ({ rendererInfo: r7, drawPhase: e8 }, t10, s6) => `${t10.getVariationHash()}-${a2(e8)}-${r7.getVariationHash()}-${null != s6 && s6.join(".")}`;
var o7 = (e8, a4, s6, o11 = {}) => {
  if (o11 = { ...o11, ...a4.getVariation(), ...e8.rendererInfo.getVariation(), highlight: e8.drawPhase === T.HIGHLIGHT, id: t9(e8.drawPhase) }, null != s6)
    for (const r7 of s6)
      o11[r7] = true;
  return o11;
};
var i8 = class {
  constructor(r7) {
    this._rctx = r7, this._programByKey = /* @__PURE__ */ new Map();
  }
  dispose() {
    this._programByKey.forEach((r7) => r7.dispose()), this._programByKey.clear();
  }
  getProgram(r7, t10 = []) {
    const a4 = r7.vsPath + "." + r7.fsPath + JSON.stringify(t10);
    if (this._programByKey.has(a4))
      return this._programByKey.get(a4);
    const s6 = { ...t10.map((r8) => "string" == typeof r8 ? { name: r8, value: true } : r8).reduce((r8, e8) => ({ ...r8, [e8.name]: e8.value }), {}) }, { vsPath: o11, fsPath: i11, attributes: h10 } = r7, n10 = o6(o11, i11, h10, s6), g = this._rctx.programCache.acquire(n10.shaders.vertexShader, n10.shaders.fragmentShader, n10.attributes);
    if (!g)
      throw new Error("Unable to get program for key: ${key}");
    return this._programByKey.set(a4, g), g;
  }
  getMaterialProgram(r7, t10, a4, i11, h10) {
    const n10 = s4(r7, t10, h10);
    if (this._programByKey.has(n10))
      return this._programByKey.get(n10);
    const g = o7(r7, t10, h10, { ignoresSamplerPrecision: r7.context.driverTest.ignoresSamplerPrecision.result }), m4 = o6(a4, a4, i11, g), y2 = this._rctx.programCache.acquire(m4.shaders.vertexShader, m4.shaders.fragmentShader, m4.attributes);
    if (!y2)
      throw new Error("Unable to get program for key: ${key}");
    return this._programByKey.set(n10, y2), y2;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/TextureUploadManager.js
var n7 = class {
  constructor(e8, t10) {
    this._queue = [], this._context = e8, this._refreshable = t10;
  }
  destroy() {
    this._queue = [];
  }
  enqueueTextureUpdate(o11, n10) {
    const h10 = C(), i11 = o11, a4 = qe, c4 = Math.ceil(i11.height / a4);
    if (s2(n10), this._context.type === n2.WEBGL1)
      this._queue.push({ type: "no-chunk", request: o11, resolver: h10, options: n10 });
    else
      for (let e8 = 0; e8 < c4; e8++) {
        const t10 = e8 * a4, s6 = e8 === c4 - 1, u8 = s6 ? i11.height - a4 * e8 : a4;
        this._queue.push({ type: "chunk", request: o11, resolver: h10, chunk: e8, chunkOffset: t10, destHeight: u8, chunkIsLast: s6, options: n10 });
      }
    return h(n10, (e8) => h10.reject(e8)), h10.promise;
  }
  upload() {
    let e8 = 0;
    for (; this._queue.length; ) {
      const t10 = performance.now(), s6 = this._queue.shift();
      if (s6) {
        if (null != s6.options.signal && s6.options.signal.aborted)
          continue;
        switch (s6.type) {
          case "chunk":
            this._uploadChunk(s6);
            break;
          case "no-chunk":
            this._uploadNoChunk(s6);
        }
        const u8 = performance.now() - t10;
        if (e8 += u8, e8 + u8 >= ze)
          break;
      }
    }
    this._queue.length && this._refreshable.requestRender();
  }
  _uploadChunk(e8) {
    const { request: t10, resolver: s6, chunkOffset: o11, chunkIsLast: u8, destHeight: r7 } = e8, { data: n10, texture: h10, width: i11 } = t10;
    null != n10 && (h10.updateData(0, 0, o11, i11, r7, n10, o11), u8 && s6.resolve());
  }
  _uploadNoChunk(e8) {
    const { request: t10, resolver: s6 } = e8, { data: o11, texture: u8 } = t10;
    u8.setData(o11), s6.resolve();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/WorldExtentClipRenderer.js
var u3 = r3(-0.5, -0.5);
var f2 = class {
  constructor() {
    this._centerNdc = n(), this._pxToNdc = n(), this._worldDimensionsPx = n(), this._mat3 = e3(), this._initialized = false;
  }
  dispose() {
    this._program = t(this._program), this._quad = t(this._quad);
  }
  render(t10, s6) {
    const { context: i11 } = t10;
    return !!this._updateGeometry(t10, s6) && (this._initialized || this._initialize(i11), i11.setDepthWriteEnabled(false), i11.setDepthTestEnabled(false), i11.setColorMask(false, false, false, false), i11.setBlendingEnabled(false), i11.setStencilOp(O.KEEP, O.KEEP, O.REPLACE), i11.setStencilFunction(I.ALWAYS, 1, 255), i11.setStencilTestEnabled(true), i11.useProgram(this._program), this._program.setUniformMatrix3fv("u_worldExtent", this._mat3), this._quad.draw(), this._quad.unbind(), true);
  }
  _initialize(t10) {
    if (this._initialized)
      return;
    const s6 = e5(t10, r4);
    s6 && (this._program = s6, this._quad = new n5(t10, [0, 0, 1, 0, 0, 1, 1, 1]), this._initialized = true);
  }
  _updateGeometry(t10, a4) {
    const { state: n10, pixelRatio: m4 } = t10, { size: c4, rotation: d5 } = n10, p = Math.round(c4[0] * m4), _5 = Math.round(c4[1] * m4);
    if (!n10.spatialReference.isWrappable)
      return false;
    const l7 = r2(d5), f4 = Math.abs(Math.cos(l7)), b = Math.abs(Math.sin(l7)), g = Math.round(p * f4 + _5 * b), x2 = Math.round(n10.worldScreenWidth);
    if (g <= x2)
      return false;
    const j3 = p * b + _5 * f4, E4 = x2 * m4, M3 = (a4.left - a4.right) * m4 / p, w3 = (a4.bottom - a4.top) * m4 / _5;
    o2(this._worldDimensionsPx, E4, j3, 1), o2(this._pxToNdc, 2 / p, -2 / _5, 1), o2(this._centerNdc, M3, w3, 1);
    const P4 = this._mat3;
    return l3(P4, this._centerNdc), f(P4, P4, this._pxToNdc), 0 !== d5 && h3(P4, P4, l7), f(P4, P4, this._worldDimensionsPx), M(P4, P4, u3), true;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/AnimationEffect.js
var s5 = class extends t6 {
  constructor() {
    super(...arguments), this.defines = [], this._desc = { vsPath: "fx/integrate", fsPath: "fx/integrate", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) };
  }
  dispose() {
    this._quad && this._quad.dispose();
  }
  bind() {
  }
  unbind() {
  }
  draw(t10, r7) {
    if (!(r7 == null ? void 0 : r7.size))
      return;
    const { context: a4, renderingOptions: s6 } = t10;
    this._quad || (this._quad = new n5(a4, [0, 0, 1, 0, 0, 1, 1, 1]));
    const o11 = a4.getBoundFramebufferObject(), { x: n10, y: u8, width: m4, height: d5 } = a4.getViewport();
    r7.bindTextures(a4);
    const f4 = r7.getBlock(Q);
    if (null == f4)
      return;
    const c4 = f4.getFBO(a4), l7 = f4.getFBO(a4, 1);
    a4.setViewport(0, 0, r7.size, r7.size), this._computeDelta(t10, l7, s6.labelsAnimationTime), this._updateAnimationState(t10, l7, c4), a4.bindFramebuffer(o11), a4.setViewport(n10, u8, m4, d5);
  }
  _computeDelta(e8, i11, a4) {
    const { context: s6, painter: o11, displayLevel: n10 } = e8, u8 = o11.materialManager.getProgram(this._desc, ["delta"]);
    s6.bindFramebuffer(i11), s6.setClearColor(0, 0, 0, 0), s6.clear(s6.gl.COLOR_BUFFER_BIT), s6.useProgram(u8);
    const m4 = has("featurelayer-animation-enabled") ? a4 : 1;
    u8.setUniform1i("u_maskTexture", E2), u8.setUniform1i("u_sourceTexture", F2), u8.setUniform1f("u_timeDelta", e8.deltaTime), u8.setUniform1f("u_animationTime", m4), u8.setUniform1f("u_zoomLevel", Math.round(10 * n10)), this._quad.draw();
  }
  _updateAnimationState(e8, t10, r7) {
    const { context: i11, painter: a4 } = e8, s6 = a4.materialManager.getProgram(this._desc, ["update"]);
    i11.bindTexture(t10.colorTexture, 1), i11.useProgram(s6), s6.setUniform1i("u_sourceTexture", 1), i11.bindFramebuffer(r7), i11.setClearColor(0, 0, 0, 0), i11.clear(i11.gl.COLOR_BUFFER_BIT), this._quad.draw();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/FeatureEffect.js
var r6 = class extends t6 {
  constructor(e8) {
    super(), this.name = this.constructor.name, this.defines = [e8];
  }
  dispose() {
  }
  bind({ context: e8, painter: t10 }) {
    this._prev = e8.getBoundFramebufferObject();
    const { width: r7, height: s6 } = e8.getViewport(), o11 = t10.getFbos(r7, s6).effect0;
    e8.bindFramebuffer(o11), e8.setColorMask(true, true, true, true), e8.setClearColor(0, 0, 0, 0), e8.clear(e8.gl.COLOR_BUFFER_BIT);
  }
  unbind() {
  }
  draw(e8, r7) {
    const { context: s6, painter: o11 } = e8, n10 = o11.getPostProcessingEffects(r7), c4 = s6.getBoundFramebufferObject();
    for (const { postProcessingEffect: t10, effect: f4 } of n10)
      t10.draw(e8, c4, f4);
    s6.bindFramebuffer(this._prev), s6.setStencilTestEnabled(false), o11.blitTexture(s6, c4.colorTexture, L.NEAREST), s6.setStencilTestEnabled(true);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/HighlightRenderer.js
var c2 = class {
  constructor() {
    this._width = void 0, this._height = void 0, this._resources = null;
  }
  dispose() {
    this._resources && (this._resources.quadGeometry.dispose(), this._resources.quadVAO.dispose(), this._resources.highlightProgram.dispose(), this._resources.blurProgram.dispose(), this._resources = null);
  }
  preBlur(e8, i11) {
    e8.bindTexture(i11, L2), e8.useProgram(this._resources.blurProgram), this._resources.blurProgram.setUniform4fv("u_direction", [1, 0, 1 / this._width, 0]), this._resources.blurProgram.setUniformMatrix4fv("u_channelSelector", t5), e8.bindVAO(this._resources.quadVAO), e8.drawArrays(E.TRIANGLE_STRIP, 0, 4), e8.bindVAO();
  }
  finalBlur(e8, s6) {
    e8.bindTexture(s6, L2), e8.useProgram(this._resources.blurProgram), this._resources.blurProgram.setUniform4fv("u_direction", [0, 1, 0, 1 / this._height]), this._resources.blurProgram.setUniformMatrix4fv("u_channelSelector", i5), e8.bindVAO(this._resources.quadVAO), e8.drawArrays(E.TRIANGLE_STRIP, 0, 4), e8.bindVAO();
  }
  renderHighlight(e8, s6, i11) {
    e8.bindTexture(s6, L2), e8.useProgram(this._resources.highlightProgram), i11.applyHighlightOptions(e8, this._resources.highlightProgram), e8.bindVAO(this._resources.quadVAO), e8.setBlendingEnabled(true), e8.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), e8.drawArrays(E.TRIANGLE_STRIP, 0, 4), e8.bindVAO();
  }
  _initialize(s6, i11, a4) {
    this._width = i11, this._height = a4;
    const m4 = c.createVertex(s6, F.STATIC_DRAW, new Int8Array([-1, -1, 0, 0, 1, -1, 1, 0, -1, 1, 0, 1, 1, 1, 1, 1]).buffer), c4 = new u2(s6, /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]), { geometry: [new t3("a_position", 2, C2.BYTE, 0, 4), new t3("a_texcoord", 2, C2.UNSIGNED_BYTE, 2, 4)] }, { geometry: m4 }), f4 = e5(s6, t7), b = e5(s6, r5);
    s6.useProgram(f4), f4.setUniform1i("u_texture", L2), f4.setUniform1i("u_shade", M2), f4.setUniform1f("u_sigma", o5), s6.useProgram(b), b.setUniform1i("u_texture", L2), b.setUniform1f("u_sigma", o5), this._resources = { quadGeometry: m4, quadVAO: c4, highlightProgram: f4, blurProgram: b };
  }
  setup(r7, e8, s6) {
    this._resources ? (this._width = e8, this._height = s6) : this._initialize(r7, e8, s6);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/HighlightSurfaces.js
function h6(r7, h10, u8) {
  const c4 = new e4(h10, u8);
  return c4.wrapMode = D.CLAMP_TO_EDGE, new x(r7, c4, new i3(B.STENCIL_INDEX8, h10, u8));
}
var u4 = class {
  constructor() {
    this._width = void 0, this._height = void 0, this._resources = null;
  }
  dispose() {
    this._resources && (this._resources.sharedBlur1Fbo.dispose(), this._resources.sharedBlur2Fbo.dispose(), this._resources = i(this._resources));
  }
  _initialize(r7, e8, s6) {
    this._width = e8, this._height = s6;
    const t10 = h6(r7, e8, s6), o11 = h6(r7, e8, s6);
    this._resources = { sharedBlur1Fbo: t10, sharedBlur2Fbo: o11 };
  }
  setup(r7, e8, s6) {
    !this._resources || this._width === e8 && this._height === s6 || this.dispose(), this._resources || this._initialize(r7, e8, s6);
  }
  get sharedBlur1Tex() {
    return this._resources.sharedBlur1Fbo.colorTexture;
  }
  get sharedBlur1Fbo() {
    return this._resources.sharedBlur1Fbo;
  }
  get sharedBlur2Tex() {
    return this._resources.sharedBlur2Fbo.colorTexture;
  }
  get sharedBlur2Fbo() {
    return this._resources.sharedBlur2Fbo;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/HighlightEffect.js
var h7 = 4;
var d4 = 4 / h7;
var l4 = class extends t6 {
  constructor() {
    super(...arguments), this.defines = ["highlight"], this._hlRenderer = new c2(), this._width = void 0, this._height = void 0, this._boundFBO = null, this._hlSurfaces = new u4(), this._adjustedWidth = void 0, this._adjustedHeight = void 0, this._blitRenderer = new _2();
  }
  dispose() {
    var _a, _b;
    (_a = this._hlSurfaces) == null ? void 0 : _a.dispose(), (_b = this._hlRenderer) == null ? void 0 : _b.dispose(), this._boundFBO = null;
  }
  bind(e8) {
    const { context: t10, painter: s6 } = e8, { width: r7, height: i11 } = t10.getViewport(), h10 = s6.getFbos(r7, i11).effect0;
    this.setup(e8, r7, i11), t10.bindFramebuffer(h10), t10.setColorMask(true, true, true, true), t10.setClearColor(0, 0, 0, 0), t10.clear(t10.gl.COLOR_BUFFER_BIT);
  }
  unbind() {
  }
  setup({ context: e8 }, t10, s6) {
    this._width = t10, this._height = s6;
    const r7 = t10 % h7, i11 = s6 % h7;
    t10 += r7 < h7 / 2 ? -r7 : h7 - r7, s6 += i11 < h7 / 2 ? -i11 : h7 - i11, this._adjustedWidth = t10, this._adjustedHeight = s6, this._boundFBO = e8.getBoundFramebufferObject();
    const l7 = Math.round(t10 * d4), o11 = Math.round(s6 * d4);
    this._hlRenderer.setup(e8, l7, o11), this._hlSurfaces.setup(e8, l7, o11);
  }
  draw(e8) {
    const { context: t10, highlightGradient: s6 } = e8;
    if (!s6)
      return;
    const r7 = t10.getBoundFramebufferObject();
    t10.setViewport(0, 0, this._adjustedWidth * d4, this._adjustedHeight * d4), t10.bindFramebuffer(this._hlSurfaces.sharedBlur1Fbo), t10.setStencilTestEnabled(false), t10.setClearColor(0, 0, 0, 0), t10.clear(t10.gl.COLOR_BUFFER_BIT), this._blitRenderer.render(t10, r7.colorTexture, L.NEAREST, 1), t10.setStencilTestEnabled(false), t10.setBlendingEnabled(false), t10.setColorMask(false, false, false, true), t10.bindFramebuffer(this._hlSurfaces.sharedBlur2Fbo), t10.setClearColor(0, 0, 0, 0), t10.clear(t10.gl.COLOR_BUFFER_BIT), this._hlRenderer.preBlur(t10, this._hlSurfaces.sharedBlur1Tex), t10.bindFramebuffer(this._hlSurfaces.sharedBlur1Fbo), t10.setClearColor(0, 0, 0, 0), t10.clear(t10.gl.COLOR_BUFFER_BIT), this._hlRenderer.finalBlur(t10, this._hlSurfaces.sharedBlur2Tex), t10.bindFramebuffer(this._boundFBO), t10.setBlendingEnabled(true), t10.setColorMask(true, true, true, true), t10.setViewport(0, 0, this._width, this._height), this._hlRenderer.renderHighlight(t10, this._hlSurfaces.sharedBlur1Tex, s6), this._boundFBO = null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/HittestEffect.js
var o8 = class extends t6 {
  constructor() {
    super(...arguments), this.name = this.constructor.name, this.defines = ["hittest"];
  }
  dispose() {
    null != this._fbo && this._fbo.dispose();
  }
  createOptions({ pixelRatio: e8 }, i11, s6 = _) {
    if (!i11.length)
      return null;
    const r7 = i11.shift(), o11 = r7.x, n10 = r7.y;
    return this._outstanding = r7, { type: "hittest", distance: s6 * e8, position: [o11, n10] };
  }
  bind(t10) {
    const { context: i11, attributeView: s6 } = t10;
    if (!s6.size)
      return;
    const r7 = s6.getBlock(R2);
    if (null == r7)
      return;
    const o11 = r7.getFBO(i11);
    i11.setViewport(0, 0, s6.size, s6.size), i11.bindFramebuffer(o11), i11.setColorMask(true, true, true, true), i11.setClearColor(0, 0, 0, 0), i11.clear(i11.gl.COLOR_BUFFER_BIT | i11.gl.DEPTH_BUFFER_BIT);
  }
  unbind(t10) {
  }
  draw(t10) {
    if (null == this._outstanding)
      return;
    const e8 = this._outstanding;
    this._outstanding = null, this._resolve(t10, e8.resolvers);
  }
  async _resolve(t10, i11) {
    const { context: o11, attributeView: n10 } = t10, c4 = n10.getBlock(R2);
    if (null == c4)
      return void i11.forEach((t11) => t11.resolve([]));
    const l7 = c4.getFBO(o11), d5 = new Uint8Array(l7.width * l7.height * 4);
    try {
      await l7.readPixelsAsync(0, 0, l7.width, l7.height, G.RGBA, U.UNSIGNED_BYTE, d5);
    } catch (u8) {
      return void i11.forEach((t11) => t11.resolve([]));
    }
    const a4 = [];
    for (let e8 = 0; e8 < d5.length; e8 += 4) {
      const t11 = d5[e8], i12 = d5[e8 + 3];
      t11 && a4.push({ id: e8 / 4, directHits: i12 });
    }
    a4.sort((t11, e8) => e8.directHits === t11.directHits ? e8.id - t11.id : e8.directHits - t11.directHits);
    const h10 = a4.map((t11) => t11.id);
    i11.forEach((t11) => t11.resolve(h10));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/HittestEffectVTL.js
var i9 = class extends t6 {
  constructor() {
    super(...arguments), this.name = this.constructor.name, this.defines = ["id"], this._lastSize = 0, this._boundFBO = null;
  }
  dispose() {
    null != this._fbo && this._fbo.dispose();
  }
  bind({ context: t10, painter: e8 }) {
    const { width: s6, height: o11 } = t10.getViewport();
    this._boundFBO = t10.getBoundFramebufferObject();
    const i11 = e8.getFbos(s6, o11).effect0;
    t10.bindFramebuffer(i11), t10.setColorMask(true, true, true, true), t10.setClearColor(0, 0, 0, 0), t10.clear(t10.gl.COLOR_BUFFER_BIT);
  }
  unbind({ context: t10 }) {
    t10.bindFramebuffer(this._boundFBO), this._boundFBO = null;
  }
  draw(e8, s6, o11 = 2 * _) {
    this._resolve(e8, s6, o11);
  }
  async _resolve({ context: t10, state: e8, pixelRatio: i11 }, r7, n10) {
    const f4 = t10.getBoundFramebufferObject(), a4 = e8.size[1] * i11, h10 = Math.round(n10 * i11), u8 = h10 / 2, l7 = h10 / 2;
    this._ensureBuffer(h10), r7.forEach(async (t11, e9) => {
      const n11 = /* @__PURE__ */ new Map(), b = Math.floor(e9.x * i11 - h10 / 2), c4 = Math.floor(a4 - e9.y * i11 - h10 / 2);
      await f4.readPixelsAsync(b, c4, h10, h10, G.RGBA, U.UNSIGNED_BYTE, this._buf);
      for (let s6 = 0; s6 < this._buf32.length; s6++) {
        const t12 = this._buf32[s6];
        if (4294967295 !== t12 && 0 !== t12) {
          const e10 = s6 % h10, o11 = h10 - Math.floor(s6 / h10), i12 = (u8 - e10) * (u8 - e10) + (l7 - o11) * (l7 - o11), r8 = n11.has(t12) ? n11.get(t12) : 4294967295;
          n11.set(t12, Math.min(i12, r8));
        }
      }
      const _5 = Array.from(n11).sort((t12, e10) => t12[1] - e10[1]).map((t12) => t12[0]);
      t11.resolve(_5), r7.delete(e9);
    });
  }
  _ensureBuffer(t10) {
    this._lastSize !== t10 && (this._lastSize = t10, this._buf = new Uint8Array(4 * t10 * t10), this._buf32 = new Uint32Array(this._buf.buffer));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Bloom.js
var a3 = 5;
var u5 = [1, 0];
var l5 = [0, 1];
var m3 = [1, 0.8, 0.6, 0.4, 0.2];
var _3 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
var h8 = class {
  constructor() {
    this._intensityFBO = null, this._compositeFBO = null, this._mipsFBOs = new Array(a3), this._nMips = a3, this._kernelSizeArray = [3, 5, 7, 9, 11], this._size = [0, 0], this._programDesc = { luminosityHighPass: { vsPath: "post-processing/pp", fsPath: "post-processing/bloom/luminosityHighPass", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, gaussianBlur: { vsPath: "post-processing/pp", fsPath: "post-processing/bloom/gaussianBlur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, composite: { vsPath: "post-processing/pp", fsPath: "post-processing/bloom/composite", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, blit: { vsPath: "post-processing/pp", fsPath: "post-processing/blit", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) } };
  }
  dispose() {
    if (this._quad = t(this._quad), this._intensityFBO = t(this._intensityFBO), this._compositeFBO = t(this._compositeFBO), this._mipsFBOs) {
      for (let t10 = 0; t10 < this._nMips; t10++)
        this._mipsFBOs[t10] && (this._mipsFBOs[t10].horizontal.dispose(), this._mipsFBOs[t10].vertical.dispose());
      this._mipsFBOs = null;
    }
  }
  draw(t10, i11, r7) {
    const { width: o11, height: n10 } = i11, { context: h10, painter: p } = t10, { materialManager: c4 } = p, d5 = h10.gl, f4 = this._programDesc, { strength: b, radius: F3, threshold: O2 } = r7;
    this._quad || (this._quad = new n5(h10, [-1, -1, 1, -1, -1, 1, 1, 1])), this._createOrResizeResources(t10, o11, n10), h10.setStencilTestEnabled(false), h10.setBlendingEnabled(true), h10.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), h10.setStencilWriteMask(0);
    const B2 = this._quad;
    B2.bind(), h10.bindFramebuffer(this._intensityFBO);
    const g = c4.getProgram(f4.luminosityHighPass);
    h10.useProgram(g), h10.bindTexture(i11.colorTexture, 0), g.setUniform1i("u_texture", 0), g.setUniform3fv("u_defaultColor", [0, 0, 0]), g.setUniform1f("u_defaultOpacity", 0), g.setUniform1f("u_luminosityThreshold", O2), g.setUniform1f("u_smoothWidth", 0.01);
    const T4 = [Math.round(o11 / 2), Math.round(n10 / 2)];
    h10.setViewport(0, 0, T4[0], T4[1]), h10.setClearColor(0, 0, 0, 0), h10.clear(d5.COLOR_BUFFER_BIT), B2.draw(), h10.setBlendingEnabled(false);
    let x2 = this._intensityFBO.colorTexture;
    for (let e8 = 0; e8 < this._nMips; e8++) {
      const t11 = c4.getProgram(f4.gaussianBlur, [{ name: "radius", value: this._kernelSizeArray[e8] }]);
      h10.useProgram(t11), h10.bindTexture(x2, e8 + 1), t11.setUniform1i("u_colorTexture", e8 + 1), t11.setUniform2fv("u_texSize", T4), t11.setUniform2fv("u_direction", u5), h10.setViewport(0, 0, T4[0], T4[1]);
      const s6 = this._mipsFBOs[e8];
      h10.bindFramebuffer(s6.horizontal), B2.draw(), x2 = s6.horizontal.colorTexture, h10.bindFramebuffer(s6.vertical), h10.bindTexture(x2, e8 + 1), t11.setUniform2fv("u_direction", l5), B2.draw(), x2 = s6.vertical.colorTexture, T4[0] = Math.round(T4[0] / 2), T4[1] = Math.round(T4[1] / 2);
    }
    h10.setViewport(0, 0, o11, n10);
    const w3 = c4.getProgram(f4.composite, [{ name: "nummips", value: a3 }]);
    h10.bindFramebuffer(this._compositeFBO), h10.useProgram(w3), w3.setUniform1f("u_bloomStrength", b), w3.setUniform1f("u_bloomRadius", F3), w3.setUniform1fv("u_bloomFactors", m3), w3.setUniform3fv("u_bloomTintColors", _3), h10.bindTexture(this._mipsFBOs[0].vertical.colorTexture, 1), w3.setUniform1i("u_blurTexture1", 1), h10.bindTexture(this._mipsFBOs[1].vertical.colorTexture, 2), w3.setUniform1i("u_blurTexture2", 2), h10.bindTexture(this._mipsFBOs[2].vertical.colorTexture, 3), w3.setUniform1i("u_blurTexture3", 3), h10.bindTexture(this._mipsFBOs[3].vertical.colorTexture, 4), w3.setUniform1i("u_blurTexture4", 4), h10.bindTexture(this._mipsFBOs[4].vertical.colorTexture, 5), w3.setUniform1i("u_blurTexture5", 5), B2.draw(), h10.bindFramebuffer(i11), h10.setBlendingEnabled(true);
    const M3 = c4.getProgram(f4.blit);
    h10.useProgram(M3), h10.bindTexture(this._compositeFBO.colorTexture, 6), M3.setUniform1i("u_texture", 6), h10.setBlendFunction(R.ONE, R.ONE), B2.draw(), B2.unbind(), h10.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), h10.setStencilTestEnabled(true);
  }
  _createOrResizeResources(t10, e8, s6) {
    const { context: a4 } = t10;
    if (this._compositeFBO && this._size[0] === e8 && this._size[1] === s6)
      return;
    this._size[0] = e8, this._size[1] = s6;
    const u8 = [Math.round(e8 / 2), Math.round(s6 / 2)];
    if (this._compositeFBO)
      this._compositeFBO.resize(e8, s6);
    else {
      const t11 = new e4(e8, s6);
      t11.internalFormat = G.RGBA, t11.wrapMode = D.CLAMP_TO_EDGE, this._compositeFBO = new x(a4, t11);
    }
    if (this._intensityFBO)
      this._intensityFBO.resize(u8[0], u8[1]);
    else {
      const t11 = new e4(u8[0], u8[1]);
      t11.internalFormat = G.RGBA, t11.wrapMode = D.CLAMP_TO_EDGE, this._intensityFBO = new x(a4, t11);
    }
    for (let l7 = 0; l7 < this._nMips; l7++) {
      if (this._mipsFBOs[l7])
        this._mipsFBOs[l7].horizontal.resize(u8[0], u8[1]), this._mipsFBOs[l7].vertical.resize(u8[0], u8[1]);
      else {
        const t11 = new e4(u8[0], u8[1]);
        t11.internalFormat = G.RGBA, t11.wrapMode = D.CLAMP_TO_EDGE, this._mipsFBOs[l7] = { horizontal: new x(a4, t11), vertical: new x(a4, t11) };
      }
      u8[0] = Math.round(u8[0] / 2), u8[1] = Math.round(u8[1] / 2);
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Blur.js
var n8 = [1, 0];
var o9 = [0, 1];
var u6 = class {
  constructor() {
    this._blurFBO = null, this._size = [0, 0], this._programDesc = { gaussianBlur: { vsPath: "post-processing/pp", fsPath: "post-processing/blur/gaussianBlur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, radialBlur: { vsPath: "post-processing/pp", fsPath: "post-processing/blur/radial-blur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, blit: { vsPath: "post-processing/pp", fsPath: "post-processing/blit", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) } };
  }
  dispose() {
    this._blurFBO && (this._blurFBO.dispose(), this._blurFBO = null);
  }
  draw(t10, s6, r7) {
    const { context: i11 } = t10, { type: a4, radius: n10 } = r7;
    if (0 === n10)
      return;
    this._createOrResizeResources(t10), this._quad || (this._quad = new n5(i11, [-1, -1, 1, -1, -1, 1, 1, 1]));
    const o11 = this._quad;
    o11.bind(), "blur" === a4 ? this._gaussianBlur(t10, s6, n10) : this._radialBlur(t10, s6), o11.unbind();
  }
  _gaussianBlur(e8, s6, r7) {
    const { context: i11, state: a4, painter: u8, pixelRatio: l7 } = e8, { size: d5 } = a4, { materialManager: b } = u8, c4 = this._programDesc, _5 = this._quad, p = [Math.round(l7 * d5[0]), Math.round(l7 * d5[1])], h10 = this._blurFBO, m4 = b.getProgram(c4.gaussianBlur, [{ name: "radius", value: Math.ceil(r7) }]);
    i11.useProgram(m4), i11.setBlendingEnabled(false), i11.bindFramebuffer(h10), i11.bindTexture(s6.colorTexture, 4), m4.setUniform1i("u_colorTexture", 4), m4.setUniform2fv("u_texSize", p), m4.setUniform2fv("u_direction", n8), m4.setUniform1f("u_sigma", r7), _5.draw(), i11.bindFramebuffer(s6), i11.setStencilWriteMask(0), i11.setStencilTestEnabled(false), i11.setDepthWriteEnabled(false), i11.setDepthTestEnabled(false), i11.bindTexture(h10 == null ? void 0 : h10.colorTexture, 5), m4.setUniform1i("u_colorTexture", 5), m4.setUniform2fv("u_direction", o9), _5.draw(), i11.setBlendingEnabled(true), i11.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), i11.setStencilTestEnabled(true);
  }
  _radialBlur(e8, s6) {
    const { context: r7, painter: i11 } = e8, { materialManager: a4 } = i11, n10 = this._programDesc, o11 = this._quad, u8 = this._blurFBO;
    r7.bindFramebuffer(u8);
    const l7 = a4.getProgram(n10.radialBlur);
    r7.useProgram(l7), r7.setBlendingEnabled(false), r7.bindTexture(s6.colorTexture, 4), l7.setUniform1i("u_colorTexture", 4), o11.draw(), r7.bindFramebuffer(s6), r7.setStencilWriteMask(0), r7.setStencilTestEnabled(false), r7.setDepthWriteEnabled(false), r7.setDepthTestEnabled(false), r7.setBlendingEnabled(true);
    const d5 = a4.getProgram(n10.blit);
    r7.useProgram(d5), r7.bindTexture(u8 == null ? void 0 : u8.colorTexture, 5), d5.setUniform1i("u_texture", 5), r7.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), o11.draw();
  }
  _createOrResizeResources(e8) {
    const { context: t10, state: n10, pixelRatio: o11 } = e8, { size: u8 } = n10, l7 = Math.round(o11 * u8[0]), d5 = Math.round(o11 * u8[1]);
    if (!this._blurFBO || this._size[0] !== l7 || this._size[1] !== d5)
      if (this._size[0] = l7, this._size[1] = d5, this._blurFBO)
        this._blurFBO.resize(l7, d5);
      else {
        const e9 = new e4(l7, d5);
        e9.internalFormat = G.RGBA, e9.wrapMode = D.CLAMP_TO_EDGE, this._blurFBO = new x(t10, e9);
      }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Colorize.js
var n9 = class {
  constructor() {
    this._layerFBOTexture = null, this._size = [0, 0], this._programDesc = { vsPath: "post-processing/pp", fsPath: "post-processing/filterEffect", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) };
  }
  dispose() {
    this._layerFBOTexture = t(this._layerFBOTexture);
  }
  draw(e8, t10, s6) {
    const { width: i11, height: o11 } = t10;
    this._createOrResizeResources(e8, i11, o11);
    const { context: a4, painter: n10 } = e8, { materialManager: c4 } = n10, l7 = this._programDesc, u8 = this._quad, _5 = s6.colorMatrix;
    u8.bind();
    const h10 = this._layerFBOTexture;
    a4.bindFramebuffer(t10), t10.copyToTexture(0, 0, i11, o11, 0, 0, h10), a4.setBlendingEnabled(false), a4.setStencilTestEnabled(false);
    const m4 = c4.getProgram(l7);
    a4.useProgram(m4), a4.bindTexture(h10, 2), m4.setUniformMatrix4fv("u_coefficients", _5), m4.setUniform1i("u_colorTexture", 2), u8.draw(), a4.setBlendingEnabled(true), a4.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), a4.setStencilTestEnabled(true), u8.unbind();
  }
  _createOrResizeResources(e8, r7, n10) {
    const { context: c4 } = e8;
    if (!this._layerFBOTexture || this._size[0] !== r7 || this._size[1] !== n10) {
      if (this._size[0] = r7, this._size[1] = n10, this._layerFBOTexture)
        this._layerFBOTexture.resize(r7, n10);
      else {
        const e9 = new e4();
        e9.internalFormat = G.RGBA, e9.wrapMode = D.CLAMP_TO_EDGE, e9.width = r7, e9.height = n10, this._layerFBOTexture = new T2(c4, e9);
      }
      this._quad || (this._quad = new n5(c4, [-1, -1, 1, -1, -1, 1, 1, 1]));
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/DropShadow.js
var u7 = [1, 0];
var h9 = [0, 1];
var _4 = class {
  constructor() {
    this._layerFBOTexture = null, this._horizontalBlurFBO = null, this._verticalBlurFBO = null, this._size = [0, 0], this._quad = null, this._programDesc = { blur: { vsPath: "post-processing/pp", fsPath: "post-processing/blur/gaussianBlur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, composite: { vsPath: "post-processing/pp", fsPath: "post-processing/drop-shadow/composite", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, blit: { vsPath: "post-processing/pp", fsPath: "post-processing/blit", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) } };
  }
  dispose() {
    this._layerFBOTexture = t(this._layerFBOTexture), this._horizontalBlurFBO = t(this._horizontalBlurFBO), this._verticalBlurFBO = t(this._verticalBlurFBO);
  }
  draw(e8, i11, o11) {
    const { context: a4, state: n10, painter: l7 } = e8, { materialManager: _5 } = l7, c4 = this._programDesc, p = i11.width, m4 = i11.height, f4 = [Math.round(p), Math.round(m4)], { blurRadius: B2, offsetX: d5, offsetY: b, color: O2 } = o11, F3 = [u(d5), u(b)];
    this._createOrResizeResources(e8, p, m4, f4);
    const w3 = this._horizontalBlurFBO, T4 = this._verticalBlurFBO;
    a4.setStencilWriteMask(0), a4.setStencilTestEnabled(false), a4.setDepthWriteEnabled(false), a4.setDepthTestEnabled(false);
    const x2 = this._layerFBOTexture;
    i11.copyToTexture(0, 0, p, m4, 0, 0, x2), this._quad || (this._quad = new n5(a4, [-1, -1, 1, -1, -1, 1, 1, 1])), a4.setViewport(0, 0, f4[0], f4[1]);
    const g = this._quad;
    g.bind(), a4.setBlendingEnabled(false);
    const z = _5.getProgram(c4.blur, [{ name: "radius", value: Math.ceil(B2) }]);
    a4.useProgram(z), a4.bindFramebuffer(w3), a4.bindTexture(i11.colorTexture, 4), z.setUniform1i("u_colorTexture", 4), z.setUniform2fv("u_texSize", f4), z.setUniform2fv("u_direction", u7), z.setUniform1f("u_sigma", B2), g.draw(), a4.bindFramebuffer(T4), a4.bindTexture(w3 == null ? void 0 : w3.colorTexture, 5), z.setUniform1i("u_colorTexture", 5), z.setUniform2fv("u_direction", h9), g.draw(), a4.bindFramebuffer(i11), a4.setViewport(0, 0, p, m4);
    const M3 = _5.getProgram(c4.composite);
    a4.useProgram(M3), a4.bindTexture(T4 == null ? void 0 : T4.colorTexture, 2), M3.setUniform1i("u_blurTexture", 2), a4.bindTexture(x2, 3), M3.setUniform1i("u_layerFBOTexture", 3), M3.setUniform4fv("u_shadowColor", [O2[3] * (O2[0] / 255), O2[3] * (O2[1] / 255), O2[3] * (O2[2] / 255), O2[3]]), M3.setUniformMatrix3fv("u_displayViewMat3", n10.displayMat3), M3.setUniform2fv("u_shadowOffset", F3), g.draw(), a4.setBlendingEnabled(true), a4.setStencilTestEnabled(true), a4.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), g.unbind();
  }
  _createOrResizeResources(e8, t10, r7, s6) {
    const { context: u8 } = e8;
    if (!this._horizontalBlurFBO || this._size[0] !== t10 || this._size[1] !== r7) {
      if (this._size[0] = t10, this._size[1] = r7, this._horizontalBlurFBO)
        this._horizontalBlurFBO.resize(s6[0], s6[1]);
      else {
        const e9 = new e4(s6[0], s6[1]);
        e9.internalFormat = G.RGBA, e9.wrapMode = D.CLAMP_TO_EDGE, this._horizontalBlurFBO = new x(u8, e9);
      }
      if (this._verticalBlurFBO)
        this._verticalBlurFBO.resize(s6[0], s6[1]);
      else {
        const e9 = new e4(s6[0], s6[1]);
        e9.internalFormat = G.RGBA, e9.wrapMode = D.CLAMP_TO_EDGE, this._verticalBlurFBO = new x(u8, e9);
      }
      if (this._layerFBOTexture)
        this._layerFBOTexture.resize(t10, r7);
      else {
        const e9 = new e4();
        e9.internalFormat = G.RGBA, e9.wrapMode = D.CLAMP_TO_EDGE, e9.width = t10, e9.height = r7, this._layerFBOTexture = new T2(u8, e9);
      }
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Opacity.js
var l6 = class {
  constructor() {
    this._size = [0, 0], this._layerFBOTexture = null;
  }
  dispose() {
    this._layerFBOTexture = t(this._layerFBOTexture);
  }
  draw(e8, r7, s6) {
    const { width: i11, height: o11 } = r7;
    this._createOrResizeResources(e8, i11, o11);
    const { context: l7, painter: a4 } = e8, { amount: n10 } = s6, h10 = l7.gl, u8 = this._layerFBOTexture;
    l7.bindFramebuffer(r7), r7.copyToTexture(0, 0, i11, o11, 0, 0, u8), l7.setBlendingEnabled(true), l7.setStencilTestEnabled(false), l7.setDepthTestEnabled(false), l7.setClearColor(0, 0, 0, 0), l7.clear(h10.COLOR_BUFFER_BIT), a4.blitTexture(l7, u8, L.NEAREST, n10);
  }
  _createOrResizeResources(e8, l7, a4) {
    const { context: n10 } = e8;
    if (!this._layerFBOTexture || this._size[0] !== l7 || this._size[1] !== a4)
      if (this._size[0] = l7, this._size[1] = a4, this._layerFBOTexture)
        this._layerFBOTexture.resize(l7, a4);
      else {
        const e9 = new e4();
        e9.internalFormat = G.RGBA, e9.wrapMode = D.CLAMP_TO_EDGE, e9.samplingMode = L.NEAREST, e9.width = l7, e9.height = a4, this._layerFBOTexture = new T2(n10, e9);
      }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/EffectManager.js
function c3(o11) {
  switch (o11) {
    case "bloom":
    case "blur":
    case "opacity":
    case "drop-shadow":
      return o11;
    default:
      return "colorize";
  }
}
var f3 = { colorize: () => new n9(), blur: () => new u6(), bloom: () => new h8(), opacity: () => new l6(), "drop-shadow": () => new _4() };
var i10 = class {
  constructor() {
    this._effectMap = /* @__PURE__ */ new Map();
  }
  dispose() {
    this._effectMap.forEach((o11) => o11.dispose()), this._effectMap.clear();
  }
  getPostProcessingEffects(o11) {
    if (!o11 || 0 === o11.length)
      return [];
    const e8 = [];
    for (const t10 of o11) {
      const o12 = c3(t10.type);
      let s6 = this._effectMap.get(o12);
      s6 || (s6 = f3[o12](), this._effectMap.set(o12, s6)), e8.push({ postProcessingEffect: s6, effect: t10 });
    }
    return e8;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/painter/RenderPass.js
var o10 = class {
  constructor(e8, r7) {
    this.brushes = e8, this.name = r7.name, this.drawPhase = r7.drawPhase || T.MAP, this._targetFn = r7.target, this.effects = r7.effects || [], this.enableDefaultDraw = r7.enableDefaultDraw ?? (() => true), this.forceDrawByDisplayOrder = !!r7.forceDrawByDisplayOrder;
  }
  render(e8) {
    const { context: t10, profiler: r7 } = e8, s6 = this._targetFn(), n10 = this.drawPhase & e8.drawPhase;
    if (r7.recordPassStart(this.name), n10) {
      this.enableDefaultDraw() && this._doRender(e8, s6), r7.recordPassEnd();
      for (const r8 of this.effects) {
        if (!r8.enable())
          continue;
        const n11 = r8.apply, o11 = r8.args && r8.args(), a4 = t10.getViewport(), i11 = t10.getBoundFramebufferObject(), f4 = e8.passOptions;
        this._bindEffect(e8, n11, o11), this._doRender(e8, s6, n11.defines), this._drawAndUnbindEffect(e8, n11, a4, i11, f4, o11);
      }
    }
  }
  _doRender(e8, t10, o11) {
    if (null == t10)
      return;
    const { profiler: a4, context: i11 } = e8;
    if (this.forceDrawByDisplayOrder) {
      for (const r7 of this.brushes) {
        if (a4.recordBrushStart(r7.name), null != r7.brushEffect) {
          const s6 = i11.getViewport(), n10 = i11.getBoundFramebufferObject(), a5 = e8.passOptions;
          this._bindEffect(e8, r7.brushEffect), this._drawWithBrush(r7, e8, t10, o11), this._drawAndUnbindEffect(e8, r7.brushEffect, s6, n10, a5);
        } else
          this._drawWithBrush(r7, e8, t10, o11);
        a4.recordBrushEnd();
      }
      const f4 = t10, c4 = e8;
      c4.attributeView.bindTextures(e8.context);
      for (const e9 of f4) {
        if (!e9.visible)
          continue;
        e9.commit(c4), c4.context.setStencilFunction(I.EQUAL, e9.stencilRef, 255);
        const t11 = e9.getGeometry(E3.MARKER), a5 = e9.getGeometry(E3.TEXT);
        if (null != t11 && t11.records && null != a5 && a5.records) {
          const n10 = /* @__PURE__ */ new Map(), i12 = t11.records.getCursor();
          for (; i12.next(); )
            n10.set(i12.id, [i12.getDrawInfo(t11, E3.MARKER)]);
          const f5 = a5.records.getCursor();
          for (; f5.next(); ) {
            const e10 = n10.get(f5.id), t12 = f5.getDrawInfo(a5, E3.TEXT);
            e10 ? e10.push(t12) : n10.set(f5.id, [t12]);
          }
          const d5 = Array.from(n10.entries()).sort(([e10, t12], [r7, s6]) => r7 - e10);
          for (const [t12, r7] of d5)
            for (const n11 of r7) {
              const t13 = c4.painter.getBrush(n11.geometryType, S.DEFAULT);
              t13.prepareState(c4, o11), t13.drawGeometry(c4, e9, n11, o11);
            }
        } else if (t11) {
          const n10 = c4.painter.getBrush(E3.MARKER, S.DEFAULT);
          n10.prepareState(c4, o11), t11.forEachCommand((t12) => {
            n10.drawGeometry(c4, e9, t12, o11);
          });
        } else if (a5) {
          const t12 = c4.painter.getBrush(E3.TEXT, S.DEFAULT);
          t12.prepareState(c4, o11), a5.forEachCommand((r7) => {
            t12.drawGeometry(c4, e9, r7, o11);
          });
        }
      }
    } else
      for (const r7 of this.brushes) {
        if (a4.recordBrushStart(r7.name), null != r7.brushEffect) {
          const s6 = i11.getViewport(), n10 = i11.getBoundFramebufferObject(), a5 = e8.passOptions;
          this._bindEffect(e8, r7.brushEffect), this._drawWithBrush(r7, e8, t10, o11), this._drawAndUnbindEffect(e8, r7.brushEffect, s6, n10, a5);
        } else
          this._drawWithBrush(r7, e8, t10, o11);
        a4.recordBrushEnd();
      }
  }
  _drawWithBrush(t10, r7, s6, n10) {
    d(s6) ? (t10.prepareState(r7, n10), t10.drawMany(r7, s6, n10)) : s6.visible && (t10.prepareState(r7, n10), t10.draw(r7, s6, n10));
  }
  _bindEffect(e8, t10, r7) {
    const { profiler: s6 } = e8;
    s6.recordPassStart(this.name + "." + t10.name), t10.bind(e8, r7);
    const n10 = t10.createOptions(e8, r7);
    e8.passOptions = n10;
  }
  _drawAndUnbindEffect(e8, t10, r7, s6, n10, o11) {
    const { profiler: a4, context: i11 } = e8;
    e8.passOptions = n10, a4.recordBrushStart(t10.name), t10.draw(e8, o11), t10.unbind(e8, o11), i11.bindFramebuffer(s6);
    const { x: f4, y: c4, width: d5, height: h10 } = r7;
    i11.setViewport(f4, c4, d5, h10), a4.recordBrushEnd(), a4.recordPassEnd();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/Painter.js
function S2(e8, s6) {
  switch (e8) {
    case E3.LINE:
      return w2.line;
    case E3.TEXT:
      return w2.text;
    case E3.LABEL:
      return w2.label;
    case E3.FILL:
      return s6 === S.DOT_DENSITY ? w2.dotDensity : w2.fill;
    case E3.MARKER:
      switch (s6) {
        case S.HEATMAP:
          return w2.heatmap;
        case S.PIE_CHART:
          return w2.pieChart;
        default:
          return w2.marker;
      }
  }
}
var P3 = class {
  constructor(e8, t10, i11) {
    this.context = e8, this._blitRenderer = new _2(), this._worldExtentClipRenderer = new f2(), this._isClippedToWorldExtent = false, this._brushCache = /* @__PURE__ */ new Map(), this._lastWidth = null, this._lastHeight = null, this._prevFBO = null, this._vtlMaterialManager = new o4(), this._blendEffect = new m2(), this._stencilBuf = null, this._fbos = null, this._fboPool = [], this._renderTarget = null, this.effects = { highlight: new l4(), hittest: new o8(), hittestVTL: new i9(), integrate: new s5(), insideEffect: new r6("inside"), outsideEffect: new r6("outside") }, this.materialManager = new i8(e8), this.textureManager = new Y(t10, i11, e8.type === n2.WEBGL2), this.textureUploadManager = new n7(e8, t10), this._effectsManager = new i10();
  }
  get vectorTilesMaterialManager() {
    return this._vtlMaterialManager;
  }
  getRenderTarget() {
    return this._renderTarget;
  }
  setRenderTarget(e8) {
    this._renderTarget = e8;
  }
  getFbos(e8, t10) {
    if (e8 !== this._lastWidth || t10 !== this._lastHeight) {
      if (this._lastWidth = e8, this._lastHeight = t10, this._fbos) {
        let s7;
        for (s7 in this._fbos)
          this._fbos[s7].resize(e8, t10);
        return this._fbos;
      }
      const s6 = new e4(e8, t10);
      s6.samplingMode = L.NEAREST, s6.wrapMode = D.CLAMP_TO_EDGE;
      const r7 = new i3(B.DEPTH_STENCIL, e8, t10);
      this._stencilBuf = new n3(this.context, r7), this._fbos = { output: new x(this.context, s6, this._stencilBuf), blend: new x(this.context, s6, this._stencilBuf), effect0: new x(this.context, s6, this._stencilBuf) };
    }
    return this._fbos;
  }
  acquireFbo(e8, t10) {
    let s6;
    if (this._fboPool.length > 0)
      s6 = this._fboPool.pop();
    else {
      const r7 = new e4(e8, t10);
      r7.samplingMode = L.NEAREST, r7.wrapMode = D.CLAMP_TO_EDGE, s6 = new x(this.context, r7, this._stencilBuf);
    }
    return s6.width === e8 && s6.height === t10 || s6.resize(e8, t10), s6;
  }
  releaseFbo(e8) {
    this._fboPool.push(e8);
  }
  getSharedStencilBuffer() {
    return this._stencilBuf;
  }
  beforeRenderLayers(e8, t10 = null) {
    const { width: s6, height: r7 } = e8.getViewport();
    this._prevFBO = e8.getBoundFramebufferObject();
    const i11 = this.getFbos(s6, r7);
    if (e8.bindFramebuffer(i11 == null ? void 0 : i11.output), e8.setColorMask(true, true, true, true), null != t10) {
      const { r: s7, g: r8, b: i12, a: n10 } = t10;
      e8.setClearColor(n10 * s7 / 255, n10 * r8 / 255, n10 * i12 / 255, n10);
    } else
      e8.setClearColor(0, 0, 0, 0);
    e8.setDepthWriteEnabled(true), e8.setClearDepth(1), e8.clear(e8.gl.COLOR_BUFFER_BIT | e8.gl.DEPTH_BUFFER_BIT), e8.setDepthWriteEnabled(false);
  }
  beforeRenderLayer(e8, t10, s6) {
    var _a;
    const { context: r7, blendMode: i11, effects: n10, requireFBO: o11, drawPhase: l7 } = e8;
    if (o11 || L3(l7, i11, n10, s6))
      r7.bindFramebuffer((_a = this._fbos) == null ? void 0 : _a.blend), r7.setColorMask(true, true, true, true), r7.setClearColor(0, 0, 0, 0), r7.setDepthWriteEnabled(true), r7.setClearDepth(1), r7.clear(r7.gl.COLOR_BUFFER_BIT | r7.gl.DEPTH_BUFFER_BIT), r7.setDepthWriteEnabled(false);
    else {
      const e9 = this._getOutputFBO();
      r7.bindFramebuffer(e9);
    }
    r7.setDepthWriteEnabled(false), r7.setDepthTestEnabled(false), r7.setStencilTestEnabled(true), r7.setClearStencil(t10), r7.setStencilWriteMask(255), r7.clear(r7.gl.STENCIL_BUFFER_BIT);
  }
  compositeLayer(e8, t10) {
    const { context: s6, blendMode: r7, effects: n10, requireFBO: o11, drawPhase: l7 } = e8;
    if (o11 || L3(l7, r7, n10, t10)) {
      null != n10 && n10.length > 0 && l7 === T.MAP && this._applyEffects(e8, n10);
      const o12 = this._getOutputFBO();
      s6.bindFramebuffer(o12), s6.setStencilTestEnabled(false), s6.setStencilWriteMask(0), s6.setBlendingEnabled(true), s6.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), s6.setColorMask(true, true, true, true);
      const a4 = null == r7 || l7 === T.HIGHLIGHT ? "normal" : r7, f4 = this._fbos;
      (f4 == null ? void 0 : f4.blend.colorTexture) && this._blendEffect.draw(e8, f4.blend.colorTexture, L.NEAREST, a4, t10);
    }
  }
  renderLayers(e8) {
    e8.bindFramebuffer(this._prevFBO);
    const t10 = this._getOutputFBO();
    t10 && (e8.setDepthTestEnabled(false), e8.setStencilWriteMask(0), this._isClippedToWorldExtent ? (e8.setStencilTestEnabled(true), e8.setStencilFunction(I.EQUAL, 1, 255)) : e8.setStencilTestEnabled(false), this.blitTexture(e8, t10.colorTexture, L.NEAREST));
  }
  prepareDisplay(e8, t10, s6) {
    const { context: r7 } = e8;
    if (r7.bindFramebuffer(this._prevFBO), r7.setColorMask(true, true, true, true), null != t10) {
      const { r: e9, g: s7, b: i11, a: n10 } = t10;
      r7.setClearColor(n10 * e9 / 255, n10 * s7 / 255, n10 * i11 / 255, n10);
    } else
      r7.setClearColor(0, 0, 0, 0);
    r7.setStencilWriteMask(255), r7.setClearStencil(0), r7.clear(r7.gl.COLOR_BUFFER_BIT | r7.gl.STENCIL_BUFFER_BIT), this._isClippedToWorldExtent = this._worldExtentClipRenderer.render(e8, s6);
  }
  dispose() {
    if (this.materialManager.dispose(), this.textureManager.dispose(), this.textureUploadManager.destroy(), this._blitRenderer = t(this._blitRenderer), this._worldExtentClipRenderer = t(this._worldExtentClipRenderer), this._brushCache && (this._brushCache.forEach((e8) => e8.dispose()), this._brushCache.clear(), this._brushCache = null), this._fbos) {
      let e8;
      for (e8 in this._fbos)
        this._fbos[e8] && this._fbos[e8].dispose();
    }
    for (const e8 of this._fboPool)
      e8.dispose();
    if (this._fboPool.length = 0, this.effects) {
      let e8;
      for (e8 in this.effects)
        this.effects[e8] && this.effects[e8].dispose();
    }
    this._effectsManager.dispose(), this._vtlMaterialManager = t(this._vtlMaterialManager), this._prevFBO = null;
  }
  getBrush(e8, t10) {
    const s6 = S2(e8, t10);
    let r7 = this._brushCache.get(s6);
    return void 0 === r7 && (r7 = new s6(), this._brushCache.set(s6, r7)), r7;
  }
  renderObject(e8, s6, r7, i11) {
    const n10 = w2[r7];
    if (!n10)
      return;
    let o11 = this._brushCache.get(n10);
    void 0 === o11 && (o11 = new n10(), this._brushCache.set(n10, o11)), o11.prepareState(e8, i11), o11.draw(e8, s6, i11);
  }
  renderObjects(e8, s6, r7, i11) {
    const n10 = w2[r7];
    if (!n10)
      return;
    let o11 = this._brushCache.get(n10);
    void 0 === o11 && (o11 = new n10(), this._brushCache.set(n10, o11)), o11.drawMany(e8, s6, i11);
  }
  registerRenderPass(e8) {
    const t10 = e8.brushes.map((e9) => (this._brushCache.has(e9) || this._brushCache.set(e9, new e9()), this._brushCache.get(e9)));
    return new o10(t10, e8);
  }
  blitTexture(e8, t10, s6, r7 = 1) {
    e8.setBlendingEnabled(true), e8.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), e8.setColorMask(true, true, true, true), this._blitRenderer.render(e8, t10, s6, r7);
  }
  getPostProcessingEffects(e8) {
    return this._effectsManager.getPostProcessingEffects(e8);
  }
  _getOutputFBO() {
    var _a;
    return null != this._renderTarget ? this._renderTarget : ((_a = this._fbos) == null ? void 0 : _a.output) ?? null;
  }
  _applyEffects(e8, t10) {
    var _a;
    const s6 = (_a = this._fbos) == null ? void 0 : _a.blend;
    if (!s6)
      return;
    const { context: r7 } = e8, i11 = this._effectsManager.getPostProcessingEffects(t10);
    for (const { postProcessingEffect: n10, effect: o11 } of i11)
      r7.bindFramebuffer(s6), n10.draw(e8, s6, o11);
  }
};
function L3(e8, t10, s6, r7) {
  return e8 !== T.HIGHLIGHT && (1 !== r7 || null != t10 && "normal" !== t10 || null != s6 && s6.length > 0);
}

// node_modules/@arcgis/core/views/2d/engine/Stage.js
var j2 = 2e3;
var T3 = class extends h5 {
  constructor(r7, i11) {
    super(), this._trash = /* @__PURE__ */ new Set(), this._renderRemainingTime = 0, this._lastFrameRenderTime = 0, this.renderRequested = false, this.stage = this, this._stationary = true;
    const { canvas: a4 = document.createElement("canvas"), alpha: h10 = true, stencil: p = true, contextOptions: u8 = {} } = i11;
    this._canvas = a4;
    const f4 = o3("2d", a4, { alpha: h10, antialias: false, depth: true, stencil: p });
    this.context = new P2(f4 ?? null, u8), this.resourceManager = new h4(), this.painter = new P3(this.context, this, this.resourceManager), has("esri-2d-profiler") && (this._debugOutput = document.createElement("div"), this._debugOutput.setAttribute("style", "margin: 24px 64px; position: absolute; color: red;"), r7.appendChild(this._debugOutput));
    const _5 = () => this._highlightGradient;
    this._renderParameters = { drawPhase: 0, state: this.state, pixelRatio: window.devicePixelRatio, stationary: false, globalOpacity: 1, blendMode: null, deltaTime: -1, time: 0, inFadeTransition: false, effects: null, context: this.context, painter: this.painter, timeline: i11.timeline || new e7(), renderingOptions: i11.renderingOptions, requestRender: () => this.requestRender(), allowDelayedRender: false, requireFBO: false, profiler: new n6(this.context, this._debugOutput), dataUploadCounter: 0, get highlightGradient() {
      return _5();
    } }, this._taskHandle = A({ render: (e8) => this.renderFrame(e8) }), this._taskHandle.pause(), this._lostWebGLContextHandle = r(a4, "webglcontextlost", (t10) => {
      this.emit("webgl-error", { error: new s("webgl-context-lost", t10.statusMessage) });
    }), this._bufferPool = new i6(), a4.setAttribute("style", "width: 100%; height:100%; display:block;"), r7.appendChild(a4);
  }
  destroy() {
    var _a, _b, _c;
    this.removeAllChildren(), this._emptyTrash(), this._taskHandle = o(this._taskHandle), this._lostWebGLContextHandle = o(this._lostWebGLContextHandle), (_a = this._canvas.parentNode) == null ? void 0 : _a.removeChild(this._canvas), (_c = (_b = this._debugOutput) == null ? void 0 : _b.parentNode) == null ? void 0 : _c.removeChild(this._debugOutput), this._bufferPool.destroy(), this.resourceManager.destroy(), this.painter.dispose(), this.context.dispose(), this._canvas = null;
  }
  get backgroundColor() {
    return this._backgroundColor;
  }
  set backgroundColor(e8) {
    this._backgroundColor = e8, this.requestRender();
  }
  get bufferPool() {
    return this._bufferPool;
  }
  get renderingOptions() {
    return this._renderingOptions;
  }
  set renderingOptions(e8) {
    this._renderingOptions = e8, this.requestRender();
  }
  get state() {
    return this._state;
  }
  set state(e8) {
    this._state = e8, this.requestRender();
  }
  get stationary() {
    return this._stationary;
  }
  set stationary(e8) {
    this._stationary !== e8 && (this._stationary = e8, this.requestRender());
  }
  trashDisplayObject(e8) {
    this._trash.add(e8), this.requestRender();
  }
  untrashDisplayObject(e8) {
    return this._trash.delete(e8);
  }
  requestRender() {
    this._renderRemainingTime = j2, this.renderRequested || (this.renderRequested = true, this.emit("will-render"), this._taskHandle.resume());
  }
  renderFrame(e8) {
    const t10 = this._lastFrameRenderTime ? e8.time - this._lastFrameRenderTime : 0;
    this._renderRemainingTime -= t10, this._renderRemainingTime <= 0 && this._taskHandle.pause(), this._lastFrameRenderTime = e8.time, this.renderRequested = false, this._renderParameters.state = this._state, this._renderParameters.stationary = this.stationary, this._renderParameters.pixelRatio = window.devicePixelRatio, this._renderParameters.globalOpacity = 1, this._renderParameters.time = e8.time, this._renderParameters.deltaTime = e8.deltaTime, this._renderParameters.effects = null, this.processRender(this._renderParameters), this._emptyTrash(), this.emit("post-render");
  }
  _createTransforms() {
    return { dvs: e3() };
  }
  renderChildren(e8) {
    for (const t10 of this.children)
      t10.beforeRender(e8);
    this._renderChildren(this.children, e8);
    for (const t10 of this.children)
      t10.afterRender(e8);
  }
  _renderChildren(e8, t10) {
    const r7 = this.context;
    this.painter.textureUploadManager.upload(), r7.resetInfo(), t10.profiler.recordStart("drawLayers"), t10.dataUploadCounter = 0, t10.drawPhase = T.MAP, this.painter.beforeRenderLayers(r7, this.backgroundColor);
    for (const s6 of e8)
      s6.processRender(t10);
    this.painter.prepareDisplay(t10, this.backgroundColor, this.state.padding), this.painter.renderLayers(r7), t10.drawPhase = T.HIGHLIGHT, this.painter.beforeRenderLayers(r7);
    for (const s6 of e8)
      s6.processRender(t10);
    this.painter.renderLayers(r7);
    if (this._isLabelDrawPhaseRequired(e8)) {
      t10.drawPhase = T.LABEL, this.painter.beforeRenderLayers(r7);
      for (const r8 of e8)
        r8.processRender(t10);
      this.painter.renderLayers(r7);
    }
    if (has("esri-tiles-debug")) {
      t10.drawPhase = T.DEBUG, this.painter.beforeRenderLayers(r7);
      for (const r8 of e8)
        r8.processRender(t10);
      this.painter.renderLayers(r7);
    }
    t10.profiler.recordEnd("drawLayers"), r7.logInfo();
  }
  doRender(e8) {
    const t10 = this.context, { state: r7, pixelRatio: s6 } = e8;
    this._resizeCanvas(e8), t10.setViewport(0, 0, s6 * r7.size[0], s6 * r7.size[1]), t10.setDepthWriteEnabled(true), t10.setStencilWriteMask(255), super.doRender(e8);
  }
  async takeScreenshot(e8) {
    const t10 = Math.round(this.state.size[0] * e8.resolutionScale), r7 = Math.round(this.state.size[1] * e8.resolutionScale), s6 = e8.resolutionScale, i11 = this.context, n10 = this._state.clone();
    if (null != e8.rotation) {
      const t11 = n10.viewpoint;
      n10.viewpoint.rotation = e8.rotation, n10.viewpoint = t11;
    }
    const a4 = { ...this._renderParameters, drawPhase: null, globalOpacity: 1, stationary: true, state: n10, pixelRatio: s6, time: performance.now(), deltaTime: 0, blendMode: null, effects: null, inFadeTransition: false }, o11 = n4(i11.gl), h10 = new e4(t10, r7);
    h10.wrapMode = D.CLAMP_TO_EDGE, h10.internalFormat = o11 ? P.RGBA8 : G.RGBA, h10.isImmutable = o11;
    const d5 = new x(i11, h10, new i3(B.DEPTH_STENCIL, t10, r7)), l7 = i11.getBoundFramebufferObject(), c4 = i11.getViewport();
    i11.bindFramebuffer(d5), i11.setViewport(0, 0, t10, r7), this._renderChildren(e8.children, a4);
    const m4 = this._readbackScreenshot(d5, { ...e8.cropArea, y: r7 - (e8.cropArea.y + e8.cropArea.height) });
    i11.bindFramebuffer(l7), i11.setViewport(c4.x, c4.y, c4.width, c4.height), this.requestRender();
    const b = await m4;
    let y2;
    return 1 === e8.outputScale ? y2 = b : (y2 = new ImageData(Math.round(b.width * e8.outputScale), Math.round(b.height * e8.outputScale)), w(b, y2, true)), d5.dispose(), y2;
  }
  async _readbackScreenshot(e8, t10) {
    const r7 = e2(t10.width, t10.height, document.createElement("canvas"));
    return await e8.readPixelsAsync(t10.x, t10.y, t10.width, t10.height, G.RGBA, U.UNSIGNED_BYTE, new Uint8Array(r7.data.buffer)), r7;
  }
  _resizeCanvas(e8) {
    const t10 = this._canvas, r7 = t10.style, { state: { size: s6 }, pixelRatio: i11 } = e8, n10 = s6[0], a4 = s6[1], o11 = Math.round(n10 * i11), h10 = Math.round(a4 * i11);
    t10.width === o11 && t10.height === h10 || (t10.width = o11, t10.height = h10), r7.width = n10 + "px", r7.height = a4 + "px";
  }
  _emptyTrash() {
    for (; this._trash.size > 0; ) {
      const e8 = Array.from(this._trash);
      this._trash.clear();
      for (const t10 of e8)
        t10.processDetach();
    }
  }
  _isLabelDrawPhaseRequired(e8) {
    let t10 = false;
    for (const r7 of e8) {
      if (!(r7 instanceof h5)) {
        t10 = t10 || false;
        break;
      }
      if ("hasLabels" in r7 && r7.hasLabels)
        return true;
      t10 = t10 || this._isLabelDrawPhaseRequired(r7.children);
    }
    return t10;
  }
};

// node_modules/@arcgis/core/views/2d/magnifier/MagnifierView2D.js
var A2 = class extends i4 {
  constructor() {
    super(), this._handles = new t2(), this._resourcePixelRatio = 1, this.visible = false;
  }
  destroy() {
    this._handles = l(this._handles), this._disposeRenderResources(), this._resourcesTask = e(this._resourcesTask);
  }
  get backgroundColor() {
    return this._backgroundColor;
  }
  set backgroundColor(e8) {
    this._backgroundColor = e8, this.requestRender();
  }
  get magnifier() {
    return this._magnifier;
  }
  set magnifier(e8) {
    this._magnifier = e8, this._handles.removeAll(), this._handles.add([l2(() => e8.version, () => {
      this.visible = e8.visible && null != e8.position && e8.size > 0, this.requestRender();
    }, h2), l2(() => [e8.maskUrl, e8.overlayUrl], () => this._reloadResources()), l2(() => e8.size, () => {
      this._disposeRenderResources(), this.requestRender();
    })]);
  }
  _createTransforms() {
    return { dvs: e3() };
  }
  doRender(e8) {
    const r7 = e8.context;
    if (!this._resourcesTask)
      return void this._reloadResources();
    if (e8.drawPhase !== T.MAP || !this._canRender())
      return;
    this._updateResources(e8);
    const s6 = this._magnifier;
    if (null == s6.position)
      return;
    const i11 = e8.pixelRatio, o11 = s6.size * i11, a4 = 1 / s6.factor, n10 = Math.ceil(a4 * o11);
    this._readbackTexture.resize(n10, n10);
    const { size: l7 } = e8.state, h10 = i11 * l7[0], u8 = i11 * l7[1], m4 = 0.5 * n10, c4 = 0.5 * n10, _5 = i2(i11 * s6.position.x, m4, h10 - m4 - 1), p = i2(u8 - i11 * s6.position.y, c4, u8 - c4 - 1);
    r7.setBlendingEnabled(true);
    const f4 = _5 - m4, g = p - c4, b = this._readbackTexture;
    r7.bindTexture(b, 0), r7.gl.copyTexImage2D(b.descriptor.target, 0, b.descriptor.pixelFormat, f4, g, n10, n10, 0);
    const T4 = this.backgroundColor, y2 = T4 ? [T4.a * T4.r / 255, T4.a * T4.g / 255, T4.a * T4.b / 255, T4.a] : [1, 1, 1, 1], k = (_5 + s6.offset.x * i11) / h10 * 2 - 1, R3 = (p - s6.offset.y * i11) / u8 * 2 - 1, v = o11 / h10 * 2, j3 = o11 / u8 * 2, A3 = this._program;
    r7.bindVAO(this._vertexArrayObject), r7.bindTexture(this._overlayTexture, 6), r7.bindTexture(this._maskTexture, 7), r7.useProgram(A3), A3.setUniform4fv("u_background", y2), A3.setUniform1i("u_readbackTexture", 0), A3.setUniform1i("u_overlayTexture", 6), A3.setUniform1i("u_maskTexture", 7), A3.setUniform4f("u_drawPos", k, R3, v, j3), A3.setUniform1i("u_maskEnabled", s6.maskEnabled ? 1 : 0), A3.setUniform1i("u_overlayEnabled", s6.overlayEnabled ? 1 : 0), r7.setStencilTestEnabled(false), r7.setColorMask(true, true, true, true), r7.drawArrays(E.TRIANGLE_STRIP, 0, 4), r7.bindVAO();
  }
  _canRender() {
    return this.mask && this.overlay && null != this._magnifier;
  }
  _reloadResources() {
    this._resourcesTask && this._resourcesTask.abort();
    const s6 = null != this._magnifier ? this._magnifier.maskUrl : null, t10 = null != this._magnifier ? this._magnifier.overlayUrl : null;
    this._resourcesTask = d2(async (r7) => {
      const i11 = null == s6 || null == t10 ? s3(r7) : null, o11 = null != s6 ? j(s6, { responseType: "image", signal: r7 }).then((e8) => e8.data) : i11.then((e8) => e8.mask), a4 = null != t10 ? j(t10, { responseType: "image", signal: r7 }).then((e8) => e8.data) : i11.then((e8) => e8.overlay), [n10, l7] = await Promise.all([o11, a4]);
      this.mask = n10, this.overlay = l7, this._disposeRenderResources(), this.requestRender();
    });
  }
  _disposeRenderResources() {
    this._readbackTexture = t(this._readbackTexture), this._overlayTexture = t(this._overlayTexture), this._maskTexture = t(this._maskTexture), this._vertexArrayObject = t(this._vertexArrayObject), this._program = t(this._program);
  }
  _updateResources(e8) {
    if (e8.pixelRatio !== this._resourcePixelRatio && this._disposeRenderResources(), this._readbackTexture)
      return;
    const r7 = e8.context;
    this._resourcePixelRatio = e8.pixelRatio;
    const s6 = Math.ceil(this._magnifier.size * e8.pixelRatio);
    this._program = t8(r7);
    const t10 = new Uint16Array([0, 1, 0, 0, 1, 1, 1, 0]), i11 = a.attributes;
    this._vertexArrayObject = new u2(r7, i11, m, { geometry: c.createVertex(r7, F.STATIC_DRAW, t10) }), this.overlay.width = s6, this.overlay.height = s6;
    const o11 = new e4();
    o11.internalFormat = G.RGBA, o11.wrapMode = D.CLAMP_TO_EDGE, o11.samplingMode = L.NEAREST, o11.flipped = true, o11.preMultiplyAlpha = !vt(this.overlay.src) || !e8.context.driverTest.svgPremultipliesAlpha.result, this._overlayTexture = new T2(r7, o11, this.overlay), this.mask.width = s6, this.mask.height = s6, o11.pixelFormat = o11.internalFormat = G.ALPHA, this._maskTexture = new T2(r7, o11, this.mask);
    const a4 = 1 / this._magnifier.factor;
    o11.pixelFormat = o11.internalFormat = G.RGBA, o11.width = o11.height = Math.ceil(a4 * s6), o11.samplingMode = L.LINEAR, o11.flipped = false, this._readbackTexture = new T2(r7, o11);
  }
};
export {
  i7 as GraphicContainer,
  oe as GraphicsView2D,
  d3 as LabelManager,
  A2 as MagnifierView2D,
  y as MapViewNavigation,
  T3 as Stage
};
//# sourceMappingURL=mapViewDeps-CDPYMB6A.js.map
