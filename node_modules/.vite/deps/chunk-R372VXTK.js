import {
  n as n2
} from "./chunk-K5QQ6UU5.js";
import {
  n
} from "./chunk-R7LS3BCI.js";
import {
  L
} from "./chunk-FKEHFW5J.js";

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/Programs.js
var t = (e) => n2({ ID: e.id, PATTERN: e.pattern });
var a = { shaders: (r) => ({ vertexShader: t(r) + n("background/background.vert"), fragmentShader: t(r) + n("background/background.frag") }) };
var d = (e) => n2({ ID: e.id });
var i = { shaders: (r) => ({ vertexShader: d(r) + n("circle/circle.vert"), fragmentShader: d(r) + n("circle/circle.frag") }) };
var n3 = (e) => n2({ ID: e.id, PATTERN: e.pattern });
var l = { shaders: (r) => ({ vertexShader: n3(r) + n("fill/fill.vert"), fragmentShader: n3(r) + n("fill/fill.frag") }) };
var s = (e) => n2({ ID: e.id });
var f = { shaders: (r) => ({ vertexShader: s(r) + n("outline/outline.vert"), fragmentShader: s(r) + n("outline/outline.frag") }) };
var h = (e) => n2({ ID: e.id, SDF: e.sdf });
var o = { shaders: (r) => ({ vertexShader: h(r) + n("icon/icon.vert"), fragmentShader: h(r) + n("icon/icon.frag") }) };
var g = (e) => n2({ ID: e.id, PATTERN: e.pattern, SDF: e.sdf });
var c = { shaders: (r) => ({ vertexShader: g(r) + n("line/line.vert"), fragmentShader: g(r) + n("line/line.frag") }) };
var S = (e) => n2({ ID: e.id });
var v = { shaders: (r) => ({ vertexShader: S(r) + n("text/text.vert"), fragmentShader: S(r) + n("text/text.frag") }) };

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/VTLMaterialManager.js
var o2 = class {
  constructor() {
    this._programByKey = /* @__PURE__ */ new Map();
  }
  dispose() {
    this._programByKey.forEach((e) => e.dispose()), this._programByKey.clear();
  }
  getMaterialProgram(e, r, t2) {
    const a2 = r.key << 3 | this._getMaterialOptionsValue(r.type, t2);
    if (this._programByKey.has(a2))
      return this._programByKey.get(a2);
    const s2 = this._getProgramTemplate(r.type), { shaders: n4 } = s2, { vertexShader: c2, fragmentShader: i2 } = n4(t2), o3 = r.getShaderHeader(), u = r.getShaderMain(), p = c2.replace("#pragma header", o3).replace("#pragma main", u), g2 = e.programCache.acquire(p, i2, r.getAttributeLocations());
    return this._programByKey.set(a2, g2), g2;
  }
  _getMaterialOptionsValue(r, t2) {
    switch (r) {
      case L.BACKGROUND: {
        const e = t2;
        return (e.pattern ? 1 : 0) << 1 | (e.id ? 1 : 0);
      }
      case L.FILL: {
        const e = t2;
        return (e.pattern ? 1 : 0) << 1 | (e.id ? 1 : 0);
      }
      case L.OUTLINE:
        return t2.id ? 1 : 0;
      case L.LINE: {
        const e = t2;
        return (e.sdf ? 1 : 0) << 2 | (e.pattern ? 1 : 0) << 1 | (e.id ? 1 : 0);
      }
      case L.ICON: {
        const e = t2;
        return (e.sdf ? 1 : 0) << 1 | (e.id ? 1 : 0);
      }
      case L.CIRCLE:
        return t2.id ? 1 : 0;
      case L.TEXT:
        return t2.id ? 1 : 0;
      default:
        return 0;
    }
  }
  _getProgramTemplate(o3) {
    switch (o3) {
      case L.BACKGROUND:
        return a;
      case L.CIRCLE:
        return i;
      case L.FILL:
        return l;
      case L.ICON:
        return o;
      case L.LINE:
        return c;
      case L.OUTLINE:
        return f;
      case L.TEXT:
        return v;
      default:
        return null;
    }
  }
};

export {
  o2 as o
};
//# sourceMappingURL=chunk-R372VXTK.js.map
