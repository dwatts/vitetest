import {
  n
} from "./chunk-ZGOWGH4U.js";
import {
  s
} from "./chunk-Z3NHJA5D.js";
import {
  i2 as i
} from "./chunk-BO2REVMA.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  O
} from "./chunk-BN6X2OXK.js";

// node_modules/@arcgis/core/chunks/EdgeDetect.glsl.js
var l = { threshold: 0.05, localConstrastAdaption: 2 };
function s2() {
  const s3 = new i(), { attributes: d2, varyings: x, vertex: i2, fragment: c } = s3;
  return d2.add(O.POSITION, "vec2"), n(i2), x.add("uv", "vec2"), x.add("offsets[3]", "vec4"), i2.code.add(o`void main() {
uv = position * 0.5 + vec2(0.5);
gl_Position = vec4(position, 0, 1);
offsets[0] = uv.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0,  1.0 );
offsets[1] = uv.xyxy + resolution.xyxy * vec4(  1.0, 0.0, 0.0, -1.0 );
offsets[2] = uv.xyxy + resolution.xyxy * vec4( -2.0, 0.0, 0.0,  2.0 );
}`), c.uniforms.add(new s("colorTexture", (e) => e.colorTexture)), c.code.add(o`
    float absMax3(vec3 v) {
      vec3 t = abs(v);
      return max(max(t.r, t.g), t.b);
    }

    void main() {
      // Calculate color deltas:
      vec4 delta;
      vec3 C = texture(colorTexture, uv).rgb;

      vec3 Cleft = texture(colorTexture, offsets[0].xy).rgb;
      delta.x = absMax3(C - Cleft);

      vec3 Ctop = texture(colorTexture, offsets[0].zw).rgb;
      delta.y = absMax3(C - Ctop);

      vec2 edges = step(vec2(${o.float(l.threshold)}), delta.xy);

      // discard if there is no edge:
      if (dot(edges, vec2(1.0)) == 0.0) {
        discard;
      }

      // Calculate right and bottom deltas:
      vec3 Cright = texture(colorTexture, offsets[1].xy).rgb;
      delta.z = absMax3(C - Cright);

      vec3 Cbottom  = texture(colorTexture, offsets[1].zw).rgb;
      delta.w = absMax3(C - Cbottom);

      // Calculate the maximum delta in the direct neighborhood:
      float maxDelta = max(max(max(delta.x, delta.y), delta.z), delta.w);

      // Calculate left-left and top-top deltas:
      vec3 Cleftleft  = texture(colorTexture, offsets[2].xy).rgb;
      delta.z = absMax3(C - Cleftleft);

      vec3 Ctoptop = texture(colorTexture, offsets[2].zw).rgb;
      delta.w = absMax3(C - Ctoptop);

      // Calculate the final maximum delta:
      maxDelta = max(max(maxDelta, delta.z), delta.w);

      // Local contrast adaptation in action:
      edges.xy *= step(maxDelta, float(${o.float(l.localConstrastAdaption)}) * delta.xy);

      fragColor = vec4(edges, 0.0, 0.0);
    }
  `), s3;
}
var d = Object.freeze(Object.defineProperty({ __proto__: null, build: s2 }, Symbol.toStringTag, { value: "Module" }));

export {
  s2 as s,
  d
};
//# sourceMappingURL=chunk-XNWXRFSS.js.map
