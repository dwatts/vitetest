import {
  e
} from "./chunk-3TDCCT2R.js";
import {
  l
} from "./chunk-D7YAG5U3.js";
import {
  o as o5
} from "./chunk-LGDKASPG.js";
import {
  g
} from "./chunk-JHDKOKT6.js";
import {
  o as o3
} from "./chunk-CG3URTR2.js";
import {
  n
} from "./chunk-IBJTEQQG.js";
import {
  o as o2
} from "./chunk-SADO52IH.js";
import {
  e as e3
} from "./chunk-WVOBJDWI.js";
import {
  i,
  t as t2
} from "./chunk-LIO6VZRI.js";
import {
  h
} from "./chunk-73PNWDTS.js";
import {
  t
} from "./chunk-PKS3ZVLN.js";
import {
  P
} from "./chunk-N3RXOITN.js";
import {
  f,
  p
} from "./chunk-DOR4M5EA.js";
import {
  e as e2
} from "./chunk-QS45OHBM.js";
import {
  o as o4
} from "./chunk-UUW6REOV.js";
import {
  i2
} from "./chunk-BO2REVMA.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  O
} from "./chunk-BN6X2OXK.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/PatternStyle.js
var a;
!function(a2) {
  a2[a2.Horizontal = 0] = "Horizontal", a2[a2.Vertical = 1] = "Vertical", a2[a2.Cross = 2] = "Cross", a2[a2.ForwardDiagonal = 3] = "ForwardDiagonal", a2[a2.BackwardDiagonal = 4] = "BackwardDiagonal", a2[a2.DiagonalCross = 5] = "DiagonalCross", a2[a2.COUNT = 6] = "COUNT";
}(a || (a = {}));

// node_modules/@arcgis/core/chunks/Pattern.glsl.js
var S = 0.70710678118;
var j = S;
var C = 0.08715574274;
function T(T2) {
  const P3 = new i2(), R = T2.hasMultipassTerrain && (T2.output === h.Color || T2.output === h.Alpha), { vertex: $, fragment: D, attributes: V, varyings: A } = P3;
  p($, T2), P3.include(o3, T2), P3.include(e, T2), P3.include(l, T2), T2.draped ? $.uniforms.add(new o4("worldToScreenRatio", (e4, o6) => 1 / o6.screenToPCSRatio)) : V.add(O.BOUNDINGRECT, "mat3"), V.add(O.POSITION, "vec3"), V.add(O.UVMAPSPACE, "vec4"), T2.vvColor && V.add(O.COLORFEATUREATTRIBUTE, "float"), A.add("vColor", "vec4"), A.add("vpos", "vec3"), A.add("vuv", "vec2"), R && A.add("depth", "float"), $.uniforms.add(new e2("uColor", (e4) => e4.color));
  const L = T2.style === a.ForwardDiagonal || T2.style === a.BackwardDiagonal || T2.style === a.DiagonalCross;
  L && $.code.add(o`
      const mat2 rotate45 = mat2(${o.float(S)}, ${o.float(-j)},
                                 ${o.float(j)}, ${o.float(S)});
    `), T2.draped || (f($, T2), $.uniforms.add(new o4("worldToScreenPerDistanceRatio", (e4, o6) => 1 / o6.camera.perScreenPixelRatio)), $.code.add(o`vec3 projectPointToLineSegment(vec3 center, vec3 halfVector, vec3 point) {
float projectedLength = dot(halfVector, point - center) / dot(halfVector, halfVector);
return center + halfVector * clamp(projectedLength, -1.0, 1.0);
}`), $.code.add(o`vec3 intersectRayPlane(vec3 rayDir, vec3 rayOrigin, vec3 planeNormal, vec3 planePoint) {
float d = dot(planeNormal, planePoint);
float t = (d - dot(planeNormal, rayOrigin)) / dot(planeNormal, rayDir);
return rayOrigin + t * rayDir;
}`), $.code.add(o`
      float boundingRectDistanceToCamera() {
        vec3 center = vec3(boundingRect[0][0], boundingRect[0][1], boundingRect[0][2]);
        vec3 halfU = vec3(boundingRect[1][0], boundingRect[1][1], boundingRect[1][2]);
        vec3 halfV = vec3(boundingRect[2][0], boundingRect[2][1], boundingRect[2][2]);
        vec3 n = normalize(cross(halfU, halfV));

        vec3 viewDir = - vec3(view[0][2], view[1][2], view[2][2]);

        float viewAngle = dot(viewDir, n);
        float minViewAngle = ${o.float(C)};

        if (abs(viewAngle) < minViewAngle) {
          // view direction is (almost) parallel to plane -> clamp it to min angle
          float normalComponent = sign(viewAngle) * minViewAngle - viewAngle;
          viewDir = normalize(viewDir + normalComponent * n);
        }

        // intersect view direction with infinite plane that contains bounding rect
        vec3 planeProjected = intersectRayPlane(viewDir, cameraPosition, n, center);

        // clip to bounds by projecting to u and v line segments individually
        vec3 uProjected = projectPointToLineSegment(center, halfU, planeProjected);
        vec3 vProjected = projectPointToLineSegment(center, halfV, planeProjected);

        // use to calculate the closest point to camera on bounding rect
        vec3 closestPoint = uProjected + vProjected - center;

        return length(closestPoint - cameraPosition);
      }
    `)), $.code.add(o`
    vec2 scaledUV() {
      vec2 uv = uvMapSpace.xy ${L ? " * rotate45" : ""};
      vec2 uvCellOrigin = uvMapSpace.zw ${L ? " * rotate45" : ""};

      ${T2.draped ? "" : o`
            float distanceToCamera = boundingRectDistanceToCamera();
            float worldToScreenRatio = worldToScreenPerDistanceRatio / distanceToCamera;
          `}

      // Logarithmically discretize ratio to avoid jittering
      float step = 0.1;
      float discreteWorldToScreenRatio = log(worldToScreenRatio);
      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;
      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);

      vec2 uvOffset = mod(uvCellOrigin * discreteWorldToScreenRatio, ${o.float(T2.patternSpacing)});
      return uvOffset + (uv * discreteWorldToScreenRatio);
    }
  `);
  const O2 = T2.output === h.Depth;
  return O2 && (P3.include(o5, T2), i(P3), t2(P3)), $.code.add(o`
    void main(void) {
      vuv = scaledUV();
      vpos = position;
      ${R ? "depth = (view * vec4(vpos, 1.0)).z;" : ""}
      forwardNormalizedVertexColor();
      ${T2.hasVertexColors ? "vColor *= uColor;" : T2.vvColor ? "vColor = uColor * interpolateVVColor(colorFeatureAttribute);" : "vColor = uColor;"}
      gl_Position = ${O2 ? o`transformPositionWithDepth(proj, view, vpos, nearFar, linearDepth);` : o`transformPosition(proj, view, vpos);`}
    }
  `), P3.include(P, T2), D.include(e3), T2.draped && D.uniforms.add(new o4("texelSize", (e4, o6) => 1 / o6.camera.pixelRatio)), T2.output === h.Highlight && P3.include(g, T2), R && P3.include(n, T2), T2.output !== h.Highlight && (D.code.add(o`
      const float lineWidth = ${o.float(T2.lineWidth)};
      const float spacing = ${o.float(T2.patternSpacing)};
      const float spacingINV = ${o.float(1 / T2.patternSpacing)};

      float coverage(float p, float txlSize) {
        p = mod(p, spacing);

        float halfTxlSize = txlSize / 2.0;

        float start = p - halfTxlSize;
        float end = p + halfTxlSize;

        float coverage = (ceil(end * spacingINV) - floor(start * spacingINV)) * lineWidth;
        coverage -= min(lineWidth, mod(start, spacing));
        coverage -= max(lineWidth - mod(end, spacing), 0.0);

        return coverage / txlSize;
      }
    `), T2.draped || D.code.add(o`const int maxSamples = 5;
float sampleAA(float p) {
vec2 dxdy = abs(vec2(dFdx(p), dFdy(p)));
float fwidth = dxdy.x + dxdy.y;
ivec2 samples = 1 + ivec2(clamp(dxdy, 0.0, float(maxSamples - 1)));
vec2 invSamples = 1.0 / vec2(samples);
float accumulator = 0.0;
for (int j = 0; j < maxSamples; j++) {
if(j >= samples.y) {
break;
}
for (int i = 0; i < maxSamples; i++) {
if(i >= samples.x) {
break;
}
vec2 step = vec2(i,j) * invSamples - 0.5;
accumulator += coverage(p + step.x * dxdy.x + step.y * dxdy.y, fwidth);
}
}
accumulator /= float(samples.x * samples.y);
return accumulator;
}`)), D.code.add(o`
    void main() {
      discardBySlice(vpos);
      ${R ? "terrainDepthTest(gl_FragCoord, depth);" : ""}
      vec4 color = vColor;
      color = highlightSlice(color, vpos);

      ${T2.output !== h.Highlight ? o`color.a *= ${x(T2)};` : ""}

      ${T2.output === h.ObjectAndLayerIdColor ? o`color.a = 1.0;` : ""}

      if (color.a < ${o.float(t)}) {
        discard;
      }

      ${T2.output === h.Alpha ? o`fragColor = vec4(color.a);` : ""}

      ${T2.output === h.Color ? o`fragColor = color; ${T2.transparencyPassType === o2.Color ? "fragColor = premultiplyAlpha(fragColor);" : ""}` : ""}
      ${T2.output === h.Highlight ? o`outputHighlight();` : ""}
      ${T2.output === h.Depth ? o`outputDepth(linearDepth);` : ""};
    }
  `), P3;
}
function x(e4) {
  function o6(o7) {
    return e4.draped ? o`coverage(vuv.${o7}, texelSize)` : o`sampleAA(vuv.${o7})`;
  }
  switch (e4.style) {
    case a.ForwardDiagonal:
    case a.Horizontal:
      return o6("y");
    case a.BackwardDiagonal:
    case a.Vertical:
      return o6("x");
    case a.DiagonalCross:
    case a.Cross:
      return o`
        1.0 - (1.0 - ${o6("x")}) * (1.0 - ${o6("y")})
      `;
    default:
      return "0.0";
  }
}
var P2 = Object.freeze(Object.defineProperty({ __proto__: null, build: T }, Symbol.toStringTag, { value: "Module" }));

export {
  a,
  T,
  P2 as P
};
//# sourceMappingURL=chunk-LBRZG7XH.js.map
