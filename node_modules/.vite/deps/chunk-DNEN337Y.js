import {
  M,
  f,
  m,
  u,
  y
} from "./chunk-ZL3HOHNK.js";
import {
  h
} from "./chunk-RRJGZKNX.js";

// node_modules/@arcgis/core/symbols/support/cimSymbolUtils.js
function l(e, t, o, r) {
  if (e)
    if ("CIMTextSymbol" !== e.type) {
      if (o && e.effects)
        for (const o2 of e.effects)
          y2(o2, t);
      if (e.symbolLayers)
        for (const o2 of e.symbolLayers)
          switch (o2.type) {
            case "CIMPictureMarker":
            case "CIMVectorMarker":
              m2(o2, t, r);
              break;
            case "CIMPictureStroke":
            case "CIMSolidStroke":
              !(r == null ? void 0 : r.preserveOutlineWidth) && o2.width && (o2.width *= t);
              break;
            case "CIMPictureFill":
              o2.height && (o2.height *= t), o2.offsetX && (o2.offsetX *= t), o2.offsetY && (o2.offsetY *= t);
              break;
            case "CIMHatchFill":
              l(o2.lineSymbol, t, true, { ...r, preserveOutlineWidth: false }), o2.offsetX && (o2.offsetX *= t), o2.offsetY && (o2.offsetY *= t), o2.separation && (o2.separation *= t);
          }
    } else
      null != e.height && (e.height *= t);
}
function m2(e, t, o) {
  if (e && (e.markerPlacement && M2(e.markerPlacement, t), e.offsetX && (e.offsetX *= t), e.offsetY && (e.offsetY *= t), e.anchorPoint && "Absolute" === e.anchorPointUnits && (e.anchorPoint = { x: e.anchorPoint.x * t, y: e.anchorPoint.y * t }), e.size = null != e.size ? e.size * t : 0, "CIMVectorMarker" === e.type && e.markerGraphics))
    for (const r of e.markerGraphics)
      e.scaleSymbolsProportionally || l(r.symbol, t, true, o);
}
function M2(e, t) {
  switch (m(e) && e.offset && (e.offset *= t), e.type) {
    case "CIMMarkerPlacementAlongLineRandomSize":
    case "CIMMarkerPlacementAlongLineSameSize":
      if (e.customEndingOffset && (e.customEndingOffset *= t), e.offsetAlongLine && (e.offsetAlongLine *= t), e.placementTemplate && e.placementTemplate.length) {
        const o = e.placementTemplate.map((e2) => e2 * t);
        e.placementTemplate = o;
      }
      break;
    case "CIMMarkerPlacementAlongLineVariableSize":
      if (e.maxRandomOffset && (e.maxRandomOffset *= t), e.placementTemplate && e.placementTemplate.length) {
        const o = e.placementTemplate.map((e2) => e2 * t);
        e.placementTemplate = o;
      }
      break;
    case "CIMMarkerPlacementOnLine":
      e.startPointOffset && (e.startPointOffset *= t);
      break;
    case "CIMMarkerPlacementAtExtremities":
      e.offsetAlongLine && (e.offsetAlongLine *= t);
      break;
    case "CIMMarkerPlacementAtMeasuredUnits":
    case "CIMMarkerPlacementOnVertices":
      break;
    case "CIMMarkerPlacementAtRatioPositions":
      e.beginPosition && (e.beginPosition *= t), e.endPosition && (e.endPosition *= t);
      break;
    case "CIMMarkerPlacementPolygonCenter":
      e.offsetX && (e.offsetX *= t), e.offsetY && (e.offsetY *= t);
      break;
    case "CIMMarkerPlacementInsidePolygon":
      e.offsetX && (e.offsetX *= t), e.offsetY && (e.offsetY *= t), e.stepX && (e.stepX *= t), e.stepY && (e.stepY *= t);
  }
}
function y2(e, t) {
  switch (e.type) {
    case "CIMGeometricEffectArrow":
    case "CIMGeometricEffectDonut":
      e.width && (e.width *= t);
      break;
    case "CIMGeometricEffectBuffer":
      e.size && (e.size *= t);
      break;
    case "CIMGeometricEffectCut":
      e.beginCut && (e.beginCut *= t), e.endCut && (e.endCut *= t), e.middleCut && (e.middleCut *= t);
      break;
    case "CIMGeometricEffectDashes":
      if (e.customEndingOffset && (e.customEndingOffset *= t), e.offsetAlongLine && (e.offsetAlongLine *= t), e.dashTemplate && e.dashTemplate.length) {
        const o = e.dashTemplate.map((e2) => e2 * t);
        e.dashTemplate = o;
      }
      break;
    case "CIMGeometricEffectExtension":
    case "CIMGeometricEffectJog":
    case "CIMGeometricEffectRadial":
      e.length && (e.length *= t);
      break;
    case "CIMGeometricEffectMove":
      e.offsetX && (e.offsetX *= t), e.offsetY && (e.offsetY *= t);
      break;
    case "CIMGeometricEffectOffset":
    case "CIMGeometricEffectOffsetTangent":
      e.offset && (e.offset *= t);
      break;
    case "CIMGeometricEffectRegularPolygon":
      e.radius && (e.radius *= t);
      break;
    case "CIMGeometricEffectTaperedPolygon":
      e.fromWidth && (e.fromWidth *= t), e.length && (e.length *= t), e.toWidth && (e.toWidth *= t);
      break;
    case "CIMGeometricEffectWave":
      e.amplitude && (e.amplitude *= t), e.period && (e.period *= t);
  }
}
function C2(o) {
  const r = [];
  return u2(f(o), r), r.length ? new h(u(r[0])) : null;
}
function u2(e, t) {
  var _a;
  if (!e)
    return;
  let n;
  n = "CIMTextSymbol" === e.type ? e.symbol : e;
  const a = "CIMPolygonSymbol" === e.type;
  if (n == null ? void 0 : n.symbolLayers) {
    for (const i of n.symbolLayers)
      if (!(i.colorLocked || a && (M(i) || y(i) && i.markerPlacement && m(i.markerPlacement))))
        switch (i.type) {
          case "CIMPictureMarker":
          case "CIMPictureStroke":
          case "CIMPictureFill":
            i.tintColor && b(t, i.tintColor);
            break;
          case "CIMVectorMarker":
            (_a = i.markerGraphics) == null ? void 0 : _a.forEach((e2) => {
              u2(e2.symbol, t);
            });
            break;
          case "CIMSolidStroke":
          case "CIMSolidFill":
            b(t, i.color);
            break;
          case "CIMHatchFill":
            u2(i.lineSymbol, t);
        }
  }
}
function b(e, t) {
  for (const o of e)
    if (o.join(".") === t.join("."))
      return;
  e.push(t);
}

export {
  m2 as m,
  C2 as C
};
//# sourceMappingURL=chunk-DNEN337Y.js.map
