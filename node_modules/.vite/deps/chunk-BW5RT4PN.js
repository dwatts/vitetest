import {
  e
} from "./chunk-WRFNQB7U.js";
import {
  s
} from "./chunk-Z3NHJA5D.js";
import {
  i2 as i
} from "./chunk-BO2REVMA.js";
import {
  n as n2,
  o
} from "./chunk-V66LHQVK.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import {
  C,
  r,
  u,
  x
} from "./chunk-NLWV7Q6F.js";
import {
  n
} from "./chunk-SS3YG6J3.js";

// node_modules/@arcgis/core/chunks/AtmosphereCompositing.glsl.js
var l = class extends n2 {
  constructor() {
    super(...arguments), this.scale = n();
  }
};
function m(e2) {
  const r2 = new i();
  r2.attributes.add(O.POSITION, "vec2"), r2.varyings.add("uv0", "vec2"), r2.varyings.add("uv1", "vec2"), r2.vertex.uniforms.add(new e("scale", (e3) => e3.scale)), r2.vertex.code.add(o`void main(void) {
gl_Position = vec4(position, 0.0, 1.0);
uv0 = position * 0.5 + vec2(0.5);
uv1 = (position * 0.5 + vec2(0.5)) * scale;
}`), r2.fragment.uniforms.add(new s("tex", (e3) => e3.texture), new s("depthTexture", (e3) => e3.depthTexture), new e("scale", (e3) => e3.scale), new e("clampUV", (e3) => v(e3)));
  const t = e2.haze;
  return r2.fragment.code.add(o`
    void main() {
      ${t ? o`vec4` : o`float`} depthSample = texture(depthTexture, uv0) ${t ? "" : o`.r`};
      if (depthSample ${t ? o`== vec4(0)` : o`!= 1.0`} ) {
          fragColor = vec4(0);
          return;
      }
      fragColor = texture(tex, min(uv1, clampUV));
    }
    `), r2;
}
function v(o2) {
  if (!o2.texture)
    return p;
  const i2 = r(p, o2.texture.descriptor.width, o2.texture.descriptor.height), a = u(i2, i2, o2.scale), n3 = x(a, a);
  return C(n3, o2.scale, n3);
}
var p = n();
var f = Object.freeze(Object.defineProperty({ __proto__: null, AtmosphereCompositingPassParameters: l, build: m }, Symbol.toStringTag, { value: "Module" }));

export {
  l,
  m,
  f
};
//# sourceMappingURL=chunk-BW5RT4PN.js.map
