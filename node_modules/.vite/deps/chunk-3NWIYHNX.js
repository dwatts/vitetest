import {
  c,
  m,
  n as n3,
  p as p2,
  s as s2,
  s2 as s3,
  w
} from "./chunk-JZVYLVFO.js";
import {
  o as o4
} from "./chunk-LGDKASPG.js";
import {
  n as n2
} from "./chunk-IBJTEQQG.js";
import {
  o as o2
} from "./chunk-SADO52IH.js";
import {
  e as e4
} from "./chunk-WVOBJDWI.js";
import {
  n,
  t as t2
} from "./chunk-LIO6VZRI.js";
import {
  h
} from "./chunk-73PNWDTS.js";
import {
  t
} from "./chunk-PKS3ZVLN.js";
import {
  P
} from "./chunk-N3RXOITN.js";
import {
  l,
  p,
  u
} from "./chunk-DOR4M5EA.js";
import {
  e
} from "./chunk-PV5KBAYL.js";
import {
  e as e3
} from "./chunk-QS45OHBM.js";
import {
  a
} from "./chunk-3I3GE5YW.js";
import {
  e as e2
} from "./chunk-WRFNQB7U.js";
import {
  o as o3
} from "./chunk-UUW6REOV.js";
import {
  s
} from "./chunk-Z3NHJA5D.js";
import {
  i2 as i
} from "./chunk-BO2REVMA.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  O
} from "./chunk-BN6X2OXK.js";

// node_modules/@arcgis/core/chunks/LineMarker.glsl.js
function M(M2) {
  const D2 = new i(), k = M2.hasMultipassTerrain && (M2.output === h.Color || M2.output === h.Alpha), N = M2.space === p2.World;
  D2.include(c, M2), D2.include(n3, M2), M2.output === h.Depth && D2.include(o4, M2);
  const { vertex: T, fragment: A } = D2;
  return A.include(a), p(T, M2), D2.attributes.add(O.POSITION, "vec3"), D2.attributes.add(O.UV0, "vec2"), D2.attributes.add(O.AUXPOS1, "vec3"), D2.varyings.add("vColor", "vec4"), D2.varyings.add("vpos", "vec3"), D2.varyings.add("vUV", "vec2"), D2.varyings.add("vSize", "float"), t2(D2), k && D2.varyings.add("depth", "float"), M2.hasTip && D2.varyings.add("vLineWidth", "float"), T.uniforms.add(new e2("nearFar", (e5, r) => r.camera.nearFar), new e3("viewport", (e5, r) => r.camera.fullViewport)), T.code.add(o`vec4 projectAndScale(vec4 pos) {
vec4 posNdc = proj * pos;
posNdc.xy *= viewport.zw / posNdc.w;
return posNdc;
}`), T.code.add(o`void clip(vec4 pos, inout vec4 prev) {
float vnp = nearFar[0] * 0.99;
if (prev.z > -nearFar[0]) {
float interpolation = (-vnp - pos.z) / (prev.z - pos.z);
prev = mix(pos, prev, interpolation);
}
}`), N ? (D2.attributes.add(O.NORMAL, "vec3"), u(T), T.constants.add("tiltThreshold", "float", 0.7), T.code.add(o`vec3 perpendicular(vec3 v) {
vec3 n = (viewNormal * vec4(normal.xyz, 1.0)).xyz;
vec3 n2 = cross(v, n);
vec3 forward = vec3(0.0, 0.0, 1.0);
float tiltDot = dot(forward, n);
return abs(tiltDot) < tiltThreshold ? n : n2;
}`)) : T.code.add(o`vec2 perpendicular(vec2 v) {
return vec2(v.y, -v.x);
}`), T.code.add(o`
      #define vecN ${N ? "vec3" : "vec2"}

      vecN normalizedSegment(vecN pos, vecN prev) {
        vecN segment = pos - prev;
        float segmentLen = length(segment);

        // normalize or zero if too short
        return (segmentLen > 0.001) ? segment / segmentLen : ${N ? "vec3(0.0, 0.0, 0.0)" : "vec2(0.0, 0.0)"};
      }

      vecN displace(vecN pos, vecN prev, float displacementLen) {
        vecN segment = normalizedSegment(pos, prev);

        vecN displacementDirU = perpendicular(segment);
        vecN displacementDirV = segment;

        ${M2.anchor === s2.Tip ? "pos -= 0.5 * displacementLen * displacementDirV;" : ""}

        return pos + displacementLen * (uv0.x * displacementDirU + uv0.y * displacementDirV);
      }
    `), M2.space === p2.Screen && (T.uniforms.add(new e("inverseProjectionMatrix", (e5, r) => r.camera.inverseProjectionMatrix)), T.code.add(o`vec3 inverseProject(vec4 posScreen) {
posScreen.xy = (posScreen.xy / viewport.zw) * posScreen.w;
return (inverseProjectionMatrix * posScreen).xyz;
}`), T.code.add(o`bool rayIntersectPlane(vec3 rayDir, vec3 planeOrigin, vec3 planeNormal, out vec3 intersection) {
float cos = dot(rayDir, planeNormal);
float t = dot(planeOrigin, planeNormal) / cos;
intersection = t * rayDir;
return abs(cos) > 0.001 && t > 0.0;
}`), T.uniforms.add(new o3("perScreenPixelRatio", (e5, r) => r.camera.perScreenPixelRatio)), T.code.add(o`
      vec4 toFront(vec4 displacedPosScreen, vec3 posLeft, vec3 posRight, vec3 prev, float lineWidth) {
        // Project displaced position back to camera space
        vec3 displacedPos = inverseProject(displacedPosScreen);

        // Calculate the plane that we want the marker to lie in. Note that this will always be an approximation since ribbon lines are generally
        // not planar and we do not know the actual position of the displaced prev vertices (they are offset in screen space, too).
        vec3 planeNormal = normalize(cross(posLeft - posRight, posLeft - prev));
        vec3 planeOrigin = posLeft;

        ${M2.hasCap ? "\n                if(prev.z > posLeft.z) {\n                  vec2 diff = posLeft.xy - posRight.xy;\n                  planeOrigin.xy += perpendicular(diff) / 2.0;\n                }\n              " : ""};

        // Move the plane towards the camera by a margin dependent on the line width (approximated in world space). This tolerance corrects for the
        // non-planarity in most cases, but sharp joins can place the prev vertices at arbitrary positions so markers can still clip.
        float offset = lineWidth * perScreenPixelRatio;
        planeOrigin *= (1.0 - offset);

        // Intersect camera ray with the plane and make sure it is within clip space
        vec3 rayDir = normalize(displacedPos);
        vec3 intersection;
        if (rayIntersectPlane(rayDir, planeOrigin, planeNormal, intersection) && intersection.z < -nearFar[0] && intersection.z > -nearFar[1]) {
          return vec4(intersection.xyz, 1.0);
        }

        // Fallback: use depth of pos or prev, whichever is closer to the camera
        float minDepth = planeOrigin.z > prev.z ? length(planeOrigin) : length(prev);
        displacedPos *= minDepth / length(displacedPos);
        return vec4(displacedPos.xyz, 1.0);
      }
  `)), l(T, M2), n(D2), T.code.add(o`void main(void) {
if (uv0.y == 0.0) {
gl_Position = vec4(1e038, 1e038, 1e038, 1.0);
}
else {
float lineWidth = getLineWidth();
float screenMarkerSize = getScreenMarkerSize();
vec4 pos  = view * vec4(position.xyz, 1.0);
vec4 prev = view * vec4(auxpos1.xyz, 1.0);
clip(pos, prev);`), N ? (M2.hideOnShortSegments && T.code.add(o`if (areWorldMarkersHidden(pos, prev)) {
gl_Position = vec4(1e038, 1e038, 1e038, 1.0);
return;
}`), T.code.add(o`pos.xyz = displace(pos.xyz, prev.xyz, getWorldMarkerSize(pos));
vec4 displacedPosScreen = projectAndScale(pos);`)) : (T.code.add(o`vec4 posScreen = projectAndScale(pos);
vec4 prevScreen = projectAndScale(prev);
vec4 displacedPosScreen = posScreen;
displacedPosScreen.xy = displace(posScreen.xy, prevScreen.xy, screenMarkerSize);`), M2.space === p2.Screen && T.code.add(o`vec2 displacementDirU = perpendicular(normalizedSegment(posScreen.xy, prevScreen.xy));
vec3 lineRight = inverseProject(posScreen + lineWidth * vec4(displacementDirU.xy, 0.0, 0.0));
vec3 lineLeft = pos.xyz + (pos.xyz - lineRight);
pos = toFront(displacedPosScreen, lineLeft, lineRight, prev.xyz, lineWidth);
displacedPosScreen = projectAndScale(pos);`)), T.code.add(o`
        ${k ? "depth = pos.z;" : ""}
        linearDepth = calculateLinearDepth(nearFar,pos.z);

        // Convert back into NDC
        displacedPosScreen.xy = (displacedPosScreen.xy / viewport.zw) * displacedPosScreen.w;

        // Convert texture coordinate into [0,1]
        vUV = (uv0 + 1.0) / 2.0;

        ${N ? "" : "vUV *= displacedPosScreen.w;"}

        ${M2.hasTip ? "vLineWidth = lineWidth;" : ""}

        vSize = screenMarkerSize;
        vColor = getColor();

        // Use camera space for slicing
        vpos = pos.xyz;

        gl_Position = displacedPosScreen;
      }
    }
  `), k && D2.include(n2, M2), D2.include(P, M2), A.uniforms.add(new e3("intrinsicColor", (e5) => e5.color), new s("tex", (e5) => e5.markerTexture)), A.include(e4), D2.constants.add("texelSize", "float", 1 / m), A.code.add(o`float markerAlpha(vec2 samplePos) {
samplePos += vec2(0.5, -0.5) * texelSize;
float sdf = rgba2float(texture(tex, samplePos)) - 0.5;
float distance = sdf * vSize;
distance -= 0.5;
return clamp(0.5 - distance, 0.0, 1.0);
}`), M2.hasTip && (D2.constants.add("relativeMarkerSize", "float", s3 / m), D2.constants.add("relativeTipLineWidth", "float", w), A.code.add(o`
    float tipAlpha(vec2 samplePos) {
      // Convert coordinates s.t. they are in pixels and relative to the tip of an arrow marker
      samplePos -= vec2(0.5, 0.5 + 0.5 * relativeMarkerSize);
      samplePos *= vSize;

      float halfMarkerSize = 0.5 * relativeMarkerSize * vSize;
      float halfTipLineWidth = 0.5 * max(1.0, relativeTipLineWidth * vLineWidth);

      ${N ? "halfTipLineWidth *= fwidth(samplePos.y);" : ""}

      float distance = max(abs(samplePos.x) - halfMarkerSize, abs(samplePos.y) - halfTipLineWidth);
      return clamp(0.5 - distance, 0.0, 1.0);
    }
  `)), D2.constants.add("symbolAlphaCutoff", "float", t), A.code.add(o`
  void main() {
    discardBySlice(vpos);
    ${k ? "terrainDepthTest(gl_FragCoord, depth);" : ""}

    vec4 finalColor = intrinsicColor * vColor;

    ${N ? "vec2 samplePos = vUV;" : "vec2 samplePos = vUV * gl_FragCoord.w;"}

    ${M2.hasTip ? "finalColor.a *= max(markerAlpha(samplePos), tipAlpha(samplePos));" : "finalColor.a *= markerAlpha(samplePos);"}

    ${M2.output === h.ObjectAndLayerIdColor ? o`finalColor.a = 1.0;` : ""}

    if (finalColor.a < symbolAlphaCutoff) {
      discard;
    }

    ${M2.output === h.Alpha ? o`fragColor = vec4(finalColor.a);` : ""}
    ${M2.output === h.Color ? o`fragColor = highlightSlice(finalColor, vpos);` : ""}
    ${M2.output === h.Color && M2.transparencyPassType === o2.Color ? "fragColor = premultiplyAlpha(fragColor);" : ""}
    ${M2.output === h.Highlight ? o`fragColor = vec4(1.0);` : ""}
    ${M2.output === h.Depth ? o`outputDepth(linearDepth);` : ""}
  }
  `), D2;
}
var D = Object.freeze(Object.defineProperty({ __proto__: null, build: M }, Symbol.toStringTag, { value: "Module" }));

export {
  M,
  D
};
//# sourceMappingURL=chunk-3NWIYHNX.js.map
