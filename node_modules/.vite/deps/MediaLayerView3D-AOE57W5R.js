import {
  c as c2
} from "./chunk-BTHQ4EZE.js";
import {
  n as n2
} from "./chunk-XGIDQJNQ.js";
import {
  d
} from "./chunk-TYEEWKIN.js";
import "./chunk-XW6BCJUG.js";
import {
  i
} from "./chunk-QRZTOPZY.js";
import "./chunk-LYNC7OVT.js";
import "./chunk-C2GW4T2D.js";
import {
  ne
} from "./chunk-XXN3TEOU.js";
import "./chunk-FIJZ6LYC.js";
import "./chunk-MUANV6E3.js";
import "./chunk-SFIT2AUF.js";
import "./chunk-DBIFU6GO.js";
import "./chunk-V33FVMPT.js";
import "./chunk-U67EYFX3.js";
import {
  E,
  I,
  a2 as a3,
  e as e3
} from "./chunk-UYTAZUBJ.js";
import {
  C
} from "./chunk-2EO2WRP7.js";
import "./chunk-NBYHM3OO.js";
import "./chunk-CERU5LKM.js";
import "./chunk-JZVYLVFO.js";
import "./chunk-FAOMDC3K.js";
import "./chunk-SCAYUERS.js";
import "./chunk-B76MSEZ4.js";
import "./chunk-ZYHVS2T2.js";
import "./chunk-XYSQCP5F.js";
import "./chunk-W5D3JTKS.js";
import "./chunk-XACNEHDM.js";
import "./chunk-IRBH32SX.js";
import "./chunk-MPIXWRXJ.js";
import "./chunk-XKYCNHCM.js";
import "./chunk-YEDW7SLL.js";
import {
  b
} from "./chunk-BDX5TRUE.js";
import "./chunk-LIXBKTBN.js";
import "./chunk-VDSNHCMM.js";
import "./chunk-6LC2JTLC.js";
import "./chunk-XM3YSFN6.js";
import {
  w
} from "./chunk-NIZWDAMQ.js";
import "./chunk-DU3C7D26.js";
import "./chunk-XUU35WPC.js";
import "./chunk-KSA6GV6M.js";
import "./chunk-K4WBDIIJ.js";
import "./chunk-ROPKVK6V.js";
import "./chunk-KM375BNF.js";
import "./chunk-H3DKDGMJ.js";
import "./chunk-FB6EWBGE.js";
import "./chunk-Z2RTGLQI.js";
import "./chunk-V6CD66ZZ.js";
import "./chunk-6FHMQNMS.js";
import "./chunk-D7YAG5U3.js";
import "./chunk-LGDKASPG.js";
import "./chunk-YQDOKTNT.js";
import "./chunk-SH6HJSS2.js";
import "./chunk-KFDARCTS.js";
import "./chunk-TRGMWULG.js";
import "./chunk-WTPQKRQM.js";
import "./chunk-SMDDCTGQ.js";
import "./chunk-NU4UASX6.js";
import "./chunk-PKCLTDZO.js";
import "./chunk-4YXJLES6.js";
import "./chunk-EHQZFPMP.js";
import "./chunk-VC3BY3DV.js";
import "./chunk-WH76OAIT.js";
import "./chunk-B4ONZAW2.js";
import "./chunk-JHDKOKT6.js";
import "./chunk-YLTVH2K4.js";
import "./chunk-FB4A6PBH.js";
import "./chunk-CG3URTR2.js";
import "./chunk-UX3LCC3X.js";
import "./chunk-AB23UNQC.js";
import "./chunk-RDWKBYTH.js";
import "./chunk-IBJTEQQG.js";
import "./chunk-SADO52IH.js";
import "./chunk-WVOBJDWI.js";
import "./chunk-LIO6VZRI.js";
import "./chunk-7DFZCT3D.js";
import "./chunk-ASBUA7EG.js";
import "./chunk-FY4ZONHH.js";
import "./chunk-73PNWDTS.js";
import "./chunk-PKS3ZVLN.js";
import "./chunk-N3RXOITN.js";
import "./chunk-DOR4M5EA.js";
import "./chunk-3ROGWJVH.js";
import "./chunk-BUCIQGFS.js";
import "./chunk-CR5XNTAP.js";
import "./chunk-Z6IKMUOC.js";
import "./chunk-PV5KBAYL.js";
import "./chunk-YVVROPAO.js";
import "./chunk-4KPDZI74.js";
import "./chunk-WA4HIOYR.js";
import "./chunk-BFVOSCOB.js";
import "./chunk-QALEHGSZ.js";
import "./chunk-GYNE34WO.js";
import "./chunk-QS45OHBM.js";
import "./chunk-IVMJPIWO.js";
import "./chunk-3I3GE5YW.js";
import "./chunk-WRFNQB7U.js";
import "./chunk-UUW6REOV.js";
import "./chunk-2US5EKDI.js";
import "./chunk-Z3NHJA5D.js";
import "./chunk-BO2REVMA.js";
import "./chunk-V66LHQVK.js";
import "./chunk-JP7O2ZWE.js";
import "./chunk-Z6R62RNV.js";
import "./chunk-3LLZ72VA.js";
import "./chunk-4SIKLJSS.js";
import "./chunk-WDZ5AAFL.js";
import "./chunk-M7PTINEZ.js";
import "./chunk-Z7LZRT7C.js";
import "./chunk-SGBMUZSF.js";
import "./chunk-3TMT4LDG.js";
import "./chunk-BDWD2ZNU.js";
import "./chunk-FF5LS3YE.js";
import {
  D
} from "./chunk-BCDDCNQ2.js";
import "./chunk-FIBWCATC.js";
import {
  s
} from "./chunk-6S2FCH6S.js";
import "./chunk-3TTW7E7W.js";
import "./chunk-FOEAKQNX.js";
import "./chunk-LEDSC236.js";
import "./chunk-OKABUMQT.js";
import "./chunk-CW7LIPBH.js";
import "./chunk-TYOIANOD.js";
import "./chunk-VN2IXVGV.js";
import "./chunk-WWUAHPIM.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import "./chunk-SHFLRM67.js";
import "./chunk-YGUWDSEH.js";
import "./chunk-EFRTD25L.js";
import "./chunk-F4ILXEXC.js";
import "./chunk-63ERNIOV.js";
import "./chunk-KRCNIFX2.js";
import "./chunk-LVVQ2RQY.js";
import "./chunk-M6OG7C2T.js";
import "./chunk-GOK5MP3B.js";
import "./chunk-NLWV7Q6F.js";
import "./chunk-RVS5HU2K.js";
import "./chunk-JB7FDW5N.js";
import "./chunk-SS3YG6J3.js";
import "./chunk-NVGPNIR6.js";
import "./chunk-VMTVUE47.js";
import "./chunk-GDZM4A6K.js";
import "./chunk-BNBT4QTW.js";
import "./chunk-3FQOSG5O.js";
import "./chunk-W4KI5YEI.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-AQ7R6V4L.js";
import "./chunk-DOQ3SAAR.js";
import "./chunk-SLVNG7FV.js";
import "./chunk-4CZO65BK.js";
import "./chunk-DEZCXTA3.js";
import "./chunk-WLWP35G2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import {
  c
} from "./chunk-EKJ2DJIR.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-3VUFACNT.js";
import "./chunk-ZEEBL7ZN.js";
import "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import {
  a as a2
} from "./chunk-H7RDAEPY.js";
import "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import "./chunk-JL3TJGVW.js";
import "./chunk-43LWRDQS.js";
import "./chunk-R6YKST3K.js";
import "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-MP6GH2AC.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a,
  e as e2,
  n,
  o2 as o
} from "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import {
  T,
  k
} from "./chunk-7I33FAWS.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/3d/layers/MediaLayerView3D.js
var j = class extends n2(d) {
  constructor() {
    super(...arguments), this.type = "media-3d", this.drapeSourceType = e3.RasterImage, this.updatePolicy = C.ASYNC, this._uidToElement = /* @__PURE__ */ new Map(), this._renderedElements = /* @__PURE__ */ new Map(), this._lastDrapingExtent = null, this._update = k(async (e4, t, r) => {
      const i2 = await this._collectMediaElements(e4, t, r);
      this._synchronizeRenderElements(i2);
    }, 0);
  }
  initialize() {
    this._renderer = this.view.basemapTerrain.overlayManager.registerGeometryDrapeSource(this);
    const e4 = () => this._updateWithLastDrapingExtent();
    this.handles.add([e2(() => this.view.basemapTerrain.overlayManager.unregisterDrapeSource(this)), a2(() => this.layer.effectiveSource, "change", e4), a2(() => this.layer.effectiveSource, "refresh", e4)]), this.updatingHandles.add(() => this.suspended, e4);
  }
  setDrapingExtent(e4, t) {
    this._lastDrapingExtent = { overlays: e4, spatialReference: t }, this._updateWithLastDrapingExtent();
  }
  getHit(e4) {
    const t = this._uidToElement.get(e4);
    return t ? { type: "media", element: t, layer: this.layer } : null;
  }
  _updateWithLastDrapingExtent() {
    if (null == this._lastDrapingExtent || this.suspended)
      return void (this._renderer && this._synchronizeRenderElements(/* @__PURE__ */ new Set()));
    const { overlays: e4, spatialReference: t } = this._lastDrapingExtent;
    this.updatingHandles.addPromise(this._update(e4, t).catch(() => {
    }));
  }
  async _collectMediaElements(e4, t, r) {
    const i2 = this.layer.effectiveSource;
    return null == i2 ? /* @__PURE__ */ new Set() : new Set((await Promise.all(e4.map((e5) => i2.queryElements(c(e5.extent, t), { signal: r })))).flat());
  }
  _synchronizeRenderElements(e4) {
    this._synchronizeRenderElementsRemove(e4), this._synchronizeRenderElementsAdd(e4);
  }
  _synchronizeRenderElementsRemove(e4) {
    const t = /* @__PURE__ */ new Set(), r = [];
    this._renderedElements.forEach((i2, n3) => {
      e4.has(n3) || (t.add(n3), null != i2.renderData && r.push(i2.renderData.renderGeometry), this._removeElement(n3, i2));
    }), this._renderer.removeGeometries(r, E.REMOVE);
  }
  _synchronizeRenderElementsAdd(e4) {
    for (const t of e4)
      this._renderedElements.has(t) || this._createRenderElement(t);
  }
  _removeElement(e4, { renderData: t, handle: r }) {
    this._destroyRenderData(t), this._renderedElements.delete(e4), this._uidToElement.delete(e4.uid), r.remove();
  }
  async _createRenderElement(e4) {
    const t = new i({ spatialReference: this.view.spatialReference, element: e4 }), n3 = { renderData: null, handle: n([this.updatingHandles.add(() => e4.opacity, (e5) => {
      null != n3.renderData && n3.renderData.material.setParameters({ opacity: e5 });
    }), this.updatingHandles.add(() => t.coords, (e5) => {
      null != n3.renderData ? this._updateGeometry(n3, n3.renderData, e5) : this._initializeRenderData(t, n3);
    }), this.updatingHandles.add(() => e4.content, () => this._initializeRenderData(t, n3)), o(t)]) };
    this._renderedElements.set(e4, n3), this._uidToElement.set(e4.uid, e4), this.updatingHandles.addPromise(e4.load().catch(() => {
    })), this._initializeRenderData(t, n3);
  }
  _initializeRenderData(e4, t) {
    const { coords: r, element: i2 } = e4;
    if (null == r || null == i2.content)
      return void (t.renderData = this._destroyRenderData(t.renderData));
    if (null != t.renderData)
      return;
    const n3 = this._createTexture(i2.content);
    this.view._stage.add(n3);
    const a4 = this.view._stage.loadImmediate(n3);
    T(a4) && this.updatingHandles.addPromise(a4);
    const o2 = new c2({ initTextureTransparent: true, textureId: n3.id, opacity: i2.opacity, transparent: true }), d2 = this._positionVertexBufferFromCoordinates(r), l = [0, 0, 1, 0, 1, 1, 0, 1], m = [0, 1, 2, 0, 2, 3], p = new b(o2, [[O.POSITION, new s(d2, 3, true)], [O.UV0, new s(l, 2, true)]], [[O.POSITION, m], [O.UV0, m]]), h = new a3(p, { layerUid: this.layer.uid, graphicUid: i2.uid });
    this._renderer.addGeometries([h], E.ADD), t.renderData = { renderGeometry: h, texture: n3, material: o2 };
  }
  _updateGeometry(e4, t, r) {
    if (null == r)
      return void (e4.renderData = this._destroyRenderData(e4.renderData));
    const i2 = this._positionVertexBufferFromCoordinates(r);
    t.renderGeometry.geometry.setAttributeData(O.POSITION, i2), this._renderer.modifyGeometries([t.renderGeometry], I.GEOMETRY);
  }
  _positionVertexBufferFromCoordinates(e4) {
    const [t, r, i2, n3] = e4.rings[0];
    return [t[0], t[1], ne, n3[0], n3[1], ne, i2[0], i2[1], ne, r[0], r[1], ne];
  }
  _destroyRenderData(e4) {
    return null == e4 || (this.view._stage.remove(e4.texture), this._renderer.removeGeometries([e4.renderGeometry], E.REMOVE), e4.material.dispose()), null;
  }
  _createTexture(e4) {
    const t = e4 instanceof HTMLImageElement ? e4.naturalWidth : e4.width, r = e4 instanceof HTMLImageElement ? e4.naturalHeight : e4.height;
    return new w(e4, { wrap: { s: D.CLAMP_TO_EDGE, t: D.CLAMP_TO_EDGE }, preMultiplyAlpha: true, width: t, height: r, mipmap: true, updateCallback: () => this.view.basemapTerrain.overlayManager.setDrawTexturesDirty() });
  }
  get test() {
    const e4 = this;
    return { get numberOfElements() {
      return e4._renderedElements.size;
    } };
  }
};
e([y({ readOnly: true })], j.prototype, "type", void 0), e([y()], j.prototype, "layer", void 0), j = e([a("esri.views.3d.layers.MediaLayerView3D")], j);
var T2 = j;
export {
  T2 as default
};
//# sourceMappingURL=MediaLayerView3D-AOE57W5R.js.map
