import {
  L,
  d as d4,
  l as l2,
  o
} from "./chunk-MYHVW7VU.js";
import {
  t2 as t4
} from "./chunk-6SPYK5IY.js";
import {
  E,
  c,
  xt
} from "./chunk-VSNGV5F4.js";
import "./chunk-2HZ6BJUS.js";
import "./chunk-CKDYQJAJ.js";
import "./chunk-LJPYEVZC.js";
import "./chunk-ETXJI6IO.js";
import "./chunk-UK4ZDRLR.js";
import "./chunk-ULFDJHIR.js";
import "./chunk-ZCXCGUT2.js";
import "./chunk-PL4QGMLB.js";
import "./chunk-HBJAGP7O.js";
import "./chunk-KSNS4RYW.js";
import "./chunk-MYPCEJEE.js";
import "./chunk-F6PJCZPH.js";
import "./chunk-32IFRFHL.js";
import {
  n as n5
} from "./chunk-XGIDQJNQ.js";
import {
  d as d3
} from "./chunk-TYEEWKIN.js";
import "./chunk-ANLIVU2T.js";
import "./chunk-67UNUI4B.js";
import "./chunk-WON6TZX6.js";
import "./chunk-SS6BI3R6.js";
import "./chunk-JPZZRVHU.js";
import "./chunk-PFUZUHLB.js";
import "./chunk-BM4PSBXP.js";
import "./chunk-EQRBSFVE.js";
import "./chunk-QNL3GBGD.js";
import "./chunk-IMCUA6JI.js";
import "./chunk-NJB7437O.js";
import "./chunk-RZONPIMD.js";
import "./chunk-FAU6BZC4.js";
import "./chunk-D6UIL3LF.js";
import "./chunk-B5TYSRH2.js";
import "./chunk-XBN7M5OG.js";
import "./chunk-BPITJIFG.js";
import "./chunk-3BTM6YO4.js";
import "./chunk-6OVHX5ZO.js";
import "./chunk-N6RC4PHI.js";
import "./chunk-CPHFVZ42.js";
import "./chunk-LLQHB2ZB.js";
import "./chunk-CFEAJLOI.js";
import "./chunk-RBDJB3ZY.js";
import "./chunk-RRRAGAMB.js";
import "./chunk-ERFCZMKG.js";
import "./chunk-C2GW4T2D.js";
import "./chunk-FLA7Z76H.js";
import {
  f
} from "./chunk-LFQ3TKCC.js";
import "./chunk-ZD5B6I7X.js";
import "./chunk-HAYOKZGJ.js";
import "./chunk-SO7CVIZK.js";
import "./chunk-FJYIB7HF.js";
import "./chunk-BLRS5QI4.js";
import "./chunk-23N5B2NF.js";
import "./chunk-BUKSB3RJ.js";
import "./chunk-Y3PBROKK.js";
import "./chunk-7FGF24AQ.js";
import "./chunk-YOWAMJJI.js";
import "./chunk-PFDC65N2.js";
import "./chunk-6HOJZLKI.js";
import "./chunk-ZIIRSX6D.js";
import "./chunk-JQKL7AD5.js";
import "./chunk-6WY3ZZYN.js";
import "./chunk-CS6BZGQO.js";
import "./chunk-YZTKL3LQ.js";
import "./chunk-I7EXY23J.js";
import "./chunk-SCHIU6CT.js";
import "./chunk-XXN3TEOU.js";
import "./chunk-FIJZ6LYC.js";
import "./chunk-MUANV6E3.js";
import "./chunk-SFIT2AUF.js";
import "./chunk-DBIFU6GO.js";
import "./chunk-V33FVMPT.js";
import "./chunk-U67EYFX3.js";
import "./chunk-5GYSL2SB.js";
import "./chunk-3NWIYHNX.js";
import "./chunk-PLKG3UR7.js";
import "./chunk-BD4RGMMN.js";
import "./chunk-4BA5YJ7C.js";
import "./chunk-LBRZG7XH.js";
import {
  t as t3
} from "./chunk-644IM3NW.js";
import "./chunk-TE7N6C3J.js";
import "./chunk-WRC5WFEM.js";
import "./chunk-UYTAZUBJ.js";
import "./chunk-2EO2WRP7.js";
import "./chunk-IAWQREMS.js";
import "./chunk-EPDLDPS4.js";
import "./chunk-NBYHM3OO.js";
import "./chunk-CERU5LKM.js";
import "./chunk-JZVYLVFO.js";
import "./chunk-FAOMDC3K.js";
import "./chunk-SCAYUERS.js";
import "./chunk-B76MSEZ4.js";
import "./chunk-ZYHVS2T2.js";
import "./chunk-XYSQCP5F.js";
import "./chunk-W5D3JTKS.js";
import "./chunk-XACNEHDM.js";
import "./chunk-IRBH32SX.js";
import "./chunk-MPIXWRXJ.js";
import "./chunk-PC4A4CQR.js";
import "./chunk-VYGC2LVC.js";
import "./chunk-CXYYGJUL.js";
import "./chunk-FJA4J75M.js";
import "./chunk-AN3WFAN2.js";
import "./chunk-XKYCNHCM.js";
import "./chunk-YEDW7SLL.js";
import "./chunk-N4JKQR77.js";
import "./chunk-BDX5TRUE.js";
import "./chunk-LIXBKTBN.js";
import "./chunk-VDSNHCMM.js";
import "./chunk-6LC2JTLC.js";
import "./chunk-XM3YSFN6.js";
import "./chunk-NIZWDAMQ.js";
import "./chunk-DU3C7D26.js";
import "./chunk-YQALOTSV.js";
import "./chunk-T52K6PNI.js";
import "./chunk-UPDSQXLR.js";
import "./chunk-NOWEY45I.js";
import "./chunk-FNMOXP37.js";
import "./chunk-7BSXIYP2.js";
import "./chunk-ACTOBSLJ.js";
import "./chunk-XUU35WPC.js";
import "./chunk-6QR5R4JX.js";
import "./chunk-KSA6GV6M.js";
import "./chunk-K4WBDIIJ.js";
import "./chunk-ROPKVK6V.js";
import "./chunk-KM375BNF.js";
import "./chunk-H3DKDGMJ.js";
import "./chunk-FB6EWBGE.js";
import "./chunk-3TDCCT2R.js";
import "./chunk-CWXDLB2P.js";
import "./chunk-Z2RTGLQI.js";
import "./chunk-V6CD66ZZ.js";
import "./chunk-6FHMQNMS.js";
import "./chunk-5ZW42GDY.js";
import "./chunk-D7YAG5U3.js";
import "./chunk-LGDKASPG.js";
import "./chunk-YQDOKTNT.js";
import "./chunk-SH6HJSS2.js";
import "./chunk-KFDARCTS.js";
import "./chunk-TRGMWULG.js";
import "./chunk-WTPQKRQM.js";
import "./chunk-SMDDCTGQ.js";
import "./chunk-NU4UASX6.js";
import "./chunk-PKCLTDZO.js";
import "./chunk-4YXJLES6.js";
import "./chunk-EHQZFPMP.js";
import "./chunk-VC3BY3DV.js";
import "./chunk-WH76OAIT.js";
import "./chunk-B4ONZAW2.js";
import "./chunk-JHDKOKT6.js";
import "./chunk-YLTVH2K4.js";
import "./chunk-FB4A6PBH.js";
import "./chunk-CG3URTR2.js";
import "./chunk-UX3LCC3X.js";
import "./chunk-AB23UNQC.js";
import "./chunk-RDWKBYTH.js";
import "./chunk-IBJTEQQG.js";
import "./chunk-SADO52IH.js";
import "./chunk-WVOBJDWI.js";
import "./chunk-LIO6VZRI.js";
import "./chunk-7DFZCT3D.js";
import "./chunk-ASBUA7EG.js";
import "./chunk-FY4ZONHH.js";
import "./chunk-73PNWDTS.js";
import "./chunk-PKS3ZVLN.js";
import "./chunk-N3RXOITN.js";
import "./chunk-DOR4M5EA.js";
import "./chunk-3ROGWJVH.js";
import "./chunk-BUCIQGFS.js";
import "./chunk-CR5XNTAP.js";
import "./chunk-Z6IKMUOC.js";
import "./chunk-PV5KBAYL.js";
import "./chunk-YVVROPAO.js";
import "./chunk-2EWAI4LP.js";
import "./chunk-DNEN337Y.js";
import "./chunk-IWA3Q52A.js";
import "./chunk-4KPDZI74.js";
import "./chunk-WA4HIOYR.js";
import "./chunk-BFVOSCOB.js";
import "./chunk-QALEHGSZ.js";
import "./chunk-GYNE34WO.js";
import "./chunk-QS45OHBM.js";
import "./chunk-IVMJPIWO.js";
import "./chunk-3I3GE5YW.js";
import "./chunk-WRFNQB7U.js";
import "./chunk-UUW6REOV.js";
import "./chunk-2US5EKDI.js";
import "./chunk-Z3NHJA5D.js";
import "./chunk-BO2REVMA.js";
import "./chunk-V66LHQVK.js";
import "./chunk-UAIJDJWO.js";
import "./chunk-2CKXYQCA.js";
import "./chunk-JP7O2ZWE.js";
import "./chunk-4Y7ZTMES.js";
import "./chunk-ODTMOFOP.js";
import "./chunk-AHBQVOT4.js";
import "./chunk-Z6R62RNV.js";
import "./chunk-3LLZ72VA.js";
import "./chunk-4SIKLJSS.js";
import "./chunk-ALPCRJS4.js";
import "./chunk-WDZ5AAFL.js";
import "./chunk-XL7RF4A6.js";
import "./chunk-ZL3HOHNK.js";
import "./chunk-PR2OEILG.js";
import "./chunk-67BT7WH5.js";
import "./chunk-JPKFB2QL.js";
import "./chunk-KSBQD24F.js";
import "./chunk-UM64E5NS.js";
import "./chunk-2SZNVP5H.js";
import "./chunk-2XKILFME.js";
import "./chunk-G4LSNP77.js";
import "./chunk-S5RIUWET.js";
import "./chunk-MVWFPLOX.js";
import "./chunk-X3YW4YOG.js";
import "./chunk-IG234GCS.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-BA6PBZHC.js";
import "./chunk-M7PTINEZ.js";
import "./chunk-Z7LZRT7C.js";
import "./chunk-SGBMUZSF.js";
import "./chunk-3TMT4LDG.js";
import "./chunk-OX5TJXHM.js";
import "./chunk-BDWD2ZNU.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-FIBWCATC.js";
import "./chunk-D3BOGOKY.js";
import "./chunk-QOWAKGE4.js";
import "./chunk-YC5U2RV5.js";
import "./chunk-ZNQYDNXF.js";
import "./chunk-GTUBINZG.js";
import {
  de,
  pe,
  re
} from "./chunk-SLMR4CTS.js";
import {
  n as n4,
  p,
  t as t2
} from "./chunk-BFVDDR4R.js";
import "./chunk-LJ3FBGIN.js";
import "./chunk-QPXU3YKY.js";
import "./chunk-FLVP2XLK.js";
import "./chunk-XKENZ7D5.js";
import "./chunk-GZTS5346.js";
import {
  a as a3
} from "./chunk-EK3Y2IYO.js";
import "./chunk-6S2FCH6S.js";
import {
  n as n3
} from "./chunk-BZL5MAFP.js";
import "./chunk-XY26YCFX.js";
import "./chunk-3TTW7E7W.js";
import "./chunk-FOEAKQNX.js";
import "./chunk-LEDSC236.js";
import "./chunk-NETCTS4Y.js";
import "./chunk-OKABUMQT.js";
import "./chunk-CW7LIPBH.js";
import "./chunk-TYOIANOD.js";
import "./chunk-VN2IXVGV.js";
import "./chunk-WWUAHPIM.js";
import "./chunk-BN6X2OXK.js";
import "./chunk-3C6NSN3C.js";
import "./chunk-J7GVLYC6.js";
import "./chunk-HWCVRBK2.js";
import "./chunk-WQH5IZQP.js";
import "./chunk-LCS4FL4K.js";
import "./chunk-4JFWLHWB.js";
import "./chunk-Y7OTFSYN.js";
import "./chunk-S7JBLP35.js";
import "./chunk-DZRIMGKU.js";
import {
  d as d2
} from "./chunk-MRYR5ID7.js";
import "./chunk-I3MRHING.js";
import "./chunk-RWWB77SD.js";
import "./chunk-Y7MP63H6.js";
import "./chunk-2WJ2SRK2.js";
import "./chunk-ZVHSORNP.js";
import "./chunk-XUV5GLNE.js";
import "./chunk-ZMFGNDTK.js";
import "./chunk-UL64BLDS.js";
import "./chunk-EG6CFIHA.js";
import "./chunk-CMNAZRWU.js";
import "./chunk-KE6VYSDW.js";
import "./chunk-SJEOKSSU.js";
import "./chunk-5GE3CZPD.js";
import "./chunk-WZRJMJNH.js";
import "./chunk-GDP6ZU2A.js";
import "./chunk-XIYY37WZ.js";
import "./chunk-P4PDTNIU.js";
import "./chunk-SRDSGSDW.js";
import "./chunk-IMXPH7BL.js";
import "./chunk-ENOZ3X2B.js";
import "./chunk-DRCIVBVA.js";
import "./chunk-CEFGWR5H.js";
import "./chunk-NX5NNI52.js";
import "./chunk-G2DTL6AE.js";
import "./chunk-Q6HN54VB.js";
import "./chunk-NDKDK4Y5.js";
import {
  b
} from "./chunk-O443WBFA.js";
import "./chunk-RGS3ANC3.js";
import "./chunk-Z3GCSCQI.js";
import "./chunk-PPNAO2PM.js";
import "./chunk-UU2XJGLA.js";
import "./chunk-CGJNVOU3.js";
import "./chunk-YA7WDOJK.js";
import "./chunk-C6OHOFP6.js";
import "./chunk-ZX45U24W.js";
import "./chunk-KYWX7M3R.js";
import "./chunk-7H2AXTDH.js";
import "./chunk-QC2JMJXZ.js";
import "./chunk-GFPASUQP.js";
import "./chunk-KDACHJ5G.js";
import "./chunk-IQRLZSBX.js";
import "./chunk-OZL6Q7O2.js";
import "./chunk-FVR25IMN.js";
import "./chunk-EV77QZBT.js";
import "./chunk-QZ6WR57P.js";
import "./chunk-467UETSR.js";
import "./chunk-SHFLRM67.js";
import {
  t
} from "./chunk-YGUWDSEH.js";
import "./chunk-6RU2CUTK.js";
import "./chunk-GOK4EI36.js";
import "./chunk-LO3LAMAS.js";
import "./chunk-ZWFMUHG3.js";
import "./chunk-EFRTD25L.js";
import "./chunk-EAGDM3GO.js";
import "./chunk-GSS6WNQU.js";
import "./chunk-C2EHS6UI.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-CEUJOC5P.js";
import "./chunk-F4ILXEXC.js";
import "./chunk-D5NSNTGJ.js";
import "./chunk-63ERNIOV.js";
import "./chunk-DTEODQ6R.js";
import "./chunk-5KLICR5E.js";
import {
  I
} from "./chunk-KRCNIFX2.js";
import "./chunk-LVVQ2RQY.js";
import "./chunk-M6OG7C2T.js";
import "./chunk-GOK5MP3B.js";
import "./chunk-NLWV7Q6F.js";
import "./chunk-DSWGERIY.js";
import "./chunk-Y2ZDD3I4.js";
import "./chunk-RVS5HU2K.js";
import "./chunk-JB7FDW5N.js";
import "./chunk-SS3YG6J3.js";
import "./chunk-H37COY3W.js";
import "./chunk-NVGPNIR6.js";
import "./chunk-B4D7M7HT.js";
import "./chunk-3T2ETA25.js";
import "./chunk-5IYCCZ54.js";
import "./chunk-JLSXEPY6.js";
import {
  a as a2
} from "./chunk-VMTVUE47.js";
import "./chunk-GDZM4A6K.js";
import {
  h as h2
} from "./chunk-XWGNMTES.js";
import "./chunk-6NNEHJYI.js";
import "./chunk-BNBT4QTW.js";
import "./chunk-3FQOSG5O.js";
import "./chunk-W4KI5YEI.js";
import "./chunk-CAFGOFIE.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-JNDFAMXY.js";
import "./chunk-NTEKJWGF.js";
import "./chunk-TFIKV5RU.js";
import "./chunk-KW6QQDGN.js";
import "./chunk-AQ7R6V4L.js";
import "./chunk-DOQ3SAAR.js";
import {
  Ae,
  b as b2,
  g
} from "./chunk-4BXK4H4L.js";
import "./chunk-SLVNG7FV.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-DTYFMKYK.js";
import "./chunk-7S7LC3XK.js";
import "./chunk-XR4HIGQP.js";
import "./chunk-KK5CYPXW.js";
import "./chunk-JNO3YVNK.js";
import "./chunk-DKJBDKGA.js";
import "./chunk-4CZO65BK.js";
import "./chunk-SVCGLUNW.js";
import "./chunk-3KEIFTQ6.js";
import {
  s as s3
} from "./chunk-DEZCXTA3.js";
import "./chunk-RRJGZKNX.js";
import "./chunk-PL5Q4C6Y.js";
import "./chunk-A6VKJXIH.js";
import "./chunk-KFSY6ZZH.js";
import {
  V
} from "./chunk-7EQSYZHW.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-GGOVZ2GK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-WLWP35G2.js";
import "./chunk-JPW73GY2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-2CTB7MKH.js";
import "./chunk-Z2ZUNW5S.js";
import "./chunk-7L7Z2HXM.js";
import "./chunk-75NKPXTR.js";
import "./chunk-EUVARFSM.js";
import "./chunk-3VUFACNT.js";
import "./chunk-ZEEBL7ZN.js";
import "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-5EXFDBQJ.js";
import "./chunk-57CHUY45.js";
import "./chunk-SJ2GJCS2.js";
import {
  h,
  l,
  w
} from "./chunk-H7RDAEPY.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-S5OISW44.js";
import {
  n as n2
} from "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import {
  m as m2
} from "./chunk-JL3TJGVW.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-43LWRDQS.js";
import "./chunk-R6YKST3K.js";
import "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-MP6GH2AC.js";
import {
  m,
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a,
  n
} from "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import {
  C,
  P,
  d
} from "./chunk-7I33FAWS.js";
import {
  e as e2
} from "./chunk-DWOEYHKS.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import {
  N
} from "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/3d/layers/BuildingSublayerView3D.js
var l3 = (l5, n7) => {
  let u = class extends m2(a2(s3(n2.EventedMixin(l5)))) {
    constructor(e3) {
      super(e3), this.sublayer = null, this.parent = null, this.view = null;
    }
    initialize() {
    }
    get suspended() {
      return !this.canResume();
    }
    get updating() {
      return !this.suspended && this.isUpdating();
    }
    get visible() {
      var _a;
      return !!((_a = this.sublayer) == null ? void 0 : _a.visible);
    }
    set visible(e3) {
      this._overrideIfSome("visible", e3);
    }
    get fullOpacity() {
      const e3 = (e4) => null != e4 ? e4 : 1;
      return e3(this.get("sublayer.opacity")) * e3(this.get("parent.fullOpacity"));
    }
    canResume() {
      var _a, _b;
      return !((_a = this.parent) == null ? void 0 : _a.suspended) && ((_b = this.view) == null ? void 0 : _b.ready) && this.visible || false;
    }
    isUpdating() {
      return false;
    }
  };
  return e([y()], u.prototype, "sublayer", void 0), e([y()], u.prototype, "parent", void 0), e([y({ readOnly: true })], u.prototype, "suspended", null), e([y({ type: Boolean, readOnly: true })], u.prototype, "updating", null), e([y()], u.prototype, "view", void 0), e([y()], u.prototype, "visible", null), e([y()], u.prototype, "fullOpacity", null), u = e([a("esri.views.3d.layers.BuildingSublayerView3D")], u), u;
};

// node_modules/@arcgis/core/views/3d/layers/i3s/BuildingFilterUtil.js
var o2;
!function(e3) {
  e3[e3.Solid = 0] = "Solid", e3[e3.WireFrame = 1] = "WireFrame", e3[e3.XRay = 2] = "XRay";
}(o2 || (o2 = {}));
var l4 = 0.15;
var t5 = 0.5 * l4;
function i(e3) {
  switch (e3.filterMode.type) {
    case "solid":
      return { mode: o2.Solid };
    case "wire-frame":
      return { mode: o2.WireFrame, edgeMaterial: a3(e3.filterMode.edges, {}) };
    case "x-ray":
      return { mode: o2.XRay };
  }
}
function c2(e3, r) {
  if (null == r)
    return e3.color[3] = 0, e3.edgeMaterial = null, void (e3.pickable = false);
  switch (r.mode) {
    case o2.Solid:
      return;
    case o2.WireFrame:
      return e3.color[3] = 0, e3.edgeMaterial = r.edgeMaterial, void (e3.pickable = false);
    case o2.XRay:
      return e3.color[0] = 1, e3.color[1] = 1, e3.color[2] = 1, e3.color[3] *= l4, e3.colorMixMode = n3.Replace, e3.castShadows = false, e3.pickable = false, void (e3.edgeMaterial = n6(e3.edgeMaterial));
  }
}
function n6(e3) {
  return null == e3 ? null : (s4.lastMaterial !== e3 && (s4.cachedMaterial = d5(e3), s4.lastMaterial = e3), s4.cachedMaterial);
}
function d5(r) {
  const a4 = t(r.color);
  return a4[3] *= t5, { ...r, color: a4 };
}
var s4 = { cachedMaterial: null, lastMaterial: null };

// node_modules/@arcgis/core/views/layers/BuildingComponentSublayerView.js
var o3 = class extends m {
  constructor() {
    super(...arguments), this.sublayer = null;
  }
  get updating() {
    return false;
  }
  get suspended() {
    return false;
  }
  get availableFields() {
    return [];
  }
  get filter() {
    return null;
  }
  set filter(r) {
    throw new Error("Not implemented");
  }
  queryFeatures(r, e3) {
    throw new Error("Not implemented");
  }
  queryObjectIds(r, e3) {
    throw new Error("Not implemented");
  }
  queryFeatureCount(r, e3) {
    throw new Error("Not implemented");
  }
  createQuery() {
    throw new Error("Not implemented");
  }
  queryExtent(r, e3) {
    throw new Error("Not implemented");
  }
  highlight(r) {
    throw new Error("Not implemented");
  }
};
e([y()], o3.prototype, "sublayer", void 0), e([y()], o3.prototype, "availableFields", null), e([y()], o3.prototype, "filter", null);

// node_modules/@arcgis/core/views/3d/layers/BuildingComponentSublayerView3D.js
var R = class extends t4(xt(l3(o3))) {
  constructor() {
    super(...arguments), this.type = "building-component-sublayer-3d", this.layerView = null, this._elevationContext = "scene", this._isIntegratedMesh = false, this._supportsLabeling = false, this.requiredFields = [], this.progressiveLoadFactor = 1, this._queryEngine = null;
  }
  get i3slayer() {
    return this.sublayer;
  }
  get layerUid() {
    return this.sublayer.layer.uid;
  }
  get sublayerUid() {
    return this.sublayer.uid;
  }
  get layerId() {
    return this.sublayer.layer.id;
  }
  get sublayerId() {
    return this.sublayer.id;
  }
  get layerPopupEnabledAndHasTemplate() {
    var _a, _b;
    return this.sublayer.popupEnabled && t2(this.sublayer, (_b = (_a = this.layerView) == null ? void 0 : _a.view.popup) == null ? void 0 : _b.defaultPopupTemplateEnabled);
  }
  initialize() {
    this.updatingHandles.add(() => [this.sublayer.renderer, this.definitionExpressionFields, this.filterExpressionFields], () => this._updateRequiredFields()), this.updatingHandles.add(() => this.sublayer.renderer, (e4) => this._rendererChange(e4), h);
    const e3 = () => this._filterChange();
    this.updatingHandles.add(() => this.parsedDefinitionExpression, e3), this.updatingHandles.add(() => null != this._filter ? this._filter.sortedObjectIds : null, e3), this.updatingHandles.add(() => null != this._filter ? this._filter.parsedWhereClause : null, e3), this.updatingHandles.add(() => [null != this._filter ? this._filter.parsedGeometry : null, null != this.filter ? this.filter.spatialRelationship : null], () => this._geometryFilterChange()), this.updatingHandles.add(() => this.parsedFilterExpressions, () => this._updateSymbologyOverride(), h), this.addResolvingPromise(this._updateRequiredFields());
  }
  get lodFactor() {
    return this.view.qualitySettings.sceneService.object.lodFactor;
  }
  get parsedFilterExpressions() {
    return "Overview" !== this.sublayer.modelName && this.layerView ? this.layerView.filterExpressions.map(([e3, r]) => {
      let t6;
      try {
        t6 = f.create(e3, this.sublayer.fieldsIndex);
      } catch (n7) {
        return s.getLogger(this).error("Failed to parse filterExpression: " + n7), null;
      }
      if (!t6.isStandardized)
        return s.getLogger(this).error("filterExpression is using non standard function"), null;
      const s6 = [], l5 = t6.fieldNames;
      return re(l5, this.sublayer.fields, { missingFields: s6 }), s6.length > 0 ? (s.getLogger(this).error(`filterExpression references unknown fields: ${s6.join(", ")}`), null) : [t6, r];
    }).filter((e3) => null != e3) : [];
  }
  get filter() {
    return null != this._filter ? this._filter.viewFilter : null;
  }
  set filter(e3) {
    null != e3 && L.checkSupport(e3) ? null != this._filter ? this._filter.viewFilter = e3 : this._filter = new L({ viewFilter: e3, layerFieldsIndex: this.sublayer.fieldsIndex, loadAsyncModule: (e4) => this._loadAsyncModule(e4), addSqlFilter: (e4, r) => this.addSqlFilter(e4, r, this.logError) }) : this._filter = null;
  }
  isUpdating() {
    return super.isUpdating() || null != this._filter && this._filter.updating;
  }
  _updateSymbologyOverride() {
    const e3 = this.parsedFilterExpressions;
    e3.length > 0 ? this._setSymbologyOverride((r, t6) => {
      for (const [s6, l5] of e3)
        try {
          if (s6.testFeature(r))
            return c2(t6, l5);
        } catch (i2) {
          this.logError(i2);
        }
      return c2(t6, null);
    }, this.filterExpressionFields) : this._setSymbologyOverride(null, null);
  }
  get filterExpressionFields() {
    return g(this.sublayer.fieldsIndex, this.parsedFilterExpressions.reduce((e3, [r]) => e3.concat(r.fieldNames), new Array()));
  }
  get availableFields() {
    const e3 = this.sublayer, r = e3.fieldsIndex;
    let t6 = this.requiredFields;
    if (e3.outFields || e3.layer.outFields) {
      const i2 = [...e3.outFields || [], ...e3.layer.outFields || []];
      t6 = [...b2(r, i2), ...t6];
    }
    return g(r, t6);
  }
  _createLayerGraphic(e3) {
    const t6 = new h2(null, null, e3);
    return t6.layer = this.sublayer.layer, t6.sourceLayer = this.sublayer, t6;
  }
  canResume() {
    return super.canResume() && (!this._controller || this._controller.rootNodeVisible);
  }
  async fetchPopupFeatures(e3, r) {
    const t6 = this._validateFetchPopupFeatures(r);
    if (t6)
      throw t6;
    if (null == r || !r.clientGraphics || 0 === r.clientGraphics.length)
      return [];
    const s6 = [], l5 = [], n7 = null != this.sublayer.associatedLayer ? await this.sublayer.associatedLayer.load() : this.sublayer, a4 = b2(this.sublayer.fieldsIndex, await n4(n7, p(this.sublayer, r))), o4 = /* @__PURE__ */ new Set();
    for (const i2 of r.clientGraphics)
      Ae(a4, i2, o4) ? l5.push(i2) : s6.push(i2);
    return 0 === l5.length ? s6 : (null != this.sublayer.associatedLayer && await this.sublayer.associatedLayer.load().catch(() => s.getLogger(this).warn("Failed to load associated feature layer. Displaying popup attributes from cached attributes.")), this.whenGraphicAttributes(l5, Array.from(o4)).catch(() => l5).then((e4) => s6.concat(e4)));
  }
  async _updateRequiredFields() {
    const e3 = g(this.sublayer.fieldsIndex, [...this.sublayer.renderer ? await this.sublayer.renderer.getRequiredFields(this.sublayer.fieldsIndex) : [], ...this.definitionExpressionFields || [], ...this.filterExpressionFields || []]);
    this._set("requiredFields", e3);
  }
  _validateFetchPopupFeatures(e3) {
    const { sublayer: r } = this, { popupEnabled: i2 } = r;
    return i2 ? p(r, e3) ? void 0 : new s2("buildingscenelayerview3d:fetchPopupFeatures", "Layer does not define a popup template", { sublayer: r }) : new s2("buildingscenelayerview3d:fetchPopupFeatures", "Popups are disabled", { sublayer: r });
  }
  getFilters() {
    const e3 = super.getFilters();
    return this.addSqlFilter(e3, this.parsedDefinitionExpression, this.logError), null != this._filter && this._filter.addFilters(e3, this.view, this._controller.crsIndex, this._collection), e3;
  }
  createQuery() {
    const e3 = { outFields: ["*"], returnGeometry: false, outSpatialReference: this.view.spatialReference };
    return null != this.filter ? this.filter.createQuery(e3) : new b(e3);
  }
  queryExtent(e3, r) {
    return this._ensureQueryEngine().executeQueryForExtent(this._ensureQuery(e3), r == null ? void 0 : r.signal);
  }
  queryFeatureCount(e3, r) {
    return this._ensureQueryEngine().executeQueryForCount(this._ensureQuery(e3), r == null ? void 0 : r.signal);
  }
  queryFeatures(e3, r) {
    return this._ensureQueryEngine().executeQuery(this._ensureQuery(e3), r == null ? void 0 : r.signal).then((e4) => {
      if (!(e4 == null ? void 0 : e4.features))
        return e4;
      const r2 = this.sublayer, t6 = r2.layer;
      for (const i2 of e4.features)
        i2.layer = t6, i2.sourceLayer = r2;
      return e4;
    });
  }
  queryObjectIds(e3, r) {
    return this._ensureQueryEngine().executeQueryForIds(this._ensureQuery(e3), r == null ? void 0 : r.signal);
  }
  _ensureQueryEngine() {
    return null == this._queryEngine && (this._queryEngine = this._createQueryEngine()), this._queryEngine;
  }
  _createQueryEngine() {
    const e3 = c(this.view.spatialReference, this.view.renderSpatialReference, this._collection);
    return new d4({ layerView: this, priority: I.FEATURE_QUERY_ENGINE, spatialIndex: new l2({ featureAdapter: new o({ objectIdField: this.sublayer.objectIdField, attributeStorageInfo: this.sublayer.attributeStorageInfo, getFeatureExtent: e3 }), forAllFeatures: (e4, r) => this._forAllFeatures((r2, t6, i2) => e4({ id: r2, index: t6, meta: i2 }), r, E.QUERYABLE), getFeatureExtent: e3, sourceSpatialReference: pe(this.sublayer), viewSpatialReference: this.view.spatialReference }) });
  }
  _ensureQuery(e3) {
    return this._addDefinitionExpressionToQuery(null == e3 ? this.createQuery() : b.from(e3));
  }
};
e([y()], R.prototype, "i3slayer", null), e([y()], R.prototype, "layerView", void 0), e([y()], R.prototype, "lodFactor", null), e([y({ readOnly: true })], R.prototype, "parsedFilterExpressions", null), e([y({ type: d2 })], R.prototype, "filter", null), e([y()], R.prototype, "_filter", void 0), e([y({ type: [String], readOnly: true })], R.prototype, "filterExpressionFields", null), e([y({ type: [String], readOnly: true })], R.prototype, "requiredFields", void 0), e([y({ type: [String], readOnly: true })], R.prototype, "availableFields", null), R = e([a("esri.views.3d.layers.BuildingComponentSublayerView3D")], R);
var L2 = R;

// node_modules/@arcgis/core/views/layers/BuildingSceneLayerView.js
var s5 = class extends d3 {
  constructor(r) {
    super(r), this.layer = null, this.sublayerViews = null;
  }
  highlight(r) {
    throw new Error("Not implemented");
  }
};
e([y()], s5.prototype, "layer", void 0), e([y()], s5.prototype, "sublayerViews", void 0);

// node_modules/@arcgis/core/views/3d/layers/BuildingSceneLayerView3D.js
var _ = l3(m);
var C2 = class extends n5(s5) {
  constructor(e3) {
    super(e3), this.type = "building-scene-3d", this.sublayerViews = new V(), this._abortController = new AbortController(), this._loadingComponents = 0, this._pendingWhenSublayerViews = /* @__PURE__ */ new Map(), this.ignoresMemoryFactor = false;
  }
  get filterExpression() {
    var _a;
    const e3 = this.layer.activeFilterId, r = null != e3 ? this.layer.filters.find((r2) => r2.id === e3) : null, s6 = null != r ? (_a = r.filterBlocks) == null ? void 0 : _a.find((e4) => "solid" === e4.filterMode.type) : null;
    return s6 ? s6.filterExpression : null;
  }
  get filterExpressions() {
    const e3 = this.layer.activeFilterId, r = null != e3 ? this.layer.filters.find((r2) => r2.id === e3) : null;
    return r && r.filterBlocks ? r.filterBlocks.toArray().map((e4) => [e4.filterExpression ?? "", i(e4)]) : [];
  }
  get updatingProgressValue() {
    const e3 = this.sublayerViews, r = this._loadingComponents + (e3 ? e3.length : 0);
    return e3.reduce((e4, r2) => e4 + r2.updatingProgress, 0) / r;
  }
  isUpdating() {
    return this._loadingComponents > 0 || this.sublayerViews && this.sublayerViews.some((e3) => e3.updating);
  }
  initialize() {
    de(this.layer.spatialReference, this.view.spatialReference, this.view.viewingMode), this._initializeSubLayerViews(this.layer.sublayers, this);
  }
  destroy() {
    this.sublayerViews && (this.sublayerViews.forEach((e3) => e3.destroy()), this.sublayerViews = null), this._abortController = e2(this._abortController);
  }
  _initializeSubLayerViews(e3, r) {
    const s6 = this, t6 = this.view;
    e3.forEach((e4) => {
      if (!e4.isEmpty)
        if ("building-group" === e4.type) {
          const s7 = new _({ sublayer: e4, view: t6, parent: r });
          this._initializeSubLayerViews(e4.sublayers, s7);
        } else
          "mesh" === e4.geometryType && (this._loadingComponents++, e4.load({ signal: this._abortController.signal }).then(() => {
            const i2 = new L2({ sublayer: e4, layerView: s6, view: t6, parent: r });
            this.sublayerViews.push(i2);
            const o4 = this._pendingWhenSublayerViews.get(e4);
            if (o4) {
              for (const e5 of o4)
                e5.resolve(i2);
              this._pendingWhenSublayerViews.delete(e4);
            }
            this.handles.add([l(() => i2.updating, () => this.notifyChange("updating"), w), l(() => i2.updatingProgress, () => this.notifyChange("updatingProgressValue"), w)]);
          }).catch((r2) => {
            d(r2) || s.getLogger(this).error(`Error while creating view for sublayer ${e4.id}
Layer: ${this.layer.url}
`, r2);
          }).then(() => {
            this._loadingComponents--, this.notifyChange("updating"), this.notifyChange("updatingProgressValue");
          }));
    });
  }
  getGraphicFromIntersectorTarget(e3) {
    for (const r of this.sublayerViews.items)
      if (r.sublayer.uid === e3.sublayerUid)
        return r.getGraphicFromIntersectorTarget(e3);
    return null;
  }
  async fetchPopupFeatures(e3, r) {
    if (null == r || !r.clientGraphics || 0 === r.clientGraphics.length)
      return [];
    const s6 = N(r.clientGraphics, (e4) => e4.sourceLayer), i2 = [];
    for (const [t6, o4] of s6) {
      const s7 = this._findComponent(t6);
      null != s7 && i2.push(s7.fetchPopupFeatures(e3, { ...r, clientGraphics: o4 }));
    }
    return P(i2).then((e4) => e4.flat());
  }
  whenGraphicBounds(e3) {
    const r = this._findComponent(e3.sourceLayer);
    return null == r ? Promise.reject() : r.whenGraphicBounds(e3);
  }
  getAABBFromIntersectorTarget(e3) {
    for (const r of this.sublayerViews.items)
      if (r.sublayer.uid === e3.sublayerUid)
        return r.getAABBFromIntersectorTarget(e3);
    return null;
  }
  async whenSublayerView(e3) {
    const r = this._findComponent(e3);
    if (null != r)
      return r;
    const s6 = this._pendingWhenSublayerViews.get(e3), t6 = C();
    return s6 ? s6.push(t6) : this._pendingWhenSublayerViews.set(e3, [t6]), t6.promise;
  }
  _findComponent(e3) {
    return this.sublayerViews.find((r) => e3 === r.sublayer);
  }
  highlight(e3) {
    e3 instanceof h2 ? e3 = [e3] : e3 instanceof V && (e3 = e3.toArray());
    const s6 = [];
    if (Array.isArray(e3) && e3.length > 0 && e3[0] instanceof h2) {
      const r = e3, t6 = /* @__PURE__ */ new Map();
      for (const e4 of r) {
        let r2 = t6.get(e4.sourceLayer);
        null == r2 && (r2 = [], t6.set(e4.sourceLayer, r2)), r2.push(e4);
      }
      this.sublayerViews.forEach((e4) => {
        const r2 = t6.get(e4.sublayer);
        r2 && s6.push(e4.highlight(r2));
      });
    }
    return n(s6);
  }
  get usedMemory() {
    return this.sublayerViews.reduce((e3, r) => e3 + r.usedMemory, 0);
  }
  get unloadedMemory() {
    return this.sublayerViews.reduce((e3, r) => e3 + r.unloadedMemory, 0);
  }
};
e([y()], C2.prototype, "sublayerViews", void 0), e([y({ readOnly: true })], C2.prototype, "filterExpression", null), e([y({ readOnly: true })], C2.prototype, "filterExpressions", null), e([y(t3)], C2.prototype, "updatingProgress", void 0), e([y({ readOnly: true, dependsOn: [] })], C2.prototype, "updatingProgressValue", null), C2 = e([a("esri.views.3d.layers.BuildingSceneLayerView3D")], C2);
var S = C2;
export {
  S as default
};
//# sourceMappingURL=BuildingSceneLayerView3D-DDNMLW5H.js.map
