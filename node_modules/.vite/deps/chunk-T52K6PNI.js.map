{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{TextureCoordinateAttributeType as e}from\"../attributes/TextureCoordinateAttribute.glsl.js\";import{VertexTextureCoordinates as t}from\"../attributes/VertexTextureCoordinates.glsl.js\";import{NormalsDoubleSidedMode as n}from\"./Normals.glsl.js\";import{glsl as a}from\"../../shaderModules/interfaces.js\";import{Texture2DDrawUniform as r}from\"../../shaderModules/Texture2DDrawUniform.js\";import{Texture2DPassUniform as o}from\"../../shaderModules/Texture2DPassUniform.js\";import{BindType as s}from\"../../shaderTechnique/BindType.js\";import{VertexAttribute as d}from\"../../../lib/VertexAttribute.js\";function m(m,c){const i=m.fragment;c.hasVertexTangents?(m.attributes.add(d.TANGENT,\"vec4\"),m.varyings.add(\"vTangent\",\"vec4\"),c.doubleSidedMode===n.WindingOrder?i.code.add(a`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = gl_FrontFacing ? vTangent.w : -vTangent.w;\nvec3 tangent = normalize(gl_FrontFacing ? vTangent.xyz : -vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`):i.code.add(a`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = vTangent.w;\nvec3 tangent = normalize(vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`)):i.code.add(a`mat3 computeTangentSpace(vec3 normal, vec3 pos, vec2 st) {\nvec3 Q1 = dFdx(pos);\nvec3 Q2 = dFdy(pos);\nvec2 stx = dFdx(st);\nvec2 sty = dFdy(st);\nfloat det = stx.t * sty.s - sty.t * stx.s;\nvec3 T = stx.t * Q2 - sty.t * Q1;\nT = T - normal * dot(normal, T);\nT *= inversesqrt(max(dot(T,T), 1.e-10));\nvec3 B = sign(det) * cross(normal, T);\nreturn mat3(T, B, normal);\n}`),c.textureCoordinateType!==e.None&&(m.include(t,c),i.uniforms.add(c.pbrTextureBindType===s.Pass?new o(\"normalTexture\",(e=>e.textureNormal)):new r(\"normalTexture\",(e=>e.textureNormal))),i.code.add(a`vec3 computeTextureNormal(mat3 tangentSpace, vec2 uv) {\nvec3 rawNormal = textureLookup(normalTexture, uv).rgb * 2.0 - 1.0;\nreturn tangentSpace * rawNormal;\n}`))}export{m as ComputeNormalTexture};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAIqlB,SAAS,EAAEA,IAAE,GAAE;AAAC,QAAMC,KAAED,GAAE;AAAS,IAAE,qBAAmBA,GAAE,WAAW,IAAI,EAAE,SAAQ,MAAM,GAAEA,GAAE,SAAS,IAAI,YAAW,MAAM,GAAE,EAAE,oBAAkB,EAAE,eAAaC,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,EAK9vB,IAAEA,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,EAKb,KAAGA,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWd,GAAE,EAAE,0BAAwB,EAAE,SAAOD,GAAE,QAAQ,GAAE,CAAC,GAAEC,GAAE,SAAS,IAAI,EAAE,uBAAqB,EAAE,OAAK,IAAIC,GAAE,iBAAiB,OAAG,EAAE,aAAc,IAAE,IAAIA,GAAE,iBAAiB,OAAG,EAAE,aAAc,CAAC,GAAED,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA,EAGrM;AAAE;",
  "names": ["m", "i", "s"]
}
