import {
  a as a3
} from "./chunk-TYYWU32H.js";
import {
  o
} from "./chunk-DC2RBHAS.js";
import {
  i as i2
} from "./chunk-3AKVKVHP.js";
import "./chunk-RLCH4JTX.js";
import {
  oe
} from "./chunk-XJSQN3VD.js";
import {
  T as T2,
  b as b2,
  w
} from "./chunk-ZYIW27ER.js";
import {
  f as f3
} from "./chunk-IVHBK5M6.js";
import "./chunk-U7ACAW2W.js";
import "./chunk-HVV5CDLD.js";
import "./chunk-JNPHM5XV.js";
import "./chunk-X6M7YYU3.js";
import {
  n
} from "./chunk-HMHRXSML.js";
import "./chunk-JXKASHKJ.js";
import "./chunk-WGM2OLIG.js";
import "./chunk-K5QQ6UU5.js";
import "./chunk-3MPC6MVT.js";
import "./chunk-UBY6VMKB.js";
import "./chunk-ULFDJHIR.js";
import {
  d as d2
} from "./chunk-TYEEWKIN.js";
import "./chunk-LYNC7OVT.js";
import {
  b,
  d,
  g
} from "./chunk-OKSL7DD6.js";
import {
  $ as $2,
  C
} from "./chunk-QKJ7WXDD.js";
import "./chunk-3QGLF4DO.js";
import "./chunk-OKNF37G2.js";
import "./chunk-5W2MUQQG.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-VF625TQS.js";
import "./chunk-UXWYXWGD.js";
import "./chunk-PX3Q44FM.js";
import "./chunk-XYJMHUDA.js";
import "./chunk-CSLWFQJE.js";
import "./chunk-MRDUXF66.js";
import "./chunk-IVABPLLZ.js";
import "./chunk-FS3VDXRM.js";
import "./chunk-BWIRPDWB.js";
import "./chunk-XP6ESZGI.js";
import "./chunk-RKM5MXYH.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-TBHRKIAA.js";
import "./chunk-EFDT2ZDW.js";
import "./chunk-USNIBKH4.js";
import "./chunk-BBJLFBMQ.js";
import "./chunk-J6SRKANJ.js";
import "./chunk-RBDJB3ZY.js";
import "./chunk-RRRAGAMB.js";
import "./chunk-ERFCZMKG.js";
import "./chunk-C2GW4T2D.js";
import "./chunk-SO7CVIZK.js";
import "./chunk-YAWND7HF.js";
import "./chunk-FJYIB7HF.js";
import {
  P
} from "./chunk-QQ4DNBSC.js";
import "./chunk-HGOUCXFH.js";
import "./chunk-X65XM5YN.js";
import "./chunk-JORCYNDS.js";
import "./chunk-BZUKDBTT.js";
import {
  m
} from "./chunk-FCJWVHPT.js";
import "./chunk-7YCGPGGL.js";
import "./chunk-GPABU246.js";
import "./chunk-KILCBNKU.js";
import "./chunk-XKYCNHCM.js";
import "./chunk-LIXBKTBN.js";
import {
  x as x2
} from "./chunk-K4WBDIIJ.js";
import "./chunk-H3DKDGMJ.js";
import "./chunk-FB6EWBGE.js";
import "./chunk-Z2RTGLQI.js";
import "./chunk-6FHMQNMS.js";
import {
  T,
  e2 as e3
} from "./chunk-TRGMWULG.js";
import "./chunk-WTPQKRQM.js";
import "./chunk-SADO52IH.js";
import "./chunk-V66LHQVK.js";
import "./chunk-JP7O2ZWE.js";
import "./chunk-AER5JAFS.js";
import "./chunk-7HZ72XIE.js";
import "./chunk-ALPCRJS4.js";
import "./chunk-WDZ5AAFL.js";
import "./chunk-XL7RF4A6.js";
import "./chunk-ZL3HOHNK.js";
import "./chunk-PR2OEILG.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-MVWFPLOX.js";
import {
  f as f2
} from "./chunk-X3YW4YOG.js";
import "./chunk-IG234GCS.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-BA6PBZHC.js";
import "./chunk-FF5LS3YE.js";
import {
  D,
  G,
  U,
  X
} from "./chunk-BCDDCNQ2.js";
import "./chunk-D3BOGOKY.js";
import "./chunk-QOWAKGE4.js";
import "./chunk-3TTW7E7W.js";
import "./chunk-RWWB77SD.js";
import "./chunk-ZMFGNDTK.js";
import "./chunk-UL64BLDS.js";
import "./chunk-EG6CFIHA.js";
import "./chunk-CMNAZRWU.js";
import "./chunk-KE6VYSDW.js";
import "./chunk-XIYY37WZ.js";
import "./chunk-P4PDTNIU.js";
import "./chunk-CEFGWR5H.js";
import "./chunk-NX5NNI52.js";
import "./chunk-G2DTL6AE.js";
import "./chunk-Q6HN54VB.js";
import "./chunk-Z3GCSCQI.js";
import "./chunk-PPNAO2PM.js";
import "./chunk-UU2XJGLA.js";
import "./chunk-CGJNVOU3.js";
import "./chunk-YA7WDOJK.js";
import "./chunk-FVR25IMN.js";
import "./chunk-EV77QZBT.js";
import "./chunk-QZ6WR57P.js";
import "./chunk-467UETSR.js";
import "./chunk-SHFLRM67.js";
import "./chunk-YGUWDSEH.js";
import "./chunk-LO3LAMAS.js";
import "./chunk-EFRTD25L.js";
import "./chunk-EAGDM3GO.js";
import "./chunk-GSS6WNQU.js";
import "./chunk-C2EHS6UI.js";
import "./chunk-W2YWKOK7.js";
import "./chunk-YOTOWDJK.js";
import "./chunk-ND7XUHDE.js";
import "./chunk-XG5SDOKD.js";
import "./chunk-UQHDCOJC.js";
import "./chunk-MF3HZ6GV.js";
import "./chunk-SNAARWF3.js";
import "./chunk-FQZ2JEHK.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-G3Q2URFK.js";
import {
  i
} from "./chunk-F6TKAVSX.js";
import "./chunk-D5NSNTGJ.js";
import "./chunk-63ERNIOV.js";
import "./chunk-QNFDBY7V.js";
import "./chunk-RVQLSA5X.js";
import "./chunk-5KLICR5E.js";
import "./chunk-YYTXJF6W.js";
import "./chunk-NLWV7Q6F.js";
import "./chunk-JB7FDW5N.js";
import "./chunk-SS3YG6J3.js";
import "./chunk-5IYCCZ54.js";
import "./chunk-JLSXEPY6.js";
import "./chunk-VMTVUE47.js";
import "./chunk-GDZM4A6K.js";
import "./chunk-XWGNMTES.js";
import "./chunk-6NNEHJYI.js";
import {
  $,
  nn
} from "./chunk-BNBT4QTW.js";
import "./chunk-3FQOSG5O.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-JNDFAMXY.js";
import "./chunk-NTEKJWGF.js";
import "./chunk-TFIKV5RU.js";
import "./chunk-KW6QQDGN.js";
import "./chunk-AQ7R6V4L.js";
import "./chunk-DOQ3SAAR.js";
import "./chunk-4BXK4H4L.js";
import "./chunk-SLVNG7FV.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-DKJBDKGA.js";
import "./chunk-4CZO65BK.js";
import "./chunk-DEZCXTA3.js";
import "./chunk-RRJGZKNX.js";
import "./chunk-PL5Q4C6Y.js";
import "./chunk-A6VKJXIH.js";
import "./chunk-KFSY6ZZH.js";
import {
  V
} from "./chunk-7EQSYZHW.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-GGOVZ2GK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-WLWP35G2.js";
import "./chunk-JPW73GY2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-Z2ZUNW5S.js";
import "./chunk-7L7Z2HXM.js";
import "./chunk-75NKPXTR.js";
import "./chunk-EUVARFSM.js";
import {
  M
} from "./chunk-3VUFACNT.js";
import {
  f,
  x2 as x
} from "./chunk-ZEEBL7ZN.js";
import "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-SJ2GJCS2.js";
import {
  l as l2
} from "./chunk-H7RDAEPY.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import "./chunk-JL3TJGVW.js";
import "./chunk-JZM5YUHA.js";
import {
  j
} from "./chunk-43LWRDQS.js";
import {
  a2
} from "./chunk-R6YKST3K.js";
import {
  I,
  v
} from "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-MP6GH2AC.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import "./chunk-7I33FAWS.js";
import {
  e as e2,
  l
} from "./chunk-DWOEYHKS.js";
import "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/support/imageReprojection.js
var l3 = class _l {
  constructor(t) {
    if (this._ownsRctx = false, t)
      this._ownsRctx = false, this._rctx = t;
    else {
      if (_l._instance)
        return _l._instanceRefCount++, _l._instance;
      _l._instanceRefCount = 1, _l._instance = this, this._ownsRctx = true;
      const t2 = document.createElement("canvas").getContext("webgl");
      t2.getExtension("OES_texture_float"), this._rctx = new P(t2, {});
    }
    const e4 = { applyProjection: true, bilinear: false, bicubic: false }, r = o("raster/reproject", "raster/reproject", /* @__PURE__ */ new Map([["a_position", 0]]), e4);
    this._program = this._rctx.programCache.acquire(r.shaders.vertexShader, r.shaders.fragmentShader, r.attributes), this._rctx.useProgram(this._program), this._program.setUniform1f("u_opacity", 1), this._program.setUniform1i("u_image", 0), this._program.setUniform1i("u_flipY", 0), this._program.setUniform1i("u_transformGrid", 1), this._quad = new n(this._rctx, [0, 0, 1, 0, 0, 1, 1, 1]);
  }
  reprojectTexture(t, s, n2 = false) {
    const o2 = nn(t.extent, s), m2 = new x({ x: (t.extent.xmax - t.extent.xmin) / t.texture.descriptor.width, y: (t.extent.ymax - t.extent.ymin) / t.texture.descriptor.height, spatialReference: t.extent.spatialReference }), { x: _, y: g2 } = C(m2, s, t.extent);
    let l4 = (_ + g2) / 2;
    const w2 = Math.round((o2.xmax - o2.xmin) / l4), b3 = Math.round((o2.ymax - o2.ymin) / l4);
    l4 = (o2.width / w2 + o2.height / b3) / 2;
    const j3 = new x({ x: l4, y: l4, spatialReference: o2.spatialReference }), D2 = $2({ projectedExtent: o2, srcBufferExtent: t.extent, pixelSize: j3, hasWrapAround: true, spacing: [16, 16] }), R = m(this._rctx, D2), C3 = new e3(w2, b3);
    C3.wrapMode = D.CLAMP_TO_EDGE;
    const T3 = new x2(this._rctx, C3);
    this._rctx.bindFramebuffer(T3), this._rctx.setViewport(0, 0, w2, b3), this._rctx.useProgram(this._program), this._rctx.bindTexture(t.texture, 0), this._rctx.bindTexture(R, 1), this._quad.bind();
    const { width: y2 = 0, height: E = 0 } = t.texture.descriptor;
    if (this._program.setUniform2f("u_srcImageSize", y2, E), this._program.setUniform2fv("u_transformSpacing", D2.spacing), this._program.setUniform2fv("u_transformGridSize", D2.size), this._program.setUniform2f("u_targetImageSize", w2, b3), this._quad.draw(), this._quad.unbind(), this._rctx.useProgram(null), this._rctx.bindFramebuffer(null), R.dispose(), n2) {
      const { width: t2, height: e4 } = T3, r = new ImageData(t2 ?? 0, e4 ?? 0);
      T3.readPixels(0, 0, t2 ?? 0, e4 ?? 0, G.RGBA, U.UNSIGNED_BYTE, r.data);
      const i3 = T3.detachColorTexture(X.COLOR_ATTACHMENT0);
      return T3.dispose(), { texture: i3, extent: o2, imageData: r };
    }
    const M2 = T3.detachColorTexture(X.COLOR_ATTACHMENT0);
    return T3.dispose(), { texture: M2, extent: o2 };
  }
  reprojectBitmapData(t, e4) {
    const r = w(t.bitmapData) ? b2(t.bitmapData) : t.bitmapData, i3 = new e3();
    i3.wrapMode = D.CLAMP_TO_EDGE, i3.width = t.bitmapData.width, i3.height = t.bitmapData.height;
    const a4 = new T(this._rctx, i3, r), o2 = this.reprojectTexture({ texture: a4, extent: t.extent }, e4, true);
    o2.texture.dispose();
    const m2 = document.createElement("canvas"), p = o2.imageData;
    m2.width = p.width, m2.height = p.height;
    return m2.getContext("2d").putImageData(p, 0, 0), { bitmapData: m2, extent: o2.extent };
  }
  async loadAndReprojectBitmapData(e4, r, i3) {
    const a4 = (await j(e4, { responseType: "image" })).data, s = document.createElement("canvas");
    s.width = a4.width, s.height = a4.height;
    const n2 = s.getContext("2d");
    n2.drawImage(a4, 0, 0);
    const o2 = n2.getImageData(0, 0, s.width, s.height);
    if (r.spatialReference.equals(i3))
      return { bitmapData: o2, extent: r };
    const m2 = this.reprojectBitmapData({ bitmapData: o2, extent: r }, i3);
    return { bitmapData: m2.bitmapData, extent: m2.extent };
  }
  destroy() {
    this._ownsRctx ? (_l._instanceRefCount--, 0 === _l._instanceRefCount && (this._quad.dispose(), this._program.dispose(), this._rctx.dispose(), _l._instance = null)) : (this._quad.dispose(), this._program.dispose());
  }
};
l3._instanceRefCount = 0;

// node_modules/@arcgis/core/views/2d/layers/KMLLayerView2D.js
var C2 = class {
  constructor() {
    this.allSublayers = /* @__PURE__ */ new Map(), this.allPoints = [], this.allPolylines = [], this.allPolygons = [], this.allMapImages = [];
  }
};
var j2 = class extends f3(d2) {
  constructor() {
    super(...arguments), this._bitmapIndex = /* @__PURE__ */ new Map(), this._mapImageContainer = new a3(), this._kmlVisualData = new C2(), this._fetchController = null, this.allVisiblePoints = new i(), this.allVisiblePolylines = new i(), this.allVisiblePolygons = new i(), this.allVisibleMapImages = new V();
  }
  async hitTest(e4, i3) {
    var _a, _b, _c;
    const t = this.layer;
    return [(_a = this._pointsView) == null ? void 0 : _a.hitTest(e4), (_b = this._polylinesView) == null ? void 0 : _b.hitTest(e4), (_c = this._polygonsView) == null ? void 0 : _c.hitTest(e4)].flat().filter(Boolean).map((i4) => (i4.layer = t, i4.sourceLayer = t, { type: "graphic", graphic: i4, layer: t, mapPoint: e4 }));
  }
  update(e4) {
    this._polygonsView && this._polygonsView.processUpdate(e4), this._polylinesView && this._polylinesView.processUpdate(e4), this._pointsView && this._pointsView.processUpdate(e4);
  }
  attach() {
    this._fetchController = new AbortController(), this.container.addChild(this._mapImageContainer), this._polygonsView = new oe({ view: this.view, graphics: this.allVisiblePolygons, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._polygonsView.container), this._polylinesView = new oe({ view: this.view, graphics: this.allVisiblePolylines, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._polylinesView.container), this._pointsView = new oe({ view: this.view, graphics: this.allVisiblePoints, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._pointsView.container), this.addAttachHandles([this.allVisibleMapImages.on("change", (e4) => {
      e4.added.forEach((e5) => this._addMapImage(e5)), e4.removed.forEach((e5) => this._removeMapImage(e5));
    }), l2(() => this.layer.visibleSublayers, (e4) => {
      for (const [i3, t] of this._kmlVisualData.allSublayers)
        t.visibility = 0;
      for (const i3 of e4) {
        const e5 = this._kmlVisualData.allSublayers.get(i3.id);
        e5 && (e5.visibility = 1);
      }
      this._refreshCollections();
    })]), this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)), this._imageReprojector = new l3();
  }
  detach() {
    this._fetchController = e2(this._fetchController), this._mapImageContainer.removeAllChildren(), this.container.removeAllChildren(), this._bitmapIndex.clear(), this._polygonsView = l(this._polygonsView), this._polylinesView = l(this._polylinesView), this._pointsView = l(this._pointsView), this._imageReprojector = l(this._imageReprojector);
  }
  moveStart() {
  }
  viewChange() {
    this._polygonsView.viewChange(), this._polylinesView.viewChange(), this._pointsView.viewChange();
  }
  moveEnd() {
  }
  isUpdating() {
    return this._pointsView.updating || this._polygonsView.updating || this._polylinesView.updating;
  }
  _addMapImage(e4) {
    var _a, _b;
    (((_a = this.view.spatialReference) == null ? void 0 : _a.isWGS84) || ((_b = this.view.spatialReference) == null ? void 0 : _b.isWebMercator)) && this._imageReprojector.loadAndReprojectBitmapData(e4.href, M.fromJSON(e4.extent), this.view.spatialReference).then((i3) => {
      const t = new T2(i3.bitmapData);
      t.x = i3.extent.xmin, t.y = i3.extent.ymax, t.resolution = i3.extent.width / i3.bitmapData.width, t.rotation = e4.rotation, this._mapImageContainer.addChild(t), this._bitmapIndex.set(e4, t);
    });
  }
  async _getViewDependentUrl(e4, t) {
    const { viewFormat: s, viewBoundScale: a4, httpQuery: o2 } = e4;
    if (null != s) {
      if (null == t)
        throw new Error("Loading this network link requires a view state.");
      let n2;
      if (await $(), null != a4 && 1 !== a4) {
        const e5 = new M(t.extent);
        e5.expand(a4), n2 = e5;
      } else
        n2 = t.extent;
      n2 = nn(n2, f.WGS84);
      const h = nn(n2, f.WebMercator), y2 = n2.xmin, g2 = n2.xmax, w2 = n2.ymin, _ = n2.ymax, b3 = t.size[0] * t.pixelRatio, V2 = t.size[1] * t.pixelRatio, f4 = Math.max(h.width, h.height), v2 = { "[bboxWest]": y2.toString(), "[bboxEast]": g2.toString(), "[bboxSouth]": w2.toString(), "[bboxNorth]": _.toString(), "[lookatLon]": n2.center.x.toString(), "[lookatLat]": n2.center.y.toString(), "[lookatRange]": f4.toString(), "[lookatTilt]": "0", "[lookatHeading]": t.rotation.toString(), "[lookatTerrainLon]": n2.center.x.toString(), "[lookatTerrainLat]": n2.center.y.toString(), "[lookatTerrainAlt]": "0", "[cameraLon]": n2.center.x.toString(), "[cameraLat]": n2.center.y.toString(), "[cameraAlt]": f4.toString(), "[horizFov]": "60", "[vertFov]": "60", "[horizPixels]": b3.toString(), "[vertPixels]": V2.toString(), "[terrainEnabled]": "0", "[clientVersion]": a2, "[kmlVersion]": "2.2", "[clientName]": "ArcGIS API for JavaScript", "[language]": "en-US" }, S = (e5) => {
        for (const i3 in e5) {
          let t2;
          for (t2 in v2)
            e5[i3] = e5[i3].replace(t2, v2[t2]);
        }
      }, I2 = I(s);
      S(I2);
      let x3 = {};
      null != o2 && (x3 = I(o2), S(x3));
      const C3 = f2(e4.href);
      C3.query = { ...C3.query, ...I2, ...x3 };
      return `${C3.path}?${v(I2)}`;
    }
    return e4.href;
  }
  async _fetchService(e4) {
    const i3 = new C2();
    await this._loadVisualData(this.layer.url, i3, e4), this._kmlVisualData = i3, this._refreshCollections();
  }
  _refreshCollections() {
    this.allVisiblePoints.removeAll(), this.allVisiblePolylines.removeAll(), this.allVisiblePolygons.removeAll(), this.allVisibleMapImages.removeAll(), this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e4) => this._isSublayerVisible(e4.sublayerId)).map(({ item: e4 }) => e4)), this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e4) => this._isSublayerVisible(e4.sublayerId)).map(({ item: e4 }) => e4)), this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e4) => this._isSublayerVisible(e4.sublayerId)).map(({ item: e4 }) => e4)), this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e4) => this._isSublayerVisible(e4.sublayerId)).map(({ item: e4 }) => e4));
  }
  _isSublayerVisible(e4) {
    const i3 = this._kmlVisualData.allSublayers.get(e4);
    return !!(i3 == null ? void 0 : i3.visibility) && (-1 === i3.parentFolderId || this._isSublayerVisible(i3.parentFolderId));
  }
  _loadVisualData(e4, i3, t) {
    return this._fetchParsedKML(e4, t).then(async (e5) => {
      for (const s of e5.sublayers) {
        i3.allSublayers.set(s.id, s);
        const e6 = s.points ? await b(s.points) : [], a4 = s.polylines ? await b(s.polylines) : [], o2 = s.polygons ? await b(s.polygons) : [], l4 = s.mapImages || [];
        if (i3.allPoints.push(...e6.map((e7) => ({ item: e7, sublayerId: s.id }))), i3.allPolylines.push(...a4.map((e7) => ({ item: e7, sublayerId: s.id }))), i3.allPolygons.push(...o2.map((e7) => ({ item: e7, sublayerId: s.id }))), i3.allMapImages.push(...l4.map((e7) => ({ item: e7, sublayerId: s.id }))), s.networkLink) {
          const e7 = await this._getViewDependentUrl(s.networkLink, this.view.state);
          await this._loadVisualData(e7, i3, t);
        }
      }
    });
  }
  _fetchParsedKML(e4, i3) {
    return g(e4, this.layer.spatialReference, this.layer.refreshInterval, i3).then((e5) => d(e5.data));
  }
  _removeMapImage(e4) {
    const i3 = this._bitmapIndex.get(e4);
    i3 && (this._mapImageContainer.removeChild(i3), this._bitmapIndex.delete(e4));
  }
};
e([y()], j2.prototype, "_pointsView", void 0), e([y()], j2.prototype, "_polylinesView", void 0), e([y()], j2.prototype, "_polygonsView", void 0), e([y()], j2.prototype, "updating", void 0), j2 = e([a("esri.views.2d.layers.KMLLayerView2D")], j2);
var k = j2;
export {
  k as default
};
//# sourceMappingURL=KMLLayerView2D-XYXQ2INX.js.map
