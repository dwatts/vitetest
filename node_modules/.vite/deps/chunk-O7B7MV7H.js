import {
  e as e2
} from "./chunk-PV5KBAYL.js";
import {
  e as e3
} from "./chunk-QS45OHBM.js";
import {
  o as o2
} from "./chunk-UUW6REOV.js";
import {
  i2 as i
} from "./chunk-BO2REVMA.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  e
} from "./chunk-CW7LIPBH.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import {
  c,
  n
} from "./chunk-7EG7BYWF.js";

// node_modules/@arcgis/core/chunks/Stars.glsl.js
function d() {
  const e4 = new i();
  return e4.attributes.add(O.POSITION, "vec3"), e4.attributes.add(O.COLOR, "vec4"), e4.attributes.add(O.SIZE, "float"), e4.varyings.add("vcolor", "vec4"), e4.varyings.add("vsize", "float"), e4.vertex.uniforms.add(new e2("transform", (e5, o3) => c2(e5, o3)), new e3("viewport", (e5, o3) => o3.camera.fullViewport), new o2("pixelRatio", (e5, o3) => o3.camera.pixelRatio)), e4.vertex.code.add(o`void main(void) {
gl_Position = transform * vec4(position, 0);
vcolor = color / 1.2;
vsize = size * 5.0 * pixelRatio;
gl_PointSize = vsize;
}`), e4.fragment.code.add(o`void main() {
float cap = 0.7;
float scale = 1.0 / cap;
float helper = clamp(length(abs(gl_PointCoord - vec2(0.5))), 0.0, cap);
float alpha = clamp((cap - helper) * scale, 0.0, 1.0);
float intensity = alpha * alpha * alpha;
if (vsize < 3.0) {
intensity *= 0.5;
}
fragColor = vec4(vcolor.xyz, intensity);
}`), e4;
}
function c2(a, r) {
  const i2 = 24e-8;
  return n(m, r.camera.projectionMatrix), m[10] = i2 - 1, m[11] = -1, m[14] = (i2 - 2) * r.camera.near, c(m, m, r.camera.viewMatrix), c(m, m, a.modelMatrix);
}
var m = e();
var f = Object.freeze(Object.defineProperty({ __proto__: null, build: d }, Symbol.toStringTag, { value: "Module" }));

export {
  d,
  f
};
//# sourceMappingURL=chunk-O7B7MV7H.js.map
