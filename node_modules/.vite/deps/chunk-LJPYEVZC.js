import {
  _
} from "./chunk-ETXJI6IO.js";
import {
  A as A2,
  E,
  I
} from "./chunk-UK4ZDRLR.js";
import {
  r
} from "./chunk-ZCXCGUT2.js";
import {
  a as a2
} from "./chunk-32IFRFHL.js";
import {
  n
} from "./chunk-XGIDQJNQ.js";
import {
  d as d2
} from "./chunk-TYEEWKIN.js";
import {
  m as m2,
  x
} from "./chunk-D6UIL3LF.js";
import {
  u
} from "./chunk-CS6BZGQO.js";
import {
  t
} from "./chunk-644IM3NW.js";
import {
  C
} from "./chunk-2EO2WRP7.js";
import {
  h as h2
} from "./chunk-IWA3Q52A.js";
import {
  d
} from "./chunk-2XKILFME.js";
import {
  y as y2
} from "./chunk-GSS6WNQU.js";
import {
  h as h3
} from "./chunk-XWGNMTES.js";
import {
  f
} from "./chunk-ZEEBL7ZN.js";
import {
  f as f2,
  h,
  l as l2,
  w
} from "./chunk-H7RDAEPY.js";
import {
  m,
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  c,
  s as s2
} from "./chunk-7I33FAWS.js";
import {
  l
} from "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-HMVAPW5X.js";
import {
  A
} from "./chunk-JZJWZ6DN.js";

// node_modules/@arcgis/core/views/3d/support/PBFDecoder.js
var a3 = class {
  constructor(e2) {
    this._controller = e2, this._handle = new i((r2) => e2.schedule(r2));
  }
  destroy() {
    this._handle.destroy();
  }
  invoke(r2, s3) {
    return r2.buffer && 0 !== r2.buffer.byteLength ? (r2.options.sourceSpatialReference && r2.options.sourceSpatialReference instanceof f && (r2.options = { ...r2.options, sourceSpatialReference: r2.options.sourceSpatialReference.toJSON() }), this._handle.invoke(r2, s3).then((r3) => {
      let s4 = 0, a4 = 0;
      const i3 = async (l3) => {
        if (r3.spatialReference = f.fromJSON(r3.spatialReference), r3.fields) {
          for (; s4 < r3.fields.length; )
            if (r3.fields[s4] = y2.fromJSON(r3.fields[s4]), s4++, l3.madeProgress())
              return this._controller.reschedule((e2) => i3(e2));
        }
        const c3 = r3.spatialReference;
        for (; a4 < r3.features.length; ) {
          const s5 = r3.features[a4];
          if (++a4, s5.uid = h3.generateUID(), null != s5.geometry && (s5.geometry.spatialReference = c3, n2(s5.geometry), l3.madeProgress()))
            return this._controller.reschedule((e2) => i3(e2));
        }
        return r3;
      };
      return this._controller.schedule((e2) => i3(e2));
    })) : Promise.resolve(null);
  }
};
function n2(e2) {
  switch (e2.type) {
    case "polyline":
      e2.paths.reduce((e3, r2) => e3 + r2.length, 0) < A && (e2.paths = e2.hasZ || e2.hasM ? e2.paths.map((e3) => e3.map((e4) => [e4[0], e4[1], e4[2]])) : e2.paths.map((e3) => e3.map((e4) => [e4[0], e4[1]])));
      break;
    case "polygon":
      e2.rings.reduce((e3, r2) => e3 + r2.length, 0) < A && (e2.rings = e2.hasZ || e2.hasM ? e2.rings.map((e3) => e3.map((e4) => [e4[0], e4[1], e4[2]])) : e2.rings.map((e3) => e3.map((e4) => [e4[0], e4[1]])));
  }
}
var i = class extends h2 {
  constructor(e2) {
    super("PBFDecoderWorker", "_parseFeatureQuery", { _parseFeatureQuery: (e3) => [e3.buffer] }, e2);
  }
};

// node_modules/@arcgis/core/views/3d/layers/support/featureTileQuery3D.js
var p = class extends m {
  constructor(e2) {
    super(e2);
  }
  get queryFeaturesDehydrated() {
    var _a;
    const e2 = this.layer.capabilities, r2 = e2 && e2.query, t2 = r2 && r2.supportsFormatPBF, u2 = this.layer.parsedUrl;
    if (t2) {
      null == this._decoder && (this._decoder = new a3(this.controller));
      const e3 = { sourceSpatialReference: ((_a = this.layer.spatialReference) == null ? void 0 : _a.toJSON()) ?? null, applyTransform: true, maxStringAttributeLength: 1024 };
      return (r3, t3) => x(u2, r3, "pbf", this._createRequestOptions(t3)).then((r4) => (s2(t3), null != this._decoder ? this._decoder.invoke({ buffer: r4.data, options: e3 }, t3.signal) : Promise.reject(c())));
    }
    return (e3, r3) => m2(u2, e3, this.layer.spatialReference, this._createRequestOptions(r3)).then((e4) => d(e4.data));
  }
  queryFeatureCount(e2, r2) {
    return this.layer.queryFeatureCount(e2, r2);
  }
  destroy() {
    this._decoder = l(this._decoder);
  }
  _createRequestOptions(e2) {
    return { ...e2, query: { ...this.layer.customParameters, token: this.layer.apiKey, ...e2 == null ? void 0 : e2.query } };
  }
};
e([y({ constructOnly: true })], p.prototype, "layer", void 0), e([y({ constructOnly: true })], p.prototype, "controller", void 0), e([y({ readOnly: true })], p.prototype, "queryFeaturesDehydrated", null), p = e([a("esri.views.3d.layers.support.featureTileQuery3D.FeatureTileServiceQuery3D")], p);
var c2 = class extends m {
  constructor(e2) {
    super(e2);
  }
  queryFeaturesDehydrated(e2, r2) {
    return this.layer.queryFeatures(e2, r2);
  }
  queryFeatureCount(e2, r2) {
    return this.layer.queryFeatureCount(e2, r2);
  }
};
e([y({ constructOnly: true })], c2.prototype, "layer", void 0), e([y({ readOnly: true })], c2.prototype, "queryFeaturesDehydrated", null), c2 = e([a("esri.views.3d.layers.support.featureTileQuery3D.FeatureTileServiceMeshQuery3D")], c2);
var d3 = class extends m {
  constructor(e2) {
    super(e2);
  }
  queryFeaturesDehydrated(e2, r2) {
    return this.layer.queryFeatures(e2, r2);
  }
};
e([y({ constructOnly: true })], d3.prototype, "layer", void 0), d3 = e([a("esri.views.3d.layers.support.featureTileQuery3D.FeatureTileServiceQuery3D")], d3);
var h4 = class extends m {
  constructor(e2) {
    super(e2);
  }
  queryFeaturesDehydrated(e2, r2) {
    return this.source.queryFeaturesJSON(e2, r2).then(d, (t2) => {
      if (t2 && "query-features-json:unsupported" === t2.name)
        return this.layer.queryFeatures(e2, r2);
      throw t2;
    });
  }
  queryFeatureCount(e2, r2) {
    return this.layer.queryFeatureCount(e2, r2);
  }
};
function m3(e2, r2) {
  return "feature" === e2.type && "feature-layer" === e2.source.type ? null != e2.infoFor3D ? new c2({ layer: e2 }) : new p({ layer: e2, controller: r2 }) : "feature" === e2.type && "memory" === e2.source.type || "csv" === e2.type || "geojson" === e2.type || "oriented-imagery" === e2.type || "wfs" === e2.type ? new h4({ layer: e2, source: e2.source }) : "ogc-feature" === e2.type ? new d3({ layer: e2 }) : null;
}
e([y({ constructOnly: true })], h4.prototype, "layer", void 0), e([y({ constructOnly: true })], h4.prototype, "source", void 0), h4 = e([a("esri.views.3d.layers.support.featureTileQuery3D.FeatureTileClientQuery3D")], h4);

// node_modules/@arcgis/core/views/3d/layers/support/FeatureTileFetcher3DLayerViewContext.js
var i2 = class {
  constructor(e2) {
    this._memoryCache = null, this._capabilities = null;
    const r2 = e2.layerView.layer;
    this._layerView = e2.layerView, this.objectIdField = r2.objectIdField, this.globalIdField = "globalIdField" in r2 ? r2.globalIdField : null, this._returnZ = e2.returnZ, this._returnM = e2.returnM;
    const i3 = this._layerView.view.resourceController;
    this.query = m3(r2, i3.normal), i3 && this._memoryCacheEnabled && (this._memoryCache = i3.memoryController.newCache(`fl-${r2.uid}`));
  }
  get _memoryCacheEnabled() {
    switch (this._layerView.layer.source.type) {
      case "feature-layer":
      case "ogc-feature":
      case "oriented-imagery":
        return true;
      case "csv":
      case "geojson":
      case "memory":
      case "wfs":
        return false;
    }
  }
  destroy() {
    this._memoryCache = l(this._memoryCache), this.query.destroy();
  }
  createQuery() {
    const e2 = this._layerView.layer.createQuery();
    return e2.outFields = this._layerView.availableFields, e2.returnZ = this._returnZ, e2.returnM = this._returnM, e2.outSpatialReference = this.tilingScheme.spatialReference, e2;
  }
  get memoryCache() {
    return this._memoryCache;
  }
  get viewingMode() {
    return this._layerView.view.state.viewingMode;
  }
  get tilingScheme() {
    return this._layerView.view.featureTiles.tilingScheme;
  }
  get scheduler() {
    const e2 = this._layerView.view.resourceController;
    return e2 ? e2.scheduler : null;
  }
  get geometryType() {
    return this._layerView.layer.geometryType;
  }
  get fullExtent() {
    return this._layerView.layer.fullExtent;
  }
  get tileMaxRecordCount() {
    return this._layerView.layer.capabilities.query.tileMaxRecordCount;
  }
  get maxRecordCount() {
    return this._layerView.layer.capabilities.query.maxRecordCount;
  }
  get capabilities() {
    return null != this._capabilities || (this._capabilities = A2(this._layerView.layer)), this._capabilities;
  }
  logFetchError(e2, r2) {
    e2.error("#fetchTile()", this._layerView.layer, r2 && r2.message ? r2.message : r2);
  }
};

// node_modules/@arcgis/core/views/3d/layers/FeatureLayerViewBase3D.js
var b = class extends a2(E(_(n(d2)))) {
  constructor(e2) {
    super(e2), this._controllerTotal = 0, this._processorTotal = 0, this.suspendResumeExtentMode = "data";
  }
  initialize() {
    this.handles.add(l2(() => this._updatingRequiredFieldsPromise, (e2) => this.updatingHandles.addPromise(e2), w));
  }
  destroy() {
    this.updatingHandles.removeAll(), this.handles.removeAll(), this._fetcherContext = l(this._fetcherContext);
  }
  get maximumNumberOfFeatures() {
    var _a;
    return ((_a = this.controller) == null ? void 0 : _a.maximumNumberOfFeatures) ?? this._get("maximumNumberOfFeatures");
  }
  set maximumNumberOfFeatures(e2) {
    this._set("maximumNumberOfFeatures", e2), this.controller && (this.controller.maximumNumberOfFeatures = e2);
  }
  get maximumNumberOfFeaturesExceeded() {
    return !!this.controller && !(this.suspended || !this.controller.maximumNumberOfFeaturesExceeded);
  }
  get updatingProgressValue() {
    var _a, _b;
    let e2 = 0;
    if ((_a = this.controller) == null ? void 0 : _a.updating) {
      const r3 = this.controller.updatingRemaining, t2 = Math.max(this.controller.updatingTotal, this._controllerTotal);
      t2 > 0 && (e2 = (t2 - r3) / t2, this._controllerTotal = t2);
    }
    let r2 = 0;
    if ((_b = this.processor) == null ? void 0 : _b.updating) {
      const e3 = this.processor.updatingRemaining, t2 = Math.max(e3, this._processorTotal);
      t2 > 0 && (r2 = (t2 - e3) / t2, this._processorTotal = t2);
    }
    return 0.5 * (e2 + r2);
  }
  get updatePolicy() {
    if (!this.controller)
      return C.ASYNC;
    switch (this.controller.mode) {
      case "snapshot": {
        const e2 = M.get(this.layer.geometryType);
        return null == e2 || this.controller.serviceDataCount > e2 ? C.ASYNC : C.SYNC;
      }
      case "tiles":
        return C.ASYNC;
    }
  }
  get hasZ() {
    const e2 = this.layer, r2 = e2.capabilities && e2.capabilities.data;
    return !(!r2 || !r2.supportsZ) && ("returnZ" in e2 && null != e2.returnZ ? e2.returnZ : r2.supportsZ);
  }
  get hasM() {
    const e2 = this.layer, r2 = e2.capabilities && e2.capabilities.data;
    return !(!r2 || !r2.supportsM) && ("returnM" in e2 && null != e2.returnM && e2.returnM);
  }
  setVisibility(e2, r2) {
    var _a;
    (_a = this.processor) == null ? void 0 : _a.setObjectIdVisibility(e2, r2);
  }
  createQuery() {
    return super.createQuery();
  }
  queryFeatures(e2, r2) {
    const t2 = () => super.queryFeatures(e2, r2);
    return "mesh" === this.layer.geometryType ? this._queryFeaturesMesh(this._ensureQuery(e2), t2) : t2();
  }
  beforeSetController(e2) {
    e2.maximumNumberOfFeatures = this.maximumNumberOfFeatures;
  }
  createController() {
    this._fetcherContext = new i2({ layerView: this, returnZ: this.hasZ, returnM: this.hasM });
    const e2 = new I({ layerView: this, context: this._fetcherContext, graphics: new r(), extent: this.clippingExtent });
    return this.updatingHandles.add(() => e2.serviceDataExtent, (e3) => {
      this.processor && (this.processor.dataExtent = e3);
    }, h), this.handles.add(l2(() => this.suspended, (r2) => {
      r2 ? e2.suspend() : e2.resume();
    }, w)), this.updatingHandles.add(() => {
      var _a;
      return (_a = this.processor) == null ? void 0 : _a.displayFeatureLimit;
    }, (r2) => e2.displayFeatureLimit = r2, h), this.handles.add(f2(() => !this.updating, () => {
      this._controllerTotal = 0, this._processorTotal = 0;
    })), e2;
  }
  async doRefresh(e2) {
    e2 && !this.suspended && this.controller && this.controller.refetch(), this.processor.refreshFilter();
  }
  get usedMemory() {
    var _a, _b;
    return (((_a = this.processor) == null ? void 0 : _a.usedMemory) ?? 0) + (((_b = this.controller) == null ? void 0 : _b.memoryForUnusedFeatures) ?? 0);
  }
  get unloadedMemory() {
    var _a, _b, _c, _d;
    const e2 = ((_a = this.processor) == null ? void 0 : _a.unprocessedMemoryEstimate) ?? 0, r2 = ((_b = this.controller) == null ? void 0 : _b.expectedFeatureDiff) ?? 0, t2 = ((_c = this.processor) == null ? void 0 : _c.loadedFeatures) ?? 0, s3 = t2 / (t2 + r2);
    return e2 + r2 * (((_d = this.processor) == null ? void 0 : _d.usedMemoryPerFeature) ?? 0) * s3;
  }
  get ignoresMemoryFactor() {
    var _a;
    return (_a = this.controller) == null ? void 0 : _a.hasMaximumNumberOfFeaturesOverride;
  }
  async _queryFeaturesMesh(e2, r2) {
    await this._validateQueryFeaturesMesh(e2);
    const t2 = await r2();
    if (e2 && e2.outStatistics || null == this.graphics3DProcessor)
      return t2;
    const s3 = this.layer.objectIdField, o = this.graphics3DProcessor.graphics3DGraphicsByObjectID, i3 = [];
    for (const a4 of t2.features)
      if (a4.geometry) {
        const e3 = o.get(a4.attributes[s3]);
        e3 && (a4.geometry = u(e3.graphic.geometry), i3.push(a4));
      } else
        i3.push(a4);
    return t2.features = i3, t2;
  }
  async _validateQueryFeaturesMesh(e2) {
    if (!e2)
      return;
    const t2 = (e3) => {
      throw new s("feature-layer-view:unsupported-query", `Queries on Mesh feature collection layers do not support '${e3}'`);
    }, s3 = ["quantizationParameters", "geometryPrecision", "maxAllowableOffset"];
    for (const r2 of s3)
      null != e2[r2] && t2(r2);
    "returnM" in e2 && e2.returnM && t2("returnM"), "returnCentroid" in e2 && e2.returnCentroid && t2("returnCentroid"), null == e2.outSpatialReference || e2.outSpatialReference.equals(this.view.spatialReference) || t2("outSpatialReference");
  }
  get performanceInfo() {
    var _a, _b, _c, _d;
    const e2 = (_a = this.controller) == null ? void 0 : _a.displayFeatureLimit, r2 = null != e2 ? e2.averageSymbolComplexity : void 0, t2 = null != r2 ? `f:${r2.primitivesPerFeature},v:${r2.primitivesPerCoordinate}` : "n/a";
    return { ...this._getResourceInfo(), partial: this.maximumNumberOfFeaturesExceeded, mode: ((_b = this.controller) == null ? void 0 : _b.mode) ?? "n/a", symbolComplexity: t2, nodes: ((_c = this.controller) == null ? void 0 : _c.tileDescriptors.length) ?? 0, ...((_d = this.controller) == null ? void 0 : _d.debug) ?? { storedFeatures: 0, totalVertices: 0 } };
  }
  get test() {
    var _a;
    return { updatePolicy: this.updatePolicy, controller: this.controller, loadedGraphics: (_a = this.controller) == null ? void 0 : _a.graphics };
  }
};
e([y()], b.prototype, "layer", void 0), e([y()], b.prototype, "controller", void 0), e([y()], b.prototype, "_controllerTotal", void 0), e([y()], b.prototype, "_processorTotal", void 0), e([y()], b.prototype, "maximumNumberOfFeatures", null), e([y()], b.prototype, "maximumNumberOfFeaturesExceeded", null), e([y(t)], b.prototype, "updatingProgress", void 0), e([y({ readOnly: true })], b.prototype, "updatingProgressValue", null), e([y({ readOnly: true })], b.prototype, "updatePolicy", null), e([y({ readOnly: true })], b.prototype, "hasZ", null), e([y({ readOnly: true })], b.prototype, "hasM", null), e([y()], b.prototype, "suspendResumeExtentMode", void 0), b = e([a("esri.views.3d.layers.FeatureLayerViewBase3D")], b);
var M = /* @__PURE__ */ new Map([["point", 5e3], ["polygon", 500], ["polyline", 1e3]]);
var _2 = b;

export {
  _2 as _
};
//# sourceMappingURL=chunk-LJPYEVZC.js.map
