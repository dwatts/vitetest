import {
  E,
  u
} from "./chunk-WTPQKRQM.js";
import {
  D,
  G,
  L,
  M,
  P,
  U,
  V,
  f
} from "./chunk-BCDDCNQ2.js";
import {
  n
} from "./chunk-63ERNIOV.js";
import {
  o
} from "./chunk-TEHNQYQD.js";
import {
  s3 as s
} from "./chunk-HMVAPW5X.js";

// node_modules/@arcgis/core/views/webgl/GLObjectType.js
var e;
!function(e3) {
  e3[e3.Texture = 0] = "Texture", e3[e3.RenderBuffer = 1] = "RenderBuffer";
}(e || (e = {}));

// node_modules/@arcgis/core/views/webgl/TextureDescriptor.js
var e2 = class {
  constructor(p = 0, e3 = p) {
    this.width = p, this.height = e3, this.target = M.TEXTURE_2D, this.pixelFormat = G.RGBA, this.dataType = U.UNSIGNED_BYTE, this.samplingMode = L.LINEAR, this.wrapMode = D.REPEAT, this.maxAnisotropy = 1, this.flipped = false, this.hasMipmap = false, this.isOpaque = false, this.unpackAlignment = 4, this.preMultiplyAlpha = false, this.depth = 1, this.isImmutable = false;
  }
};
function r(t) {
  return t.width <= 0 || t.height <= 0 || null == t.internalFormat ? 0 : t.width * t.height * (t.hasMipmap ? 4 / 3 : 1) * E(t.internalFormat);
}

// node_modules/@arcgis/core/views/webgl/ValidatedTextureDescriptor.js
var a = class _a extends e2 {
  constructor(t, a2) {
    switch (super(), this.context = t, Object.assign(this, a2), this.internalFormat) {
      case P.R16F:
      case P.R16I:
      case P.R16UI:
      case P.R32F:
      case P.R32I:
      case P.R32UI:
      case P.R8_SNORM:
      case P.R8:
      case P.R8I:
      case P.R8UI:
        this.pixelFormat = G.RED;
    }
  }
  static validate(s2, e3) {
    return new _a(s2, e3);
  }
};

// node_modules/@arcgis/core/views/webgl/Texture.js
var u2 = 4;
var T = class {
  constructor(e3, i = null, a2 = null) {
    if (this.type = e.Texture, this._glName = null, this._samplingModeDirty = false, this._wrapModeDirty = false, this._wasImmutablyAllocated = false, "context" in e3)
      this._descriptor = e3, a2 = i;
    else {
      const r2 = a.validate(e3, i);
      if (!r2)
        throw new s("Texture descriptor invalid");
      this._descriptor = r2;
    }
    if (this._descriptor.context.instanceCounter.increment(V.Texture, this), this._descriptor.context.type !== n.WEBGL2 && (this._descriptor.isImmutable && (this._descriptor.isImmutable = false), R(this._descriptor.target)))
      throw new s("3D and array textures are not supported in WebGL1");
    this._descriptor.target === M.TEXTURE_CUBE_MAP ? this._setDataCubeMap(a2) : this.setData(a2);
  }
  get glName() {
    return this._glName;
  }
  get descriptor() {
    return this._descriptor;
  }
  get gpuMemoryUsage() {
    return P2.delete(this), r(this._descriptor);
  }
  get isDirty() {
    return this._samplingModeDirty || this._wrapModeDirty;
  }
  dispose() {
    this._descriptor.context.gl && this._glName && (this._descriptor.context.unbindTexture(this), this._descriptor.context.gl.deleteTexture(this._glName), this._glName = null, this._descriptor.context.instanceCounter.decrement(V.Texture, this));
  }
  release() {
    this.dispose();
  }
  resize(e3, i) {
    const r2 = this._descriptor;
    if (r2.width !== e3 || r2.height !== i) {
      if (this._wasImmutablyAllocated)
        throw new s("Immutable textures can't be resized!");
      r2.width = e3, r2.height = i, this._descriptor.target === M.TEXTURE_CUBE_MAP ? this._setDataCubeMap(null) : this.setData(null);
    }
  }
  _setDataCubeMap(t = null) {
    for (let e3 = M.TEXTURE_CUBE_MAP_POSITIVE_X; e3 <= M.TEXTURE_CUBE_MAP_NEGATIVE_Z; e3++)
      this._setData(t, e3);
  }
  setData(t) {
    this._setData(t);
  }
  _setData(e3, r2) {
    if (!this._descriptor.context || !this._descriptor.context.gl)
      return;
    const s2 = this._descriptor.context.gl;
    u(s2), this._glName || (this._glName = s2.createTexture()), void 0 === e3 && (e3 = null);
    const o2 = this._descriptor, a2 = r2 ?? o2.target, n2 = R(a2);
    null === e3 && (o2.width = o2.width || u2, o2.height = o2.height || u2, n2 && (o2.depth = o2.depth ?? 1));
    const p = this._descriptor.context.bindTexture(this, T.TEXTURE_UNIT_FOR_UPDATES);
    this._descriptor.context.setActiveTexture(T.TEXTURE_UNIT_FOR_UPDATES), g(this._descriptor.context, o2), this._configurePixelStorage(), u(s2);
    const h = this._deriveInternalFormat();
    if (D2(e3)) {
      let t = e3.width, r3 = e3.height;
      const p2 = 1;
      e3 instanceof HTMLVideoElement && (t = e3.videoWidth, r3 = e3.videoHeight), o2.width && o2.height, n2 && o2.depth, o2.isImmutable && !this._wasImmutablyAllocated && this._texStorage(a2, h, o2.hasMipmap, t, r3, p2), this._texImage(a2, 0, h, t, r3, p2, e3), u(s2), o2.hasMipmap && this.generateMipmap(), o2.width || (o2.width = t), o2.height || (o2.height = r3), n2 && !o2.depth && (o2.depth = p2);
    } else {
      const { width: r3, height: p2, depth: l } = o2;
      if (null == r3 || null == p2)
        throw new s("Width and height must be specified!");
      if (n2 && null == l)
        throw new s("Depth must be specified!");
      if (o2.isImmutable && !this._wasImmutablyAllocated && this._texStorage(a2, h, o2.hasMipmap, r3, p2, l), A(e3)) {
        const i = e3.levels, n3 = b(a2, r3, p2, l), d = Math.min(n3 - 1, i.length - 1);
        null != this._descriptor.context.gl2 ? s2.texParameteri(o2.target, this._descriptor.context.gl2.TEXTURE_MAX_LEVEL, d) : o2.hasMipmap = o2.hasMipmap && n3 === i.length;
        const c = h;
        if (!w(c))
          throw new s("Attempting to use compressed data with an uncompressed format!");
        this._forEachMipmapLevel((t, e4, r4, s3) => {
          const o3 = i[Math.min(t, i.length - 1)];
          this._compressedTexImage(a2, t, c, e4, r4, s3, o3);
        }, d);
      } else
        this._texImage(a2, 0, h, r3, p2, l, e3), u(s2), o2.hasMipmap && this.generateMipmap();
    }
    x(s2, this._descriptor), E2(s2, this._descriptor), f2(this._descriptor.context, this._descriptor), u(s2), this._descriptor.context.bindTexture(p, T.TEXTURE_UNIT_FOR_UPDATES);
  }
  updateData(e3, i, r2, s2, o2, a2, n2 = 0) {
    a2 || console.error("An attempt to use uninitialized data!"), this._glName || console.error("An attempt to update uninitialized texture!");
    const p = this._descriptor.context.gl, h = this._descriptor.context.gl2, l = this._descriptor, d = this._deriveInternalFormat(), { pixelFormat: c, dataType: _, target: m, isImmutable: u3 } = l;
    if (u3 && !this._wasImmutablyAllocated)
      throw new s("Cannot update immutable texture before allocation!");
    const g2 = this._descriptor.context.bindTexture(this, T.TEXTURE_UNIT_FOR_UPDATES, true);
    if ((i < 0 || r2 < 0 || s2 > l.width || o2 > l.height || i + s2 > l.width || r2 + o2 > l.height) && console.error("An attempt to update out of bounds of the texture!"), this._configurePixelStorage(), n2) {
      if (!h)
        return void console.error("Webgl2 must be enabled to use dataRowOffset!");
      p.pixelStorei(h.UNPACK_SKIP_ROWS, n2);
    }
    if (D2(a2) ? h ? h.texSubImage2D(m, e3, i, r2, s2, o2, c, _, a2) : p.texSubImage2D(m, e3, i, r2, c, _, a2) : A(a2) ? p.compressedTexSubImage2D(m, e3, i, r2, s2, o2, d, a2.levels[e3]) : p.texSubImage2D(m, e3, i, r2, s2, o2, c, _, a2), n2) {
      if (!h)
        return void console.error("Webgl2 must be enabled to use dataRowOffset!");
      p.pixelStorei(h.UNPACK_SKIP_ROWS, 0);
    }
    this._descriptor.context.bindTexture(g2, T.TEXTURE_UNIT_FOR_UPDATES);
  }
  updateData3D(e3, i, r2, s2, o2, a2, n2, p) {
    p || console.error("An attempt to use uninitialized data!"), this._glName || console.error("An attempt to update uninitialized texture!");
    const h = this._descriptor.context.gl2;
    if (null == h)
      throw new s("3D textures are not supported in WebGL1");
    const l = this._descriptor, d = this._deriveInternalFormat(), { pixelFormat: c, dataType: _, isImmutable: m, target: u3 } = l;
    if (m && !this._wasImmutablyAllocated)
      throw new s("Cannot update immutable texture before allocation!");
    R(u3) || console.warn("Attempting to set 3D texture data on a non-3D texture");
    const g2 = this._descriptor.context.bindTexture(this, T.TEXTURE_UNIT_FOR_UPDATES);
    if (this._descriptor.context.setActiveTexture(T.TEXTURE_UNIT_FOR_UPDATES), (i < 0 || r2 < 0 || s2 < 0 || o2 > l.width || a2 > l.height || n2 > l.depth || i + o2 > l.width || r2 + a2 > l.height || s2 + n2 > l.depth) && console.error("An attempt to update out of bounds of the texture!"), this._configurePixelStorage(), A(p))
      p = p.levels[e3], h.compressedTexSubImage3D(u3, e3, i, r2, s2, o2, a2, n2, d, p);
    else {
      const t = p;
      h.texSubImage3D(u3, e3, i, r2, s2, o2, a2, n2, c, _, t);
    }
    this._descriptor.context.bindTexture(g2, T.TEXTURE_UNIT_FOR_UPDATES);
  }
  generateMipmap() {
    const e3 = this._descriptor;
    if (!e3.hasMipmap) {
      if (this._wasImmutablyAllocated)
        throw new s("Cannot add mipmaps to immutable texture after allocation");
      e3.hasMipmap = true, this._samplingModeDirty = true, g(this._descriptor.context, e3);
    }
    e3.samplingMode === L.LINEAR ? (this._samplingModeDirty = true, e3.samplingMode = L.LINEAR_MIPMAP_NEAREST) : e3.samplingMode === L.NEAREST && (this._samplingModeDirty = true, e3.samplingMode = L.NEAREST_MIPMAP_NEAREST);
    const i = this._descriptor.context.bindTexture(this, T.TEXTURE_UNIT_FOR_UPDATES);
    this._descriptor.context.setActiveTexture(T.TEXTURE_UNIT_FOR_UPDATES);
    this._descriptor.context.gl.generateMipmap(e3.target), this._descriptor.context.bindTexture(i, T.TEXTURE_UNIT_FOR_UPDATES);
  }
  setSamplingMode(t) {
    t !== this._descriptor.samplingMode && (this._descriptor.samplingMode = t, this._samplingModeDirty = true);
  }
  setWrapMode(t) {
    t !== this._descriptor.wrapMode && (this._descriptor.wrapMode = t, g(this._descriptor.context, this._descriptor), this._wrapModeDirty = true);
  }
  applyChanges() {
    const t = this._descriptor.context.gl, e3 = this._descriptor;
    this._samplingModeDirty && (x(t, e3), this._samplingModeDirty = false), this._wrapModeDirty && (E2(t, e3), this._wrapModeDirty = false);
  }
  _deriveInternalFormat() {
    if (this._descriptor.context.type === n.WEBGL1)
      return this._descriptor.internalFormat = this._descriptor.pixelFormat;
    if (null != this._descriptor.internalFormat)
      return this._descriptor.internalFormat === G.DEPTH_STENCIL && (this._descriptor.internalFormat = G.DEPTH24_STENCIL8), this._descriptor.internalFormat;
    switch (this._descriptor.dataType) {
      case U.FLOAT:
        switch (this._descriptor.pixelFormat) {
          case G.RGBA:
            return this._descriptor.internalFormat = P.RGBA32F;
          case G.RGB:
            return this._descriptor.internalFormat = P.RGB32F;
          default:
            throw new s("Unable to derive format");
        }
      case U.UNSIGNED_BYTE:
        switch (this._descriptor.pixelFormat) {
          case G.RGBA:
            return this._descriptor.internalFormat = P.RGBA8;
          case G.RGB:
            return this._descriptor.internalFormat = P.RGB8;
        }
    }
    return this._descriptor.internalFormat = this._descriptor.pixelFormat === G.DEPTH_STENCIL ? G.DEPTH24_STENCIL8 : this._descriptor.pixelFormat;
  }
  _configurePixelStorage() {
    const t = this._descriptor.context.gl, { unpackAlignment: e3, flipped: i, preMultiplyAlpha: r2 } = this._descriptor;
    t.pixelStorei(t.UNPACK_ALIGNMENT, e3), t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, i ? 1 : 0), t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r2 ? 1 : 0);
  }
  _texStorage(e3, i, r2, s2, o2, a2) {
    const n2 = this._descriptor.context.gl2;
    if (null == n2)
      throw new s("Immutable textures are not supported in WebGL1");
    if (!M2(i))
      throw new s("Immutable textures must have a sized internal format");
    if (!this._descriptor.isImmutable)
      return;
    const p = r2 ? b(e3, s2, o2, a2) : 1;
    if (R(e3)) {
      if (null == a2)
        throw new s("Missing depth dimension for 3D texture upload");
      n2.texStorage3D(e3, p, i, s2, o2, a2);
    } else
      n2.texStorage2D(e3, p, i, s2, o2);
    this._wasImmutablyAllocated = true;
  }
  _texImage(e3, i, s2, o2, a2, n2, p) {
    const h = this._descriptor.context.gl, l = R(e3), { isImmutable: d, pixelFormat: c, dataType: _ } = this._descriptor, m = this._descriptor.context.type === n.WEBGL2, u3 = m ? h : null;
    if (m || !D2(p))
      if (d) {
        if (null != p) {
          const r2 = p;
          if (l) {
            if (null == n2)
              throw new s("Missing depth dimension for 3D texture upload");
            u3.texSubImage3D(e3, i, 0, 0, 0, o2, a2, n2, c, _, r2);
          } else
            h.texSubImage2D(e3, i, 0, 0, o2, a2, c, _, r2);
        }
      } else {
        const r2 = p;
        if (l) {
          if (null == n2)
            throw new s("Missing depth dimension for 3D texture upload");
          u3.texImage3D(e3, i, s2, o2, a2, n2, 0, c, _, r2);
        } else
          h.texImage2D(e3, i, s2, o2, a2, 0, c, _, r2);
      }
    else
      h.texImage2D(e3, 0, s2, c, _, p);
  }
  _compressedTexImage(e3, i, s2, o2, a2, n2, p) {
    const h = this._descriptor.context.gl;
    let l = null;
    const d = R(e3), c = this._descriptor.isImmutable;
    if (d) {
      if (this._descriptor.context.type !== n.WEBGL2)
        throw new s("3D textures are not supported in WebGL1");
      l = h;
    }
    if (c) {
      if (null != p)
        if (d) {
          if (null == n2)
            throw new s("Missing depth dimension for 3D texture upload");
          l.compressedTexSubImage3D(e3, i, 0, 0, 0, o2, a2, n2, s2, p);
        } else
          h.compressedTexSubImage2D(e3, i, 0, 0, o2, a2, s2, p);
    } else if (d) {
      if (null == n2)
        throw new s("Missing depth dimension for 3D texture upload");
      l.compressedTexImage3D(e3, i, s2, o2, a2, n2, 0, p);
    } else
      h.compressedTexImage2D(e3, i, s2, o2, a2, 0, p);
  }
  _forEachMipmapLevel(e3, i = 1 / 0) {
    let { width: r2, height: s2, depth: a2, hasMipmap: n2, target: p } = this._descriptor;
    const h = p === M.TEXTURE_3D;
    if (null == r2 || null == s2 || h && null == a2)
      throw new s("Missing texture dimensions for mipmap calculation");
    for (let t = 0; e3(t, r2, s2, a2), n2 && (1 !== r2 || 1 !== s2 || h && 1 !== a2) && !(t >= i); ++t)
      r2 = Math.max(1, r2 >> 1), s2 = Math.max(1, s2 >> 1), h && (a2 = Math.max(1, a2 >> 1));
  }
};
function g(t, i) {
  (null != i.width && i.width < 0 || null != i.height && i.height < 0 || null != i.depth && i.depth < 0) && console.error("Negative dimension parameters are not allowed!");
  const s2 = t.type === n.WEBGL2;
  if (s2 || !i.isImmutable && !R(i.target) || console.error("Immutable and 3D-like textures are not supported in WebGL1!"), s2)
    return;
  null != i.width && o(i.width) && null != i.height && o(i.height) || ("number" == typeof i.wrapMode ? i.wrapMode !== D.CLAMP_TO_EDGE && console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!") : i.wrapMode.s === D.CLAMP_TO_EDGE && i.wrapMode.t === D.CLAMP_TO_EDGE || console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"), i.hasMipmap && console.error("Mipmapping requires power-of-two textures!"));
}
function x(t, e3) {
  let i = e3.samplingMode, r2 = e3.samplingMode;
  i === L.LINEAR_MIPMAP_NEAREST || i === L.LINEAR_MIPMAP_LINEAR ? (i = L.LINEAR, e3.hasMipmap || (r2 = L.LINEAR)) : i !== L.NEAREST_MIPMAP_NEAREST && i !== L.NEAREST_MIPMAP_LINEAR || (i = L.NEAREST, e3.hasMipmap || (r2 = L.NEAREST)), t.texParameteri(e3.target, t.TEXTURE_MAG_FILTER, i), t.texParameteri(e3.target, t.TEXTURE_MIN_FILTER, r2);
}
function E2(t, e3) {
  "number" == typeof e3.wrapMode ? (t.texParameteri(e3.target, t.TEXTURE_WRAP_S, e3.wrapMode), t.texParameteri(e3.target, t.TEXTURE_WRAP_T, e3.wrapMode)) : (t.texParameteri(e3.target, t.TEXTURE_WRAP_S, e3.wrapMode.s), t.texParameteri(e3.target, t.TEXTURE_WRAP_T, e3.wrapMode.t));
}
function f2(t, e3) {
  const i = t.capabilities.textureFilterAnisotropic;
  if (!i)
    return;
  t.gl.texParameterf(e3.target, i.TEXTURE_MAX_ANISOTROPY, e3.maxAnisotropy ?? 1);
}
function M2(t) {
  return t in P;
}
function w(t) {
  return t in f;
}
function A(t) {
  return null != t && "type" in t && "compressed" === t.type;
}
function I(t) {
  return null != t && "byteLength" in t;
}
function D2(t) {
  return null != t && !A(t) && !I(t);
}
function R(t) {
  return t === M.TEXTURE_3D || t === M.TEXTURE_2D_ARRAY;
}
function b(t, e3, i, r2 = 1) {
  let s2 = Math.max(e3, i);
  return t === M.TEXTURE_3D && (s2 = Math.max(s2, r2)), Math.round(Math.log(s2) / Math.LN2) + 1;
}
T.TEXTURE_UNIT_FOR_UPDATES = 0;
var P2 = /* @__PURE__ */ new Map();

export {
  e,
  e2,
  T
};
//# sourceMappingURL=chunk-TRGMWULG.js.map
