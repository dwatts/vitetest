import {
  o as o3
} from "./chunk-ZWFMUHG3.js";
import {
  T
} from "./chunk-4BXK4H4L.js";
import {
  o,
  r
} from "./chunk-RTDN6KAT.js";
import {
  o as o2,
  s
} from "./chunk-F3KGLZDZ.js";
import {
  l
} from "./chunk-MP6GH2AC.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  c
} from "./chunk-DWOEYHKS.js";

// node_modules/@arcgis/core/symbols/support/FeatureExpressionInfo.js
var i;
var p = i = class extends l {
  constructor(r2) {
    super(r2);
  }
  async collectRequiredFields(r2, s2) {
    return T(r2, s2, this.expression);
  }
  clone() {
    return new i({ expression: this.expression, title: this.title });
  }
  equals(r2) {
    return this.expression === r2.expression && this.title === r2.title;
  }
};
e([y({ type: String, json: { write: true } })], p.prototype, "expression", void 0), e([y({ type: String, json: { write: true } })], p.prototype, "title", void 0), p = i = e([a("esri.layers.support.FeatureExpressionInfo")], p);
var c2 = p;

// node_modules/@arcgis/core/symbols/support/ElevationInfo.js
var l2;
var m = o2()({ onTheGround: "on-the-ground", relativeToGround: "relative-to-ground", relativeToScene: "relative-to-scene", absoluteHeight: "absolute-height" });
var d = new s({ foot: "feet", kilometer: "kilometers", meter: "meters", mile: "miles", "us-foot": "us-feet", yard: "yards" });
var c3 = l2 = class extends l {
  constructor(e2) {
    super(e2), this.offset = null;
  }
  readFeatureExpressionInfo(e2, r2) {
    return null != e2 ? e2 : r2.featureExpression && 0 === r2.featureExpression.value ? { expression: "0" } : void 0;
  }
  writeFeatureExpressionInfo(e2, r2, o4, t) {
    r2[o4] = e2.write({}, t), "0" === e2.expression && (r2.featureExpression = { value: 0 });
  }
  get mode() {
    const { offset: e2, featureExpressionInfo: r2 } = this;
    return this._isOverridden("mode") ? this._get("mode") : null != e2 || r2 ? "relative-to-ground" : "on-the-ground";
  }
  set mode(e2) {
    this._override("mode", e2);
  }
  set unit(e2) {
    this._set("unit", e2);
  }
  write(e2, r2) {
    return this.offset || this.mode || this.featureExpressionInfo || this.unit ? super.write(e2, r2) : null;
  }
  clone() {
    return new l2({ mode: this.mode, offset: this.offset, featureExpressionInfo: this.featureExpressionInfo ? this.featureExpressionInfo.clone() : void 0, unit: this.unit });
  }
  equals(e2) {
    return this.mode === e2.mode && this.offset === e2.offset && this.unit === e2.unit && c(this.featureExpressionInfo, e2.featureExpressionInfo);
  }
};
e([y({ type: c2, json: { write: true } })], c3.prototype, "featureExpressionInfo", void 0), e([o("featureExpressionInfo", ["featureExpressionInfo", "featureExpression"])], c3.prototype, "readFeatureExpressionInfo", null), e([r("featureExpressionInfo", { featureExpressionInfo: { type: c2 }, "featureExpression.value": { type: [0] } })], c3.prototype, "writeFeatureExpressionInfo", null), e([y({ type: m.apiValues, nonNullable: true, json: { type: m.jsonValues, read: m.read, write: { writer: m.write, isRequired: true } } })], c3.prototype, "mode", null), e([y({ type: Number, json: { write: true } })], c3.prototype, "offset", void 0), e([y({ type: o3, json: { type: String, read: d.read, write: d.write } })], c3.prototype, "unit", null), c3 = l2 = e([a("esri.layers.support.ElevationInfo")], c3);
var h = c3;

export {
  h
};
//# sourceMappingURL=chunk-OZL6Q7O2.js.map
