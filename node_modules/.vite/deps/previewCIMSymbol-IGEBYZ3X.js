import {
  l
} from "./chunk-EMIGKZUY.js";
import {
  t
} from "./chunk-YU3ZC63O.js";
import {
  M,
  z
} from "./chunk-5HISUHXO.js";
import "./chunk-ZW3OKQGC.js";
import "./chunk-BSSEIP2H.js";
import "./chunk-FKUVQAN6.js";
import "./chunk-4YQPCE3Y.js";
import "./chunk-2735WBYK.js";
import {
  ie,
  ne
} from "./chunk-VF625TQS.js";
import "./chunk-PX3Q44FM.js";
import "./chunk-XYJMHUDA.js";
import "./chunk-CSLWFQJE.js";
import "./chunk-IVABPLLZ.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-J6SRKANJ.js";
import "./chunk-2EWAI4LP.js";
import "./chunk-DNEN337Y.js";
import "./chunk-ALPCRJS4.js";
import "./chunk-WDZ5AAFL.js";
import "./chunk-XL7RF4A6.js";
import {
  O
} from "./chunk-ZL3HOHNK.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-BA6PBZHC.js";
import "./chunk-467UETSR.js";
import "./chunk-SHFLRM67.js";
import "./chunk-GOK4EI36.js";
import "./chunk-LO3LAMAS.js";
import "./chunk-QNFDBY7V.js";
import "./chunk-RVQLSA5X.js";
import "./chunk-5KLICR5E.js";
import "./chunk-NLWV7Q6F.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-JNDFAMXY.js";
import "./chunk-NTEKJWGF.js";
import "./chunk-TFIKV5RU.js";
import "./chunk-KW6QQDGN.js";
import "./chunk-AQ7R6V4L.js";
import {
  e,
  u
} from "./chunk-DOQ3SAAR.js";
import "./chunk-4BXK4H4L.js";
import "./chunk-SLVNG7FV.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-SVCGLUNW.js";
import "./chunk-RRJGZKNX.js";
import "./chunk-PL5Q4C6Y.js";
import "./chunk-KFSY6ZZH.js";
import "./chunk-7EQSYZHW.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-GGOVZ2GK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-WLWP35G2.js";
import "./chunk-JPW73GY2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-Z2ZUNW5S.js";
import "./chunk-7L7Z2HXM.js";
import "./chunk-75NKPXTR.js";
import "./chunk-EUVARFSM.js";
import "./chunk-3VUFACNT.js";
import "./chunk-ZEEBL7ZN.js";
import "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-AHL6RC7E.js";
import "./chunk-RLLQRKO4.js";
import "./chunk-H7RDAEPY.js";
import "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import "./chunk-JL3TJGVW.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-43LWRDQS.js";
import "./chunk-R6YKST3K.js";
import "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-MP6GH2AC.js";
import "./chunk-V76KGJFU.js";
import "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import "./chunk-7I33FAWS.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/symbols/support/previewCIMSymbol.js
var c = new z(null, true);
var h = e(t.size);
var m = e(t.maxSize);
var u2 = e(t.lineWidth);
var f = 1;
function y(e2) {
  const t2 = e2 == null ? void 0 : e2.size;
  if ("number" == typeof t2)
    return { width: t2, height: t2 };
  return { width: null != t2 && "object" == typeof t2 && "width" in t2 ? t2.width : null, height: null != t2 && "object" == typeof t2 && "height" in t2 ? t2.height : null };
}
async function d(e2, r = {}) {
  var _a;
  const { node: a, opacity: d2, symbolConfig: g } = r, p = null != g && "object" == typeof g && "isSquareFill" in g && g.isSquareFill, w = r.cimOptions || r, b = w.geometryType || O((_a = e2 == null ? void 0 : e2.data) == null ? void 0 : _a.symbol), M2 = y(r), { feature: j, fieldMap: v } = w;
  if (null == M2.width || null == M2.height) {
    const t2 = await ne.resolveSymbolOverrides(e2.data, j, null, v, b);
    if (!t2)
      return null;
    (e2 = e2.clone()).data = { type: "CIMSymbolReference", symbol: t2 }, e2.data.primitiveOverrides = void 0;
    const r2 = [];
    ie.fetchResources(t2, c.resourceManager, r2), ie.fetchFonts(t2, c.resourceManager, r2), r2.length > 0 && await Promise.all(r2);
    const n = ie.getEnvelope(t2, null, c.resourceManager), o = n == null ? void 0 : n.width, a2 = n == null ? void 0 : n.height;
    M2.width = "esriGeometryPolygon" === b ? h : "esriGeometryPolyline" === b ? u2 : null != o && isFinite(o) ? Math.min(o, m) : h, M2.height = "esriGeometryPolygon" === b ? h : null != a2 && isFinite(a2) ? Math.max(Math.min(a2, m), f) : h;
  }
  const S = await c.rasterizeCIMSymbolAsync(e2, j, M2, p || "esriGeometryPolygon" !== b ? M.Preview : M.Legend, v, b);
  if (!S)
    return null;
  const { width: C, height: L } = S, I = document.createElement("canvas");
  I.width = C, I.height = L;
  I.getContext("2d").putImageData(S, 0, 0);
  const P = u(M2.width), x = u(M2.height), z2 = new Image(P, x);
  z2.src = I.toDataURL(), z2.ariaLabel = r.ariaLabel ?? null, z2.alt = r.ariaLabel ?? "", null != d2 && (z2.style.opacity = `${d2}`);
  let F = z2;
  if (null != r.effectView) {
    const e3 = { shape: { type: "image", x: 0, y: 0, width: P, height: x, src: z2.src }, fill: null, stroke: null, offset: [0, 0] };
    F = l([[e3]], [P, x], { effectView: r.effectView, ariaLabel: r.ariaLabel });
  }
  return a && F && a.appendChild(F), F;
}
export {
  d as previewCIMSymbol
};
//# sourceMappingURL=previewCIMSymbol-IGEBYZ3X.js.map
