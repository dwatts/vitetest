import {
  T,
  q
} from "./chunk-QKJ7WXDD.js";
import {
  p
} from "./chunk-BFVDDR4R.js";
import {
  b
} from "./chunk-IQRLZSBX.js";
import {
  h
} from "./chunk-XWGNMTES.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  s3 as s
} from "./chunk-HMVAPW5X.js";

// node_modules/@arcgis/core/views/layers/ImageryTileLayerView.js
var p2 = (p3) => {
  let u = class extends p3 {
    constructor() {
      super(...arguments), this._rasterFieldPrefix = "Raster.", this.layer = null, this.view = null, this.tileInfo = null;
    }
    get fullExtent() {
      return this._getfullExtent();
    }
    _getfullExtent() {
      return this.projectFullExtent(this.view.spatialReference);
    }
    get hasTilingEffects() {
      return !!(this.layer.renderer && "dynamicRangeAdjustment" in this.layer.renderer && this.layer.renderer.dynamicRangeAdjustment);
    }
    get datumTransformation() {
      return T(this.layer.fullExtent, this.view.spatialReference, true);
    }
    supportsSpatialReference(e2) {
      return !!this.projectFullExtent(e2);
    }
    projectFullExtent(e2) {
      const t = this.layer.fullExtent, r = T(t, e2, false);
      return q(t, e2, r);
    }
    async fetchPopupFeatures(e2, o) {
      const { layer: s2 } = this;
      if (!e2)
        throw new s("imageryTileLayerView:fetchPopupFeatures", "Nothing to fetch without area", { layer: s2 });
      const { popupEnabled: i } = s2, a2 = p(s2, o);
      if (!i || null == a2)
        throw new s("imageryTileLayerView:fetchPopupFeatures", "Missing required popupTemplate or popupEnabled", { popupEnabled: i, popupTemplate: a2 });
      const n = [], { value: p4, magdirValue: u2, processedValue: c } = await s2.identify(e2, { timeExtent: this.timeExtent });
      let f = "";
      if (p4 && p4.length) {
        f = "imagery-tile" === s2.type && s2.hasStandardTime() && null != p4[0] ? p4.map((e4) => s2.getStandardTimeValue(e4)).join(", ") : p4.join(", ");
        const e3 = { ObjectId: 0 }, r = "Raster.ServicePixelValue";
        e3[r] = (c == null ? void 0 : c.join(", ")) ?? f, e3[r + ".Raw"] = f;
        const o2 = s2.rasterInfo.attributeTable;
        if (null != o2) {
          const { fields: t, features: r2 } = o2, s3 = t.find(({ name: e4 }) => "value" === e4.toLowerCase()), i3 = s3 ? r2.find((e4) => String(e4.attributes[s3.name]) === f) : null;
          if (i3) {
            for (const o3 in i3.attributes)
              if (i3.attributes.hasOwnProperty(o3)) {
                e3[this._rasterFieldPrefix + o3] = i3.attributes[o3];
              }
          }
        }
        const i2 = s2.rasterInfo.dataType;
        "vector-magdir" !== i2 && "vector-uv" !== i2 || (e3["Raster.Magnitude"] = u2 == null ? void 0 : u2[0], e3["Raster.Direction"] = u2 == null ? void 0 : u2[1]);
        const a3 = new h(this.fullExtent.clone(), null, e3);
        a3.layer = s2, a3.sourceLayer = a3.layer, n.push(a3);
      }
      return n;
    }
  };
  return e([y()], u.prototype, "layer", void 0), e([y(b)], u.prototype, "timeExtent", void 0), e([y()], u.prototype, "view", void 0), e([y()], u.prototype, "fullExtent", null), e([y()], u.prototype, "tileInfo", void 0), e([y({ readOnly: true })], u.prototype, "hasTilingEffects", null), e([y()], u.prototype, "datumTransformation", null), u = e([a("esri.views.layers.ImageryTileLayerView")], u), u;
};

export {
  p2 as p
};
//# sourceMappingURL=chunk-V7H3MV7N.js.map
