import {
  c,
  n as n3,
  p as p2
} from "./chunk-JZVYLVFO.js";
import {
  c as c2,
  m
} from "./chunk-SCAYUERS.js";
import {
  s
} from "./chunk-XM3YSFN6.js";
import {
  o as o4
} from "./chunk-LGDKASPG.js";
import {
  r
} from "./chunk-KFDARCTS.js";
import {
  t as t3
} from "./chunk-AB23UNQC.js";
import {
  d
} from "./chunk-RDWKBYTH.js";
import {
  n as n2
} from "./chunk-IBJTEQQG.js";
import {
  o as o2
} from "./chunk-SADO52IH.js";
import {
  e as e5
} from "./chunk-WVOBJDWI.js";
import {
  n,
  t as t2
} from "./chunk-LIO6VZRI.js";
import {
  h
} from "./chunk-73PNWDTS.js";
import {
  t
} from "./chunk-PKS3ZVLN.js";
import {
  P
} from "./chunk-N3RXOITN.js";
import {
  l,
  p
} from "./chunk-DOR4M5EA.js";
import {
  e as e2
} from "./chunk-PV5KBAYL.js";
import {
  e as e4
} from "./chunk-QS45OHBM.js";
import {
  e as e3
} from "./chunk-WRFNQB7U.js";
import {
  o as o3
} from "./chunk-UUW6REOV.js";
import {
  i2 as i
} from "./chunk-BO2REVMA.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/RibbonLineTechniqueConfiguration.js
var r2;
!function(o5) {
  o5[o5.BUTT = 0] = "BUTT", o5[o5.SQUARE = 1] = "SQUARE", o5[o5.ROUND = 2] = "ROUND", o5[o5.COUNT = 3] = "COUNT";
}(r2 || (r2 = {}));
var s2 = class extends s {
  constructor() {
    super(...arguments), this.output = h.Color, this.capType = r2.BUTT, this.transparencyPassType = o2.NONE, this.occluder = false, this.hasSlicePlane = false, this.hasPolygonOffset = false, this.writeDepth = false, this.draped = false, this.stippleEnabled = false, this.stippleOffColorEnabled = false, this.stippleScaleWithLineWidth = false, this.stipplePreferContinuous = true, this.roundJoins = false, this.applyMarkerOffset = false, this.vvSize = false, this.vvColor = false, this.vvOpacity = false, this.falloffEnabled = false, this.innerColorEnabled = false, this.hasOccludees = false, this.hasMultipassTerrain = false, this.cullAboveGround = false, this.wireframe = false, this.objectAndLayerIdColorInstanced = false;
  }
};
e([r({ count: h.COUNT })], s2.prototype, "output", void 0), e([r({ count: r2.COUNT })], s2.prototype, "capType", void 0), e([r({ count: o2.COUNT })], s2.prototype, "transparencyPassType", void 0), e([r()], s2.prototype, "occluder", void 0), e([r()], s2.prototype, "hasSlicePlane", void 0), e([r()], s2.prototype, "hasPolygonOffset", void 0), e([r()], s2.prototype, "writeDepth", void 0), e([r()], s2.prototype, "draped", void 0), e([r()], s2.prototype, "stippleEnabled", void 0), e([r()], s2.prototype, "stippleOffColorEnabled", void 0), e([r()], s2.prototype, "stippleScaleWithLineWidth", void 0), e([r()], s2.prototype, "stipplePreferContinuous", void 0), e([r()], s2.prototype, "roundJoins", void 0), e([r()], s2.prototype, "applyMarkerOffset", void 0), e([r()], s2.prototype, "vvSize", void 0), e([r()], s2.prototype, "vvColor", void 0), e([r()], s2.prototype, "vvOpacity", void 0), e([r()], s2.prototype, "falloffEnabled", void 0), e([r()], s2.prototype, "innerColorEnabled", void 0), e([r()], s2.prototype, "hasOccludees", void 0), e([r()], s2.prototype, "hasMultipassTerrain", void 0), e([r()], s2.prototype, "cullAboveGround", void 0), e([r()], s2.prototype, "wireframe", void 0), e([r({ constValue: true })], s2.prototype, "stippleRequiresClamp", void 0), e([r({ constValue: true })], s2.prototype, "stippleRequiresStretchMeasure", void 0), e([r({ constValue: true })], s2.prototype, "hasVvInstancing", void 0), e([r({ constValue: true })], s2.prototype, "hasSliceTranslatedView", void 0), e([r()], s2.prototype, "objectAndLayerIdColorInstanced", void 0);

// node_modules/@arcgis/core/chunks/RibbonLine.glsl.js
var j = 1;
function A(A2) {
  const R2 = new i(), { vertex: P2, fragment: F } = R2, z = A2.hasMultipassTerrain && (A2.output === h.Color || A2.output === h.Alpha);
  R2.include(t3), R2.include(c, A2), R2.include(c2, A2);
  const E = A2.applyMarkerOffset && !A2.draped;
  E && (P2.uniforms.add(new o3("markerScale", (e6) => e6.markerScale)), R2.include(n3, { space: p2.World, draped: false })), A2.output === h.Depth && R2.include(o4, A2), R2.include(d, A2), p(P2, A2), P2.uniforms.add(new e2("inverseProjectionMatrix", (e6, t4) => t4.camera.inverseProjectionMatrix), new e3("nearFar", (e6, t4) => t4.camera.nearFar), new o3("miterLimit", (e6) => "miter" !== e6.join ? 0 : e6.miterLimit), new e4("viewport", (e6, t4) => t4.camera.fullViewport)), P2.constants.add("LARGE_HALF_FLOAT", "float", 65500), R2.attributes.add(O.POSITION, "vec3"), R2.attributes.add(O.SUBDIVISIONFACTOR, "float"), R2.attributes.add(O.UV0, "vec2"), R2.attributes.add(O.AUXPOS1, "vec3"), R2.attributes.add(O.AUXPOS2, "vec3"), R2.varyings.add("vColor", "vec4"), R2.varyings.add("vpos", "vec3"), t2(R2), z && R2.varyings.add("depth", "float");
  const T = A2.stippleEnabled && A2.stippleScaleWithLineWidth;
  T && R2.varyings.add("vLineSizeInv", "float");
  const W = A2.capType === r2.ROUND, O2 = T || W;
  O2 && R2.varyings.add("vLineWidth", "float");
  const V = A2.innerColorEnabled || W;
  V && R2.varyings.add("vLineDistance", "float");
  const N = A2.stippleEnabled && W, I = A2.falloffEnabled || N;
  I && R2.varyings.add("vLineDistanceNorm", "float"), W && (R2.varyings.add("vSegmentSDF", "float"), R2.varyings.add("vReverseSegmentSDF", "float")), P2.code.add(o`#define PERPENDICULAR(v) vec2(v.y, -v.x);
float interp(float ncp, vec4 a, vec4 b) {
return (-ncp - a.z) / (b.z - a.z);
}
vec2 rotate(vec2 v, float a) {
float s = sin(a);
float c = cos(a);
mat2 m = mat2(c, -s, s, c);
return m * v;
}`), P2.code.add(o`vec4 projectAndScale(vec4 pos) {
vec4 posNdc = proj * pos;
posNdc.xy *= viewport.zw / posNdc.w;
return posNdc;
}`), n(R2), P2.code.add(o`
    void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next, in bool isStartVertex) {
      float vnp = nearFar[0] * 0.99;

      if(pos.z > -nearFar[0]) {
        //current pos behind ncp --> we need to clip
        if (!isStartVertex) {
          if(prev.z < -nearFar[0]) {
            //previous in front of ncp
            pos = mix(prev, pos, interp(vnp, prev, pos));
            next = pos;
          } else {
            pos = vec4(0.0, 0.0, 0.0, 1.0);
          }
        } else {
          if(next.z < -nearFar[0]) {
            //next in front of ncp
            pos = mix(pos, next, interp(vnp, pos, next));
            prev = pos;
          } else {
            pos = vec4(0.0, 0.0, 0.0, 1.0);
          }
        }
      } else {
        //current position visible
        if (prev.z > -nearFar[0]) {
          //previous behind ncp
          prev = mix(pos, prev, interp(vnp, pos, prev));
        }
        if (next.z > -nearFar[0]) {
          //next behind ncp
          next = mix(next, pos, interp(vnp, next, pos));
        }
      }

      ${z ? "depth = pos.z;" : ""}
      linearDepth = calculateLinearDepth(nearFar,pos.z);

      pos = projectAndScale(pos);
      next = projectAndScale(next);
      prev = projectAndScale(prev);
    }
  `), l(P2, A2), P2.code.add(o`
  void main(void) {
    // unpack values from uv0.y
    bool isStartVertex = abs(abs(uv0.y)-3.0) == 1.0;

    float coverage = 1.0;

    // Check for special value of uv0.y which is used by the Renderer when graphics
    // are removed before the VBO is recompacted. If this is the case, then we just
    // project outside of clip space.
    if (uv0.y == 0.0) {
      // Project out of clip space
      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);
    }
    else {
      bool isJoin = abs(uv0.y) < 3.0;

      float lineSize = getSize();
      float lineWidth = lineSize * pixelRatio;

      ${O2 ? o`vLineWidth = lineWidth;` : ""}
      ${T ? o`vLineSizeInv = 1.0 / lineSize;` : ""}

      // convert sub-pixel coverage to alpha
      if (lineWidth < 1.0) {
        coverage = lineWidth;
        lineWidth = 1.0;
      }else{
        // Ribbon lines cannot properly render non-integer sizes. Round width to integer size if
        // larger than one for better quality. Note that we do render < 1 pixels more or less correctly
        // so we only really care to round anything larger than 1.
        lineWidth = floor(lineWidth + 0.5);
      }

      vec4 pos  = view * vec4(position.xyz, 1.0);
      vec4 prev = view * vec4(auxpos1.xyz, 1.0);
      vec4 next = view * vec4(auxpos2.xyz, 1.0);
  `), E && P2.code.add(o`vec4 other = isStartVertex ? next : prev;
bool markersHidden = areWorldMarkersHidden(pos, other);
if(!isJoin && !markersHidden) {
pos.xyz += normalize(other.xyz - pos.xyz) * getWorldMarkerSize(pos) * 0.5;
}`), P2.code.add(o`clipAndTransform(pos, prev, next, isStartVertex);
vec2 left = (pos.xy - prev.xy);
vec2 right = (next.xy - pos.xy);
float leftLen = length(left);
float rightLen = length(right);`);
  (A2.stippleEnabled || W) && P2.code.add(o`
      float isEndVertex = float(!isStartVertex);
      vec2 segmentOrigin = mix(pos.xy, prev.xy, isEndVertex);
      vec2 segment = mix(right, left, isEndVertex);
      ${W ? o`vec2 segmentEnd = mix(next.xy, pos.xy, isEndVertex);` : ""}
    `), P2.code.add(o`left = (leftLen > 0.001) ? left/leftLen : vec2(0.0, 0.0);
right = (rightLen > 0.001) ? right/rightLen : vec2(0.0, 0.0);
vec2 capDisplacementDir = vec2(0, 0);
vec2 joinDisplacementDir = vec2(0, 0);
float displacementLen = lineWidth;
if (isJoin) {
bool isOutside = (left.x * right.y - left.y * right.x) * uv0.y > 0.0;
joinDisplacementDir = normalize(left + right);
joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);
if (leftLen > 0.001 && rightLen > 0.001) {
float nDotSeg = dot(joinDisplacementDir, left);
displacementLen /= length(nDotSeg * left - joinDisplacementDir);
if (!isOutside) {
displacementLen = min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));
}
}
if (isOutside && (displacementLen > miterLimit * lineWidth)) {`), A2.roundJoins ? P2.code.add(o`
        vec2 startDir = leftLen < 0.001 ? right : left;
        startDir = PERPENDICULAR(startDir);

        vec2 endDir = rightLen < 0.001 ? left : right;
        endDir = PERPENDICULAR(endDir);

        float factor = ${A2.stippleEnabled ? o`min(1.0, subdivisionFactor * ${o.float((j + 2) / (j + 1))})` : o`subdivisionFactor`};

        float rotationAngle = acos(clamp(dot(startDir, endDir), -1.0, 1.0));
        joinDisplacementDir = rotate(startDir, -sign(uv0.y) * factor * rotationAngle);
      `) : P2.code.add(o`if (leftLen < 0.001) {
joinDisplacementDir = right;
}
else if (rightLen < 0.001) {
joinDisplacementDir = left;
}
else {
joinDisplacementDir = (isStartVertex || subdivisionFactor > 0.0) ? right : left;
}
joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);`);
  const $ = A2.capType !== r2.BUTT;
  return P2.code.add(o`
        displacementLen = lineWidth;
      }
    } else {
      // CAP handling ---------------------------------------------------
      joinDisplacementDir = isStartVertex ? right : left;
      joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);

      ${$ ? o`capDisplacementDir = isStartVertex ? -right : left;` : ""}
    }
  `), P2.code.add(o`
    // Displacement (in pixels) caused by join/or cap
    vec2 dpos = joinDisplacementDir * sign(uv0.y) * displacementLen + capDisplacementDir * displacementLen;

    ${I || V ? o`float lineDistNorm = sign(uv0.y) * pos.w;` : ""}

    ${V ? o`vLineDistance = lineWidth * lineDistNorm;` : ""}
    ${I ? o`vLineDistanceNorm = lineDistNorm;` : ""}

    pos.xy += dpos;
  `), W && P2.code.add(o`vec2 segmentDir = normalize(segment);
vSegmentSDF = (isJoin && isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentOrigin, segmentDir) * pos.w) ;
vReverseSegmentSDF = (isJoin && !isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentEnd, -segmentDir) * pos.w);`), A2.stippleEnabled && (A2.draped ? P2.uniforms.add(new o3("worldToScreenRatio", (e6, t4) => 1 / t4.screenToPCSRatio)) : P2.code.add(o`vec3 segmentCenter = mix((auxpos2 + position) * 0.5, (position + auxpos1) * 0.5, isEndVertex);
float worldToScreenRatio = computeWorldToScreenRatio(segmentCenter);`), P2.code.add(o`float segmentLengthScreenDouble = length(segment);
float segmentLengthScreen = segmentLengthScreenDouble * 0.5;
float discreteWorldToScreenRatio = discretizeWorldToScreenRatio(worldToScreenRatio);
float segmentLengthRender = length(mix(auxpos2 - position, position - auxpos1, isEndVertex));
vStipplePatternStretch = worldToScreenRatio / discreteWorldToScreenRatio;`), A2.draped ? P2.code.add(o`float segmentLengthPseudoScreen = segmentLengthScreen / pixelRatio * discreteWorldToScreenRatio / worldToScreenRatio;
float startPseudoScreen = uv0.x * discreteWorldToScreenRatio - mix(0.0, segmentLengthPseudoScreen, isEndVertex);`) : P2.code.add(o`float startPseudoScreen = mix(uv0.x, uv0.x - segmentLengthRender, isEndVertex) * discreteWorldToScreenRatio;
float segmentLengthPseudoScreen = segmentLengthRender * discreteWorldToScreenRatio;`), P2.uniforms.add(new o3("stipplePatternPixelSize", (e6) => m(e6))), P2.code.add(o`
      float patternLength = ${A2.stippleScaleWithLineWidth ? "lineSize * " : ""} stipplePatternPixelSize;

      // Compute the coordinates at both start and end of the line segment, because we need both to clamp to in the fragment shader
      vStippleDistanceLimits = computeStippleDistanceLimits(startPseudoScreen, segmentLengthPseudoScreen, segmentLengthScreen, patternLength);

      vStippleDistance = mix(vStippleDistanceLimits.x, vStippleDistanceLimits.y, isEndVertex);

      // Adjust the coordinate to the displaced position (the pattern is shortened/overextended on the in/outside of joins)
      if (segmentLengthScreenDouble >= 0.001) {
        // Project the actual vertex position onto the line segment. Note that the resulting factor is within [0..1] at the
        // original vertex positions, and slightly outside of that range at the displaced positions
        vec2 stippleDisplacement = pos.xy - segmentOrigin;
        float stippleDisplacementFactor = dot(segment, stippleDisplacement) / (segmentLengthScreenDouble * segmentLengthScreenDouble);

        // Apply this offset to the actual vertex coordinate (can be screen or pseudo-screen space)
        vStippleDistance += (stippleDisplacementFactor - isEndVertex) * (vStippleDistanceLimits.y - vStippleDistanceLimits.x);
      }

      // Cancel out perspective correct interpolation because we want this length the really represent the screen distance
      vStippleDistanceLimits *= pos.w;
      vStippleDistance *= pos.w;

      // Disable stipple distance limits on caps
      vStippleDistanceLimits = isJoin ?
                                 vStippleDistanceLimits :
                                 isStartVertex ?
                                  vec2(-1e038, vStippleDistanceLimits.y) :
                                  vec2(vStippleDistanceLimits.x, 1e038);
    `)), P2.code.add(o`
      // Convert back into NDC
      pos.xy = (pos.xy / viewport.zw) * pos.w;

      vColor = getColor();
      vColor.a *= coverage;

      ${A2.wireframe && !A2.draped ? "pos.z -= 0.001 * pos.w;" : ""}

      // transform final position to camera space for slicing
      vpos = (inverseProjectionMatrix * pos).xyz;
      gl_Position = pos;
      forwardObjectAndLayerIdColor();
    }
  }
  `), z && R2.include(n2, A2), R2.include(P, A2), F.include(e5), F.code.add(o`
  void main() {
    discardBySlice(vpos);
    ${z ? "terrainDepthTest(gl_FragCoord, depth);" : ""}
  `), A2.wireframe ? F.code.add(o`vec4 finalColor = vec4(1.0, 0.0, 1.0, 1.0);`) : (W && F.code.add(o`
      float sdf = min(vSegmentSDF, vReverseSegmentSDF);
      vec2 fragmentPosition = vec2(
        min(sdf, 0.0),
        vLineDistance
      ) * gl_FragCoord.w;

      float fragmentRadius = length(fragmentPosition);
      float fragmentCapSDF = (fragmentRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale
      float capCoverage = clamp(0.5 - fragmentCapSDF, 0.0, 1.0);

      if (capCoverage < ${o.float(t)}) {
        discard;
      }
    `), N ? F.code.add(o`
      vec2 stipplePosition = vec2(
        min(getStippleSDF() * 2.0 - 1.0, 0.0),
        vLineDistanceNorm * gl_FragCoord.w
      );
      float stippleRadius = length(stipplePosition * vLineWidth);
      float stippleCapSDF = (stippleRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale
      float stippleCoverage = clamp(0.5 - stippleCapSDF, 0.0, 1.0);
      float stippleAlpha = step(${o.float(t)}, stippleCoverage);
      `) : F.code.add(o`float stippleAlpha = getStippleAlpha();`), F.uniforms.add(new e4("intrinsicColor", (e6) => e6.color)), A2.output !== h.ObjectAndLayerIdColor && F.code.add(o`discardByStippleAlpha(stippleAlpha, stippleAlphaColorDiscard);`), F.code.add(o`vec4 color = intrinsicColor * vColor;`), A2.innerColorEnabled && (F.uniforms.add(new e4("innerColor", (e6) => e6.innerColor ?? e6.color), new o3("innerWidth", (e6, t4) => e6.innerWidth * t4.camera.pixelRatio)), F.code.add(o`float distToInner = abs(vLineDistance * gl_FragCoord.w) - innerWidth;
float innerAA = clamp(0.5 - distToInner, 0.0, 1.0);
float innerAlpha = innerColor.a + color.a * (1.0 - innerColor.a);
color = mix(color, vec4(innerColor.rgb, innerAlpha), innerAA);`)), F.code.add(o`vec4 finalColor = blendStipple(color, stippleAlpha);`), A2.falloffEnabled && (F.uniforms.add(new o3("falloff", (e6) => e6.falloff)), F.code.add(o`finalColor.a *= pow(max(0.0, 1.0 - abs(vLineDistanceNorm * gl_FragCoord.w)), falloff);`))), F.code.add(o`
    ${A2.output === h.ObjectAndLayerIdColor ? o`finalColor.a = 1.0;` : ""}

    if (finalColor.a < ${o.float(t)}) {
      discard;
    }

    ${A2.output === h.Alpha ? o`fragColor = vec4(finalColor.a);` : ""}
    ${A2.output === h.Color ? o`fragColor = highlightSlice(finalColor, vpos);` : ""}
    ${A2.output === h.Color && A2.transparencyPassType === o2.Color ? "fragColor = premultiplyAlpha(fragColor);" : ""}
    ${A2.output === h.Highlight ? o`fragColor = vec4(1.0);` : ""}
    ${A2.output === h.Depth ? o`outputDepth(linearDepth);` : ""}
    ${A2.output === h.ObjectAndLayerIdColor ? o`outputObjectAndLayerIdColor();` : ""}
  }
  `), R2;
}
var R = Object.freeze(Object.defineProperty({ __proto__: null, RIBBONLINE_NUM_ROUND_JOIN_SUBDIVISIONS: j, build: A }, Symbol.toStringTag, { value: "Module" }));

export {
  r2 as r,
  s2 as s,
  j,
  A,
  R
};
//# sourceMappingURL=chunk-CERU5LKM.js.map
