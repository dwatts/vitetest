import {
  o
} from "./chunk-IT2KU2XD.js";
import {
  n
} from "./chunk-XGIDQJNQ.js";
import {
  d
} from "./chunk-TYEEWKIN.js";
import "./chunk-5IRKUUA3.js";
import "./chunk-644IM3NW.js";
import "./chunk-TE7N6C3J.js";
import "./chunk-SGBMUZSF.js";
import "./chunk-YGUWDSEH.js";
import "./chunk-F4ILXEXC.js";
import "./chunk-KRCNIFX2.js";
import "./chunk-LVVQ2RQY.js";
import "./chunk-M6OG7C2T.js";
import "./chunk-GOK5MP3B.js";
import "./chunk-DSWGERIY.js";
import "./chunk-Y2ZDD3I4.js";
import "./chunk-RVS5HU2K.js";
import "./chunk-SS3YG6J3.js";
import "./chunk-NVGPNIR6.js";
import "./chunk-VMTVUE47.js";
import "./chunk-GDZM4A6K.js";
import "./chunk-BNBT4QTW.js";
import "./chunk-3FQOSG5O.js";
import "./chunk-W4KI5YEI.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-SLVNG7FV.js";
import "./chunk-DEZCXTA3.js";
import "./chunk-A6VKJXIH.js";
import "./chunk-7EQSYZHW.js";
import "./chunk-GGOVZ2GK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-WLWP35G2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-3VUFACNT.js";
import "./chunk-ZEEBL7ZN.js";
import "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-H7RDAEPY.js";
import "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import "./chunk-JL3TJGVW.js";
import "./chunk-43LWRDQS.js";
import "./chunk-R6YKST3K.js";
import "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-MP6GH2AC.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import "./chunk-7I33FAWS.js";
import "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/3d/layers/ElevationLayerView3D.js
var l = class extends o(n(d)) {
  constructor() {
    super(...arguments), this.type = "elevation-3d";
  }
  get tileInfo() {
    return this.layer.tileInfo;
  }
  initialize() {
    var _a, _b, _c, _d, _e;
    const e2 = (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.allLayers, o2 = e2 && e2.includes(this.layer), s2 = (_e = (_d = (_c = this.view) == null ? void 0 : _c.map) == null ? void 0 : _d.ground) == null ? void 0 : _e.layers, i = s2 && s2.includes(this.layer);
    if (o2 && !i) {
      const e3 = new s("layerview:elevation-layer-only", "3D elevation layer '" + this.layer.id + "' can only be added to layers in map.ground");
      this.addResolvingPromise(Promise.reject(e3));
    }
    this._addTilingSchemeMatchPromise();
  }
};
e([y()], l.prototype, "layer", void 0), e([y()], l.prototype, "tileInfo", null), l = e([a("esri.views.3d.layers.ElevationLayerView3D")], l);
var p = l;
export {
  p as default
};
//# sourceMappingURL=ElevationLayerView3D-6G5SSZQB.js.map
