import {
  p
} from "./chunk-V7H3MV7N.js";
import {
  r
} from "./chunk-R5Y2SULF.js";
import {
  o
} from "./chunk-IT2KU2XD.js";
import {
  a as a2
} from "./chunk-32IFRFHL.js";
import {
  n as n2
} from "./chunk-XGIDQJNQ.js";
import {
  d
} from "./chunk-TYEEWKIN.js";
import "./chunk-QKJ7WXDD.js";
import {
  m
} from "./chunk-UOUZR2TX.js";
import "./chunk-FCJWVHPT.js";
import "./chunk-YDZG6FES.js";
import "./chunk-HTGM7KAM.js";
import "./chunk-ZAPLLPYK.js";
import "./chunk-5IRKUUA3.js";
import "./chunk-644IM3NW.js";
import "./chunk-TE7N6C3J.js";
import "./chunk-SH6HJSS2.js";
import "./chunk-TRGMWULG.js";
import "./chunk-WTPQKRQM.js";
import "./chunk-B4ONZAW2.js";
import "./chunk-UX3LCC3X.js";
import "./chunk-WVOBJDWI.js";
import "./chunk-YVVROPAO.js";
import "./chunk-WRFNQB7U.js";
import "./chunk-UUW6REOV.js";
import "./chunk-Z3NHJA5D.js";
import "./chunk-BO2REVMA.js";
import "./chunk-V66LHQVK.js";
import "./chunk-SGBMUZSF.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-BFVDDR4R.js";
import "./chunk-BN6X2OXK.js";
import "./chunk-IQRLZSBX.js";
import "./chunk-OZL6Q7O2.js";
import "./chunk-YGUWDSEH.js";
import "./chunk-ZWFMUHG3.js";
import "./chunk-EFRTD25L.js";
import "./chunk-F4ILXEXC.js";
import {
  n
} from "./chunk-G3Q2URFK.js";
import "./chunk-63ERNIOV.js";
import "./chunk-KRCNIFX2.js";
import "./chunk-LVVQ2RQY.js";
import "./chunk-M6OG7C2T.js";
import "./chunk-GOK5MP3B.js";
import "./chunk-DSWGERIY.js";
import "./chunk-Y2ZDD3I4.js";
import "./chunk-RVS5HU2K.js";
import "./chunk-SS3YG6J3.js";
import "./chunk-NVGPNIR6.js";
import "./chunk-VMTVUE47.js";
import "./chunk-GDZM4A6K.js";
import "./chunk-XWGNMTES.js";
import "./chunk-6NNEHJYI.js";
import "./chunk-BNBT4QTW.js";
import "./chunk-3FQOSG5O.js";
import "./chunk-W4KI5YEI.js";
import "./chunk-CAFGOFIE.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-JNDFAMXY.js";
import "./chunk-NTEKJWGF.js";
import "./chunk-TFIKV5RU.js";
import "./chunk-KW6QQDGN.js";
import "./chunk-AQ7R6V4L.js";
import "./chunk-DOQ3SAAR.js";
import "./chunk-4BXK4H4L.js";
import "./chunk-SLVNG7FV.js";
import "./chunk-DEZCXTA3.js";
import "./chunk-RRJGZKNX.js";
import "./chunk-PL5Q4C6Y.js";
import "./chunk-A6VKJXIH.js";
import "./chunk-KFSY6ZZH.js";
import "./chunk-7EQSYZHW.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-GGOVZ2GK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-WLWP35G2.js";
import "./chunk-JPW73GY2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-Z2ZUNW5S.js";
import "./chunk-7L7Z2HXM.js";
import "./chunk-75NKPXTR.js";
import "./chunk-EUVARFSM.js";
import "./chunk-3VUFACNT.js";
import "./chunk-ZEEBL7ZN.js";
import "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-SJ2GJCS2.js";
import {
  j
} from "./chunk-H7RDAEPY.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import "./chunk-JL3TJGVW.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-43LWRDQS.js";
import "./chunk-R6YKST3K.js";
import "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-MP6GH2AC.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import "./chunk-7I33FAWS.js";
import "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/3d/layers/ImageryTileLayerView3D.js
var y2 = class extends p(a2(o(n2(d)))) {
  constructor() {
    super(...arguments), this.type = "imagery-tile-3d", this.isAlignedMapTile = true;
  }
  initialize() {
    this.layer.increaseRasterJobHandlerUsage(), null == this.fullExtent && this.addResolvingPromise(Promise.reject(new s("layerview:spatial-reference-incompatible", "The layer extent cannot be projected to the view's spatial reference", { layer: this.layer })));
    const e2 = j(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.basemapTerrain) == null ? void 0 : _b.tilingSchemeLocked;
    }).then(() => {
      const e3 = this.view.basemapTerrain.tilingScheme, t = this.layer.tileInfo, r2 = ["png", "png24", "png32", "jpg", "mixed"].includes(t.format) && e3.compatibleWith(t);
      this.isAlignedMapTile = r2;
      const i = r2 ? t : e3.toTileInfo();
      this.tileInfo = i, this.updatingHandles.add(() => [this.layer.renderer, this.layer.interpolation, this.layer.bandIds, this.layer.multidimensionalDefinition, this.layer.multidimensionalSubset, this.layer.rasterFunction, this.timeExtent], () => this.refresh());
    });
    this.addResolvingPromise(e2);
  }
  destroy() {
    this.layer.decreaseRasterJobHandlerUsage(), this.view = null;
  }
  get _blankTile() {
    const e2 = document.createElement("canvas"), t = e2.getContext("2d"), [r2, i] = this.tileInfo.size;
    return e2.width = r2, e2.height = i, t.clearRect(0, 0, r2, i), t.getImageData(0, 0, r2, i);
  }
  get imageFormatIsOpaque() {
    return "jpg" === this.layer.tileInfo.format;
  }
  get hasMixedImageFormats() {
    return "mixed" === this.layer.tileInfo.format;
  }
  get dataLevelRange() {
    const e2 = this.tileInfo.lods, t = this.layer.tileInfo.lods, r2 = e2[0].scale, i = t[t.length - 1].scale;
    return this.levelRangeFromScaleRange(r2, i);
  }
  _getfullExtent() {
    return this.projectFullExtent(this.view.basemapTerrain && null != this.view.basemapTerrain.spatialReference ? this.view.basemapTerrain.spatialReference : this.view.spatialReference);
  }
  async fetchTile(e2, t, r2, i) {
    const s2 = this.tileInfo, a3 = this._canSymbolizeInWebGL(), l = { tileInfo: s2, requestRawData: a3, signal: i.signal, timeExtent: this.timeExtent, requestAsImageElement: this.isAlignedMapTile }, o2 = await this.layer.fetchTile(e2, t, r2, l);
    if (o2 instanceof HTMLImageElement)
      return o2;
    let m2 = o2 && o2.pixelBlock;
    if (null == m2)
      return this._blankTile;
    if (!a3 && (m2 = await this.layer.applyRenderer(o2), null == m2))
      return this._blankTile;
    const p2 = new m([e2, t, r2], m2, s2.size[0], s2.size[1]);
    return a3 ? (p2.symbolizerRenderer = this.layer.symbolizer.rendererJSON, p2.symbolizerParameters = this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(e2)), p2.transformGrid = o2.transformGrid) : p2.isRendereredSource = true, p2.interpolation = this.layer.interpolation, p2.bandIds = this.layer.bandIds, p2;
  }
  _getSymbolizerOptions(e2) {
    const t = this.tileInfo.lodAt(e2).resolution;
    return { pixelBlock: null, isGCS: this.view.basemapTerrain && null != this.view.basemapTerrain.spatialReference ? this.view.basemapTerrain.spatialReference.isGeographic : this.view.spatialReference.isGeographic, resolution: { x: t, y: t }, bandIds: this.layer.bandIds };
  }
  ensureSymbolizerParameters(e2) {
    this._canSymbolizeInWebGL() && JSON.stringify(e2.symbolizerRenderer) !== JSON.stringify(this.layer.symbolizer.rendererJSON) && (e2.symbolizerParameters = this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(e2.lij[0])));
  }
  createFetchPopupFeaturesQueryGeometry(e2, t) {
    return r(e2, t, this.view);
  }
  refresh() {
    this.emit("data-changed");
  }
  async doRefresh() {
    this.suspended || this.emit("data-changed");
  }
  _canSymbolizeInWebGL() {
    return n("3d").supportsTextureFloat && this.layer.symbolizer.canRenderInWebGL;
  }
};
e([y({ readOnly: true })], y2.prototype, "_blankTile", null), e([y({ readOnly: true })], y2.prototype, "imageFormatIsOpaque", null), e([y({ readOnly: true })], y2.prototype, "hasMixedImageFormats", null), e([y({ readOnly: true })], y2.prototype, "dataLevelRange", null), y2 = e([a("esri.views.3d.layers.ImageryTileLayerView3D")], y2);
var d2 = y2;
export {
  d2 as default
};
//# sourceMappingURL=ImageryTileLayerView3D-XHIZIOPJ.js.map
