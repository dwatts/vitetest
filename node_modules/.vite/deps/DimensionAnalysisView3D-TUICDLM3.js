import {
  A as A4,
  F as F3,
  H,
  n as n9
} from "./chunk-UTMCYWKC.js";
import {
  _ as _2,
  i as i2,
  p as p8,
  w as w2
} from "./chunk-EKZRSO4Y.js";
import {
  P as P3,
  t as t10
} from "./chunk-UX7SMS2W.js";
import {
  e as e7,
  f as f4,
  f2 as f5,
  f3 as f8,
  g as g5,
  h as h8,
  r as r7,
  u as u8
} from "./chunk-KF45Y73U.js";
import {
  c as c4,
  y as y5
} from "./chunk-V7DVK56X.js";
import {
  $,
  D as D2,
  L,
  N,
  R as R2,
  R2 as R3,
  T as T2,
  U as U2,
  U2 as U3,
  a as a11,
  a2 as a12,
  d as d4,
  e as e8,
  l as l9,
  v as v5,
  v2 as v8
} from "./chunk-SUS6FVXM.js";
import "./chunk-AWHGPLMH.js";
import {
  a2 as a10,
  i as i3,
  r as r10,
  s as s8,
  t2 as t12,
  u as u6,
  u2 as u9
} from "./chunk-W2MFIVLD.js";
import "./chunk-2O3MFNAT.js";
import "./chunk-A4OLVRMJ.js";
import "./chunk-HIKCANPA.js";
import "./chunk-HUWHMZKL.js";
import {
  s as s11
} from "./chunk-KMWAP7WW.js";
import {
  A as A5,
  E,
  H as H2,
  I as I2,
  Z as Z2,
  a as a9,
  c as c5,
  c2 as c6,
  d as d5,
  e as e9,
  f as f6,
  f2 as f7,
  g as g4,
  l as l8,
  n as n10,
  n2 as n11,
  n3 as n12,
  p as p6,
  p2 as p7,
  r as r9,
  s as s9,
  s2 as s10,
  t as t11,
  u as u7,
  v as v7
} from "./chunk-FEOJNOKF.js";
import {
  L as L2,
  m as m5,
  v as v6
} from "./chunk-VIDC736D.js";
import {
  c as c3
} from "./chunk-BTHQ4EZE.js";
import "./chunk-XW6BCJUG.js";
import "./chunk-V6RPZZQL.js";
import "./chunk-2NUCTFTS.js";
import {
  b as b3,
  p as p4
} from "./chunk-67UNUI4B.js";
import {
  r as r6,
  t as t6,
  u as u3
} from "./chunk-V54FPVGF.js";
import "./chunk-2735WBYK.js";
import {
  r as r8,
  t as t9
} from "./chunk-KILCBNKU.js";
import "./chunk-2KRMZDXT.js";
import {
  v as v4
} from "./chunk-ZIIRSX6D.js";
import {
  h as h7
} from "./chunk-JQKL7AD5.js";
import {
  o as o6,
  u as u5
} from "./chunk-6WY3ZZYN.js";
import {
  x as x4
} from "./chunk-CS6BZGQO.js";
import "./chunk-YZTKL3LQ.js";
import {
  h as h6,
  y as y4
} from "./chunk-I7EXY23J.js";
import "./chunk-SCHIU6CT.js";
import {
  ne
} from "./chunk-XXN3TEOU.js";
import "./chunk-FIJZ6LYC.js";
import "./chunk-MUANV6E3.js";
import "./chunk-SFIT2AUF.js";
import {
  B
} from "./chunk-DBIFU6GO.js";
import {
  A as A3,
  t as t8
} from "./chunk-V33FVMPT.js";
import "./chunk-U67EYFX3.js";
import "./chunk-5GYSL2SB.js";
import "./chunk-3NWIYHNX.js";
import "./chunk-PLKG3UR7.js";
import "./chunk-4BA5YJ7C.js";
import {
  nt,
  pt
} from "./chunk-WRC5WFEM.js";
import {
  a as a7,
  a2 as a8
} from "./chunk-UYTAZUBJ.js";
import "./chunk-2EO2WRP7.js";
import "./chunk-EPDLDPS4.js";
import "./chunk-NBYHM3OO.js";
import "./chunk-CERU5LKM.js";
import {
  p2 as p5,
  s as s7
} from "./chunk-JZVYLVFO.js";
import "./chunk-FAOMDC3K.js";
import "./chunk-SCAYUERS.js";
import "./chunk-B76MSEZ4.js";
import "./chunk-ZYHVS2T2.js";
import "./chunk-XYSQCP5F.js";
import "./chunk-W5D3JTKS.js";
import "./chunk-XACNEHDM.js";
import "./chunk-IRBH32SX.js";
import "./chunk-MPIXWRXJ.js";
import "./chunk-XKYCNHCM.js";
import "./chunk-YEDW7SLL.js";
import "./chunk-N4JKQR77.js";
import "./chunk-BDX5TRUE.js";
import "./chunk-LIXBKTBN.js";
import "./chunk-VDSNHCMM.js";
import "./chunk-6LC2JTLC.js";
import "./chunk-XM3YSFN6.js";
import "./chunk-NIZWDAMQ.js";
import "./chunk-DU3C7D26.js";
import "./chunk-XUU35WPC.js";
import "./chunk-KSA6GV6M.js";
import "./chunk-K4WBDIIJ.js";
import "./chunk-ROPKVK6V.js";
import "./chunk-KM375BNF.js";
import "./chunk-H3DKDGMJ.js";
import "./chunk-FB6EWBGE.js";
import "./chunk-3TDCCT2R.js";
import "./chunk-Z2RTGLQI.js";
import "./chunk-V6CD66ZZ.js";
import "./chunk-6FHMQNMS.js";
import "./chunk-5ZW42GDY.js";
import "./chunk-D7YAG5U3.js";
import "./chunk-LGDKASPG.js";
import "./chunk-YQDOKTNT.js";
import "./chunk-SH6HJSS2.js";
import "./chunk-KFDARCTS.js";
import "./chunk-TRGMWULG.js";
import "./chunk-WTPQKRQM.js";
import {
  o2 as o5
} from "./chunk-SMDDCTGQ.js";
import "./chunk-NU4UASX6.js";
import "./chunk-PKCLTDZO.js";
import "./chunk-4YXJLES6.js";
import "./chunk-EHQZFPMP.js";
import "./chunk-VC3BY3DV.js";
import "./chunk-WH76OAIT.js";
import "./chunk-B4ONZAW2.js";
import "./chunk-JHDKOKT6.js";
import "./chunk-YLTVH2K4.js";
import "./chunk-FB4A6PBH.js";
import "./chunk-CG3URTR2.js";
import "./chunk-UX3LCC3X.js";
import "./chunk-AB23UNQC.js";
import "./chunk-RDWKBYTH.js";
import "./chunk-IBJTEQQG.js";
import "./chunk-SADO52IH.js";
import "./chunk-WVOBJDWI.js";
import "./chunk-LIO6VZRI.js";
import "./chunk-7DFZCT3D.js";
import "./chunk-ASBUA7EG.js";
import "./chunk-FY4ZONHH.js";
import "./chunk-73PNWDTS.js";
import "./chunk-PKS3ZVLN.js";
import "./chunk-N3RXOITN.js";
import "./chunk-DOR4M5EA.js";
import "./chunk-3ROGWJVH.js";
import "./chunk-BUCIQGFS.js";
import "./chunk-CR5XNTAP.js";
import "./chunk-Z6IKMUOC.js";
import "./chunk-PV5KBAYL.js";
import "./chunk-YVVROPAO.js";
import "./chunk-4KPDZI74.js";
import "./chunk-WA4HIOYR.js";
import "./chunk-BFVOSCOB.js";
import "./chunk-QALEHGSZ.js";
import "./chunk-GYNE34WO.js";
import "./chunk-QS45OHBM.js";
import "./chunk-IVMJPIWO.js";
import "./chunk-3I3GE5YW.js";
import "./chunk-WRFNQB7U.js";
import "./chunk-UUW6REOV.js";
import "./chunk-2US5EKDI.js";
import "./chunk-Z3NHJA5D.js";
import "./chunk-BO2REVMA.js";
import "./chunk-V66LHQVK.js";
import {
  n as n8
} from "./chunk-JP7O2ZWE.js";
import "./chunk-Z6R62RNV.js";
import {
  a as a6,
  g as g3,
  m as m4,
  p as p3,
  y as y3
} from "./chunk-3LLZ72VA.js";
import {
  b as b2,
  l as l7,
  v as v3
} from "./chunk-4SIKLJSS.js";
import "./chunk-WDZ5AAFL.js";
import {
  t as t5
} from "./chunk-UM64E5NS.js";
import {
  Z,
  r as r5
} from "./chunk-2XKILFME.js";
import "./chunk-G4LSNP77.js";
import "./chunk-BA6PBZHC.js";
import "./chunk-M7PTINEZ.js";
import "./chunk-Z7LZRT7C.js";
import "./chunk-SGBMUZSF.js";
import "./chunk-3TMT4LDG.js";
import "./chunk-BDWD2ZNU.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-FIBWCATC.js";
import "./chunk-6S2FCH6S.js";
import "./chunk-3TTW7E7W.js";
import {
  R,
  T,
  W,
  h as h5
} from "./chunk-FOEAKQNX.js";
import {
  c,
  d as d3,
  h as h4,
  n as n7
} from "./chunk-LEDSC236.js";
import "./chunk-NETCTS4Y.js";
import "./chunk-OKABUMQT.js";
import {
  e as e6
} from "./chunk-CW7LIPBH.js";
import "./chunk-TYOIANOD.js";
import "./chunk-VN2IXVGV.js";
import "./chunk-WWUAHPIM.js";
import {
  O as O2
} from "./chunk-BN6X2OXK.js";
import "./chunk-SHFLRM67.js";
import {
  e as e5,
  l as l5
} from "./chunk-YGUWDSEH.js";
import "./chunk-ZWFMUHG3.js";
import "./chunk-EFRTD25L.js";
import "./chunk-GSS6WNQU.js";
import "./chunk-C2EHS6UI.js";
import {
  c as c2,
  t as t7,
  u as u4
} from "./chunk-NEBQZ6AZ.js";
import "./chunk-7JB7RSO7.js";
import "./chunk-CEUJOC5P.js";
import "./chunk-63ERNIOV.js";
import {
  s as s4
} from "./chunk-XABSD6D5.js";
import {
  F as F2,
  I
} from "./chunk-KRCNIFX2.js";
import "./chunk-LVVQ2RQY.js";
import "./chunk-M6OG7C2T.js";
import "./chunk-GOK5MP3B.js";
import {
  A as A2,
  b,
  d as d2,
  j as j4,
  l as l6,
  m as m3,
  o as o4,
  p as p2,
  r as r4,
  s as s6,
  v as v2
} from "./chunk-NLWV7Q6F.js";
import "./chunk-RVS5HU2K.js";
import "./chunk-JB7FDW5N.js";
import {
  n as n6
} from "./chunk-SS3YG6J3.js";
import "./chunk-5IYCCZ54.js";
import {
  d
} from "./chunk-VMTVUE47.js";
import "./chunk-GDZM4A6K.js";
import "./chunk-XWGNMTES.js";
import "./chunk-6NNEHJYI.js";
import {
  Hn,
  Rn,
  nn
} from "./chunk-BNBT4QTW.js";
import "./chunk-3FQOSG5O.js";
import {
  f as f3,
  g as g2,
  q as q2,
  r as r3
} from "./chunk-7EG7BYWF.js";
import "./chunk-JNDFAMXY.js";
import "./chunk-NTEKJWGF.js";
import "./chunk-TFIKV5RU.js";
import "./chunk-KW6QQDGN.js";
import "./chunk-AQ7R6V4L.js";
import {
  i,
  l as l4,
  u as u2
} from "./chunk-DOQ3SAAR.js";
import "./chunk-4BXK4H4L.js";
import "./chunk-SLVNG7FV.js";
import "./chunk-4CZO65BK.js";
import "./chunk-SVCGLUNW.js";
import "./chunk-DEZCXTA3.js";
import {
  h as h3
} from "./chunk-RRJGZKNX.js";
import "./chunk-PL5Q4C6Y.js";
import "./chunk-KFSY6ZZH.js";
import {
  V as V2
} from "./chunk-7EQSYZHW.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-GGOVZ2GK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-WLWP35G2.js";
import "./chunk-JPW73GY2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import {
  M,
  m as m2
} from "./chunk-TEHNQYQD.js";
import {
  A,
  F,
  G,
  J,
  O,
  P as P2,
  X,
  _,
  e as e4,
  g,
  j as j2,
  o as o3,
  p,
  q,
  r as r2,
  s as s3,
  u,
  v,
  x,
  z
} from "./chunk-TPJLFGOT.js";
import {
  f,
  n as n4,
  r,
  t as t4
} from "./chunk-CQX57DED.js";
import {
  D,
  a as a3,
  a2 as a4
} from "./chunk-3CQBBMMD.js";
import "./chunk-Z2ZUNW5S.js";
import "./chunk-7L7Z2HXM.js";
import "./chunk-75NKPXTR.js";
import "./chunk-EUVARFSM.js";
import "./chunk-3VUFACNT.js";
import {
  x2 as x3
} from "./chunk-ZEEBL7ZN.js";
import {
  C2 as C,
  S2 as S,
  V,
  j as j3,
  x as x2
} from "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-RLLQRKO4.js";
import "./chunk-57CHUY45.js";
import "./chunk-SJ2GJCS2.js";
import {
  U,
  a as a5,
  f as f2,
  h,
  l as l3,
  w
} from "./chunk-H7RDAEPY.js";
import "./chunk-ODFH3BSN.js";
import {
  h as h2
} from "./chunk-S5OISW44.js";
import {
  n as n5
} from "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import "./chunk-JL3TJGVW.js";
import {
  s as s5
} from "./chunk-JZM5YUHA.js";
import "./chunk-43LWRDQS.js";
import "./chunk-R6YKST3K.js";
import "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import {
  l as l2
} from "./chunk-MP6GH2AC.js";
import {
  m,
  t2 as t,
  y3 as y2
} from "./chunk-V76KGJFU.js";
import {
  a2,
  e as e3,
  n as n2,
  o2
} from "./chunk-HB2SQRT2.js";
import {
  t as t2
} from "./chunk-U3J7253Q.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import {
  n as n3
} from "./chunk-3R7FAT25.js";
import {
  P,
  a,
  k,
  s as s2,
  t as t3,
  y
} from "./chunk-7I33FAWS.js";
import {
  e as e2,
  l,
  n,
  o
} from "./chunk-DWOEYHKS.js";
import {
  s2 as s
} from "./chunk-HMVAPW5X.js";
import {
  j
} from "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/support/euclideanLengthMeasurementUtils.js
var a13;
function z2(n16, t15) {
  const { spatialReference: r17 } = n16;
  return S(r17, t15.spatialReference) ? (H3[0] = n16.x, H3[1] = n16.y, H3[2] = n16.hasZ ? n16.z : 0, V3[0] = t15.x, V3[1] = t15.y, V3[2] = t15.hasZ ? t15.z : 0, x5(H3, V3, r17)) : null;
}
function x5(t15, r17, e13) {
  const i6 = D3(t15, r17, e13, a13.Direct);
  return null != i6 ? r7(i6.direct, i6.unit) : null;
}
function D3(n16, r17, l15, u12) {
  const s14 = i2(l15), f12 = V(s14);
  if (null == f12)
    return null;
  const p16 = r17[2] - n16[2];
  if (u12 === a13.Vertical)
    return { verticalSigned: p16, unit: f12 };
  if (!Hn(n16, l15, U4, s14) || !Hn(r17, l15, S2, s14))
    return null;
  if (u12 === a13.Direct) {
    return { direct: x(S2, U4), unit: f12 };
  }
  if (o3(b4, n16[0], n16[1], r17[2]), !Hn(b4, l15, b4, s14))
    return null;
  const h17 = x(b4, S2);
  if (u12 === a13.Horizontal)
    return { horizontal: h17, unit: f12 };
  return { direct: x(S2, U4), horizontal: h17, vertical: Math.abs(p16), unit: f12 };
}
!function(n16) {
  n16[n16.Direct = 0] = "Direct", n16[n16.Horizontal = 1] = "Horizontal", n16[n16.Vertical = 2] = "Vertical";
}(a13 || (a13 = {}));
var H3 = n4();
var V3 = n4();
var U4 = n4();
var S2 = n4();
var b4 = n4();

// node_modules/@arcgis/core/views/3d/analysis/Dimension/lengthDimensionUtils.js
function T3(n16, o13, a17) {
  if (null == n16)
    return null;
  const s14 = n16.dimensionSegment.startRenderSpace, d9 = n16.dimensionSegment.endRenderSpace, c9 = x5(s14, d9, n16.spatialReference);
  if (null == c9)
    return null;
  const l15 = o13 === t6.Vertical ? x2(c9.value, c9.unit, a17) : C(c9.value, c9.unit, a17);
  return f4(c9, l15);
}
function w3(e13) {
  const { elevationAlignedStartPoint: n16, elevationAlignedEndPoint: t15, dimension: { offset: r17, measureType: i6, orientation: o13 } } = e13;
  return { elevationAlignedStartPoint: n16, elevationAlignedEndPoint: t15, offset: r17, measureType: i6, orientation: o13 };
}
function C2({ elevationAlignedStartPoint: n16, elevationAlignedEndPoint: t15, offset: r17, measureType: i6, orientation: o13 }, a17, d9 = null) {
  if (null == n16 || null == t15)
    return null;
  const c9 = b5(null != d9 ? d9.directSegment : new f5(), { elevationAlignedStartPoint: n16, elevationAlignedEndPoint: t15 }, a17), l15 = null != d9 ? d9.primaryOffsetAxis : n4();
  I3(l15, { measureType: i6, elevationAlignedStartPoint: n16, elevationAlignedEndPoint: t15, directSegment: c9, orientation: o13, renderCoordsHelper: a17 });
  const u12 = null != d9 ? d9.dimensionSegment : new f5();
  return B2({ elevationAlignedStartPoint: n16, elevationAlignedEndPoint: t15 }) && i6 === t6.Vertical ? (r2(u12.startRenderSpace, c9.startRenderSpace), r2(u12.endRenderSpace, c9.endRenderSpace)) : L3(u12, { offsetAxis: l15, offset: r17, relativeToSegment: c9, renderCoordsHelper: a17 }), { directSegment: c9, dimensionSegment: u12, primaryOffsetAxis: l15, spatialReference: a17.spatialReference };
}
function H4(e13, n16, t15, r17) {
  return n16 === z3.Start ? (r2(e13.startRenderSpace, t15.startRenderSpace), r2(e13.endRenderSpace, r17.startRenderSpace)) : (r2(e13.startRenderSpace, t15.endRenderSpace), r2(e13.endRenderSpace, r17.endRenderSpace)), e13;
}
var z3;
function k2(e13, n16, t15, r17) {
  q(e13.startRenderSpace, n16.startRenderSpace, t15, r17), q(e13.endRenderSpace, n16.endRenderSpace, t15, r17);
}
function U5(n16, t15, r17, i6) {
  switch (t15) {
    case t6.Direct:
      return b5(n16, r17, i6);
    case t6.Horizontal:
    case t6.Vertical: {
      const { elevationAlignedStartPoint: o13, elevationAlignedEndPoint: a17, dimension: s14, geometry: d9 } = r17;
      let c9;
      if (s14.measureType === t6.Direct) {
        c9 = M2(d9, i6) === o13.z > a17.z, t15 === t6.Horizontal && (c9 = !c9);
      } else
        c9 = !V4(d9);
      const [l15, u12] = c9 ? [o13, a17] : [a17, o13], p16 = x4(u12, D4);
      return t15 === t6.Horizontal ? p16.z = l15.z : (p16.x = l15.x, p16.y = l15.y), i6.toRenderCoords(l15, n16.startRenderSpace), i6.toRenderCoords(p16, n16.endRenderSpace), n16;
    }
  }
}
function b5(e13, n16, t15) {
  return t15.toRenderCoords(n16.elevationAlignedStartPoint, e13.startRenderSpace), t15.toRenderCoords(n16.elevationAlignedEndPoint, e13.endRenderSpace), e13;
}
function M2(e13, n16) {
  const t15 = e13.directSegment.eval(0.5, c.get()), r17 = n16.worldUpAtPosition(t15, c.get()), i6 = e13.dimensionSegment.eval(0.5, c.get()), o13 = J(c.get(), i6, t15);
  return !G(o13, f) && P2(o13, r17) > 0;
}
function V4(e13) {
  const { startRenderSpace: n16, endRenderSpace: t15 } = e13.dimensionSegment, { startRenderSpace: r17, endRenderSpace: i6 } = e13.directSegment;
  return X(r17, n16) < X(i6, t15);
}
!function(e13) {
  e13[e13.Start = 0] = "Start", e13[e13.End = 1] = "End";
}(z3 || (z3 = {}));
var D4 = Z(0, 0, 0, null);
function F4(e13, n16, t15, r17) {
  const { directSegment: i6 } = t15, o13 = I3(c.get(), { measureType: n16, directSegment: i6, renderCoordsHelper: r17 }), a17 = L3(O3, { offsetAxis: o13, offset: 0, relativeToSegment: i6, renderCoordsHelper: r17 }).eval(0.5, c.get()), s14 = J(c.get(), e13, a17);
  return P2(s14, o13) * r17.unitInMeters;
}
var O3 = new f5();
function I3(t15, r17) {
  const { measureType: i6, elevationAlignedStartPoint: a17, elevationAlignedEndPoint: d9, directSegment: { startRenderSpace: p16, endRenderSpace: g13 }, directSegment: v16, renderCoordsHelper: y8 } = r17, E5 = v16.eval(0.5, c.get()), h17 = y8.worldUpAtPosition(E5, c.get()), j5 = y8.worldBasisAtPosition(E5, n7.Y, c.get());
  switch (i6) {
    case t6.Horizontal:
      r2(t15, h17);
      break;
    case t6.Vertical:
      P2(p16, h17) < P2(g13, h17) ? J(t15, g13, p16) : J(t15, p16, g13), _(t15, t15, h17), _(t15, t15, h17);
      break;
    case t6.Direct: {
      const e13 = r17.orientation ?? 0;
      if (B2({ elevationAlignedStartPoint: a17, elevationAlignedEndPoint: d9 }))
        g2(q3, -M(e13), h17), O(t15, j5, q3);
      else {
        const r18 = J(c.get(), g13, p16), i7 = _(c.get(), r18, h17);
        _(i7, i7, r18), g2(q3, M(e13), r18), O(t15, i7, q3);
      }
      break;
    }
  }
  return G(t15, f) ? r2(t15, j5) : z(t15, t15);
}
var q3 = e6();
function B2({ elevationAlignedStartPoint: e13, elevationAlignedEndPoint: n16 }) {
  return null != e13 && null != n16 && e13.x === n16.x && e13.y === n16.y;
}
function L3(e13, n16) {
  const { offsetAxis: t15, offset: r17, relativeToSegment: { startRenderSpace: i6, endRenderSpace: o13 }, relativeToSegment: a17, renderCoordsHelper: s14 } = n16, c9 = r17 / s14.unitInMeters, [l15, u12] = Y(i6, o13, t15, c9);
  return q(e13.startRenderSpace, a17.startRenderSpace, t15, l15), q(e13.endRenderSpace, a17.endRenderSpace, t15, u12), e13;
}
function Y(e13, n16, t15, r17 = 0) {
  const i6 = P2(n16, t15), o13 = P2(e13, t15), a17 = Math.abs(i6 - o13) + r17;
  return i6 > o13 ? [a17, r17] : [r17, a17];
}
function Z3(e13, n16, t15) {
  const r17 = n16.directSegment.eval(0.5, c.get());
  return t15.worldUpAtPosition(r17, e13);
}
function G2(e13, n16) {
  const { startRenderSpace: t15, endRenderSpace: r17 } = n16.directSegment;
  return J(e13, r17, t15);
}
function J2(e13, n16, t15 = { invert: false }) {
  const { startRenderSpace: r17, endRenderSpace: i6 } = n16.dimensionSegment;
  return t15.invert ? J(e13, r17, i6) : J(e13, i6, r17);
}
function K(e13, n16) {
  const t15 = e13.directSegment.eval(0.5, c.get());
  return n16.headingAtPosition(t15, e13.primaryOffsetAxis);
}
function N2(e13, n16) {
  return v(J2(Q, e13)) / n16 ** 2;
}
var Q = n4();
function W2(e13) {
  const { elevationAlignedStartPoint: n16, elevationAlignedEndPoint: r17 } = e13;
  if (null == n16 || null == r17)
    return false;
  const i6 = z2(n16, r17);
  return null != i6 && f4(i6, "meters").value > X3;
}
var X3 = 1e5;
function $2(e13) {
  return null != e13.geometry;
}

// node_modules/@arcgis/core/views/3d/analysis/Dimension/DimensionController.js
var g6 = class extends m {
  constructor(t15) {
    super(t15), this._handles = new t();
  }
  initialize() {
    const { computations: t15 } = this.analysisViewData;
    for (const e13 of t15)
      this._addComputation(e13);
    this.addHandles(t15.on("change", ({ added: t16, removed: e13 }) => {
      for (const s14 of e13)
        this._removeComputation(s14);
      for (const s14 of t16)
        this._addComputation(s14);
    }));
  }
  destroy() {
    this._handles = l(this._handles);
  }
  get analysis() {
    return this.analysisViewData.analysis;
  }
  get _defaultUnit() {
    return e7(this.view);
  }
  _addComputation(t15) {
    this._handles.has(t15) || this._handles.add(l3(() => w3(t15), (s14) => {
      const { measureType: o13 } = s14;
      if (W2(s14) && o13 !== t6.Direct) {
        const e13 = Math.round(j3(X3, "meters", "kilometers"));
        return s.getLogger(this).warnOnce(`A ${o13} dimension in the analysis (id: '${this.analysis.id}') will not display, because only direct dimensions can measure lengths greater than ${e13} km. Update the measureType of the affected dimension to "direct" to display it.`), void (t15.geometry = null);
      }
      const i6 = C2(s14, this.view.renderCoordsHelper, t15.geometry);
      t15.geometry = i6, t15.result.length = T3(i6, o13, this._defaultUnit);
    }, w), t15);
  }
  _removeComputation(t15) {
    this._handles.remove(t15);
  }
};
e([y2({ constructOnly: true })], g6.prototype, "analysisViewData", void 0), e([y2({ constructOnly: true })], g6.prototype, "view", void 0), e([y2()], g6.prototype, "analysis", null), e([y2()], g6.prototype, "_defaultUnit", null), g6 = e([a2("esri.views.3d.analysis.Dimension.support.DimensionController")], g6);

// node_modules/@arcgis/core/views/3d/analysis/Dimension/settings.js
var o7 = class {
  constructor() {
    this.color = i3(0.5), this.radius = 5;
  }
};
var n13 = class {
  constructor() {
    this.color = new h3([127, 127, 127, 0.5]), this.radius = 5;
  }
};
var r11 = class {
  constructor() {
    this.lineSizeFraction = 0.8;
  }
};
var e10 = class {
  constructor() {
    this.color = i3(0.5), this.linePaddingPx = 4, this.focusedLinePaddingPx = 6, this.lengthFraction = 0.5, this.minLengthMeters = 0.1;
  }
};
var c7 = class {
  constructor() {
    this.calloutOffsetPx = 18, this.calloutWidth = 2, this.discScale = 0.3, this.focusMultiplier = 2, this.color = i3(0.5), this.contrastColor = u6();
  }
};
var h9 = class {
  constructor() {
    this.lineSizeFraction = 0.25;
  }
};
var a14 = class {
  constructor() {
    this.marginPx = 20, this.minScreenLengthFontSizeFactor = 5;
  }
};
var l10 = class {
  constructor() {
    this.color = i3(0.5);
  }
};
var u10 = class {
  constructor() {
    this.pointManipulators = new o7(), this.offsetManipulator = new e10(), this.orientationManipulator = new c7(), this.markers = new r11(), this.labels = new a14(), this.offsetLine = new h9(), this.constraint = new l10(), this.constraintThresholdPx = 10, this.initialOffsetPx = 50, this.orientationSnapThresholdDegrees = 5, this.disabledPointIndicator = new n13(), this.smallScreenLengthLineSizeFactor = 2, this.pointerMoveTimeoutMs = 2500;
  }
};
var d6 = new u10();

// node_modules/@arcgis/core/views/3d/analysis/Dimension/lengthDimensionManipulatorUtils.js
var oe = class {
  constructor(e13) {
    this.start = e13.start, this.end = e13.end, this.offset = e13.offset, this.heading = e13.heading, this.rotation = e13.rotation, this.direct = e13.direct, this.horizontal = e13.horizontal, this.vertical = e13.vertical;
  }
  manipulatorName(e13) {
    return Object.keys(this).find((t15) => this.hasOwnProperty(t15) && e13 === this[t15]);
  }
  values() {
    return [this.start, this.end, this.offset, this.heading, this.rotation, this.direct, this.horizontal, this.vertical];
  }
  forEachMeasureTypeManipulator(e13) {
    for (const n16 of r6)
      e13(this.manipulatorForMeasureType(n16), n16);
  }
  manipulatorForMeasureType(e13) {
    switch (e13) {
      case t6.Direct:
        return this.direct;
      case t6.Horizontal:
        return this.horizontal;
      case t6.Vertical:
        return this.vertical;
    }
  }
};
function ie(t15, n16) {
  const r17 = T2(t15, h3.toUnitRGBA(d6.pointManipulators.color), Fe);
  return r17.available = false, r17.grabCursor = "crosshair", r17.radius = d6.pointManipulators.radius, r17.metadata = n16.metadata, r17.collisionPriority = 1, r17;
}
function ae(e13, t15) {
  const n16 = [r(-0.5, 0, 0), r(0.5, 0, 0)], { lengthFraction: r17 } = d6.offsetManipulator, o13 = pt(t15.unfocusedMaterial, n16.map((e14) => g(n4(), e14, r17))), i6 = o13.instantiate({ material: t15.focusedMaterial });
  return new $({ view: e13, renderObjects: [new e8(o13, t7.Unfocused | t7.Selected | Fe), new e8(i6, t7.Focused | Fe)], collisionType: { type: "line", paths: [n16] }, radius: De(t15.lineSizePt) / 2, metadata: t15.metadata, available: false, ...U2 });
}
function se(t15, { lineSizePt: n16, material: r17 }) {
  const { calloutOffsetPx: o13, calloutWidth: a17, discScale: s14, focusMultiplier: c9, color: m8 } = d6.orientationManipulator;
  return { calloutLength: 0.25 * p5 * d6.markers.lineSizeFraction * u2(n16) + o13, calloutColor: h3.toUnitRGBA(m8), calloutWidth: a17, customStateMask: Fe, discScale: s14, focusMultiplier: c9, material: r17, metadata: t15 };
}
function ce(e13, t15) {
  return R2(e13, se(t15.metadata, t15));
}
function me(e13, t15) {
  L(e13, se(e13.metadata, t15));
}
function de(e13, t15) {
  const n16 = [r(-0.5, 0, 0), r(0.5, 0, 0)], { lengthFraction: r17 } = d6.offsetManipulator, o13 = pt(t15.thinOffsetManipulatorMaterial, n16), i6 = pt(t15.unfocusedMaterial, n16.map((e14) => g(n4(), e14, r17))), a17 = i6.instantiate({ material: t15.focusedMaterial });
  return new $({ view: e13, renderObjects: [new e8(i6, t7.Unfocused | Fe), new e8(a17, t7.Focused | Fe), new e8(o13, Fe)], collisionType: { type: "line", paths: [n16] }, radius: De(t15.lineSizePt) / 2, available: false, metadata: t15.metadata, ...U2 });
}
function le(e13, { isStart: t15, createSnappingPipelineStep: n16, dimension: r17, onUpdate: o13, view: i6 }) {
  const a17 = t15 ? "startPoint" : "endPoint", s14 = d4(e13, (e14, t16, s15, c9) => {
    const m8 = A4(e14), { snappingStep: d9, cancelSnapping: l15 } = n16(c9);
    s15 = s15.next(m8).next(R3(r17, [a17, "measureType", "orientation"])).next(l15), t16.next(m8).next(F3(i6)).next(...d9).next((e15) => {
      const t17 = x4(e15.mapEnd, new x3());
      o13("startPoint" === a17 ? { startPoint: t17 } : { endPoint: t17 });
    });
  });
  return [s14];
}
function ue(e13, { computation: t15, view: n16 }) {
  return [d4(e13, (e14, r17, o13) => {
    if (!$2(t15) || !e14.selected)
      return;
    const { geometry: i6, dimension: a17 } = t15, s14 = A4(e14);
    r17.next(s14).next(Se(n16, a17, i6.dimensionSegment, i6.primaryOffsetAxis)), o13.next(s14).next(R3(a17, ["offset"]));
  })];
}
function fe(e13, { computation: t15, view: n16 }) {
  return [d4(e13, (e14, r17, o13) => {
    he({ cancel: o13, computation: t15, settingHeading: true, steps: r17, view: n16 });
  })];
}
function pe(e13, { computation: t15, view: n16 }) {
  return [d4(e13, (e14, r17, o13) => {
    he({ cancel: o13, computation: t15, settingHeading: false, steps: r17, view: n16 });
  }), e13.events.on("immediate-click", (e14) => {
    ge(e14, t15, n16);
  })];
}
function ge(e13, t15, n16) {
  const { dimension: o13, geometry: i6 } = t15;
  if (90 === o13.orientation || 270 === o13.orientation)
    return o13.orientation = 0, void e13.stopPropagation();
  if (null == i6)
    return;
  const { renderCoordsHelper: a17 } = n16, s14 = C2({ ...w3(t15), orientation: 90 }, a17), c9 = C2({ ...w3(t15), orientation: 270 }, a17);
  if (null == s14 || null == c9)
    return;
  const m8 = K(s14, a17), d9 = K(c9, a17), l15 = je(i6, n16), u12 = s4.shortestSignedDiff(l15, m8), f12 = s4.shortestSignedDiff(l15, d9);
  o13.orientation = Math.abs(u12) < Math.abs(f12) ? 90 : 270, e13.stopPropagation();
}
function he(e13) {
  const { cancel: t15, computation: n16, settingHeading: r17, steps: i6, view: a17 } = e13;
  if (!$2(n16))
    return;
  const { renderCoordsHelper: s14 } = a17, { dimension: c9, geometry: m8 } = n16, l15 = n4(), u12 = be(n4(), m8, m8.directSegment, s14), f12 = ke(c.get(), { forHeading: r17, geometry: m8, renderCoordsHelper: s14 }), p16 = T(u12, f12, h5()), g13 = r17 ? c9.orientation ?? K(m8, a17.renderCoordsHelper) : c9.orientation ?? 0;
  i6.next(H(a17, p16)).next((e14) => {
    "start" === e14.action && r2(l15, e14.renderStart);
    const t16 = W(p16), n17 = D2(l15, e14.renderEnd, u12, t16);
    let i7 = g13 - m2(n17);
    r17 || (i7 = ve(i7)), c9.orientation = i7;
  }), t15.next(R3(c9, ["orientation"]));
}
function ve(e13) {
  const t15 = s4.normalize(e13) % 90;
  return t15 < d6.orientationSnapThresholdDegrees ? e13 - t15 : 90 - t15 < d6.orientationSnapThresholdDegrees ? e13 + (90 - t15) : e13;
}
function ye(e13, { computation: t15, manipulatorMeasureType: r17, view: o13 }) {
  let i6 = t6.Direct, a17 = 0, s14 = 0;
  return [e13.events.on("grab-changed", (n16) => {
    if ("start" !== n16.action || !$2(t15))
      return;
    const { dimension: c9, geometry: m8 } = t15;
    i6 = c9.measureType, a17 = c9.offset, s14 = c9.orientation;
    const l15 = r2(c.get(), e13.renderLocation);
    c9.measureType = r17, c9.offset = F4(l15, r17, m8, o13.renderCoordsHelper), c9.orientation = 0;
  }), d4(e13, (e14, n16, c9) => {
    if (!$2(t15))
      return;
    const { geometry: m8, dimension: d9 } = t15, { renderCoordsHelper: l15 } = o13, u12 = U5(Ge, r17, t15, l15), f12 = I3(c.get(), { measureType: r17, directSegment: m8.directSegment, renderCoordsHelper: l15 }), p16 = A4(e14);
    n16.next(p16).next(Se(o13, d9, u12, f12)), c9.next(p16).next((e15) => (d9.measureType = i6, d9.offset = a17, d9.orientation = s14, e15));
  })];
}
function Se(e13, t15, n16, r17) {
  const o13 = e4(c.get(), n16.endRenderSpace, n16.startRenderSpace);
  _(o13, o13, r17);
  const i6 = T(n16.startRenderSpace, o13, h5()), a17 = T(n16.startRenderSpace, r17, h5()), s14 = t15.offset;
  let c9, m8 = 0;
  const d9 = new U3();
  return d9.next(H(e13, i6)).next((n17) => {
    "start" === n17.action && (m8 = R(a17, n17.renderStart));
    const r18 = (R(a17, n17.renderEnd) - m8) * e13.renderCoordsHelper.unitInMeters;
    t15.offset = s14 + r18, c9 = n17;
  }), (e14) => (d9.execute(e14), c9);
}
function je(e13, t15) {
  const { directSegment: n16 } = e13, { renderCoordsHelper: r17 } = t15, o13 = Z3(c.get(), e13, r17), i6 = G2(c.get(), e13), a17 = _(c.get(), i6, o13), { viewForward: s14 } = t15.state.camera;
  P2(a17, s14) > 0 && g(a17, a17, -1);
  const c9 = n16.eval(0.5, c.get());
  return r17.headingAtPosition(c9, a17);
}
function xe(e13, t15, n16) {
  const { dimensionSegment: r17, primaryOffsetAxis: o13 } = t15, i6 = J2(Ee, t15), c9 = F(i6, f) ? r3(Ae) : N(i6, o13, f, Ae), m8 = Math.max(s3(i6), d6.offsetManipulator.minLengthMeters / n16.unitInMeters);
  f3(c9, c9, o3(Ee, m8, m8, m8)), e13.modelTransform = c9, e13.renderLocation = r17.eval(0.5, Ee);
}
function Me(e13, t15, n16) {
  He(e13, t15, n16, { forHeading: true });
}
function we(e13, t15, n16) {
  He(e13, t15, n16, { forHeading: false });
}
function He(e13, t15, n16, { forHeading: r17 }) {
  const { dimension: o13, geometry: i6 } = t15, { primaryOffsetAxis: a17 } = i6, s14 = g(Pe, a17, o13.offset >= 0 ? 1 : -1), c9 = ke(Ce, { forHeading: r17, geometry: i6, renderCoordsHelper: n16 });
  _(c9, c9, s14);
  const d9 = N(s14, c9, f, Ae);
  e13.modelTransform = d9, e13.renderLocation = be(Ee, i6, i6.dimensionSegment, n16);
}
var Pe = n4();
var Ce = n4();
function Te(e13, t15, n16, r17) {
  const { geometry: o13 } = t15, i6 = U5(Ge, n16, t15, r17), a17 = I3(Ee, { measureType: n16, directSegment: o13.directSegment, renderCoordsHelper: r17 }), c9 = J(Le, i6.endRenderSpace, i6.startRenderSpace), m8 = N(c9, a17, f, Ae), d9 = s3(c9);
  f3(m8, m8, o3(Le, d9, d9, d9)), e13.modelTransform = m8, e13.renderLocation = i6.eval(0.5, Le);
}
function be(e13, t15, n16, r17) {
  const { startRenderSpace: o13, endRenderSpace: i6 } = n16, a17 = Re(t15, r17) ? o13 : i6;
  return r2(e13, a17);
}
function ke(e13, { forHeading: t15, geometry: n16, renderCoordsHelper: r17 }) {
  return t15 ? Z3(e13, n16, r17) : J2(e13, n16, { invert: true });
}
function Re(e13, t15) {
  const n16 = G2(Ue, e13), r17 = Z3(ze, e13, t15);
  return P2(n16, r17) > 0;
}
var Ue = n4();
var ze = n4();
function Oe(e13) {
  return u2(e13) + d6.offsetManipulator.linePaddingPx;
}
function De(e13) {
  return u2(e13) + d6.offsetManipulator.focusedLinePaddingPx;
}
var Fe = u4.Custom1;
var Ee = n4();
var Le = n4();
var Ae = e6();
var Ge = new f5();

// node_modules/@arcgis/core/core/memoize.js
function t13(t15) {
  let r17, e13, i6 = [], u12 = false;
  function f12(...f13) {
    return u12 && r17 === this && n14(f13, i6) || (e13 = t15.apply(this, f13), r17 = this, i6 = f13, u12 = true), e13;
  }
  return f12;
}
function n14(t15, n16) {
  if (t15.length !== n16.length)
    return false;
  for (let r17 = 0; r17 < t15.length; ++r17)
    if (t15[r17] !== n16[r17])
      return false;
  return true;
}

// node_modules/@arcgis/core/views/3d/analysis/Dimension/lengthDimensionConstraintUtils.js
var P4;
function p9(e13, t15) {
  return { enabled: t15.effectiveFeatureEnabled, elevationAlignedStartPoint: e13.elevationAlignedStartPoint, elevationAlignedEndPoint: e13.elevationAlignedEndPoint, geometry: e13.geometry };
}
function g7(e13, s14) {
  if (W2(e13))
    return P4.Direct;
  if (!e13.enabled)
    return null;
  const { geometry: u12 } = e13;
  if (null == u12 || F(u12.directSegment.startRenderSpace, u12.directSegment.endRenderSpace))
    return null;
  const { constraintThresholdPx: p16 } = d6, { camera: g13 } = s14.state, f12 = Z3(c.get(), u12, s14.renderCoordsHelper), v16 = G2(c.get(), u12), y8 = g(c.get(), f12, P2(v16, f12)), S7 = e4(c.get(), v16, y8), A8 = v(S7), R6 = v(y8), { startRenderSpace: z5, endRenderSpace: j5 } = u12.directSegment, x10 = Math.max(g13.computeRenderPixelSizeAt(z5) * p16, g13.computeRenderPixelSizeAt(j5) * p16) ** 2;
  return A8 < x10 ? P4.Vertical : R6 < x10 ? P4.Horizontal : null;
}
function f9(e13, t15, { constraint: n16, view: i6 }) {
  const { unconstrainedGeometry: o13 } = e13;
  if (null == o13)
    return;
  const { renderCoordsHelper: r17, spatialReference: a17 } = i6, { startRenderSpace: s14, endRenderSpace: l15 } = o13.directSegment, d9 = r17.fromRenderCoords(s14, new x3(), a17), c9 = r17.fromRenderCoords(l15, new x3(), a17);
  let m8;
  m8 = "start" === t15 ? { startPoint: d9 } : { endPoint: c9 }, v9(e13, m8, { constraint: n16, elevationAlignedStartPoint: e13.elevationAlignedStartPoint, elevationAlignedEndPoint: e13.elevationAlignedEndPoint, unconstrainedGeometry: o13, view: i6 });
}
function v9(t15, n16, i6) {
  const { constraint: o13, elevationAlignedStartPoint: r17, elevationAlignedEndPoint: a17, unconstrainedGeometry: l15, view: d9 } = i6, { dimension: c9, previousConstraint: m8, preConstraintProperties: u12 } = t15;
  if (null == r17 || null == a17)
    return;
  const p16 = () => {
    "startPoint" in n16 ? c9.startPoint = n16.startPoint : "endPoint" in n16 && (c9.endPoint = n16.endPoint);
  };
  if (null == o13)
    p16(), null != m8 && null != u12 && (c9.measureType = u12.measureType, c9.orientation = u12.orientation);
  else
    switch (c9.measureType = t6.Direct, o13) {
      case P4.Horizontal:
        if (o13 !== m8 && (c9.orientation = 0), "startPoint" in n16) {
          const e13 = n16.startPoint;
          null != e13 && (e13.z = a17.z), c9.startPoint = e13;
        } else if ("endPoint" in n16) {
          const e13 = n16.endPoint;
          null != e13 && (e13.z = r17.z), c9.endPoint = e13;
        }
        break;
      case P4.Vertical:
        if (o13 !== m8 && (c9.orientation = je(l15, d9)), "startPoint" in n16) {
          const e13 = n16.startPoint;
          null != e13 && (e13.x = a17.x, e13.y = a17.y), c9.startPoint = e13;
        } else if ("endPoint" in n16) {
          const e13 = n16.endPoint;
          null != e13 && (e13.x = r17.x, e13.y = r17.y), c9.endPoint = e13;
        }
        break;
      case P4.Direct:
        o13 !== m8 && null != u12 && (c9.orientation = u12.orientation), p16();
    }
  t15.previousConstraint = o13, t15.unconstrainedGeometry = l15;
}
!function(e13) {
  e13[e13.Horizontal = 0] = "Horizontal", e13[e13.Vertical = 1] = "Vertical", e13[e13.Direct = 2] = "Direct";
}(P4 || (P4 = {}));

// node_modules/@arcgis/core/views/3d/interactive/visualElements/ExtendedLineVisualElement.js
var G3 = class extends t10 {
  constructor(e13) {
    super(e13), this._ray = d3(), this._isWorldDown = false, this._start = n4(), this._end = r(1, 0, 0), this._width = 1, this._color = r8(1, 0, 1, 1), this._polygonOffset = false, this._writeDepthEnabled = true, this._innerWidth = 0, this._innerColor = r8(1, 1, 1, 1), this._stipplePattern = null, this._stippleOffColor = null, this._stipplePreferContinuous = true, this._falloff = 0, this._extensionType = V5.LINE, this._laserlineStyle = null, this._laserlineEnabled = false, this._renderOccluded = o5.OccludeAndTransparent, this._fadedExtensions = T4, this._laserline = new c4({ view: this.view }), this.applyProps(e13);
  }
  destroy() {
    this._laserline.destroy(), super.destroy();
  }
  createObject3DResourceFactory(e13) {
    return { view: e13, createResources: (e14) => this._createObject3DResources(e14), destroyResources: (e14) => this._destroyExternalResources(e14), recreateGeometry: (e14, t15) => this._recreateObject3DGeometry(e14, t15), cameraChanged: () => this._updateGeometry() };
  }
  createDrapedResourceFactory(e13) {
    return { view: e13, createResources: () => this._createDrapedResources(), destroyResources: (e14) => this._destroyExternalResources(e14), recreateGeometry: (e14) => this._recreateDrapedGeometry(e14) };
  }
  updateVisibility(e13) {
    super.updateVisibility(e13), this._laserline.visible = e13;
  }
  onAttachedChange() {
    this._laserline.attached = this._laserlineAttached;
  }
  setStartEndFromWorldDownAtLocation(r17) {
    this._isWorldDown = true, r2(this._start, r17), this.view.renderCoordsHelper.worldUpAtPosition(r17, this._end), e4(this._end, r17, this._end), h4(this._start, this._end, this._ray), this._updateGeometry();
  }
  get start() {
    return this._start;
  }
  set start(t15) {
    this._isWorldDown = false, F(this._start, t15) || (r2(this._start, t15), h4(this._start, this._end, this._ray), this._updateGeometry());
  }
  get end() {
    return this._end;
  }
  set end(t15) {
    this._isWorldDown = false, F(this._end, t15) || (r2(this._end, t15), h4(this._start, this._end, this._ray), this._updateGeometry());
  }
  get width() {
    return this._width;
  }
  set width(e13) {
    e13 !== this._width && (this._width = e13, this._updateMaterial());
  }
  get color() {
    return this._color;
  }
  set color(e13) {
    D(e13, this._color) || (a4(this._color, e13), this._updateMaterial());
  }
  get polygonOffset() {
    return this._polygonOffset;
  }
  set polygonOffset(e13) {
    e13 !== this._polygonOffset && (this._polygonOffset = e13, this._updateMaterial());
  }
  get writeDepthEnabled() {
    return this._writeDepthEnabled;
  }
  set writeDepthEnabled(e13) {
    this._writeDepthEnabled !== e13 && (this._writeDepthEnabled = e13, this._updateMaterial());
  }
  get innerWidth() {
    return this._innerWidth;
  }
  set innerWidth(e13) {
    e13 !== this._innerWidth && (this._innerWidth = e13, this._updateMaterial());
  }
  get innerColor() {
    return this._innerColor;
  }
  set innerColor(e13) {
    D(e13, this._innerColor) || (a4(this._innerColor, e13), this._updateMaterial());
  }
  get stipplePattern() {
    return this._stipplePattern;
  }
  set stipplePattern(e13) {
    const t15 = null != e13 != (null != this._stipplePattern);
    this._stipplePattern = e13, t15 ? this.recreate() : this._updateMaterial();
  }
  get stippleOffColor() {
    return this._stippleOffColor;
  }
  set stippleOffColor(e13) {
    null != e13 && null != this._stippleOffColor && D(e13, this._stippleOffColor) || (this._stippleOffColor = null != e13 ? t9(e13) : null, this._updateMaterial());
  }
  get stipplePreferContinuous() {
    return this._stipplePreferContinuous;
  }
  set stipplePreferContinuous(e13) {
    e13 !== this._stipplePreferContinuous && (this._stipplePreferContinuous = e13, this._updateMaterial());
  }
  get falloff() {
    return this._falloff;
  }
  set falloff(e13) {
    e13 !== this._falloff && (this._falloff = e13, this._updateMaterial());
  }
  get extensionType() {
    return this._extensionType;
  }
  set extensionType(e13) {
    e13 !== this._extensionType && (this._extensionType = e13, this.recreateGeometry());
  }
  get _laserlineAttached() {
    return this._laserlineEnabled && null != this._laserlineStyle && this.attached && !this.isDraped;
  }
  get laserlineStyle() {
    return this._laserlineStyle;
  }
  set laserlineStyle(e13) {
    this._laserlineStyle = e13, this._laserline.attached = this._laserlineAttached, null != e13 && (this._laserline.style = e13);
  }
  get laserlineEnabled() {
    return this._laserlineEnabled;
  }
  set laserlineEnabled(e13) {
    this._laserlineEnabled !== e13 && (this._laserlineEnabled = e13, this._laserline.attached = this._laserlineAttached);
  }
  get renderOccluded() {
    return this._renderOccluded;
  }
  set renderOccluded(e13) {
    e13 !== this._renderOccluded && (this._renderOccluded = e13, this._updateMaterial());
  }
  get _normalizedRenderOccluded() {
    return this.isDraped && this._renderOccluded === o5.OccludeAndTransparentStencil ? o5.OccludeAndTransparent : this._renderOccluded;
  }
  get fadedExtensions() {
    return this._fadedExtensions;
  }
  set fadedExtensions(e13) {
    this._fadedExtensions = e13 ?? T4, this.recreateGeometry();
  }
  _updateMaterial() {
    var _a, _b;
    const { materialParameters: e13 } = this;
    (_a = this.object3dResources.resources) == null ? void 0 : _a.material.setParameters(e13), (_b = this.drapedResources.resources) == null ? void 0 : _b.material.setParameters(e13);
  }
  get materialParameters() {
    return { width: this._width, color: this._color, stippleOffColor: this._stippleOffColor, stipplePattern: this._stipplePattern, stipplePreferContinuous: this._stipplePreferContinuous, innerWidth: this._innerWidth, innerColor: this._innerColor, falloff: this._falloff, hasPolygonOffset: this._polygonOffset, renderOccluded: this._normalizedRenderOccluded, writeDepth: this._writeDepthEnabled };
  }
  _createObject3DResources(e13) {
    const t15 = new B(this.materialParameters), r17 = new Array();
    return this._createObject3DGeometry(t15, e13, r17), { material: t15, geometries: r17, forEach: (e14) => {
      e14(t15), r17.forEach(e14);
    } };
  }
  _destroyExternalResources(e13) {
    e13.geometries = [], e13.material.dispose();
  }
  _recreateObject3DGeometry(e13, t15) {
    e13.geometries.length = 0, this._createObject3DGeometry(e13.material, t15, e13.geometries);
  }
  _createObject3DGeometry(e13, t15, r17) {
    const s14 = this._createGeometry(e13);
    r17.push(s14), t15.addGeometry(s14), this._updateVerticesObject3D(t15);
  }
  _createDrapedResources() {
    const e13 = new B(this.materialParameters);
    return { material: e13, geometries: [this._createDrapedGeometry(e13)] };
  }
  _recreateDrapedGeometry(e13) {
    e13.geometries = [this._createDrapedGeometry(e13.material)];
  }
  _createDrapedGeometry(e13) {
    const t15 = this._createGeometry(e13);
    return this._updateVerticesDraped(t15), new a8(t15);
  }
  _createGeometry(e13) {
    const t15 = this.extensionType === V5.FADED, r17 = t15 ? [n4(), n4(), n4(), n4()] : [n4(), n4()];
    return pt(e13, r17, null, t15 ? [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0] : null);
  }
  _updateGeometry() {
    if (this.isDraped)
      this.drapedResources.recreateGeometry();
    else {
      const e13 = this.object3dResources.object;
      e13 && this._updateVerticesObject3D(e13);
    }
  }
  _updateVerticesObject3D(e13) {
    const t15 = this._lineSegment;
    this._updateVertexAttributesObject3D(e13, t15), this._laserline.intersectsLine = t15;
  }
  _updateVerticesDraped(e13) {
    this._updateVertexAttributesDraped(e13, this._lineSegment);
  }
  get _lineSegment() {
    return this._extensionType === V5.FADED ? this._updateLineSegmentFinite(S3) : this._updateLineSegmentInfinite(this._extensionType, S3);
  }
  _updateLineSegmentFinite(e13) {
    return b2(this._start, this._end, e13);
  }
  _updateLineSegmentInfinite(e13, t15) {
    const r17 = this.view.state.camera;
    switch (y3(this._ray, x6), e13) {
      case V5.LINE:
        x6.c0 = -Number.MAX_VALUE;
        break;
      case V5.RAY:
      case V5.GROUND_RAY: {
        const e14 = this._ray.origin, t16 = this.view.elevationProvider.getElevation(e14[0], e14[1], e14[2], this.view.renderCoordsHelper.spatialReference, "ground") ?? 0, r18 = this.view.renderCoordsHelper.getAltitude(e14);
        this._isWorldDown && r18 < t16 && j2(x6.ray.direction, x6.ray.direction), this._extensionType === V5.GROUND_RAY && null != t16 && (x6.c1 = Math.abs(r18 - t16));
        break;
      }
    }
    if (!m4(r17.frustum, x6))
      return this._updateLineSegmentFinite(t15);
    const i6 = p3(x6, P5), n16 = g3(x6, v10);
    return b2(i6, n16, t15);
  }
  _updateVertexAttributesObject3D(e13, t15) {
    var _a;
    const r17 = (_a = e13.geometries[0].getMutableAttribute(O2.POSITION)) == null ? void 0 : _a.data;
    if (!r17)
      return;
    let s14 = 0;
    for (const i6 of this._lineVertices(t15))
      r17[s14++] = i6[0], r17[s14++] = i6[1], r17[s14++] = i6[2];
    e13.geometryVertexAttrsUpdated(e13.geometries[0]);
  }
  _updateVertexAttributesDraped(e13, t15) {
    var _a;
    const r17 = (_a = e13.getMutableAttribute(O2.POSITION)) == null ? void 0 : _a.data;
    if (!r17)
      return;
    let s14 = 0;
    for (const i6 of this._lineVertices(t15))
      r17[s14++] = i6[0], r17[s14++] = i6[1], r17[s14++] = ne;
    e13.invalidateBoundingInfo();
  }
  *_lineVertices(e13) {
    this.extensionType === V5.FADED ? (yield l7(e13, -this.fadedExtensions.start, P5), yield l7(e13, 0, P5), yield l7(e13, 1, P5), yield l7(e13, 1 + this.fadedExtensions.end, P5)) : (yield l7(e13, 0, P5), yield l7(e13, 1, P5));
  }
};
var x6 = a6();
var P5 = n4();
var v10 = n4();
var S3 = v3();
var V5;
!function(e13) {
  e13[e13.LINE = 0] = "LINE", e13[e13.RAY = 1] = "RAY", e13[e13.GROUND_RAY = 2] = "GROUND_RAY", e13[e13.FADED = 3] = "FADED";
}(V5 || (V5 = {}));
var M3 = 1 / 3;
var T4 = { start: M3, end: M3 };

// node_modules/@arcgis/core/views/3d/interactive/visualElements/ParallelLineVisualElement.js
var x7 = class extends t10 {
  constructor(e13) {
    super(e13), this._location = n4(), this._direction = r(1, 0, 0), this._width = 1, this._offset = 1, this._length = 18, this._color = r8(1, 0, 1, 1), this._renderOccluded = o5.OccludeAndTransparent, this.applyProps(e13);
  }
  createObject3DResourceFactory(e13) {
    return { view: e13, createResources: (e14) => this._createObject3DResources(e14), destroyResources: (e14) => this._destroyObject3DResources(e14), recreateGeometry: (e14, t15) => this._recreateObject3DGeometry(e14, t15), cameraChanged: () => this._updateGeometry() };
  }
  createDrapedResourceFactory(e13) {
    return { view: e13, createResources: () => this._createDrapedResources(), destroyResources: (e14) => this._destroyDrapedResources(e14), recreateGeometry: (e14) => this._recreateDrapedGeometry(e14) };
  }
  get location() {
    return this._location;
  }
  set location(e13) {
    F(this._location, e13) || (r2(this._location, e13), this._updateGeometry());
  }
  get direction() {
    return this._direction;
  }
  set direction(e13) {
    F(this._direction, e13) || (r2(this._direction, e13), this._updateGeometry());
  }
  setDirectionFromPoints(e13, t15) {
    z(this._direction, e4(this._direction, t15, e13)), this._updateGeometry();
  }
  get width() {
    return this._width;
  }
  set width(e13) {
    e13 !== this._width && (this._width = e13, this._updateMaterial());
  }
  get offset() {
    return this._offset;
  }
  set offset(e13) {
    e13 !== this._offset && (this._offset = e13, this._updateGeometry());
  }
  get length() {
    return this._length;
  }
  set length(e13) {
    e13 !== this._length && (this._length = e13, this._updateGeometry());
  }
  get color() {
    return this._color;
  }
  set color(e13) {
    D(e13, this._color) || (a4(this._color, e13), this._updateMaterial());
  }
  get renderOccluded() {
    return this._renderOccluded;
  }
  set renderOccluded(e13) {
    e13 !== this._renderOccluded && (this._renderOccluded = e13, this._updateMaterial());
  }
  _createObject3DResources(e13) {
    const t15 = new B(this.materialParameters), r17 = new Array();
    return this._createObject3DGeometry(t15, e13, r17), { material: t15, geometries: r17, forEach: (e14) => {
      e14(t15), r17.forEach(e14);
    } };
  }
  _destroyObject3DResources(e13) {
    e13.geometries.length = 0, e13.material.dispose();
  }
  _recreateObject3DGeometry(e13, t15) {
    e13.geometries.length = 0, this._createObject3DGeometry(e13.material, t15, e13.geometries);
  }
  _createObject3DGeometry(e13, t15, r17) {
    const [s14, i6] = this._createGeometries(e13);
    t15.addGeometry(s14), t15.addGeometry(i6), r17.push(s14), r17.push(i6), this._updateVerticesObject3D(t15);
  }
  _createDrapedResources() {
    const t15 = new B(this.materialParameters), r17 = l3(() => this.view.state.contentPixelRatio, () => {
      this.drapedResources.recreateGeometry();
    });
    return { material: t15, geometries: this._createDrapedGeometry(t15), pixelRatioHandle: r17 };
  }
  _destroyDrapedResources(e13) {
    e13.pixelRatioHandle.remove(), e13.geometries = [], e13.material.dispose();
  }
  _recreateDrapedGeometry(e13) {
    e13.geometries = this._createDrapedGeometry(e13.material);
  }
  _createDrapedGeometry(e13) {
    const t15 = this._createGeometries(e13);
    return this._updateVerticesDraped(t15), t15.map((e14) => new a8(e14));
  }
  _createGeometries(e13) {
    return [pt(e13, [n4(), n4()]), pt(e13, [n4(), n4()])];
  }
  _updateMaterial() {
    var _a, _b;
    const { materialParameters: e13 } = this;
    (_a = this.object3dResources.resources) == null ? void 0 : _a.material.setParameters(e13), (_b = this.drapedResources.resources) == null ? void 0 : _b.material.setParameters(e13);
  }
  get materialParameters() {
    return { width: this._width, color: this._color, renderOccluded: this._renderOccluded };
  }
  _updateGeometry() {
    if (this.isDraped)
      this.drapedResources.recreateGeometry();
    else {
      const e13 = this.object3dResources.object;
      e13 && this._updateVerticesObject3D(e13);
    }
  }
  _updateVerticesObject3D(e13) {
    const t15 = this.view.state.camera;
    t15.projectToScreen(this.location, S4), u(V6, this.location, this.direction), t15.projectToScreen(V6, k3), v2(k3, o4(k3, k3, S4)), this._updateVertexAttributesObject3D(t15, e13, 0, S4, k3, 1), this._updateVertexAttributesObject3D(t15, e13, 1, S4, k3, -1);
  }
  _updateVertexAttributesObject3D(e13, r17, s14, i6, o13, a17) {
    var _a;
    const c9 = r17.geometries[s14], n16 = (_a = c9.getMutableAttribute(O2.POSITION)) == null ? void 0 : _a.data;
    if (!n16)
      return;
    const { start: d9, end: h17 } = this._computeStartEnd(o13, i6, a17, this.offset, this.width, this.length);
    e13.unprojectFromScreen(l4(d9), V6), n16[0] = V6[0], n16[1] = V6[1], n16[2] = V6[2], e13.unprojectFromScreen(l4(h17), V6), n16[3] = V6[0], n16[4] = V6[1], n16[5] = V6[2], r17.geometryVertexAttrsUpdated(c9);
  }
  _updateVerticesDraped(e13) {
    const { view: { basemapTerrain: { overlayManager: t15 }, state: { contentPixelRatio: r17 } } } = this, { location: s14, width: i6, length: o13, offset: a17 } = this, c9 = E2;
    c9.spatialReference = t15.renderer.spatialReference, c9.x = s14[0], c9.y = s14[1];
    const n16 = t15.overlayPixelSizeInMapUnits(c9) * r17, d9 = i6 * n16, h17 = o13 * n16, m8 = a17 * n16;
    this._updateVertexAttributesDraped(e13[0], d9, h17, m8, -1), this._updateVertexAttributesDraped(e13[1], d9, h17, m8, 1);
  }
  _updateVertexAttributesDraped(e13, t15, r17, s14, i6) {
    var _a;
    const o13 = (_a = e13.getMutableAttribute(O2.POSITION)) == null ? void 0 : _a.data;
    if (!o13)
      return;
    const { location: a17, direction: c9 } = this, { start: n16, end: d9 } = this._computeStartEnd(c9, a17, i6, s14, t15, r17);
    o13[0] = n16[0], o13[1] = n16[1], o13[2] = ne, o13[3] = d9[0], o13[4] = d9[1], o13[5] = ne, e13.invalidateBoundingInfo();
  }
  _computeStartEnd(e13, t15, r17, s14, i6, n16) {
    const d9 = l6(P6, r4(P6, e13[1] * r17, e13[0] * -r17), s14 + i6 / 2), h17 = s6(A6, s6(A6, s6(A6, t15, l6(A6, e13, n16 / 2)), d9), d9);
    return { start: h17, end: s6(M4, h17, l6(M4, e13, -n16)) };
  }
};
var V6 = n4();
var P6 = n6();
var A6 = n6();
var M4 = n6();
var S4 = i();
var k3 = i();
var E2 = Z(0, 0, void 0, null);

// node_modules/@arcgis/core/views/interactive/snapping/Settings.js
var o8 = class extends l2 {
  constructor() {
    super(...arguments), this.enabled = true;
  }
};
e([y2({ type: Boolean })], o8.prototype, "enabled", void 0), o8 = e([a2("esri.views.interactive.snapping.Settings.DefaultSnappingAlgorithm")], o8);
var l11 = class extends l2 {
  constructor(e13) {
    super(e13), this.lineSnapper = new o8(), this.parallelLineSnapper = new o8(), this.rightAngleSnapper = new o8(), this.rightAngleTriangleSnapper = new o8(), this.shortLineThreshold = 15, this.distance = 5, this.pointThreshold = 1e-6, this.intersectionParallelLineThreshold = 1e-6, this.parallelLineThreshold = 1e-6, this.verticalLineThreshold = 0.1, this.touchSensitivityMultiplier = 1.5, this.pointOnLineThreshold = 1e-6, this.orange = new h3([255, 127, 0]), this.orangeTransparent = new h3([255, 127, 0, 0.5]), this.lineHintWidthReference = 3, this.lineHintWidthTarget = 3, this.lineHintFadedExtensions = 0.3, this.parallelLineHintWidth = 2, this.parallelLineHintLength = 24, this.parallelLineHintOffset = 1.5, this.rightAngleHintSize = 24, this.rightAngleHintOutlineSize = 1.5, this.satisfiesConstraintScreenThreshold = 1;
  }
};
e([y2({ type: o8, constructOnly: true, nonNullable: true, json: { write: true } })], l11.prototype, "lineSnapper", void 0), e([y2({ type: o8, constructOnly: true, nonNullable: true, json: { write: true } })], l11.prototype, "parallelLineSnapper", void 0), e([y2({ type: o8, constructOnly: true, nonNullable: true, json: { write: true } })], l11.prototype, "rightAngleSnapper", void 0), e([y2({ type: o8, constructOnly: true, nonNullable: true, json: { write: true } })], l11.prototype, "rightAngleTriangleSnapper", void 0), e([y2({ type: Number, nonNullable: true, range: { min: -1, max: 50, step: 1 }, json: { write: true } })], l11.prototype, "shortLineThreshold", void 0), e([y2({ type: Number, nonNullable: true, range: { min: -1, max: 50, step: 1 }, json: { write: true } })], l11.prototype, "distance", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 1e-5 }, json: { write: true } })], l11.prototype, "pointThreshold", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 1e-5 }, json: { write: true } })], l11.prototype, "intersectionParallelLineThreshold", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 1e-5 }, json: { write: true } })], l11.prototype, "parallelLineThreshold", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 1 }, json: { write: true } })], l11.prototype, "verticalLineThreshold", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 10 }, json: { write: true } })], l11.prototype, "touchSensitivityMultiplier", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 1e-5 }, json: { write: true } })], l11.prototype, "pointOnLineThreshold", void 0), e([y2({ type: h3, nonNullable: true })], l11.prototype, "orange", void 0), e([y2({ type: h3, nonNullable: true })], l11.prototype, "orangeTransparent", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 10 }, json: { write: true } })], l11.prototype, "lineHintWidthReference", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 10 }, json: { write: true } })], l11.prototype, "lineHintWidthTarget", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 1 }, json: { write: true } })], l11.prototype, "lineHintFadedExtensions", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 10 }, json: { write: true } })], l11.prototype, "parallelLineHintWidth", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 50 }, json: { write: true } })], l11.prototype, "parallelLineHintLength", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 5 }, json: { write: true } })], l11.prototype, "parallelLineHintOffset", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 46 }, json: { write: true } })], l11.prototype, "rightAngleHintSize", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 6 }, json: { write: true } })], l11.prototype, "rightAngleHintOutlineSize", void 0), e([y2({ type: Number, nonNullable: true, range: { min: 0, max: 5 }, json: { write: true } })], l11.prototype, "satisfiesConstraintScreenThreshold", void 0), l11 = e([a2("esri.views.interactive.snapping.Settings.Defaults")], l11);
var p10 = new l11();

// node_modules/@arcgis/core/views/interactive/snapping/hints/IntersectionSnappingHint.js
var o9 = class _o extends s10 {
  constructor(n16, i6, o13 = E.ALL) {
    super(i6, o13), this.intersectionPoint = n16;
  }
  equals(t15) {
    return t15 instanceof _o && F(this.intersectionPoint, t15.intersectionPoint);
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/hints/ParallelSnappingHint.js
var r12 = class _r extends s10 {
  constructor(t15, i6, r17, s14 = E.ALL) {
    super(r17, s14), this.lineStart = t15, this.lineEnd = i6;
  }
  equals(n16) {
    return n16 instanceof _r && (F(this.lineStart, n16.lineStart) && F(this.lineEnd, n16.lineEnd));
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/hints/RightAngleSnappingHint.js
var s12 = class _s extends s10 {
  constructor(e13, r17, s14, i6, o13 = E.ALL) {
    super(i6, o13), this.previousVertex = e13, this.centerVertex = r17, this.nextVertex = s14;
  }
  equals(t15) {
    return t15 instanceof _s && (F(this.previousVertex, t15.previousVertex) && F(this.centerVertex, t15.centerVertex) && F(this.nextVertex, t15.nextVertex));
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/SnappingVisualizer.js
var r13 = class {
  draw(r17, a17) {
    const p16 = this._getUniqueHints(r17), h17 = this.sortUniqueHints(p16), u12 = [];
    for (const i6 of h17)
      i6 instanceof o9 && u12.push(this.visualizeIntersectionPoint(i6, a17)), i6 instanceof n10 && u12.push(this.visualizeLine(i6, a17)), i6 instanceof r12 && u12.push(this.visualizeParallelSign(i6, a17)), i6 instanceof s12 && u12.push(this.visualizeRightAngleQuad(i6, a17)), i6 instanceof n11 && u12.push(this.visualizePoint(i6, a17));
    return n2(u12);
  }
  sortUniqueHints(i6) {
    return i6;
  }
  _getUniqueHints(i6) {
    const n16 = [];
    for (const t15 of i6) {
      let i7 = true;
      for (const s14 of n16)
        if (t15.equals(s14)) {
          i7 = false;
          break;
        }
      i7 && n16.push(t15);
    }
    return n16;
  }
};

// node_modules/@arcgis/core/views/3d/interactive/SnappingVisualizer3D.js
var O4 = class extends r13 {
  sortUniqueHints(e13) {
    return e13.sort((e14, n16) => (n16 instanceof n10 ? n16.length : 0) - (e14 instanceof n10 ? e14.length : 0));
  }
  visualizeIntersectionPoint(e13, n16) {
    const { spatialReference: t15, view: r17 } = n16, o13 = R4();
    return o2(new y5({ view: r17, primitive: "circle", geometry: p6(e13.intersectionPoint, t15), elevationInfo: e13.isDraped ? p4 : b3, size: 20, outlineSize: 2, color: o13.intersectionPointColor, outlineColor: o13.intersectionPointOutlineColor, pixelSnappingEnabled: false }));
  }
  visualizePoint(e13, n16) {
    const { view: t15, spatialReference: r17 } = n16, o13 = R4(), l15 = A7(e13.point, e13.domain, n16);
    return o2(new y5({ view: t15, primitive: "circle", geometry: p6(l15, r17), elevationInfo: H5(e13, n16), size: 20, outlineSize: 2, color: o13.pointColor, outlineColor: o13.pointOutlineColor, pixelSnappingEnabled: false }));
  }
  visualizeLine(e13, n16) {
    const { view: t15, spatialReference: r17 } = n16, o13 = R4(), l15 = A7(e13.lineStart, e13.domain, n16), a17 = A7(e13.lineEnd, e13.domain, n16);
    return o2(this._createLineSegmentHint(e13.type, l15, a17, r17, H5(e13, n16), t15, o13, e13.isDraped, e13.fadeLeft, e13.fadeRight));
  }
  visualizeParallelSign(e13, n16) {
    const { view: r17, spatialReference: o13 } = n16, l15 = R4(), { isDraped: a17 } = e13, s14 = H5(e13, n16), p16 = A7(e13.lineStart, e13.domain, n16), d9 = A7(e13.lineEnd, e13.domain, n16), u12 = z4(p16, o13, s14, r17, a17), v16 = z4(d9, o13, s14, r17, a17), h17 = A(v16, u12, v16, 0.5), E5 = new x7({ view: r17, attached: false, offset: p10.parallelLineHintOffset, length: p10.parallelLineHintLength, width: p10.parallelLineHintWidth, color: l15.parallelSignColor, location: h17, renderOccluded: a17 ? o5.OccludeAndTransparent : o5.Opaque, isDraped: a17, renderGroup: a7.SnappingHint });
    return E5.setDirectionFromPoints(u12, h17), E5.attached = true, o2(E5);
  }
  visualizeRightAngleQuad(e13, n16) {
    const { view: t15, spatialReference: r17 } = n16, o13 = R4(), l15 = H5(e13, n16), { isDraped: a17 } = e13, s14 = A7(e13.previousVertex, e13.domain, n16), p16 = A7(e13.centerVertex, e13.domain, n16), c9 = A7(e13.nextVertex, e13.domain, n16), d9 = z4(s14, r17, l15, t15, a17), v16 = z4(p16, r17, l15, t15, a17), h17 = z4(c9, r17, l15, t15, a17);
    return o2(new P3({ view: t15, attached: true, color: a17 ? o13.rightAngleColorDraped : o13.rightAngleColor, renderOccluded: a17 ? o5.OccludeAndTransparent : o5.Transparent, outlineRenderOccluded: a17 ? o5.OccludeAndTransparent : o5.Opaque, outlineColor: o13.rightAngleOutlineColor, outlineSize: p10.rightAngleHintOutlineSize, size: p10.rightAngleHintSize, isDraped: a17, geometry: { previous: d9, center: v16, next: h17 }, renderGroup: a7.SnappingHint }));
  }
  _createLineSegmentHint(e13, n16, i6, t15, r17, o13, l15, a17 = false, c9 = true, d9 = true) {
    const u12 = z4(n16, t15, r17, o13, a17), v16 = z4(i6, t15, r17, o13, a17), h17 = new G3({ view: o13, extensionType: V5.FADED, start: u12, end: v16, isDraped: a17, color: l15.lineColor, renderOccluded: a17 ? o5.OccludeAndTransparent : o5.Opaque, renderGroup: a7.SnappingHint });
    switch (e13) {
      case c6.TARGET:
        h17.width = p10.lineHintWidthTarget, h17.fadedExtensions = { start: 0, end: p10.lineHintFadedExtensions };
        break;
      case c6.REFERENCE_EXTENSION:
        h17.width = p10.lineHintWidthReference, h17.fadedExtensions = { start: 0, end: 0 };
        break;
      case c6.REFERENCE:
        h17.width = p10.lineHintWidthReference, h17.fadedExtensions = { start: c9 ? p10.lineHintFadedExtensions : 0, end: d9 ? p10.lineHintFadedExtensions : 0 };
    }
    return h17.attached = true, h17;
  }
};
function R4(i6) {
  const t15 = h3.toUnitRGBA(i3()), r17 = [0, 0, 0, 0];
  return { intersectionPointColor: r17, intersectionPointOutlineColor: t15, pointColor: r17, pointOutlineColor: t15, lineColor: t15, lineOutlineColor: void 0, parallelSignColor: t15, rightAngleColor: t15, rightAngleColorDraped: h3.toUnitRGBA(i3(0.5)), rightAngleOutlineColor: t15 };
}
function A7(e13, n16, i6) {
  const t15 = x8(n16, i6);
  return null == t15 ? e13 : f6(e13[0], e13[1], t15);
}
function H5(e13, n16) {
  return null != x8(e13.domain, n16) ? n16.selfSnappingZ.elevationInfo : e13.isDraped ? p4 : b3;
}
function x8(e13, { selfSnappingZ: n16 }) {
  return e13 === E.SELF && null != n16 ? n16.value : null;
}
function z4(e13, n16, i6, t15, l15, a17 = n4()) {
  if (l15) {
    const i7 = t15.basemapTerrain.overlayManager.renderer.spatialReference;
    Hn(e13, n16, a17, i7);
  } else
    f8(e13, n16, i6, t15, a17);
  return a17;
}

// node_modules/@arcgis/core/views/3d/support/renderInfoUtils/point.js
function o10(o13, n16, r17, s14, i6) {
  const l15 = t5(3 * o13.length), p16 = t5(l15.length);
  o13.forEach((t15, e13) => {
    l15[3 * e13] = t15[0], l15[3 * e13 + 1] = t15[1], l15[3 * e13 + 2] = t15.length > 2 ? t15[2] : 0;
  });
  const c9 = u5(l15, n16, 0, p16, 0, l15, 0, l15.length / 3, r17, s14, i6), m8 = null != c9;
  return { numVertices: o13.length, position: l15, mapPositions: p16, projectionSuccess: m8, sampledElevation: c9 };
}

// node_modules/@arcgis/core/views/3d/interactive/visualElements/VerticesVisualElement.js
var _3 = class extends a10 {
  constructor(e13) {
    super(e13), this.view = null, this._renderOccluded = o5.OccludeAndTransparent, this._vertices = null, this._spatialReference = null, this._color = e5([1, 127 / 255, 0, 1]), this._size = 11, this._outlineColor = e5([0, 0, 0, 0.5]), this._outlineSize = 1, this._elevationInfo = null, this.applyProps(e13);
  }
  get renderOccluded() {
    return this._renderOccluded;
  }
  set renderOccluded(e13) {
    e13 !== this._renderOccluded && (this._renderOccluded = e13, this._updateMaterial(), this._updateOutlineMaterial());
  }
  get vertices() {
    return this._vertices;
  }
  set vertices(e13) {
    this._vertices = e13, this.recreateGeometry();
  }
  get spatialReference() {
    return this._spatialReference;
  }
  set spatialReference(e13) {
    this._spatialReference = e13, this.recreateGeometry();
  }
  get color() {
    return this._color;
  }
  set color(e13) {
    D(e13, this._color) || (a4(this._color, e13), this._updateMaterial());
  }
  get size() {
    return this._size;
  }
  set size(e13) {
    e13 !== this._size && (this._size = e13, this._updateMaterial());
  }
  get outlineColor() {
    return this._outlineColor;
  }
  set outlineColor(e13) {
    D(e13, this._outlineColor) || (a4(this._outlineColor, e13), this._updateOutlineMaterial());
  }
  get outlineSize() {
    return this._outlineSize;
  }
  set outlineSize(e13) {
    e13 !== this._outlineSize && (this._outlineSize = e13, this._updateOutlineMaterial());
  }
  get elevationInfo() {
    return this._elevationInfo;
  }
  set elevationInfo(e13) {
    this._elevationInfo = e13, this.recreateGeometry();
  }
  get _vertexMaterialParameters() {
    return { color: this._color, transparent: this._color[3] < 1, screenSizeScale: this.size, renderOccluded: this._renderOccluded };
  }
  get _vertexOutlineMaterialParameters() {
    return { color: this._outlineColor, transparent: this._outlineColor[3] < 1, screenSizeScale: this.size + 2 * this.outlineSize, renderOccluded: this._renderOccluded };
  }
  _updateMaterial() {
    this.attached && this._vertexMaterial.setParameters(this._vertexMaterialParameters);
  }
  _updateOutlineMaterial() {
    this.attached && this._vertexOutlineMaterial.setParameters(this._vertexOutlineMaterialParameters);
  }
  _createRenderGeometries() {
    const t15 = this.vertices;
    if (null == t15 || 0 === t15.length)
      return [];
    const r17 = 0.5, i6 = 0.5, s14 = o10(t15, this.spatialReference, this.view.elevationProvider, this.view.renderCoordsHelper, o6.fromElevationInfo(this.elevationInfo)), a17 = [], o13 = s14.numVertices, c9 = s14.position;
    for (let l15 = 0; l15 < o13; ++l15) {
      const t16 = o3(d7, c9[3 * l15], c9[3 * l15 + 1], c9[3 * l15 + 2]), s15 = m6(this._vertexMaterial, r17, t16), n16 = m6(this._vertexOutlineMaterial, i6, t16);
      a17.push({ vertexGeometry: s15, vertexOutlineGeometry: n16 });
    }
    return a17;
  }
  createGeometries(e13) {
    const t15 = this._createRenderGeometries();
    for (const { vertexGeometry: r17, vertexOutlineGeometry: i6 } of t15)
      e13.addGeometry(r17), e13.addGeometry(i6);
  }
  createExternalResources() {
    this._vertexMaterial = new v5({ ...this._vertexMaterialParameters, writeDepth: true, cullFace: n8.Back, screenSizeEnabled: true }), this._vertexOutlineMaterial = new v5({ ...this._vertexOutlineMaterialParameters, transparent: true, writeDepth: true, cullFace: n8.Front, screenSizeEnabled: true, shadingEnabled: false });
  }
  destroyExternalResources() {
    this._vertexMaterial = null, this._vertexOutlineMaterial = null;
  }
  forEachExternalMaterial(e13) {
    e13(this._vertexMaterial), e13(this._vertexOutlineMaterial);
  }
};
var d7 = n4();
function m6(e13, t15, r17) {
  return nt(e13, t15, 16, 16, { offset: r17 });
}

// node_modules/@arcgis/core/views/interactive/snapping/FeatureSnappingLayerSource.js
var e11 = class extends m {
  constructor(r17) {
    super(r17), this.layer = null, this.enabled = true, this.updating = false, this.availability = 1;
  }
};
e([y2({ constructOnly: true })], e11.prototype, "layer", void 0), e([y2()], e11.prototype, "enabled", void 0), e([y2()], e11.prototype, "updating", void 0), e([y2()], e11.prototype, "availability", void 0), e11 = e([a2("esri.views.interactive.snapping.FeatureSnappingLayerSource")], e11);
var p11 = e11;

// node_modules/@arcgis/core/views/interactive/snapping/SnappingOptions.js
var p12 = class extends m {
  constructor(e13) {
    super(e13), this.enabled = false, this.enabledToggled = false, this.selfEnabled = true, this.featureEnabled = true, this.featureSources = new V2(), this.distance = p10.distance, this.touchSensitivityMultiplier = p10.touchSensitivityMultiplier;
  }
  get effectiveEnabled() {
    return this.enabledToggled ? !this.enabled : this.enabled;
  }
  get effectiveSelfEnabled() {
    return this.effectiveEnabled && this.selfEnabled;
  }
  get effectiveFeatureEnabled() {
    return this.effectiveEnabled && this.featureEnabled;
  }
};
e([y2()], p12.prototype, "enabled", void 0), e([y2()], p12.prototype, "enabledToggled", void 0), e([y2()], p12.prototype, "selfEnabled", void 0), e([y2()], p12.prototype, "featureEnabled", void 0), e([y2({ type: V2.ofType(p11) })], p12.prototype, "featureSources", void 0), e([y2()], p12.prototype, "distance", void 0), e([y2()], p12.prototype, "touchSensitivityMultiplier", void 0), e([y2({ readOnly: true })], p12.prototype, "effectiveEnabled", null), e([y2({ readOnly: true })], p12.prototype, "effectiveSelfEnabled", null), e([y2({ readOnly: true })], p12.prototype, "effectiveFeatureEnabled", null), p12 = e([a2("esri.views.interactive.snapping.SnappingOptions")], p12);
var l12 = p12;

// node_modules/@arcgis/core/views/interactive/snapping/allLayerSnapping.js
function a15(a17, s14) {
  const l15 = new l12({ enabled: true, selfEnabled: false, featureEnabled: true, distance: (s14 == null ? void 0 : s14.distance) ?? p10.distance, touchSensitivityMultiplier: (s14 == null ? void 0 : s14.touchSensitivityMultiplier) ?? p10.touchSensitivityMultiplier });
  return { ...l3(() => {
    var _a, _b;
    return ((_b = (_a = a17.map) == null ? void 0 : _a.allLayers) == null ? void 0 : _b.toArray()) ?? [];
  }, (t15) => {
    l15.featureSources = new V2(t15.map((e13) => new p11({ layer: e13, enabled: true })));
  }, h), options: l15 };
}

// node_modules/@arcgis/core/views/interactive/snapping/candidates/RightAngleSnappingCandidate.js
var o11 = class extends t11 {
  constructor({ targetPoint: e13, constraint: i6, previousVertex: r17, otherVertex: s14, otherVertexType: o13, objectId: n16, isDraped: h17 }) {
    super(e13, i6, h17, E.SELF), this.previousVertex = r17, this.otherVertex = s14, this.otherVertexType = o13, this.objectId = n16;
  }
  get hints() {
    const t15 = this.previousVertex, i6 = this.otherVertexType === n15.CENTER ? this.otherVertex : this.targetPoint, o13 = this.otherVertexType === n15.CENTER ? this.targetPoint : this.otherVertex;
    return [new n10(c6.TARGET, i6, o13, this.isDraped, this.domain), new n10(c6.REFERENCE, t15, i6, this.isDraped, this.domain), new s12(this.previousVertex, i6, o13, this.isDraped, this.domain)];
  }
};
var n15;
!function(t15) {
  t15[t15.NEXT = 0] = "NEXT", t15[t15.CENTER = 1] = "CENTER";
}(n15 || (n15 = {}));

// node_modules/@arcgis/core/views/interactive/snapping/FeatureSnappingEngine.js
var M5 = class extends d {
  get updating() {
    return n3(this.snappingSources, ({ snappingSource: e13 }) => e13.updating) || this.updatingHandles.updating;
  }
  get snappingSources() {
    const e13 = this._get("snappingSources") || /* @__PURE__ */ new Map(), t15 = /* @__PURE__ */ new Map();
    if (null != this.options && null != this.options.featureSources)
      for (const r17 of this.options.featureSources.items) {
        const n16 = r17.layer.uid, s14 = e13.get(n16);
        if (s14) {
          e13.delete(n16), t15.set(n16, s14);
          continue;
        }
        if (!r17.layer.loaded) {
          this.updatingHandles.addPromise(r17.layer.load());
          continue;
        }
        const o13 = this._createSourceInfo(r17);
        null != o13 && t15.set(n16, o13);
      }
    for (const [, r17] of e13)
      r17.destroy();
    return t15;
  }
  constructor(e13) {
    super(e13), this.options = null, this._domain = E.FEATURE, this._sourceModules = { featureService: { module: null, loader: null }, featureCollection: { module: null, loader: null }, graphics: { module: null, loader: null }, notes: { module: null, loader: null }, scene: { module: null, loader: null } };
  }
  initialize() {
    this.updatingHandles.add(() => this.snappingSources, () => this.notifyChange("updating"), U), null != this.view && this.handles.add([this.view.on("layerview-create", (e13) => this._updateLayerView(e13.layer, e13.layerView)), this.view.on("layerview-destroy", (e13) => this._updateLayerView(e13.layer, null))]);
  }
  _updateLayerView(e13, t15) {
    for (const [, r17] of this.snappingSources)
      r17.snappingSource.layerSource.layer === e13 && (r17.layerView = t15);
  }
  destroy() {
    this._set("options", null);
    for (const [, e13] of this.snappingSources)
      e13.destroy();
  }
  async fetchCandidates(e13, t15, r17, n16) {
    var _a;
    if (!(t15 & this._domain && null != this.options && this.options.effectiveFeatureEnabled))
      return [];
    const a17 = [], i6 = this._computeScreenSizeDistanceParameters(e13, r17), u12 = { distance: i6, mode: ((_a = this.view) == null ? void 0 : _a.type) ?? "2d", point: e13, coordinateHelper: r17.coordinateHelper, ...this._types };
    for (const [, { snappingSource: s14, layerView: o13 }] of this.snappingSources)
      !s14.layerSource.enabled || null != o13 && o13.suspended || a17.push(s14.fetchCandidates(u12, n16).then((e14) => e14.filter((e15) => !this._candidateIsExcluded(s14, e15, r17.excludeFeature))));
    const c9 = (await P(a17)).flat();
    return this._addRightAngleCandidates(c9, e13, i6, r17), s2(n16), u7(e13, c9), c9;
  }
  _addRightAngleCandidates(e13, t15, r17, n16) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const s14 = null != n16.vertexHandle ? (_b = (_a = n16.vertexHandle.rightEdge) == null ? void 0 : _a.rightVertex) == null ? void 0 : _b.pos : null != n16.editGeometryOperations && "polygon" === n16.editGeometryOperations.data.type ? (_d = (_c = n16.editGeometryOperations.data.components[0]) == null ? void 0 : _c.getFirstVertex()) == null ? void 0 : _d.pos : null, o13 = null != n16.vertexHandle ? (_f = (_e = n16.vertexHandle.leftEdge) == null ? void 0 : _e.leftVertex) == null ? void 0 : _f.pos : null != n16.editGeometryOperations ? (_h = (_g = n16.editGeometryOperations.data.components[0]) == null ? void 0 : _g.getLastVertex()) == null ? void 0 : _h.pos : null, { view: a17 } = this, i6 = s9(s14, a17, n16), u12 = s9(o13, a17, n16), c9 = e13.length;
    for (let l15 = 0; l15 < c9; l15++)
      this._addRightAngleCandidate(e13[l15], u12, t15, r17, e13), this._addRightAngleCandidate(e13[l15], i6, t15, r17, e13);
  }
  _addRightAngleCandidate(e13, t15, r17, n16, s14) {
    if (null == t15 || !H6(e13))
      return;
    const o13 = e13.constraint.closestTo(t15), a17 = (o13[0] - r17[0]) / n16.x, i6 = (o13[1] - r17[1]) / n16.y, { start: u12, end: c9 } = e13.constraint;
    if (a17 * a17 + i6 * i6 <= 1) {
      const r18 = new o11({ targetPoint: o13, otherVertex: t15, otherVertexType: n15.NEXT, previousVertex: b(o13, u12) > b(o13, c9) ? u12 : c9, constraint: new A5(t15, o13), objectId: e13.objectId, isDraped: e13.isDraped });
      s14.push(r18);
    }
  }
  _computeScreenSizeDistanceParameters(e13, t15) {
    let r17 = null != this.options ? this.options.distance * ("touch" === t15.pointer ? this.options.touchSensitivityMultiplier : 1) : 0;
    return null == this.view ? { x: r17, y: r17, z: r17, distance: r17 } : "2d" === this.view.type ? (r17 *= this.view.resolution, { x: r17, y: r17, z: r17, distance: r17 }) : this._computeScreenSizeDistanceParameters3D(e13, r17, this.view, t15);
  }
  _computeScreenSizeDistanceParameters3D(e13, t15, r17, n16) {
    const { spatialReference: s14 } = n16;
    r17.renderCoordsHelper.toRenderCoords(e13, s14, P7);
    const o13 = r17.state.camera.computeScreenPixelSizeAt(P7), a17 = o13 * r17.renderCoordsHelper.unitInMeters / r17.mapCoordsHelper.unitInMeters, i6 = t15 * a17, u12 = u8(e13, s14, b3, r17), c9 = u12 ? I4(u12, e13, a17, 0, 0, r17, n16) : 0, l15 = u12 ? I4(u12, e13, 0, a17, 0, r17, n16) : 0, p16 = u12 ? I4(u12, e13, 0, 0, a17, r17, n16) : 0;
    return { x: 0 === c9 ? 0 : i6 / c9, y: 0 === l15 ? 0 : i6 / l15, z: 0 === p16 ? 0 : i6 / p16, distance: o13 * t15 };
  }
  get _types() {
    return { returnEdge: true, returnVertex: true };
  }
  _candidateIsExcluded(e13, t15, r17) {
    if (null == r17)
      return false;
    const n16 = this._getCandidateObjectId(t15);
    if (null == n16)
      return false;
    const s14 = e13.layerSource.layer;
    return "graphics" === s14.type ? r17.uid === n16 : r17.sourceLayer === s14 && (!(!r17.attributes || !("objectIdField" in s14)) && r17.attributes[s14.objectIdField] === n16);
  }
  _getCandidateObjectId(e13) {
    return e13 instanceof n12 ? e13.objectId : null;
  }
  _createSourceInfo(e13) {
    const t15 = this._createFeatureSnappingSourceType(e13);
    if (null == t15)
      return null;
    if ("loading" in t15)
      return this.updatingHandles.addPromise(t15.loading.then(() => {
        this.destroyed || this.notifyChange("snappingSources");
      })), null;
    const r17 = null != this.view ? this.view.allLayerViews.find((t16) => t16.layer === e13.layer) : null;
    return new R5(t15.source, r17);
  }
  _createFeatureSnappingSourceType(e13) {
    switch (e13.layer.type) {
      case "feature":
      case "geojson":
      case "csv":
      case "oriented-imagery":
      case "subtype-group":
      case "wfs":
        return this._createFeatureSnappingSourceFeatureLayer(e13);
      case "graphics":
        return this._createFeatureSnappingSourceGraphicsLayer(e13);
      case "map-notes":
        return this._createFeatureSnappingSourceMapNotesLayer(e13);
      case "scene":
      case "building-scene":
        return this._createFeatureSnappingSourceSceneLayer(e13);
    }
    return null;
  }
  _createFeatureSnappingSourceSceneLayer(e13) {
    const { view: t15 } = this;
    if (null == t15 || "3d" !== t15.type)
      return null;
    const r17 = this._getSourceModule("scene");
    return null != r17.module ? { source: new r17.module.SceneLayerSnappingSource({ layerSource: e13, view: t15 }) } : { loading: r17.loader };
  }
  _createFeatureSnappingSourceFeatureLayer(e13) {
    var _a;
    switch ((_a = e13.layer.source) == null ? void 0 : _a.type) {
      case "feature-layer":
      case "oriented-imagery": {
        const t15 = this._getSourceModule("featureService");
        return null != t15.module ? { source: new t15.module.FeatureServiceSnappingSource({ spatialReference: this.spatialReference, view: this.view, layerSource: e13 }) } : { loading: t15.loader };
      }
      case "memory":
      case "csv":
      case "geojson":
      case "wfs": {
        if ("mesh" === e13.layer.geometryType)
          return null;
        const t15 = this._getSourceModule("featureCollection");
        return null != t15.module ? { source: new t15.module.FeatureCollectionSnappingSource({ layerSource: e13, view: this.view }) } : { loading: t15.loader };
      }
    }
    return null;
  }
  _createFeatureSnappingSourceGraphicsLayer(e13) {
    const t15 = this._getSourceModule("graphics");
    return null != t15.module ? { source: new t15.module.GraphicsSnappingSource({ getGraphicsLayers: () => [e13.layer], spatialReference: this.spatialReference, view: this.view, layerSource: e13 }) } : { loading: t15.loader };
  }
  _createFeatureSnappingSourceMapNotesLayer(e13) {
    const t15 = this._getSourceModule("notes");
    return null != t15.module ? { source: new t15.module.GraphicsSnappingSource({ getGraphicsLayers: () => null != e13.layer.sublayers ? e13.layer.sublayers.toArray() : [], spatialReference: this.spatialReference, view: this.view, layerSource: e13 }) } : { loading: t15.loader };
  }
  _getSourceModule(e13) {
    const t15 = this._sourceModules[e13];
    if (null == t15.loader) {
      const r17 = this._loadSourceModule(e13).then((e14) => {
        t15.module = e14;
      });
      return t15.loader = r17, { module: t15.module, loader: r17 };
    }
    return { module: t15.module, loader: t15.loader };
  }
  _loadSourceModule(e13) {
    const t15 = this.updatingHandles;
    switch (e13) {
      case "featureService":
        return t15.addPromise(import("./FeatureServiceSnappingSource-QESCBVAW.js"));
      case "featureCollection":
        return t15.addPromise(import("./FeatureCollectionSnappingSource-2VXUES4D.js"));
      case "graphics":
      case "notes":
        return t15.addPromise(import("./GraphicsSnappingSource-3L6C2Y2L.js"));
      case "scene":
        return t15.addPromise(import("./SceneLayerSnappingSource-GMQWFXXA.js"));
    }
  }
};
e([y2({ constructOnly: true })], M5.prototype, "spatialReference", void 0), e([y2({ constructOnly: true })], M5.prototype, "view", void 0), e([y2()], M5.prototype, "options", void 0), e([y2({ readOnly: true })], M5.prototype, "updating", null), e([y2({ readOnly: true })], M5.prototype, "snappingSources", null), M5 = e([a2("esri.views.interactive.snapping.FeatureSnappingEngine")], M5);
var R5 = class {
  constructor(e13, t15) {
    this.snappingSource = e13, this.layerView = t15, this.handles = new t();
    const n16 = this.snappingSource.layerSource.layer;
    if ("refresh" in n16) {
      const t16 = n16;
      this.handles.add(t16.on("refresh", () => e13.refresh()));
    }
    this.handles.add([l3(() => e13.updating, (t16) => e13.layerSource.updating = t16, w), l3(() => e13.availability, (t16) => e13.layerSource.availability = t16, w)]);
  }
  destroy() {
    this.snappingSource.destroy(), this.handles.destroy();
  }
};
function H6(e13) {
  return (e13 instanceof r9 || e13 instanceof s11) && !V7(e13);
}
function V7({ constraint: { start: e13, end: t15 } }) {
  const r17 = p(e13, t15), n16 = b(e13, t15);
  return r17 < a3() || n16 / r17 < G4;
}
function I4(e13, t15, r17, n16, s14, o13, { spatialReference: a17 }) {
  const i6 = r2(E3, t15);
  i6[0] += r17, i6[1] += n16, i6[2] += s14;
  const u12 = u8(i6, a17, b3, o13);
  return u12 ? g4(u12, e13) : 1 / 0;
}
var P7 = n4();
var E3 = n4();
var G4 = 1e-4;

// node_modules/@arcgis/core/views/interactive/snapping/SnappingAlgorithm.js
var h10 = class {
  constructor(e13, t15) {
    this.view = e13, this.options = t15, this.squaredShortLineThreshold = p10.shortLineThreshold * p10.shortLineThreshold;
  }
  snap(e13, t15) {
    return null != t15.vertexHandle ? "vertex" !== t15.vertexHandle.type ? [] : this.snapExistingVertex(e13, t15) : this.snapNewVertex(e13, t15);
  }
  edgeExceedsShortLineThreshold(e13, t15) {
    return this.exceedsShortLineThreshold(s9(e13.leftVertex.pos, this.view, t15), s9(e13.rightVertex.pos, this.view, t15), t15);
  }
  exceedsShortLineThreshold(e13, s14, { spatialReference: r17 }) {
    return 0 === this.squaredShortLineThreshold || p7(u8(s14, r17, b3, this.view), u8(e13, r17, b3, this.view)) > this.squaredShortLineThreshold;
  }
  isVertical(t15, r17) {
    return b(t15, r17) < p10.verticalLineThreshold;
  }
  squaredProximityThreshold(e13) {
    return "touch" === e13 ? this._squaredTouchProximityThreshold : this._squaredMouseProximityThreshold;
  }
  get _squaredMouseProximityThreshold() {
    return this.options.distance * this.options.distance;
  }
  get _squaredTouchProximityThreshold() {
    const { distance: e13, touchSensitivityMultiplier: t15 } = this.options, s14 = e13 * t15;
    return s14 * s14;
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/candidates/LineSnappingCandidate.js
var r14 = class extends t11 {
  constructor({ lineStart: e13, lineEnd: r17, targetPoint: o13, isDraped: a17 }) {
    super(o13, new I2(e13, r17), a17, E.SELF), this._referenceLineHint = new n10(c6.REFERENCE_EXTENSION, e13, r17, a17, this.domain);
  }
  get hints() {
    return [this._referenceLineHint, new n10(c6.TARGET, this._lineEndClosestToTarget(), this.targetPoint, this.isDraped, this.domain)];
  }
  _lineEndClosestToTarget() {
    return this.constraint.closestEndTo(this.targetPoint);
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/LineSnapper.js
var h11 = class extends h10 {
  snapNewVertex(t15, s14) {
    const i6 = s14.editGeometryOperations.data.components[0], o13 = i6.edges.length, n16 = [];
    if (o13 < 1)
      return n16;
    const { spatialReference: p16 } = s14, a17 = u8(t15, p16, b3, this.view), { view: h17 } = this, l15 = i6.edges[o13 - 1];
    let g13 = l15;
    do {
      if (this.edgeExceedsShortLineThreshold(g13, s14)) {
        const e13 = d5(g13, h17, s14);
        this._processCandidateProposal(e13.left, e13.right, t15, a17, s14, n16);
      }
      g13 = g13.leftVertex.leftEdge;
    } while (g13 && g13 !== l15);
    return n16;
  }
  snapExistingVertex(t15, i6) {
    const o13 = [], n16 = i6.vertexHandle, p16 = n16.component;
    if (p16.edges.length < 2)
      return o13;
    const { view: a17 } = this, { spatialReference: h17 } = i6, l15 = u8(t15, h17, b3, a17), g13 = n16.leftEdge, f12 = n16.rightEdge;
    g13 && f12 && this.edgeExceedsShortLineThreshold(g13, i6) && this.edgeExceedsShortLineThreshold(f12, i6) && this._processCandidateProposal(s9(g13.leftVertex.pos, a17, i6), s9(f12.rightVertex.pos, a17, i6), t15, l15, i6, o13);
    const m8 = p16.edges[0];
    let c9 = m8;
    do {
      if (c9 !== n16.leftEdge && c9 !== n16.rightEdge && this.edgeExceedsShortLineThreshold(c9, i6)) {
        const e13 = d5(c9, a17, i6);
        this._processCandidateProposal(e13.left, e13.right, t15, l15, i6, o13);
      }
      c9 = c9.rightVertex.rightEdge;
    } while (c9 && c9 !== m8);
    return o13;
  }
  _processCandidateProposal(t15, s14, r17, h17, l15, g13) {
    var _a;
    const { spatialReference: f12, pointer: m8 } = l15, c9 = l8(H2(r17, { start: t15, end: s14, type: v6.LINE }));
    p7(h17, u8(c9, f12, b3, this.view)) < this.squaredProximityThreshold(m8) && g13.push(new r14({ lineStart: t15, lineEnd: s14, targetPoint: c9, isDraped: "on-the-ground" === ((_a = l15.elevationInfo) == null ? void 0 : _a.mode) }));
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/candidates/ParallelLineSnappingCandidate.js
var g8 = class extends t11 {
  constructor({ referenceLine: i6, lineStart: f12, targetPoint: o13, isDraped: d9 }) {
    const h17 = t4(f12), { left: g13, right: p16 } = i6;
    e4(h17, u(h17, h17, p16), g13), super(o13, new I2(f12, l8(h17)), d9, E.SELF), this._referenceLines = [{ edge: i6, fadeLeft: true, fadeRight: true }];
  }
  get hints() {
    return [new n10(c6.TARGET, this.constraint.start, this.targetPoint, this.isDraped, this.domain), new r12(this.constraint.start, this.targetPoint, this.isDraped, this.domain), ...this._referenceLines.map((e13) => new n10(c6.REFERENCE, e13.edge.left, e13.edge.right, this.isDraped, this.domain, e13.fadeLeft, e13.fadeRight))];
  }
  addReferenceLine(e13) {
    const t15 = { edge: e13, fadeLeft: true, fadeRight: true };
    this._referenceLines.forEach((n16) => {
      F(e13.right, n16.edge.left) && (n16.fadeLeft = false, t15.fadeRight = false), F(e13.right, n16.edge.right) && (n16.fadeRight = false, t15.fadeRight = false), F(e13.left, n16.edge.right) && (n16.fadeRight = false, t15.fadeLeft = false), F(e13.left, n16.edge.left) && (n16.fadeLeft = false, t15.fadeLeft = false);
    }), this._referenceLines.push(t15);
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/ParallelLineSnapper.js
var f10 = class extends h10 {
  snapNewVertex(e13, t15) {
    const r17 = t15.editGeometryOperations.data.components[0], s14 = r17.edges.length, o13 = r17.vertices.length, l15 = [];
    if (s14 < 2)
      return l15;
    const { view: c9 } = this, h17 = u8(e13, t15.spatialReference, b3, c9), d9 = s9(r17.vertices[o13 - 1].pos, c9, t15), f12 = s9(r17.vertices[0].pos, c9, t15), g13 = r17.edges[s14 - 1];
    let m8 = g13;
    do {
      if (this.edgeExceedsShortLineThreshold(m8, t15)) {
        const r18 = d5(m8, c9, t15);
        this._checkEdgeForParallelLines(r18, d9, e13, h17, t15, l15), this._checkEdgeForParallelLines(r18, f12, e13, h17, t15, l15);
      }
      m8 = m8.leftVertex.leftEdge;
    } while (m8 && m8 !== g13);
    return l15;
  }
  snapExistingVertex(e13, t15) {
    const r17 = [], s14 = t15.vertexHandle, o13 = s14.component;
    if (o13.edges.length < 3)
      return r17;
    const { view: l15 } = this, c9 = u8(e13, t15.spatialReference, b3, l15), h17 = s14.leftEdge, d9 = s14.rightEdge, f12 = o13.vertices[0], g13 = s9(f12.pos, l15, t15), m8 = o13.vertices.length, u12 = o13.vertices[m8 - 1], v16 = s9(u12.pos, l15, t15), E5 = o13.edges[0];
    let L5 = E5;
    do {
      if (L5 !== h17 && L5 !== d9 && this.edgeExceedsShortLineThreshold(L5, t15)) {
        const i6 = d5(L5, l15, t15);
        h17 && this._checkEdgeForParallelLines(i6, s9(h17.leftVertex.pos, l15, t15), e13, c9, t15, r17), d9 && this._checkEdgeForParallelLines(i6, s9(d9.rightVertex.pos, l15, t15), e13, c9, t15, r17), s14 === f12 ? this._checkEdgeForParallelLines(i6, v16, e13, c9, t15, r17) : s14 === u12 && this._checkEdgeForParallelLines(i6, g13, e13, c9, t15, r17);
      }
      L5 = L5.rightVertex.rightEdge;
    } while (L5 && L5 !== E5);
    return r17;
  }
  _checkEdgeForParallelLines(t15, o13, n16, a17, f12, m8) {
    var _a;
    const u12 = t15.left, v16 = t15.right;
    if (L2(g9, o13, u12, v16), b(g9, o13) < p10.parallelLineThreshold)
      return;
    L2(g9, n16, u12, v16, o13);
    const { spatialReference: E5, pointer: L5 } = f12, x10 = l8(r(g9[0], g9[1], n16[2]));
    if (p7(a17, u8(x10, E5, b3, this.view)) < this.squaredProximityThreshold(L5)) {
      if (this.isVertical(x10, o13) || this.isVertical(u12, v16))
        return;
      if (this._parallelToPreviousCandidate(t15, m8))
        return;
      m8.push(new g8({ referenceLine: t15, lineStart: o13, targetPoint: x10, isDraped: "on-the-ground" === ((_a = f12.elevationInfo) == null ? void 0 : _a.mode) }));
    }
  }
  _parallelToPreviousCandidate(t15, r17) {
    const i6 = t15.left, o13 = t15.right;
    for (const n16 of r17)
      if (L2(g9, o13, n16.constraint.start, n16.constraint.end, i6), b(g9, o13) < p10.parallelLineThreshold)
        return n16.addReferenceLine(t15), true;
    return false;
  }
};
var g9 = n6();

// node_modules/@arcgis/core/views/interactive/snapping/RightAngleSnapper.js
var V8 = class extends h10 {
  snapNewVertex(e13, t15) {
    const i6 = t15.editGeometryOperations.data.components[0], s14 = i6.vertices.length, r17 = [];
    if (s14 < 2)
      return r17;
    const { view: n16 } = this, o13 = u8(e13, t15.spatialReference, b3, n16), a17 = i6.vertices[s14 - 1];
    if (this.edgeExceedsShortLineThreshold(a17.leftEdge, t15)) {
      const i7 = s9(a17.pos, n16, t15), s15 = s9(a17.leftEdge.leftVertex.pos, n16, t15);
      this._checkForSnappingCandidate(r17, s15, i7, e13, o13, t15);
    }
    const p16 = i6.vertices[0];
    if (this.edgeExceedsShortLineThreshold(p16.rightEdge, t15)) {
      const i7 = s9(p16.pos, n16, t15), s15 = s9(p16.rightEdge.rightVertex.pos, n16, t15);
      this._checkForSnappingCandidate(r17, s15, i7, e13, o13, t15);
    }
    return r17;
  }
  snapExistingVertex(e13, t15) {
    const i6 = [], s14 = t15.vertexHandle;
    if (s14.component.vertices.length < 3)
      return i6;
    const { view: r17 } = this, n16 = u8(e13, t15.spatialReference, b3, r17), o13 = s14.leftEdge, a17 = s14.rightEdge;
    if (o13 && o13.leftVertex.leftEdge) {
      const s15 = o13.leftVertex.leftEdge;
      if (this.edgeExceedsShortLineThreshold(s15, t15)) {
        const o14 = s9(s15.rightVertex.pos, r17, t15), a18 = s9(s15.leftVertex.pos, r17, t15);
        this._checkForSnappingCandidate(i6, a18, o14, e13, n16, t15);
      }
    }
    if (a17 && a17.rightVertex.rightEdge) {
      const s15 = a17.rightVertex.rightEdge;
      if (this.edgeExceedsShortLineThreshold(s15, t15)) {
        const o14 = s9(s15.leftVertex.pos, r17, t15), a18 = s9(s15.rightVertex.pos, r17, t15);
        this._checkForSnappingCandidate(i6, a18, o14, e13, n16, t15);
      }
    }
    return i6;
  }
  _checkForSnappingCandidate(r17, c9, g13, V9, S7, j5) {
    var _a;
    const { spatialReference: k4, pointer: C3 } = j5;
    o4(v11, g13, c9);
    const w5 = o3(u11, v11[1], -v11[0], 0), T6 = j4(w5, o4(v11, V9, g13)) / p2(w5), F5 = l8(d2(t4(V9), g13, w5, T6));
    if (p7(S7, u8(F5, k4, b3, this.view)) < this.squaredProximityThreshold(C3)) {
      if (this.isVertical(F5, g13) || this.isVertical(g13, c9))
        return;
      const e13 = q(n4(), g13, w5, Math.sign(T6));
      r17.push(new o11({ targetPoint: F5, constraint: new A5(g13, l8(e13)), previousVertex: c9, otherVertex: g13, otherVertexType: n15.CENTER, isDraped: "on-the-ground" === ((_a = j5.elevationInfo) == null ? void 0 : _a.mode) }));
    }
  }
};
var v11 = n6();
var u11 = n4();

// node_modules/@arcgis/core/views/interactive/snapping/candidates/RightAngleTriangleSnappingCandidate.js
var h12 = class extends t11 {
  constructor({ targetPoint: r17, point1: a17, point2: e13, isDraped: m8 }) {
    super(r17, new v7(l8(A(n4(), a17, e13, 0.5)), 0.5 * m3(a17, e13)), m8, E.SELF), this._p1 = a17, this._p2 = e13;
  }
  get hints() {
    return [new n10(c6.REFERENCE, this.targetPoint, this._p1, this.isDraped, this.domain), new n10(c6.REFERENCE, this.targetPoint, this._p2, this.isDraped, this.domain), new s12(this._p1, this.targetPoint, this._p2, this.isDraped, this.domain)];
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/RightAngleTriangleSnapper.js
var l13 = class extends h10 {
  snapNewVertex(e13, t15) {
    const i6 = t15.editGeometryOperations.data.components[0], s14 = [], r17 = i6.vertices.length;
    if ("polygon" !== t15.editGeometryOperations.data.type || r17 < 2)
      return s14;
    const { view: o13 } = this, p16 = i6.vertices[0], a17 = i6.vertices[r17 - 1], d9 = s9(p16.pos, o13, t15), c9 = s9(a17.pos, o13, t15);
    return this._processCandidateProposal(d9, c9, e13, t15, s14), s14;
  }
  snapExistingVertex(e13, t15) {
    const i6 = [], s14 = t15.vertexHandle, r17 = s14.component;
    if (r17.edges.length < 2)
      return i6;
    if ("polyline" === t15.editGeometryOperations.data.type && (0 === s14.index || s14.index === r17.vertices.length - 1))
      return i6;
    const { view: o13 } = this, p16 = s9(s14.leftEdge.leftVertex.pos, o13, t15), a17 = s9(s14.rightEdge.rightVertex.pos, o13, t15);
    return this._processCandidateProposal(p16, a17, e13, t15, i6), i6;
  }
  _processCandidateProposal(i6, o13, n16, l15, f12) {
    var _a;
    if (!this.exceedsShortLineThreshold(i6, o13, l15))
      return;
    const g13 = A2(h13, i6, o13, 0.5), u12 = 0.5 * m3(i6, o13), v16 = n4();
    m5(v16, n16, g13, u12), v16[2] = n16[2];
    const x10 = l8(v16), { spatialReference: j5, pointer: y8 } = l15, w5 = u8(n16, j5, b3, this.view);
    if (p7(w5, u8(x10, j5, b3, this.view)) < this.squaredProximityThreshold(y8)) {
      if (this.isVertical(i6, x10) || this.isVertical(x10, o13))
        return;
      f12.push(new h12({ targetPoint: x10, point1: i6, point2: o13, isDraped: "on-the-ground" === ((_a = l15.elevationInfo) == null ? void 0 : _a.mode) }));
    }
  }
};
var h13 = n6();

// node_modules/@arcgis/core/views/interactive/snapping/SelfSnappingEngine.js
var h14 = class extends m {
  constructor(s14) {
    super(s14), this.updating = false, this._snappers = new V2(), this._domain = E.SELF;
  }
  initialize() {
    this._snappers.push(new f10(this.view, this.options), new h11(this.view, this.options), new V8(this.view, this.options), new l13(this.view, this.options));
  }
  set options(s14) {
    this._set("options", s14);
    for (const o13 of this._snappers)
      o13.options = s14;
  }
  async fetchCandidates(s14, o13, t15) {
    if (!(o13 & this._domain && this.options.effectiveSelfEnabled))
      return [];
    const i6 = [];
    for (const r17 of this._snappers.items)
      for (const o14 of r17.snap(s14, t15))
        i6.push(o14);
    return u7(s14, i6), i6;
  }
};
e([y2({ readOnly: true })], h14.prototype, "updating", void 0), e([y2({ constructOnly: true })], h14.prototype, "view", void 0), e([y2()], h14.prototype, "options", null), h14 = e([a2("esri.views.interactive.snapping.SelfSnappingEngine")], h14);

// node_modules/@arcgis/core/views/interactive/snapping/snappingFactory.js
function i4(i6, p16) {
  return [new h14({ view: i6, options: p16 }), new M5({ view: i6, options: p16, spatialReference: i6.spatialReference })];
}

// node_modules/@arcgis/core/views/interactive/snapping/candidates/IntersectionSnappingCandidate.js
var r15 = class extends t11 {
  constructor(n16, s14, r17, o13) {
    super(n16, new Z2(n16, s14.constraint, r17.constraint), o13, E.ALL), this.first = s14, this.second = r17;
  }
  get hints() {
    return this.first.targetPoint = this.targetPoint, this.second.targetPoint = this.targetPoint, [...this.first.hints, ...this.second.hints, new o9(this.targetPoint, this.isDraped, this.domain)];
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/SnappingManager.js
var P8 = class extends n5.EventedMixin(d) {
  constructor(e13) {
    super(e13), this.options = new l12(), this.snappingEnginesFactory = i4, this._engines = [], this._currentMainCandidate = null, this._currentOtherActiveCandidates = [], this._currentSnappedType = T5.MAIN;
  }
  initialize() {
    this.handles.add([l3(() => {
      const { effectiveFeatureEnabled: e13, effectiveSelfEnabled: t15, touchSensitivityMultiplier: n16, distance: i6 } = this.options;
      return { effectiveFeatureEnabled: e13, effectiveSelfEnabled: t15, touchSensitivityMultiplier: n16, distance: i6 };
    }, () => {
      this.doneSnapping(), this.emit("changed");
    }, U), l3(() => this.options, (e13) => {
      for (const t15 of this._engines)
        t15.options = e13;
    }, U), l3(() => ({ viewReady: this.view.ready, viewSpatialReference: this.view.spatialReference, snappingEnginesFactory: this.snappingEnginesFactory }), ({ viewReady: e13, snappingEnginesFactory: t15 }) => this._recreateEngines(e13, t15), w)]);
  }
  destroy() {
    this._destroyEngines();
  }
  get updating() {
    return this._engines.some((e13) => e13.updating);
  }
  _recreateEngines(e13, t15) {
    if (this._destroyEngines(), !e13)
      return;
    const { view: n16, options: i6 } = this;
    this._engines = t15(n16, i6);
  }
  _destroyEngines() {
    for (const e13 of this._engines)
      e13.destroy();
    this._engines = [];
  }
  get _squaredMouseProximityTreshold() {
    return this.options.distance * this.options.distance;
  }
  get _squaredTouchProximityThreshold() {
    const { distance: e13, touchSensitivityMultiplier: t15 } = this.options, n16 = e13 * t15;
    return n16 * n16;
  }
  get _squaredSatisfiesConstraintThreshold() {
    return p10.satisfiesConstraintScreenThreshold * p10.satisfiesConstraintScreenThreshold;
  }
  async snap(e13) {
    return E4(e13) ? this._snapMultiPoint(e13) : this._snapSinglePoint(e13);
  }
  update(e13) {
    const { point: t15, context: n16 } = e13;
    this._removeVisualization();
    const i6 = this._currentMainCandidate;
    if (null == i6)
      return t15;
    const s14 = this._selectUpdateInput(e13);
    if (null == s14)
      return t15;
    const { spatialReference: r17 } = n16, a17 = nn(s14, r17);
    if (null == a17)
      return t15;
    const { view: o13 } = this, { elevationInfo: p16, visualizer: d9 } = n16, h17 = [], l15 = c5(a17, o13, n16), u12 = i6.constraint.closestTo(l15);
    if (!this._arePointsWithinScreenThreshold(l15, u12, n16))
      return this._resetSnappingState(), t15;
    i6.targetPoint = u12, h17.push(...i6.hints);
    for (const c9 of this._currentOtherActiveCandidates)
      c9.targetPoint = u12, h17.push(...c9.hints);
    return null != d9 && this.handles.add(d9.draw(h17, { spatialReference: r17, elevationInfo: I5(n16), view: o13, selfSnappingZ: n16.selfSnappingZ }), w4), a9(u12, o13, { z: t15.z, m: t15.m, spatialReference: t15.spatialReference, elevationInfo: p16 });
  }
  doneSnapping() {
    this._removeVisualization(), this._resetSnappingState();
  }
  _selectUpdateInput({ point: e13, scenePoint: t15 }) {
    switch (this._currentSnappedType) {
      case T5.MAIN:
        return e13;
      case T5.SCENE:
        return t15;
    }
  }
  _resetSnappingState() {
    this._currentMainCandidate = null, this._currentOtherActiveCandidates = [], this._currentSnappedType = T5.MAIN;
  }
  _removeVisualization() {
    this.handles.remove(w4);
  }
  async _snapSinglePoint({ point: e13, context: t15, signal: n16 }) {
    const { view: i6 } = this, s14 = c5(e13, i6, t15), r17 = await this._fetchCandidates(s14, E.ALL, t15, n16);
    return this._createSnapResult(s14, T5.MAIN, r17, i6, t15, { z: e13.z, m: e13.m, spatialReference: e13.spatialReference, elevationInfo: t15.elevationInfo }, n16);
  }
  async _snapMultiPoint({ point: e13, scenePoint: t15, context: n16, signal: i6 }) {
    const { view: s14 } = this, { coordinateHelper: r17, spatialReference: a17 } = n16;
    await Rn(t15.spatialReference, a17);
    const o13 = nn(t15, a17), p16 = c5(o13, s14, n16), h17 = await this._fetchCandidates(p16, E.FEATURE, n16, i6);
    if (h17.length > 0) {
      const e14 = await this._fetchCandidates(p16, E.SELF, n16, i6);
      return this._createSnapResult(p16, T5.SCENE, [...h17, ...e14], s14, n16, { z: o13.z, m: o13.m, spatialReference: o13.spatialReference, elevationInfo: n16.elevationInfo }, i6);
    }
    const l15 = c5(e13, s14, n16), f12 = await this._fetchCandidates(l15, E.SELF, n16, i6);
    return this._createSnapResult(l15, T5.MAIN, f12, s14, n16, { z: r17.hasZ() && e13.hasZ ? e13.z ?? 0 : void 0, m: r17.hasM() && e13.hasM ? e13.m ?? 0 : void 0, spatialReference: e13.spatialReference, elevationInfo: n16.elevationInfo }, i6);
  }
  async _fetchCandidates(e13, t15, n16, i6) {
    return (await Promise.all(this._engines.map((s14) => s14.fetchCandidates(e13, t15, n16, i6)))).flat();
  }
  _createSnapResult(e13, t15, n16, s14, r17, a17, o13) {
    return { get valid() {
      return !a(o13);
    }, apply: () => {
      const { spatialReference: i6 } = r17, { snappedPoint: o14, hints: p16 } = this._processCandidates(e13, t15, n16, r17);
      return this._removeVisualization(), null != r17.visualizer && this.handles.add(r17.visualizer.draw(p16, { spatialReference: i6, elevationInfo: b3, view: s14, selfSnappingZ: r17.selfSnappingZ }), w4), a9(o14, s14, a17);
    } };
  }
  _processCandidates(e13, t15, n16, i6) {
    if (n16.length < 1)
      return this.doneSnapping(), { snappedPoint: e13, hints: [] };
    this._currentSnappedType !== t15 && this._resetSnappingState(), u7(e13, n16);
    const s14 = this._currentMainCandidate;
    if (null != s14) {
      const r17 = this._findOldConstraintInNewCandidates(s14, n16);
      if (r17 >= 0) {
        if (!(n16[r17] instanceof r15))
          return this._intersectWithOtherCandidates(r17, n16, e13, t15, i6);
        if (this._arePointsWithinScreenThreshold(e13, s14.targetPoint, i6))
          return this._updateSnappingCandidate(s14, t15, n16, i6);
      }
    }
    return this._intersectWithOtherCandidates(0, n16, e13, t15, i6);
  }
  _findOldConstraintInNewCandidates(e13, t15) {
    return e13 instanceof r15 ? this._findOldCandidateIndex(t15, e13.first) >= 0 && this._findOldCandidateIndex(t15, e13.second) >= 0 ? 0 : -1 : this._findOldCandidateIndex(t15, e13);
  }
  _intersectWithOtherCandidates(e13, t15, n16, i6, s14) {
    const { coordinateHelper: r17 } = s14, a17 = t15[e13], o13 = [];
    for (let p16 = 0; p16 < t15.length; ++p16) {
      if (p16 === e13)
        continue;
      const i7 = t15[p16];
      for (const e14 of a17.constraint.intersect(i7.constraint)) {
        const t16 = e14.closestTo(a17.targetPoint);
        o13.push([new r15(t16, a17, i7, i7.isDraped), this._squaredScreenDistance(n16, t16, r17)]);
      }
    }
    return o13.length > 0 && (o13.sort((e14, t16) => e14[1] - t16[1]), o13[0][1] < this._squaredPointProximityThreshold(s14.pointer)) ? this._updateSnappingCandidate(o13[0][0], i6, t15, s14) : this._updateSnappingCandidate(a17, i6, t15, s14);
  }
  _updateSnappingCandidate(e13, t15, n16, i6) {
    this.doneSnapping(), this._currentMainCandidate = e13, this._currentSnappedType = t15;
    const s14 = this._currentMainCandidate.targetPoint, r17 = [];
    r17.push(...e13.hints);
    for (const a17 of n16) {
      if (e13 instanceof r15) {
        if (a17.constraint.equals(e13.first.constraint) || a17.constraint.equals(e13.second.constraint))
          continue;
      } else if (a17.constraint.equals(e13.constraint))
        continue;
      const t16 = a17.constraint.closestTo(s14);
      this._squaredScreenDistance(t16, s14, i6.coordinateHelper) < this._squaredSatisfiesConstraintThreshold && (a17.targetPoint = s14, this._currentOtherActiveCandidates.push(a17), r17.push(...a17.hints));
    }
    return { snappedPoint: s14, hints: r17 };
  }
  _squaredPointProximityThreshold(e13) {
    return "touch" === e13 ? this._squaredTouchProximityThreshold : this._squaredMouseProximityTreshold;
  }
  _arePointsWithinScreenThreshold(e13, t15, n16) {
    return this._squaredScreenDistance(e13, t15, n16.coordinateHelper) < this._squaredPointProximityThreshold(n16.pointer);
  }
  _squaredScreenDistance(e13, t15, n16) {
    return p7(this._toScreen(e13, n16), this._toScreen(t15, n16));
  }
  _toScreen(e13, t15) {
    return u8(e13, t15.spatialReference, b3, this.view);
  }
  _findOldCandidateIndex(e13, t15) {
    let n16 = -1;
    for (let i6 = 0; i6 < e13.length; ++i6)
      if (t15.constraint.equals(e13[i6].constraint)) {
        n16 = i6;
        break;
      }
    return n16;
  }
  get test() {
    return { visualizationsActive: this.handles.has(w4), engines: this._engines };
  }
};
var T5;
e([y2({ constructOnly: true })], P8.prototype, "view", void 0), e([y2()], P8.prototype, "options", void 0), e([y2({ readOnly: true })], P8.prototype, "updating", null), e([y2()], P8.prototype, "snappingEnginesFactory", void 0), e([y2()], P8.prototype, "_engines", void 0), e([y2()], P8.prototype, "_squaredMouseProximityTreshold", null), e([y2()], P8.prototype, "_squaredTouchProximityThreshold", null), e([y2()], P8.prototype, "_squaredSatisfiesConstraintThreshold", null), P8 = e([a2("esri.views.interactive.snapping.SnappingManager")], P8), function(e13) {
  e13[e13.MAIN = 0] = "MAIN", e13[e13.SCENE = 1] = "SCENE";
}(T5 || (T5 = {}));
var w4 = "visualization-handle";
function E4(e13) {
  return null != e13.scenePoint;
}
function I5({ coordinateHelper: e13, elevationInfo: t15 }) {
  return e13.hasZ() ? b3 : t15;
}

// node_modules/@arcgis/core/views/interactive/snapping/SceneSnappingManagerPool.js
var i5 = /* @__PURE__ */ new Map();
function a16(n16) {
  if (!i5.has(n16)) {
    const e13 = a15(n16, { distance: 10 }), o14 = s13(n16, e13.options);
    i5.set(n16, { referenceCount: 0, snappingManager: o14, remove: () => {
      e13.remove(), o14.destroy();
    } });
  }
  const o13 = i5.get(n16);
  o13.referenceCount++;
  const t15 = e3(() => p13(n16, o13));
  return { snappingManager: o13.snappingManager, ...t15 };
}
function p13(e13, r17) {
  r17.referenceCount--, r17.referenceCount > 0 || t2(() => {
    0 === r17.referenceCount && (r17.remove(), i5.delete(e13));
  });
}
function s13(e13, n16) {
  return new P8({ view: e13, options: n16, snappingEnginesFactory: (n17, r17) => [new M5({ view: e13, spatialReference: e13.spatialReference, options: r17 })] });
}

// node_modules/@arcgis/core/views/interactive/snapping/SnappingContext.js
var e12 = class {
  constructor(e13) {
    this.vertexHandle = null, this.excludeFeature = null, this.visualizer = null, this.selfSnappingZ = null, this.editGeometryOperations = e13.editGeometryOperations, this.elevationInfo = e13.elevationInfo, this.pointer = e13.pointer, this.vertexHandle = e13.vertexHandle, this.excludeFeature = e13.excludeFeature, this.visualizer = e13.visualizer, this.selfSnappingZ = e13.selfSnappingZ;
  }
  get coordinateHelper() {
    return this.editGeometryOperations.data.coordinateHelper;
  }
  get spatialReference() {
    return this.coordinateHelper.spatialReference;
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/SnappingDragPipelineStep.js
function f11({ predicate: o13 = () => true, snappingManager: r17, snappingContext: l15, updatingHandles: u12, useZ: c9 = true }) {
  const p16 = new U3();
  if (null == r17)
    return { snappingStep: [y6, p16], cancelSnapping: y6 };
  let f12, Z4 = null, j5 = null, z5 = null;
  const T6 = () => {
    Z4 = e2(Z4), r17.doneSnapping(), null != j5 && j5.frameTask.remove(), j5 = null, f12 = o(f12), z5 = null;
  }, k4 = d8(r17, c9, p16);
  let w5 = null, I6 = null, U6 = null;
  return { snappingStep: [(n16) => {
    if (!o13(n16))
      return n16;
    const { action: e13 } = n16;
    if ("start" === e13) {
      const { info: e14 } = n16, t15 = m7(r17.view);
      if (j5 = g10(l15, n16, t15), j5.context.selfSnappingZ = null, !c9 && null != e14) {
        const n17 = S5(l15.coordinateHelper, e14.handle.component);
        null != n17 && (j5.context.selfSnappingZ = { value: n17, elevationInfo: l15.elevationInfo ?? b3 });
      }
    }
    if (null != j5) {
      const { context: o14, originalScenePos: l16, originalPos: a17 } = j5, { mapEnd: s14, mapStart: p17, scenePoints: d9 } = n16, m8 = x9(a17, v12(s14, p17)), g13 = v12(p17, a17), S7 = { ...n16, action: "update" }, y8 = j5.context, T7 = P9(l16, d9), C3 = r17.update({ point: m8, scenePoint: T7, context: o14 });
      if (U6 = C3, h15(s14, C3, g13, c9), w5 = m8, I6 = T7, "end" !== e13) {
        const { frameTask: n17 } = j5;
        null == Z4 && (Z4 = new AbortController()), z5 = (e14) => {
          u12.addPromise(y(k4({ frameTask: n17, event: S7, context: y8, point: m8, scenePoint: T7, delta: g13, getLastState: () => ({ point: w5, scenePoint: I6, updatePoint: e14.forceUpdate ? null : U6 }) }, Z4.signal)));
        }, z5({ forceUpdate: false }), null == f12 && (f12 = l3(() => r17.options.effectiveEnabled, () => z5 == null ? void 0 : z5({ forceUpdate: true })));
      }
    }
    return "end" === e13 && T6(), n16;
  }, p16], cancelSnapping: (n16) => (T6(), n16) };
}
function d8(n16, e13, t15) {
  return k(async ({ frameTask: o13, point: i6, scenePoint: l15, context: a17, event: s14, delta: u12, getLastState: c9 }, p16) => {
    const f12 = await o13.schedule(() => n16.snap({ point: i6, scenePoint: l15, context: a17, signal: p16 }), p16);
    if (f12.valid) {
      let l16 = await o13.schedule(() => f12.apply(), p16);
      const d9 = c9();
      null != d9.point && i6 !== d9.point && (l16 = n16.update({ point: d9.point, scenePoint: d9.scenePoint, context: a17 })), null != d9.updatePoint && r5(l16, d9.updatePoint) || (h15(s14.mapEnd, l16, u12, e13), t15.execute(s14));
    }
  });
}
function m7(n16) {
  return "3d" === n16.type ? n16.resourceController.scheduler.registerTask(I.SNAPPING) : F2;
}
function g10(n16, e13, t15) {
  return { context: new e12({ editGeometryOperations: n16.editGeometryOperations, elevationInfo: n16.elevationInfo, pointer: n16.pointer, vertexHandle: null != e13.info ? e13.info.handle : null, excludeFeature: n16.excludeFeature, visualizer: n16.visualizer }), originalPos: null != e13.snapOrigin ? n16.coordinateHelper.vectorToDehydratedPoint(e13.snapOrigin) : e13.mapStart, originalScenePos: null != e13.scenePoints ? e13.scenePoints.sceneStart : null, frameTask: t15 };
}
function x9(n16, [e13, t15, o13]) {
  const i6 = x4(n16);
  return i6.x += e13, i6.y += t15, i6.hasZ && (i6.z += o13), i6;
}
function P9(n16, e13) {
  return null == n16 || null == e13 ? null : x9(n16, v12(e13.sceneEnd, e13.sceneStart));
}
function v12(n16, e13) {
  const t15 = n16.hasZ && e13.hasZ ? n16.z - e13.z : 0;
  return [n16.x - e13.x, n16.y - e13.y, t15];
}
function h15(n16, e13, [t15, o13, i6], r17) {
  n16.x = e13.x + t15, n16.y = e13.y + o13, r17 && n16.hasZ && e13.hasZ && (n16.z = e13.z + i6);
}
function S5(n16, e13) {
  if (!n16.hasZ())
    return null;
  const t15 = e13.vertices;
  let o13 = null;
  for (const i6 of t15) {
    const e14 = n16.getZ(i6.pos);
    if (null != o13 && null != e14 && Math.abs(e14 - o13) > 1e-6)
      return null;
    null == o13 && (o13 = e14);
  }
  return o13;
}
function y6(n16) {
  return n16;
}

// node_modules/@arcgis/core/views/interactive/snapping/SnappingOperation.js
var p14 = class extends m {
  constructor(t15) {
    super(t15), this.constrainResult = (t16) => t16, this._snapPoints = null, this._frameTask = null, this._abortController = null, this._stagedPoint = null, this._snap = k(async (t16, s14, o13, r17) => {
      const n16 = this._frameTask;
      if (null == n16)
        return;
      const e13 = await n16.schedule(() => s14.snap({ ...t16, context: o13, signal: r17 }), r17);
      e13.valid && await n16.schedule(() => {
        this.stagedPoint = e13.apply(), t16 !== this._snapPoints && null != this._snapPoints && (this.stagedPoint = s14.update({ ...this._snapPoints, context: o13 }));
      }, r17);
    });
  }
  get stagedPoint() {
    return this._stagedPoint;
  }
  set stagedPoint(t15) {
    this._stagedPoint = this.constrainResult(t15);
  }
  initialize() {
    var _a, _b;
    const t15 = "3d" === this.view.type ? (_b = (_a = this.view) == null ? void 0 : _a.resourceController) == null ? void 0 : _b.scheduler : null;
    this._frameTask = null != t15 ? t15.registerTask(I.SNAPPING) : F2;
  }
  destroy() {
    this._abortController = e2(this._abortController), this._frameTask = o(this._frameTask);
  }
  update(t15, s14, o13) {
    this._snapPoints = t15;
    const { point: r17, scenePoint: n16 } = t15, e13 = s14.update({ point: r17, scenePoint: n16, context: o13 });
    return this.stagedPoint = e13, e13;
  }
  async snap(t15, s14, o13) {
    const { point: r17, scenePoint: n16 } = t15;
    return this.stagedPoint = s14.update({ point: r17, scenePoint: n16, context: o13 }), this._snapPoints = t15, null == this._abortController && (this._abortController = new AbortController()), this._snap(t15, s14, o13, this._abortController.signal);
  }
  async resnap(t15, s14) {
    null != this._snapPoints && await this.snap(this._snapPoints, t15, s14);
  }
  abort() {
    this._abortController = e2(this._abortController), this._snapPoints = null;
  }
};
e([y2({ constructOnly: true })], p14.prototype, "view", void 0), e([y2()], p14.prototype, "stagedPoint", null), e([y2()], p14.prototype, "constrainResult", void 0), e([y2()], p14.prototype, "_stagedPoint", void 0), p14 = e([a2("esri.views.interactive.snapping.SnappingOperation")], p14);

// node_modules/@arcgis/core/views/3d/analysis/Dimension/LengthDimensionSubTool.js
var ut = class extends d {
  constructor(t15) {
    super(t15), this._stagedDimension = null, this._computationManipulators = /* @__PURE__ */ new Map(), this._computationHandles = new t(), this._getSnappingContext = t13((t16) => new e12({ elevationInfo: { mode: "absolute-height", offset: 0 }, pointer: t16, editGeometryOperations: new _2(new p8("point", w2(true, false, this.view.spatialReference))), visualizer: new O4() }));
    const { view: i6 } = t15;
    this._snappingManagerResult = a16(i6), this.addHandles(this._snappingManagerResult), this._unfocusedOffsetManipulatorMaterial = dt(), this._focusedOffsetManipulatorMaterial = dt(), this._thinOffsetManipulatorMaterial = dt(), this._thinOffsetManipulatorMaterial.setParameters({ stipplePattern: h7(2) }), this._constraintSnappingIndicator = new u9({ view: i6, attached: true, width: 1, color: h3.toUnitRGBA(d6.constraint.color), renderOccluded: o5.OccludeAndTransparent, stipplePattern: h7(5) });
    const n16 = h3.toUnitRGBA(d6.disabledPointIndicator.color);
    this._stagedStartIndicator = new _3({ view: i6, attached: false, elevationInfo: { mode: "absolute-height", offset: 0 }, spatialReference: t15.view.renderCoordsHelper.spatialReference, color: n16, size: 2 * d6.disabledPointIndicator.radius, outlineSize: 0, renderOccluded: o5.OccludeAndTransparent });
  }
  initialize() {
    var _a;
    this._snappingOperation = new p14({ view: this.view });
    const { color: t15, contrastColor: e13 } = d6.orientationManipulator, i6 = !((_a = this.view._stage) == null ? void 0 : _a.renderView.renderingContext.driverTest.svgPremultipliesAlpha.result);
    this._orientationManipulatorTexture = n9(this.view.toolViewManager.textures, { accentColor: t15, contrastColor: e13, preMultiplyAlpha: i6 }), this._orientationManipulatorMaterial = new c3({ transparent: true, writeDepth: false, textureId: this._orientationManipulatorTexture.texture.id, renderOccluded: o5.Opaque });
    const { computations: n16 } = this.analysisViewData;
    for (const a17 of n16)
      this._addComputation(a17);
    this.addHandles([n16.on("after-add", (t16) => this._addComputation(t16.item)), n16.on("after-remove", (t16) => this._removeComputation(t16.item))]), this.addHandles([l3(() => ({ stagedPoint: this._snappingOperation.stagedPoint, stagedComputation: this._stagedComputation }), ({ stagedPoint: t16, stagedComputation: e14 }) => {
      if (null == e14 || null == t16)
        return;
      const i7 = x4(t16, new x3());
      this._applyPointUpdate(e14, { endPoint: i7 });
    }, U), l3(() => ({ stagedDimension: this._stagedDimension, selectedComputation: this.analysisViewData.selectedComputation, firstGrabbedManipulator: this.firstGrabbedManipulator }), (t16, e14) => {
      const { stagedDimension: i7, selectedComputation: n17, firstGrabbedManipulator: a17 } = t16;
      if (i7 === (e14 == null ? void 0 : e14.stagedDimension) && a17 === (e14 == null ? void 0 : e14.firstGrabbedManipulator)) {
        for (const o13 of [n17, e14 == null ? void 0 : e14.selectedComputation])
          if (null != o13) {
            const e15 = this._computationManipulators.get(o13);
            this._updateManipulators(o13, e15, t16);
          }
      } else
        for (const [o13, s14] of this._computationManipulators)
          this._updateManipulators(o13, s14, t16);
    }, w), l3(() => this.analysis.style.lineSize, (t16) => {
      this._updateManipulatorStyle(t16);
    }, h), l3(() => this.view.state.camera, () => {
      null != this._stagedComputation && this._updateStagedDimensionOffset(this._stagedComputation);
    }), l3(() => n(this._stagedComputation, (t16) => {
      const e14 = t16.elevationAlignedStartPoint, i7 = n4();
      return null != e14 && this.view.renderCoordsHelper.toRenderCoords(e14, i7) ? i7 : null;
    }), (t16) => {
      null != t16 ? (this._stagedStartIndicator.vertices = [t16], this._stagedStartIndicator.attached = true) : this._stagedStartIndicator.attached = false;
    })]), this.addHandles(this._constraintHandles), this.addHandles(this._snappingIndicatorHandles), f7(this, () => {
      const t16 = this._activeComputation, e14 = this._stagedComputation;
      if (null == t16 || null != e14) {
        const t17 = this.view.inputManager.latestPointerType ?? "mouse", e15 = this._getSnappingContext(t17);
        this.updatingHandles.addPromise(y(this._snappingOperation.resnap(this._snappingManager, e15)));
      }
      if (null != t16) {
        const { start: e15, end: i7 } = this._computationManipulators.get(t16);
        if (e15.grabbing || i7.grabbing) {
          const i8 = e15.grabbing ? "start" : "end", n17 = this._computeConstraint(t16);
          f9(t16, i8, { constraint: n17, view: this.view });
        }
      }
    });
  }
  destroy() {
    this._snappingOperation = l(this._snappingOperation), this._computationHandles.destroy(), this._constraintSnappingIndicator.destroy(), this._stagedStartIndicator.destroy(), this._orientationManipulatorMaterial.dispose(), this._orientationManipulatorTexture.release();
  }
  get updating() {
    return this.updatingHandles.updating || this._snappingManager.updating;
  }
  get firstGrabbedManipulator() {
    return this.parentTool.firstGrabbedManipulator;
  }
  get hasGrabbedManipulators() {
    return this.parentTool.hasGrabbedManipulators;
  }
  get snappingOptions() {
    return this._snappingManager.options;
  }
  get _snappingManager() {
    return this._snappingManagerResult.snappingManager;
  }
  get _activeComputation() {
    if (null != this._stagedComputation)
      return this._stagedComputation;
    const { selectedComputation: t15 } = this.analysisViewData;
    return this.hasGrabbedManipulators && null != t15 ? t15 : null;
  }
  get _stagedComputation() {
    const t15 = this._stagedDimension, e13 = this.analysisViewData.computations.at(-1);
    return null == t15 || null == e13 || e13.dimension !== t15 ? null : e13;
  }
  get _constraintHandles() {
    return [f2(() => this.analysisViewData.selectedComputation, (t15) => {
      t15.previousConstraint = this._computeConstraint(t15);
    }, { ...w, equals: j }), l3(() => {
      const t15 = this._activeComputation;
      if (null == t15)
        return null;
      const { measureType: e13, orientation: i6 } = t15.dimension;
      return { measureType: e13, orientation: i6, computation: t15 };
    }, (t15, e13) => {
      if (null != t15 && null == e13) {
        const { measureType: e14, orientation: n16, computation: a17 } = t15;
        switch (a17.previousConstraint) {
          case P4.Horizontal:
            a17.preConstraintProperties = { measureType: t6.Horizontal, orientation: 0 };
            break;
          case P4.Vertical:
            a17.preConstraintProperties = { measureType: t6.Vertical, orientation: 0 };
            break;
          case P4.Direct:
            a17.preConstraintProperties = { measureType: t6.Direct, orientation: n16 };
            break;
          default:
            a17.preConstraintProperties = { measureType: e14, orientation: n16 };
        }
      }
      null == t15 && null != e13 && (e13.computation.preConstraintProperties = null);
    }, U)];
  }
  get _snappingIndicatorHandles() {
    const t15 = "snapping-indicator-event-handles";
    return [l3(() => ({ stagedComputation: this._stagedComputation, activeComputation: this._activeComputation }), ({ stagedComputation: e13, activeComputation: i6 }) => {
      const n16 = this._constraintSnappingIndicator;
      if (this.removeHandles(t15), null != i6)
        if (i6 === e13)
          n16.attached = true;
        else {
          const { start: e14, end: a17 } = this._computationManipulators.get(i6), o13 = () => {
            n16.attached = e14.grabbing || a17.grabbing;
          };
          o13(), this.addHandles([e14.events.on("grab-changed", o13), a17.events.on("grab-changed", o13)], t15);
        }
      else
        n16.attached = false;
    }), l3(() => {
      const t16 = this._activeComputation;
      return null != t16 ? { geometry: t16.geometry, constraint: t16.previousConstraint } : {};
    }, ({ geometry: t16, constraint: e13 }) => {
      const i6 = this._constraintSnappingIndicator;
      null != t16 && null != e13 && e13 !== P4.Direct ? (i6.visible = true, i6.setGeometryFromSegment(t16.directSegment)) : i6.visible = false;
    })];
  }
  removeStaged() {
    return null != this._stagedDimension && (this.analysis.dimensions.remove(this._stagedDimension), this._stagedDimension = null, true);
  }
  onDeactivate() {
    this.removeStaged(), this._resetSnappingState();
  }
  onClick(t15) {
    const { _stagedDimension: e13 } = this;
    if (null == e13) {
      const e14 = this._onUnstagedClick(t15);
      return this.analysis.dimensions.add(e14), null;
    }
    return this._onStagedClick(t15), e13;
  }
  onPointerMove({ mapPoint: t15, pointerType: e13 }) {
    if ("touch" === e13)
      return;
    const i6 = this._getSnappingContext(e13);
    this.updatingHandles.addPromise(y(this._snappingOperation.snap({ point: t15 }, this._snappingManager, i6)));
  }
  onManipulatorSelectionChanged() {
    if (null != this.analysisViewData.selectedComputation) {
      this._computationManipulators.get(this.analysisViewData.selectedComputation).offset.selected || (this.analysisViewData.selectedDimension = null);
    }
  }
  _onUnstagedClick({ mapPoint: t15, pointerType: e13 }) {
    let a17 = t15;
    if ("mouse" === e13) {
      const i6 = this._getSnappingContext(e13);
      a17 = this._snappingManager.update({ point: t15, context: i6 });
    }
    const o13 = new u3({ startPoint: x4(a17, new x3()), endPoint: null, measureType: t6.Horizontal });
    return this._stagedDimension = o13, this._resetSnappingState(), o13;
  }
  _onStagedClick({ mapPoint: t15, pointerType: e13 }) {
    const i6 = this._stagedComputation;
    if (null == i6)
      return;
    let n16 = t15;
    if ("mouse" === e13) {
      const i7 = this._getSnappingContext(e13);
      n16 = this._snappingManager.update({ point: t15, context: i7 });
    }
    const a17 = x4(n16, new x3());
    this._applyPointUpdate(i6, { endPoint: a17 }), this._stagedDimension = null, this._resetSnappingState();
  }
  _resetSnappingState() {
    this._snappingManager.doneSnapping(), this._snappingOperation.abort(), this._snappingOperation.stagedPoint = null;
  }
  _addComputation(t15) {
    if (this._computationManipulators.has(t15))
      return;
    const e13 = this._setupPointManipulator(t15, { isStart: true }), n16 = this._setupPointManipulator(t15, { isStart: false }), a17 = this._setupOffsetManipulator(t15), o13 = this._setupHeadingManipulator(t15), s14 = this._setupRotationManipulator(t15), r17 = this._setupMeasureTypeManipulator(t15, t6.Direct), p16 = this._setupMeasureTypeManipulator(t15, t6.Horizontal), l15 = this._setupMeasureTypeManipulator(t15, t6.Vertical), u12 = new oe({ start: e13, end: n16, offset: a17, heading: o13, rotation: s14, direct: r17, horizontal: p16, vertical: l15 });
    this._setupComputationToManipulatorsSync(t15, u12), this._computationManipulators.set(t15, u12), this.manipulators.addMany(u12.values());
  }
  _removeComputation(t15) {
    const e13 = this._computationManipulators.get(t15);
    if (null != e13) {
      this._computationHandles.remove(t15), this._computationManipulators.delete(t15);
      for (const t16 of e13.values())
        this.manipulators.remove(t16);
    }
  }
  _setupComputationToManipulatorsSync(t15, e13) {
    this._computationHandles.add([l3(() => t15.geometry, () => this._updateManipulators(t15, e13), { ...w, equals: j })], t15);
  }
  _setupPointManipulator(t15, e13) {
    const { view: i6 } = this, { dimension: n16 } = t15, a17 = ie(i6, { metadata: n16 }), o13 = le(a17, { isStart: e13.isStart, createSnappingPipelineStep: (t16) => f11({ snappingContext: this._getSnappingContext(t16), snappingManager: this._snappingManager, updatingHandles: this.updatingHandles }), dimension: n16, onUpdate: (e14) => this._applyPointUpdate(t15, e14), view: i6 });
    return this._computationHandles.add(o13, t15), a17;
  }
  _setupOffsetManipulator(t15) {
    const { view: e13 } = this, i6 = ae(e13, { lineSizePt: this.analysis.style.lineSize, unfocusedMaterial: this._unfocusedOffsetManipulatorMaterial, focusedMaterial: this._focusedOffsetManipulatorMaterial, metadata: t15.dimension }), n16 = ue(i6, { computation: t15, view: e13 });
    return this._computationHandles.add(n16, t15), i6;
  }
  _setupHeadingManipulator(t15) {
    const { view: e13 } = this, i6 = ce(e13, { lineSizePt: this.analysis.style.lineSize, material: this._orientationManipulatorMaterial, metadata: t15.dimension }), n16 = fe(i6, { computation: t15, view: e13 });
    return this._computationHandles.add(n16, t15), i6;
  }
  _setupRotationManipulator(t15) {
    const { view: e13 } = this, i6 = ce(e13, { lineSizePt: this.analysis.style.lineSize, material: this._orientationManipulatorMaterial, metadata: t15.dimension }), n16 = pe(i6, { computation: t15, view: e13 });
    return this._computationHandles.add(n16, t15), i6;
  }
  _setupMeasureTypeManipulator(t15, e13) {
    const { view: i6 } = this, n16 = de(i6, { lineSizePt: this.analysis.style.lineSize, unfocusedMaterial: this._unfocusedOffsetManipulatorMaterial, focusedMaterial: this._focusedOffsetManipulatorMaterial, thinOffsetManipulatorMaterial: this._thinOffsetManipulatorMaterial, metadata: t15.dimension }), a17 = ye(n16, { computation: t15, manipulatorMeasureType: e13, view: i6 });
    return this._computationHandles.add(a17, t15), n16;
  }
  _updateManipulators(t15, e13, n16 = { stagedDimension: this._stagedDimension, selectedComputation: this.analysisViewData.selectedComputation, firstGrabbedManipulator: this.firstGrabbedManipulator }) {
    const { stagedDimension: a17, selectedComputation: o13, firstGrabbedManipulator: s14 } = n16, { start: r17, end: p16, offset: l15, heading: u12, rotation: d9 } = e13, c9 = o13 === t15, m8 = $2(t15), { dimension: h17 } = t15;
    for (const i6 of e13.values()) {
      const t16 = m8 && null == a17 && (null == s14 || i6 === s14);
      i6 === l15 ? (i6.available = t16, i6.selected = c9) : i6.available = t16 && c9;
    }
    if (!m8)
      return;
    null != this._computeConstraint(t15) ? e13.forEachMeasureTypeManipulator((t16) => t16.available = false) : e13.manipulatorForMeasureType(h17.measureType).available = false;
    for (const _5 of [u12, d9])
      h17.measureType === t6.Direct && 0 !== h17.offset || (_5.available = false);
    B2(t15) ? d9.available = false : u12.available = false;
    const { geometry: g13 } = t15;
    r17.renderLocation = g13.directSegment.startRenderSpace, p16.renderLocation = g13.directSegment.endRenderSpace;
    const { renderCoordsHelper: f12 } = this.view;
    xe(l15, g13, f12), u12.available && Me(u12, t15, f12), d9.available && we(d9, t15, f12), e13.forEachMeasureTypeManipulator((e14, i6) => {
      e14.available && Te(e14, t15, i6, f12);
    });
  }
  _updateManipulatorStyle(t15) {
    const e13 = Oe(t15), i6 = De(t15), n16 = { lineSizePt: t15, material: this._orientationManipulatorMaterial };
    for (const { offset: a17, heading: o13, rotation: s14 } of this._computationManipulators.values())
      a17.radius = i6 / 2, me(o13, n16), me(s14, n16);
    this._unfocusedOffsetManipulatorMaterial.setParameters({ width: e13 }), this._focusedOffsetManipulatorMaterial.setParameters({ width: i6 });
  }
  _applyPointUpdate(t15, e13) {
    const { view: i6 } = this, n16 = w3(t15);
    "startPoint" in e13 && (n16.elevationAlignedStartPoint = e13.startPoint), "endPoint" in e13 && (n16.elevationAlignedEndPoint = e13.endPoint);
    const a17 = C2(n16, i6.renderCoordsHelper);
    if (null == a17)
      return;
    const o13 = this._computeConstraint({ ...n16, geometry: a17 });
    v9(t15, e13, { ...n16, constraint: o13, unconstrainedGeometry: a17, view: i6 }), t15 === this._stagedComputation && this._updateStagedDimensionOffset(t15);
  }
  _updateStagedDimensionOffset(t15) {
    if (null == t15.geometry)
      return;
    t15.geometry.directSegment.eval(0.5, ct);
    const e13 = this.view.state.camera.computeRenderPixelSizeAt(ct);
    t15.dimension.offset = d6.initialOffsetPx * e13;
  }
  _computeConstraint(t15) {
    return g7(p9(t15, this._snappingManager.options), this.view);
  }
  get testInfo() {
    const t15 = (t16) => this.analysisViewData.computations.find((e13) => e13.dimension === t16);
    return { disableManipulatorPartialOcclusion: () => {
      this._stagedStartIndicator.renderOccluded = o5.Occlude, this.manipulators.forEach(({ manipulator: t16 }) => {
        for (const { geometry: e13 } of t16.renderObjects)
          e13.material.setParameters({ renderOccluded: o5.Occlude });
      });
    }, getManipulatorsForDimension: (e13) => this._computationManipulators.get(t15(e13)), getComputationForDimension: (e13) => t15(e13), getConstraintForDimension: (e13) => {
      const i6 = t15(e13);
      return null != i6 ? this._computeConstraint(i6) : null;
    }, stagedDimension: this._stagedDimension, stagedStartIndicator: this._stagedStartIndicator, constraintSnappingIndicator: this._constraintSnappingIndicator, snappingManager: this._snappingManager };
  }
};
function dt() {
  const { color: t15 } = d6.offsetManipulator;
  return new B({ color: h3.toUnitRGBA(t15), width: 1, renderOccluded: o5.OccludeAndTransparent, writeDepth: false, hasPolygonOffset: true });
}
e([y2({ constructOnly: true })], ut.prototype, "analysis", void 0), e([y2({ constructOnly: true })], ut.prototype, "analysisViewData", void 0), e([y2({ constructOnly: true })], ut.prototype, "manipulators", void 0), e([y2({ constructOnly: true })], ut.prototype, "parentTool", void 0), e([y2({ constructOnly: true, nonNullable: true })], ut.prototype, "view", void 0), e([y2({ readOnly: true })], ut.prototype, "updating", null), e([y2()], ut.prototype, "firstGrabbedManipulator", null), e([y2()], ut.prototype, "hasGrabbedManipulators", null), e([y2()], ut.prototype, "snappingOptions", null), e([y2()], ut.prototype, "_stagedDimension", void 0), e([y2()], ut.prototype, "_activeComputation", null), e([y2()], ut.prototype, "_stagedComputation", null), ut = e([a2("esri.views.3d.analysis.Dimension.LengthDimensionSubTool")], ut);
var ct = n4();

// node_modules/@arcgis/core/views/3d/analysis/Dimension/DimensionTool.js
var g11;
!function(e13) {
  e13.Ready = "ready", e13.Creating = "creating", e13.Created = "created";
}(g11 || (g11 = {}));
var S6 = class extends a11 {
  constructor(e13) {
    super(e13), this.automaticManipulatorSelection = false, this.removeIncompleteOnCancel = false, this._pointerMoveTimerMs = d6.pointerMoveTimeoutMs, this._prevPointerMoveTimeout = null;
  }
  initialize() {
    this._intersector = A3(this.view.state.viewingMode), this._intersector.options.store = t8.MIN, this._lengthDimensionSubTool = new ut({ analysis: this.analysis, analysisViewData: this.analysisViewData, manipulators: this.manipulators, parentTool: this, view: this.view }), this.addHandles([o2(this._lengthDimensionSubTool), e3(() => this._clearPointerMoveTimeout()), l3(() => this.state, (e13) => {
      e13 === g11.Created && this.finishToolCreation();
    }, w), f2(() => this.firstGrabbedManipulator, (e13) => {
      this.selectedDimension = e13.metadata;
    }, w), l3(() => this.selectedDimension, () => this._resetPointerMoveTimeout(), w)]);
  }
  get state() {
    return this.analysis.dimensions.some((e13) => "length" === e13.type) ? null != this._activeSubTool ? g11.Creating : g11.Created : g11.Ready;
  }
  get updating() {
    return this._lengthDimensionSubTool.updating;
  }
  get cursor() {
    return this.active ? "crosshair" : null;
  }
  get selectedDimension() {
    return this.analysisViewData.selectedDimension;
  }
  set selectedDimension(e13) {
    this.analysisViewData.selectedDimension = e13;
  }
  onInputEvent(e13) {
    switch (e13.type) {
      case "immediate-click":
        this._clickHandler(e13);
        break;
      case "immediate-double-click":
        this._doubleClickHandler(e13);
        break;
      case "pointer-move":
        this._pointerMoveHandler(e13);
        break;
      case "key-down":
        if (e9.cancel === e13.key) {
          if (null != this._activeSubTool && this._activeSubTool.removeStaged())
            return void e13.stopPropagation();
          this.active || (this.selectedDimension = null);
        } else
          e9.delete.includes(e13.key) && this._deleteKeyHandler();
    }
  }
  onActivate() {
    this._activeSubTool = this._lengthDimensionSubTool;
  }
  onDeactivate() {
    null != this._activeSubTool && (this._activeSubTool.onDeactivate(), this._activeSubTool = null);
  }
  onShow() {
    this._resetPointerMoveTimeout();
  }
  onManipulatorSelectionChanged() {
    this._lengthDimensionSubTool.onManipulatorSelectionChanged();
  }
  onHide() {
    this.selectedDimension = null;
  }
  _clickHandler(e13) {
    if (this.hasFocusedManipulators)
      return void e13.stopPropagation();
    if (null == this._activeSubTool)
      return;
    const t15 = this._intersectScreen(e13);
    null != t15 && (this.selectedDimension = this._activeSubTool.onClick({ mapPoint: t15, pointerType: e13.pointerType }), e13.stopPropagation());
  }
  _doubleClickHandler(e13) {
    this.active && (this.view.activeTool = null, e13.stopPropagation());
  }
  _pointerMoveHandler(e13) {
    if (this._resetPointerMoveTimeout(), null == this._activeSubTool)
      return;
    if (this.hasFocusedManipulators)
      return;
    const t15 = this._intersectScreen(e13);
    null != t15 && this._activeSubTool.onPointerMove({ mapPoint: t15, pointerType: e13.pointerType });
  }
  _deleteKeyHandler() {
    null != this._activeSubTool && this._activeSubTool.removeStaged(), this._removeSelected();
  }
  _intersectScreen(e13) {
    const t15 = c2(e13);
    this.view.sceneIntersectionHelper.intersectToolIntersectorScreen(t15, this._intersector);
    const i6 = this._intersector.results.min, o13 = c.get();
    return i6.getIntersectionPoint(o13) ? this.view.renderCoordsHelper.fromRenderCoords(o13, this.view.spatialReference) : null;
  }
  _removeSelected() {
    null != this.selectedDimension && (this.analysis.dimensions.remove(this.selectedDimension), this.selectedDimension = null);
  }
  _clearPointerMoveTimeout() {
    this._prevPointerMoveTimeout = o(this._prevPointerMoveTimeout);
  }
  _resetPointerMoveTimeout() {
    this._clearPointerMoveTimeout(), this.manipulators.forEach((e13) => {
      e13.manipulator.state |= Fe;
    }), this._prevPointerMoveTimeout = t3.setTimeout(() => {
      this.manipulators.forEach((e13) => {
        e13.manipulator.state &= ~Fe;
      });
    }, this._pointerMoveTimerMs);
  }
  get testInfo() {
    return { ...this._lengthDimensionSubTool.testInfo, setManipulatorAutoHideDelay: (e13) => {
      this._pointerMoveTimerMs = e13, this._resetPointerMoveTimeout();
    } };
  }
};
e([y2({ constructOnly: true })], S6.prototype, "view", void 0), e([y2({ constructOnly: true })], S6.prototype, "analysis", void 0), e([y2({ readOnly: true })], S6.prototype, "state", null), e([y2({ readOnly: true })], S6.prototype, "updating", null), e([y2({ readOnly: true })], S6.prototype, "cursor", null), e([y2({ constructOnly: true })], S6.prototype, "analysisViewData", void 0), e([y2()], S6.prototype, "selectedDimension", null), e([y2()], S6.prototype, "automaticManipulatorSelection", void 0), e([y2()], S6.prototype, "_activeSubTool", void 0), e([y2()], S6.prototype, "_lengthDimensionSubTool", void 0), S6 = e([a2("esri.views.3d.analysis.Dimension.DimensionTool")], S6);

// node_modules/@arcgis/core/views/3d/interactive/visualElements/MarkerVisualElement.js
var h16 = class extends a10 {
  constructor(e13, t15) {
    super(e13), this._hasExternalMaterial = false, this._renderOccluded = o5.OccludeAndTransparent, this._width = 1, this._color = r8(1, 0, 1, 1), this._placement = "end", this._markerPrimitive = "arrow", this._material = t15, this._hasExternalMaterial = null != t15, this.applyProps(e13);
  }
  setGeometryFromSegment(t15, r17) {
    const i6 = t15.endRenderSpace;
    this.transform = q2(o12, i6), this._normal = r17;
    const { points: a17 } = t15.createRenderGeometry(i6, this.view.renderCoordsHelper);
    this.geometry = [a17];
  }
  get renderOccluded() {
    return null != this._material ? this._material.parameters.renderOccluded : this._renderOccluded;
  }
  set renderOccluded(e13) {
    this._renderOccluded = e13, null != this._material && this._material.setParameters({ renderOccluded: e13 });
  }
  get geometry() {
    return this._geometry;
  }
  set geometry(e13) {
    this._geometry = e13, this.recreateGeometry();
  }
  get normal() {
    return this._normal;
  }
  set normal(e13) {
    this._normal = e13, this.recreateGeometry();
  }
  get width() {
    return null != this._material ? this._material.parameters.width : this._width;
  }
  set width(e13) {
    this._width = e13, null != this._material && this._material.setParameters({ width: e13 });
  }
  get color() {
    return null != this._material ? this._material.parameters.color : this._color;
  }
  set color(e13) {
    this._color = t9(e13), null != this._material && this._material.setParameters({ color: this._color });
  }
  get placement() {
    return null != this._material ? this._material.parameters.placement : this._placement;
  }
  set placement(e13) {
    this._placement = e13, null != this._material && this._material.setParameters({ placement: this._placement });
  }
  get markerPrimitive() {
    var _a;
    return ((_a = this._material) == null ? void 0 : _a.parameters.markerPrimitive) ?? this._markerPrimitive;
  }
  set markerPrimitive(e13) {
    this._markerPrimitive = e13, null != this._material && this._material.setParameters({ markerPrimitive: e13 });
  }
  createExternalResources() {
    this._hasExternalMaterial || (this._material = new v4({ width: this._width, color: this._color, placement: this._placement, renderOccluded: this._renderOccluded, markerPrimitive: this._markerPrimitive }));
  }
  destroyExternalResources() {
    this._hasExternalMaterial || (this._material = null);
  }
  createGeometries(e13) {
    for (const t15 of y4(this.geometry, this.normal)) {
      const r17 = h6(this._material, t15);
      e13.addGeometry(r17);
    }
  }
  forEachExternalMaterial(e13) {
    this._hasExternalMaterial || e13(this._material);
  }
};
var o12 = e6();

// node_modules/@arcgis/core/views/3d/analysis/Dimension/LengthDimensionVisualization.js
var v13 = class {
  set visible(e13) {
    for (const t15 of this._visualElements.values())
      t15.attached = e13;
  }
  constructor(s14) {
    this.destroyed = false, this._handles = new t(), this._messages = null, this._labelSegment = new f5();
    const { analysis: i6, computation: m8, view: o13, messages: r17 } = s14;
    this.analysis = i6, this.computation = m8, this.view = o13, this._messages = r17;
    const f12 = s14.visible, d9 = { view: o13, attached: f12 }, { fontSize: c9, textColor: v16, textBackgroundColor: p16 } = i6.style;
    this._visualElements = new y7({ marker: new h16(d9, s14.markerMaterial), dimension: new u9(d9, s14.dimensionLineMaterial), startOffset: new u9(d9, s14.offsetLineMaterial), endOffset: new u9(d9, s14.offsetLineMaterial), dimensionSmall: new u9(d9, s14.smallDimensionLineMaterial), startOffsetSmall: new u9(d9, s14.smallOffsetLineMaterial), endOffsetSmall: new u9(d9, s14.smallOffsetLineMaterial), label: new g5({ view: o13, attached: f12, distance: 0, geometry: { type: "segment", sampleLocation: "center", segment: this._labelSegment, callout: false }, fontSize: u2(c9), textColor: v16.clone(), backgroundColor: p16.clone() }) }), this._handles.add([l3(() => m8.geometry, (e13) => {
      this.updateCameraDependentElements(o13.state.camera, e13, i6.style), null != m8.geometry && this._updateLines(m8.geometry);
    }, { ...h, equals: j }), l3(() => m8.length, (e13) => this._updateLabelContent(e13), h)]);
  }
  destroy() {
    this.destroyed = true, this._handles = l(this._handles);
    for (const e13 of this._visualElements.values())
      e13.destroy();
  }
  get testInfo() {
    return { dimensionVisualElement: this._visualElements.dimension, label: this._visualElements.label };
  }
  _updateLines(e13) {
    const t15 = H4(b6, z3.Start, e13.directSegment, e13.dimensionSegment), s14 = H4(O5, z3.End, e13.directSegment, e13.dimensionSegment), i6 = this._visualElements;
    i6.marker.setGeometryFromSegment(e13.dimensionSegment, e13.primaryOffsetAxis), i6.dimension.setGeometryFromSegment(e13.dimensionSegment), i6.startOffset.setGeometryFromSegment(t15), i6.endOffset.setGeometryFromSegment(s14), i6.dimensionSmall.setGeometryFromSegment(e13.dimensionSegment), i6.startOffsetSmall.setGeometryFromSegment(t15), i6.endOffsetSmall.setGeometryFromSegment(s14);
  }
  updateCameraDependentElements(e13, t15, s14) {
    const i6 = this._visualElements;
    if (null == t15) {
      for (const e14 of i6.values())
        e14.visible = false;
      return;
    }
    const n16 = e13.computeScreenPixelSizeAt(t15.dimensionSegment.eval(0.5, _4)), l15 = N2(t15, n16), m8 = l15 < (u2(s14.lineSize) * d6.smallScreenLengthLineSizeFactor) ** 2, o13 = !m8;
    i6.marker.visible = o13, i6.dimension.visible = o13, i6.startOffset.visible = o13, i6.endOffset.visible = o13, i6.dimensionSmall.visible = m8, i6.startOffsetSmall.visible = m8, i6.endOffsetSmall.visible = m8;
    const r17 = u2(s14.fontSize) * d6.labels.minScreenLengthFontSizeFactor, { label: h17 } = i6;
    if (h17.visible = l15 >= r17 ** 2, !h17.visible)
      return;
    const { dimensionSegment: u12, primaryOffsetAxis: S7 } = t15, { offset: g13 } = this.computation.dimension, v16 = (Math.sign(g13) >= 0 ? 1 : -1) * p15(s14) * n16;
    k2(this._labelSegment, u12, S7, v16), h17.updateLabelPosition();
  }
  updateLabelStyle(e13) {
    const { label: t15 } = this._visualElements;
    t15.fontSize = u2(e13.fontSize), t15.textColor = e13.textColor, t15.backgroundColor = e13.textBackgroundColor;
  }
  updateUnitsMessages(e13) {
    this._messages = e13;
    const { length: t15 } = this.computation;
    this._updateLabelContent(t15);
  }
  _updateLabelContent(e13) {
    const { label: t15 } = this._visualElements;
    null != e13 && null != this._messages ? t15.text = h8(this._messages, e13, e13.unit) : t15.text = "";
  }
};
function p15(e13) {
  return 1.5 * u2(e13.fontSize) + d6.labels.marginPx + u2(e13.lineSize / 2);
}
var b6 = new f5();
var O5 = new f5();
var _4 = n4();
var y7 = class {
  constructor(e13) {
    this.marker = e13.marker, this.dimension = e13.dimension, this.startOffset = e13.startOffset, this.endOffset = e13.endOffset, this.dimensionSmall = e13.dimensionSmall, this.startOffsetSmall = e13.startOffsetSmall, this.endOffsetSmall = e13.endOffsetSmall, this.label = e13.label;
  }
  values() {
    return [this.marker, this.dimension, this.startOffset, this.endOffset, this.dimensionSmall, this.startOffsetSmall, this.endOffsetSmall, this.label];
  }
};

// node_modules/@arcgis/core/views/3d/analysis/Dimension/DimensionVisualization.js
var v14 = class extends m {
  get analysis() {
    return this.analysisViewData.analysis;
  }
  get visible() {
    return this.analysisViewData.visible;
  }
  constructor(e13) {
    super(e13), this.loadingMessages = false, this._messages = null, this._dimensionVisualizations = /* @__PURE__ */ new Map(), this._markerMaterial = new v4({ width: 1, anchor: s7.Tip, color: l5, placement: "begin-end", worldSpace: true, hideOnShortSegments: true, hasTip: true, renderOccluded: o5.OccludeAndTransparent, markerPrimitive: "triangle" }), this._dimensionLineMaterial = new B({ width: 1, color: l5, renderOccluded: o5.OccludeAndTransparent, markerParameters: this._markerMaterial.parameters }), this._offsetLineMaterial = new B({ width: 1, color: l5, renderOccluded: o5.OccludeAndTransparent, stipplePattern: h7(5), stippleScaleWithLineWidth: true }), this._smallDimensionLineMaterial = new B({ width: 1, color: l5, renderOccluded: o5.OccludeAndTransparent }), this._smallOffsetLineMaterial = new B({ width: 1, color: l5, renderOccluded: o5.OccludeAndTransparent, stipplePattern: h7(5), stippleScaleWithLineWidth: true });
  }
  initialize() {
    for (const i6 of this._lineMaterials())
      this.view._stage.add(i6), this.addHandles(e3(() => {
        var _a;
        (_a = this.view._stage) == null ? void 0 : _a.remove(i6), i6.dispose();
      }));
    const { computations: e13 } = this.analysisViewData;
    for (const i6 of e13)
      this._addComputation(i6);
    this.addHandles([e13.on("change", ({ added: e14, removed: i6 }) => {
      for (const s14 of i6)
        this._removeComputation(s14);
      for (const s14 of e14)
        this._addComputation(s14);
    }), l3(() => h3.toUnitRGBA(this.analysis.style.color), (e14) => {
      for (const i6 of this._lineMaterials())
        i6.setParameters({ color: e14 });
    }, w), l3(() => this.analysis.style.lineSize, (e14) => {
      const i6 = u2(e14);
      this._markerMaterial.setParameters({ width: i6 * d6.markers.lineSizeFraction }), this._dimensionLineMaterial.setParameters({ width: i6, markerParameters: this._markerMaterial.parameters });
      const s14 = Math.max(i6 * d6.offsetLine.lineSizeFraction, 1);
      this._offsetLineMaterial.setParameters({ width: s14 });
    }, w), l3(() => ({ camera: this.view.state.camera, style: L4(this.analysis) }), ({ camera: e14, style: i6 }) => {
      for (const [s14, t15] of this._dimensionVisualizations)
        t15.updateCameraDependentElements(e14, s14.geometry, i6), t15.updateLabelStyle(i6);
    }), l3(() => this.visible, (e14) => {
      for (const i6 of this._dimensionVisualizations.values())
        i6.visible = e14;
    })]), this.addHandles([s5(() => this._updateMessageBundle()), f2(() => !this.loadingMessages, () => {
      for (const e14 of this._dimensionVisualizations.values())
        e14.updateUnitsMessages(this._messages);
    }, U)]), this._updateMessageBundle();
  }
  destroy() {
    this._dimensionVisualizations.forEach((e13) => {
      e13.destroy();
    }), this._dimensionVisualizations.clear();
  }
  get testInfo() {
    return { visualizations: Array.from(this._dimensionVisualizations.values()), disablePartialOcclusion: () => {
      for (const e13 of this._lineMaterials())
        e13.setParameters({ renderOccluded: o5.Occlude });
    } };
  }
  _addComputation(e13) {
    this._dimensionVisualizations.has(e13) || this._dimensionVisualizations.set(e13, new v13({ analysis: this.analysis, computation: e13, view: this.view, visible: this.visible, markerMaterial: this._markerMaterial, dimensionLineMaterial: this._dimensionLineMaterial, offsetLineMaterial: this._offsetLineMaterial, smallDimensionLineMaterial: this._smallDimensionLineMaterial, smallOffsetLineMaterial: this._smallOffsetLineMaterial, messages: this._messages }));
  }
  _removeComputation(e13) {
    const i6 = this._dimensionVisualizations.get(e13);
    null != i6 && (i6.destroy(), this._dimensionVisualizations.delete(e13));
  }
  _lineMaterials() {
    return [this._markerMaterial, this._dimensionLineMaterial, this._offsetLineMaterial, this._smallDimensionLineMaterial, this._smallOffsetLineMaterial];
  }
  async _updateMessageBundle() {
    this.loadingMessages = true;
    try {
      this._messages = await h2("esri/core/t9n/Units");
    } finally {
      this.loadingMessages = false;
    }
  }
};
function L4(e13) {
  const { fontSize: i6, lineSize: s14, textColor: t15, textBackgroundColor: a17 } = e13.style;
  return { fontSize: i6, lineSize: s14, textBackgroundColor: a17.clone(), textColor: t15.clone() };
}
e([y2({ constructOnly: true })], v14.prototype, "analysisViewData", void 0), e([y2({ constructOnly: true, nonNullable: true })], v14.prototype, "view", void 0), e([y2()], v14.prototype, "analysis", null), e([y2()], v14.prototype, "visible", null), e([y2()], v14.prototype, "loadingMessages", void 0), v14 = e([a2("esri.views.3d.analysis.Dimension.DimensionVisualization")], v14);

// node_modules/@arcgis/core/views/analysis/LengthDimensionResult.js
var t14 = class extends m {
  constructor(s14) {
    super(s14), this.dimension = null, this.length = null;
  }
};
e([y2({ constructOnly: true, nonNullable: true })], t14.prototype, "dimension", void 0), e([y2()], t14.prototype, "length", void 0), t14 = e([a2("esri.views.3d.analysis.LengthDimensionResult")], t14);
var c8 = t14;

// node_modules/@arcgis/core/views/3d/analysis/Dimension/LengthDimensionComputation.js
var l14 = class extends m {
  constructor(t15) {
    super(t15), this.geometry = null, this.unconstrainedGeometry = null, this.elevationAlignedStartPoint = null, this.elevationAlignedEndPoint = null;
  }
  normalizeCtorArgs(t15) {
    const { dimension: o13, ...e13 } = t15;
    return { result: new c8({ dimension: o13 }), ...e13 };
  }
  initialize() {
    this.addHandles([l3(() => this.dimension.startPoint, (t15) => this.elevationAlignedStartPoint = this.projectAndAlignPoint(t15), w), l3(() => this.dimension.endPoint, (t15) => this.elevationAlignedEndPoint = this.projectAndAlignPoint(t15), w)]);
  }
  get dimension() {
    return this.result.dimension;
  }
  get length() {
    return this.result.length;
  }
};
e([y2({ constructOnly: true, nonNullable: true })], l14.prototype, "result", void 0), e([y2({ constructOnly: true, nonNullable: true })], l14.prototype, "projectAndAlignPoint", void 0), e([y2()], l14.prototype, "dimension", null), e([y2()], l14.prototype, "length", null), e([y2()], l14.prototype, "geometry", void 0), e([y2()], l14.prototype, "unconstrainedGeometry", void 0), e([y2()], l14.prototype, "elevationAlignedStartPoint", void 0), e([y2()], l14.prototype, "elevationAlignedEndPoint", void 0), e([y2()], l14.prototype, "preConstraintProperties", void 0), e([y2()], l14.prototype, "previousConstraint", void 0), l14 = e([a2("esri.views.3d.analysis.LengthDimensionComputation")], l14);

// node_modules/@arcgis/core/views/analysis/DimensionAnalysisView.js
var r16 = (r17) => {
  let i6 = class extends r17 {
    constructor(...o13) {
      super(...o13), this.analysis = null, this.tool = null, this.selectedDimension = null, this.interactive = false, this.visible = null;
    }
    get results() {
      return new V2();
    }
    createLengthDimensions(o13) {
      throw new Error("Method not implemented.");
    }
  };
  return e([y2({ constructOnly: true })], i6.prototype, "view", void 0), e([y2({ constructOnly: true, nonNullable: true })], i6.prototype, "analysis", void 0), e([y2()], i6.prototype, "tool", void 0), e([y2({ readOnly: true })], i6.prototype, "results", null), e([y2()], i6.prototype, "selectedDimension", void 0), e([y2()], i6.prototype, "interactive", void 0), e([y2()], i6.prototype, "visible", void 0), i6 = e([a2("esri.views.analysis.DimensionAnalysisView")], i6), i6;
};

// node_modules/@arcgis/core/views/3d/analysis/DimensionAnalysisView3D.js
var v15 = class extends r16(s8(m)) {
  constructor(i6) {
    super(i6), this.type = "dimension-view-3d", this.tool = null, this.computations = new V2(), this.selectedDimension = null, this._dimensionsToComputations = /* @__PURE__ */ new Map(), this._placementTask = null, this._projectAndAlignPoint = null;
  }
  initialize() {
    this._projectAndAlignPoint = (i6) => {
      if (null == i6)
        return null;
      const { spatialReference: s14, elevationProvider: o13 } = this.view, e13 = r10(i6, s14, o13);
      return null == e13 && t12(this.analysis, i6.spatialReference, s.getLogger(this)), e13;
    }, this.addHandles([a12(this, S6), a5(() => this.analysis.dimensions, "after-add", (i6) => this._onDimensionAdd(i6.item), { onListenerAdd: (i6) => {
      for (const s14 of i6)
        this._onDimensionAdd(s14);
    }, onListenerRemove: () => {
      this._onDimensionsClear();
    } }), a5(() => this.analysis.dimensions, "after-remove", (i6) => this._onDimensionRemove(i6.item))]), this._analysisVisualization = new v14({ analysisViewData: this, view: this.view }), this._analysisController = new g6({ analysisViewData: this, view: this.view });
  }
  destroy() {
    this._placementTask = e2(this._placementTask), this._analysisVisualization = l(this._analysisVisualization), v8(this);
  }
  get updating() {
    var _a;
    return ((_a = this._analysisVisualization) == null ? void 0 : _a.loadingMessages) ?? false;
  }
  get results() {
    return this.analysis.dimensions.map((i6) => this._dimensionsToComputations.get(i6).result);
  }
  get selectedComputation() {
    const { selectedDimension: i6 } = this;
    return null == i6 ? null : this._dimensionsToComputations.get(i6);
  }
  get testInfo() {
    return { visualization: this._analysisVisualization, controller: this._analysisController };
  }
  async createLengthDimensions(i6) {
    return this.selectedDimension = null, this._placementTask = e2(this._placementTask), this._placementTask = l9(this, i6), this._placementTask.promise;
  }
  _onDimensionAdd(i6) {
    const { computations: s14, _dimensionsToComputations: o13 } = this;
    if (o13.has(i6))
      return;
    const t15 = new l14({ dimension: i6, projectAndAlignPoint: this._projectAndAlignPoint });
    s14.add(t15), o13.set(i6, t15);
  }
  _onDimensionRemove(i6) {
    const { computations: s14, _dimensionsToComputations: o13 } = this, t15 = s14.findIndex((s15) => s15.dimension === i6), e13 = s14.at(t15);
    e13.dimension === this.selectedDimension && (this.selectedDimension = null), s14.removeAt(t15), o13.delete(i6), l(e13);
  }
  _onDimensionsClear() {
    this.computations.drain((i6) => i6.destroy()), this._dimensionsToComputations.clear();
  }
};
e([y2({ readOnly: true })], v15.prototype, "type", void 0), e([y2()], v15.prototype, "tool", void 0), e([y2()], v15.prototype, "updating", null), e([y2({ readOnly: true })], v15.prototype, "results", null), e([y2({ readOnly: true })], v15.prototype, "computations", void 0), e([y2()], v15.prototype, "selectedDimension", void 0), e([y2()], v15.prototype, "selectedComputation", null), e([y2()], v15.prototype, "_analysisVisualization", void 0), e([y2()], v15.prototype, "_analysisController", void 0), e([y2()], v15.prototype, "_dimensionsToComputations", void 0), e([y2()], v15.prototype, "_placementTask", void 0), v15 = e([a2("esri.views.3d.analysis.DimensionAnalysisView3D")], v15);
var g12 = v15;
export {
  g12 as default
};
//# sourceMappingURL=DimensionAnalysisView3D-TUICDLM3.js.map
