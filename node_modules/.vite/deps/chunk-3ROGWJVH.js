import {
  A,
  O
} from "./chunk-BUCIQGFS.js";
import {
  D
} from "./chunk-JP7O2ZWE.js";
import {
  e,
  i,
  v
} from "./chunk-EKJ2DJIR.js";
import {
  r
} from "./chunk-CQX57DED.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/LocalOriginFactory.js
var t = class {
  constructor(s, t2) {
    this.vec3 = s, this.id = t2;
  }
};
function c(c2, r2, n2, o) {
  return new t(r(c2, r2, n2), o);
}

// node_modules/@arcgis/core/views/3d/terrain/Overlay.js
var n;
!function(e2) {
  e2[e2.None = 0] = "None", e2[e2.ColorAndWater = 1] = "ColorAndWater", e2[e2.Highlight = 2] = "Highlight", e2[e2.Occluded = 3] = "Occluded", e2[e2.ObjectAndLayerIdColor = 4] = "ObjectAndLayerIdColor";
}(n || (n = {}));
var h = 1.3;
var g = class {
  get extent() {
    return this._extent;
  }
  constructor(t2, r2) {
    this.index = t2, this.renderTargets = r2, this._extent = i(), this.resolution = 0, this.renderLocalOrigin = c(0, 0, 0, "O"), this.pixelRatio = 1, this.mapUnitsPerPixel = 1, this.canvasGeometries = new l(), this.hasDrapedFeatureSource = false, this.hasDrapedRasterSource = false, this.hasTargetWithoutRasterImage = false, this.index = t2, this.validTargets = new Array(r2.renderTargets.length).fill(false);
  }
  getValidTexture(e2) {
    return this.validTargets[e2] ? this.renderTargets.getTarget(e2).getTexture() : null;
  }
  get _needsColorWithoutRasterImage() {
    return this.hasDrapedRasterSource && this.hasDrapedFeatureSource && this.hasTargetWithoutRasterImage;
  }
  getColorTexture(e2) {
    const t2 = e2 === n.ColorAndWater ? this.renderTargets.getTarget(A.Color) : e2 === n.Highlight ? this.renderTargets.getTarget(A.Highlight) : e2 === n.ObjectAndLayerIdColor ? this.renderTargets.getTarget(A.ObjectAndLayerIdColor) : this.renderTargets.getTarget(A.Occluded);
    return t2 ? t2.getTexture() : null;
  }
  getColorTextureNoRasterImage() {
    return this._needsColorWithoutRasterImage ? this.getValidTexture(A.ColorNoRasterImage) : this.hasDrapedFeatureSource ? this.getValidTexture(A.Color) : null;
  }
  getNormalTexture(e2) {
    const t2 = e2 === n.ColorAndWater ? this.renderTargets.getTarget(A.Water) : null;
    return t2 ? t2.getTexture() : null;
  }
  draw(e2, t2) {
    const r2 = this.computeRenderTargetValidityBitfield();
    for (const i2 of this.renderTargets.renderTargets)
      i2.type !== A.ColorNoRasterImage || this._needsColorWithoutRasterImage ? this.validTargets[i2.type] = e2.drawTarget(this, i2, t2) : this.validTargets[i2.type] = false;
    return r2 ^ this.computeRenderTargetValidityBitfield() ? D.CHANGED : D.UNCHANGED;
  }
  computeRenderTargetValidityBitfield() {
    const e2 = this.validTargets;
    return +e2[A.Color] | +e2[A.ColorNoRasterImage] << 1 | +e2[A.Highlight] << 2 | +e2[A.Water] << 3 | +e2[A.Occluded] << 4;
  }
  setupGeometryViewsCyclical(e2) {
    this.setupGeometryViewsDirect();
    const r2 = 1e-3 * e2.range;
    if (this._extent[0] - r2 <= e2.min) {
      const r3 = this.canvasGeometries.extents[this.canvasGeometries.numViews++];
      v(this._extent, e2.range, 0, r3);
    }
    if (this._extent[2] + r2 >= e2.max) {
      const r3 = this.canvasGeometries.extents[this.canvasGeometries.numViews++];
      v(this._extent, -e2.range, 0, r3);
    }
  }
  setupGeometryViewsDirect() {
    this.canvasGeometries.numViews = 1, e(this.canvasGeometries.extents[0], this._extent);
  }
  hasSomeSizedView() {
    for (let e2 = 0; e2 < this.canvasGeometries.numViews; e2++) {
      const t2 = this.canvasGeometries.extents[e2];
      if (t2[0] !== t2[2] && t2[1] !== t2[3])
        return true;
    }
    return false;
  }
  applyViewport(e2) {
    e2.setViewport(this.index === O.INNER ? 0 : this.resolution, 0, this.resolution, this.resolution);
  }
};
var l = class {
  constructor() {
    this.extents = [i(), i(), i()], this.numViews = 0;
  }
};

export {
  c,
  n,
  h,
  g
};
//# sourceMappingURL=chunk-3ROGWJVH.js.map
