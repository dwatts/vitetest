import {
  a as a4
} from "./chunk-AWHGPLMH.js";
import {
  t as t6
} from "./chunk-W2MFIVLD.js";
import {
  w
} from "./chunk-A4OLVRMJ.js";
import {
  C,
  _ as _2
} from "./chunk-HIKCANPA.js";
import {
  K,
  f as f3,
  o as o2
} from "./chunk-6WY3ZZYN.js";
import {
  ot
} from "./chunk-WRC5WFEM.js";
import {
  a as a3,
  o as o3
} from "./chunk-FAOMDC3K.js";
import {
  E as E3
} from "./chunk-6LC2JTLC.js";
import {
  f as f2
} from "./chunk-ROPKVK6V.js";
import {
  r as r6
} from "./chunk-KM375BNF.js";
import {
  c as c3
} from "./chunk-FB6EWBGE.js";
import {
  e as e4,
  i as i2,
  t as t4
} from "./chunk-V6CD66ZZ.js";
import {
  W,
  _,
  s
} from "./chunk-6FHMQNMS.js";
import {
  r as r5,
  t as t5
} from "./chunk-KFDARCTS.js";
import {
  L,
  N
} from "./chunk-SMDDCTGQ.js";
import {
  E as E2
} from "./chunk-NU4UASX6.js";
import {
  n as n2
} from "./chunk-V66LHQVK.js";
import {
  a as a2,
  g,
  m as m2,
  p as p2,
  y
} from "./chunk-3LLZ72VA.js";
import {
  h,
  m,
  v
} from "./chunk-4SIKLJSS.js";
import {
  t as t3
} from "./chunk-UM64E5NS.js";
import {
  r as r4
} from "./chunk-M7PTINEZ.js";
import {
  H
} from "./chunk-Z7LZRT7C.js";
import {
  E,
  F,
  R
} from "./chunk-BCDDCNQ2.js";
import {
  c as c2,
  p
} from "./chunk-LEDSC236.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import {
  r as r3
} from "./chunk-YGUWDSEH.js";
import {
  l
} from "./chunk-RVS5HU2K.js";
import {
  Hn
} from "./chunk-BNBT4QTW.js";
import {
  c
} from "./chunk-AQ7R6V4L.js";
import {
  M,
  e as e3,
  i
} from "./chunk-TEHNQYQD.js";
import {
  e as e2,
  o,
  r as r2,
  u
} from "./chunk-TPJLFGOT.js";
import {
  n,
  r,
  t as t2
} from "./chunk-CQX57DED.js";
import {
  D,
  a2 as a
} from "./chunk-3CQBBMMD.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  f,
  t
} from "./chunk-DWOEYHKS.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LaserlinePathTechnique.js
var m3 = class _m extends e4 {
  initializeProgram(e6) {
    return new i2(e6.rctx, _m.shader.get().build(this.configuration), h2);
  }
  initializePipeline() {
    return W({ blending: s(R.ONE, R.ONE_MINUS_SRC_ALPHA), colorWrite: _ });
  }
};
m3.shader = new t4(w, () => import("./LaserlinePath.glsl-UHGJAJ4E.js"));
var h2 = /* @__PURE__ */ new Map([[O.START, 0], [O.END, 1], [O.UP, 2], [O.EXTRUDE, 3]]);

// node_modules/@arcgis/core/views/3d/support/LaserlinePathData.js
var c4 = class {
  constructor(e6) {
    this._renderCoordsHelper = e6, this._buffers = null, this._origin = n(), this._dirty = false, this._count = 0, this._vao = null;
  }
  set vertices(e6) {
    const t7 = t3(3 * e6.length);
    let r7 = 0;
    for (const s2 of e6)
      t7[r7++] = s2[0], t7[r7++] = s2[1], t7[r7++] = s2[2];
    this.buffers = [t7];
  }
  set buffers(t7) {
    if (this._buffers = t7, this._buffers.length > 0) {
      const t8 = this._buffers[0], r7 = 3 * Math.floor(t8.length / 3 / 2);
      o(this._origin, t8[r7], t8[r7 + 1], t8[r7 + 2]);
    } else
      o(this._origin, 0, 0, 0);
    this._dirty = true;
  }
  get origin() {
    return this._origin;
  }
  draw(e6) {
    const t7 = this._ensureVAO(e6);
    null != t7 && (e6.bindVAO(t7), e6.drawArrays(E.TRIANGLES, 0, this._count));
  }
  dispose() {
    null != this._vao && this._vao.dispose();
  }
  _ensureVAO(e6) {
    return null == this._buffers ? null : (null == this._vao && (this._vao = this._createVAO(e6, this._buffers)), this._ensureVertexData(this._vao, this._buffers), this._vao);
  }
  _createVAO(e6, t7) {
    const r7 = this._createDataBuffer(t7);
    return this._dirty = false, new r6(e6, h2, { data: r4(b) }, { data: c3.createVertex(e6, F.STATIC_DRAW, r7) });
  }
  _ensureVertexData(e6, t7) {
    var _a;
    if (!this._dirty)
      return;
    const r7 = this._createDataBuffer(t7);
    (_a = e6.vertexBuffers.data) == null ? void 0 : _a.setData(r7), this._dirty = false;
  }
  _numberOfRenderVertices(e6) {
    return 3 * (2 * (e6.length / 3 - 1));
  }
  _createDataBuffer(r7) {
    const s2 = r7.reduce((e6, t7) => e6 + this._numberOfRenderVertices(t7), 0);
    this._count = s2;
    const i3 = b.createBuffer(s2), o4 = this._origin;
    let n4 = 0, u2 = 0;
    for (const f5 of r7) {
      for (let r8 = 0; r8 < f5.length; r8 += 3) {
        const s3 = o(d, f5[r8], f5[r8 + 1], f5[r8 + 2]);
        0 === r8 ? u2 = this._renderCoordsHelper.getAltitude(s3) : this._renderCoordsHelper.setAltitude(s3, u2);
        const a5 = this._renderCoordsHelper.worldUpAtPosition(s3, _3), l2 = n4 + 2 * r8, h3 = e2(d, s3, o4);
        if (r8 < f5.length - 3) {
          i3.up.setVec(l2, a5), i3.up.setVec(l2 + 3, a5), i3.up.setVec(l2 + 5, a5);
          for (let e6 = 0; e6 < 6; e6++)
            i3.start.setVec(l2 + e6, h3);
          i3.extrude.setValues(l2, 0, -1), i3.extrude.setValues(l2 + 1, 1, -1), i3.extrude.setValues(l2 + 2, 1, 1), i3.extrude.setValues(l2 + 3, 0, -1), i3.extrude.setValues(l2 + 4, 1, 1), i3.extrude.setValues(l2 + 5, 0, 1);
        }
        if (r8 > 0) {
          i3.up.setVec(l2 - 2, a5), i3.up.setVec(l2 - 4, a5), i3.up.setVec(l2 - 5, a5);
          for (let e6 = -6; e6 < 0; e6++)
            i3.end.setVec(l2 + e6, h3);
        }
      }
      n4 += this._numberOfRenderVertices(f5);
    }
    return i3.buffer;
  }
};
var _3 = n();
var d = n();
var b = H().vec3f(O.START).vec3f(O.END).vec3f(O.UP).vec2f(O.EXTRUDE);

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LaserlinePathTechniqueConfiguration.js
var e5 = class extends t5 {
  constructor() {
    super(...arguments), this.contrastControlEnabled = false;
  }
};
e([r5()], e5.prototype, "contrastControlEnabled", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LaserlineTechnique.js
var f4 = class extends n2 {
  constructor() {
    super(...arguments), this.innerColor = r(1, 1, 1), this.innerWidth = 1, this.glowColor = r(1, 0.5, 0), this.glowWidth = 8, this.glowFalloff = 8, this.globalAlpha = 0.75, this.globalAlphaContrastBoost = 2, this.angleCutoff = M(6), this.pointDistanceOrigin = n(), this.pointDistanceTarget = n(), this.lineVerticalPlaneSegment = v(), this.intersectsLineSegment = v(), this.intersectsLineRadius = 3, this.heightManifoldTarget = n(), this.lineStartWorld = n(), this.lineEndWorld = n();
  }
};
var p3 = class _p extends e4 {
  initializeProgram(e6) {
    return new i2(e6.rctx, _p.shader.get().build(this.configuration), E2);
  }
  initializePipeline() {
    return W({ blending: s(R.ONE, R.ONE_MINUS_SRC_ALPHA), colorWrite: _ });
  }
};
p3.shader = new t4(_2, () => import("./Laserlines.glsl-AQFRYVO3.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LaserlineTechniqueConfiguration.js
var n3 = class extends e5 {
  constructor() {
    super(...arguments), this.heightManifoldEnabled = false, this.pointDistanceEnabled = false, this.lineVerticalPlaneEnabled = false, this.intersectsLineEnabled = false, this.spherical = false;
  }
};
e([r5()], n3.prototype, "heightManifoldEnabled", void 0), e([r5()], n3.prototype, "pointDistanceEnabled", void 0), e([r5()], n3.prototype, "lineVerticalPlaneEnabled", void 0), e([r5()], n3.prototype, "intersectsLineEnabled", void 0), e([r5()], n3.prototype, "spherical", void 0);

// node_modules/@arcgis/core/views/3d/support/LaserLineRenderer.js
var V = class {
  constructor(e6, t7 = { contrastControlEnabled: false }) {
    this._config = t7, this._technique = null, this._heightManifoldEnabled = false, this._pointDistanceEnabled = false, this._lineVerticalPlaneEnabled = false, this._intersectsLineEnabled = false, this._intersectsLineInfinite = false, this._viewingMode = l.Local, this._pathVerticalPlaneEnabled = false, this._pathVerticalPlaneData = null, this._pathTechnique = null, this.canRender = true, this._passParameters = L(e6, new f4());
  }
  get renderSlots() {
    return [this._config.contrastControlEnabled ? E3.LASERLINES_CONTRAST_CONTROL : E3.LASERLINES];
  }
  get needsLinearDepth() {
    return true;
  }
  get heightManifoldEnabled() {
    return this._heightManifoldEnabled;
  }
  set heightManifoldEnabled(e6) {
    this._heightManifoldEnabled !== e6 && (this._heightManifoldEnabled = e6, this._requestRender());
  }
  get heightManifoldTarget() {
    return this._passParameters.heightManifoldTarget;
  }
  set heightManifoldTarget(e6) {
    r2(this._passParameters.heightManifoldTarget, e6), this._requestRender();
  }
  get pointDistanceEnabled() {
    return this._pointDistanceEnabled;
  }
  set pointDistanceEnabled(e6) {
    e6 !== this._pointDistanceEnabled && (this._pointDistanceEnabled = e6, this._requestRender());
  }
  get pointDistanceTarget() {
    return this._passParameters.pointDistanceTarget;
  }
  set pointDistanceTarget(e6) {
    r2(this._passParameters.pointDistanceTarget, e6), this._requestRender();
  }
  get pointDistanceOrigin() {
    return this._passParameters.pointDistanceOrigin;
  }
  set pointDistanceOrigin(e6) {
    r2(this._passParameters.pointDistanceOrigin, e6), this._requestRender();
  }
  get lineVerticalPlaneEnabled() {
    return this._lineVerticalPlaneEnabled;
  }
  set lineVerticalPlaneEnabled(e6) {
    e6 !== this._lineVerticalPlaneEnabled && (this._lineVerticalPlaneEnabled = e6, this._requestRender());
  }
  get lineVerticalPlaneSegment() {
    return this._passParameters.lineVerticalPlaneSegment;
  }
  set lineVerticalPlaneSegment(e6) {
    h(e6, this._passParameters.lineVerticalPlaneSegment), this._requestRender();
  }
  get intersectsLineEnabled() {
    return this._intersectsLineEnabled;
  }
  set intersectsLineEnabled(e6) {
    e6 !== this._intersectsLineEnabled && (this._intersectsLineEnabled = e6, this._requestRender());
  }
  get intersectsLineSegment() {
    return this._passParameters.intersectsLineSegment;
  }
  set intersectsLineSegment(e6) {
    h(e6, this._passParameters.intersectsLineSegment), this._requestRender();
  }
  get intersectsLineRadius() {
    return this._passParameters.intersectsLineRadius;
  }
  set intersectsLineRadius(e6) {
    e6 !== this._passParameters.intersectsLineRadius && (this._passParameters.intersectsLineRadius = e6, this._requestRender());
  }
  get intersectsLineInfinite() {
    return this._intersectsLineInfinite;
  }
  set intersectsLineInfinite(e6) {
    e6 !== this._intersectsLineInfinite && (this._intersectsLineInfinite = e6, this._requestRender());
  }
  get viewingMode() {
    return this._viewingMode;
  }
  set viewingMode(e6) {
    e6 !== this._viewingMode && (this._viewingMode = e6, this._requestRender());
  }
  get pathVerticalPlaneEnabled() {
    return this._pathVerticalPlaneEnabled;
  }
  set pathVerticalPlaneEnabled(e6) {
    e6 !== this._pathVerticalPlaneEnabled && (this._pathVerticalPlaneEnabled = e6, null != this._pathVerticalPlaneData && this._requestRender());
  }
  set pathVerticalPlaneVertices(e6) {
    null == this._pathVerticalPlaneData && (this._pathVerticalPlaneData = new c4(this._passParameters.renderCoordsHelper)), this._pathVerticalPlaneData.vertices = e6, this.pathVerticalPlaneEnabled && this._requestRender();
  }
  set pathVerticalPlaneBuffers(e6) {
    null == this._pathVerticalPlaneData && (this._pathVerticalPlaneData = new c4(this._passParameters.renderCoordsHelper)), this._pathVerticalPlaneData.buffers = e6, this.pathVerticalPlaneEnabled && this._requestRender();
  }
  setParameters(e6) {
    N(this._passParameters, e6) && this._requestRender();
  }
  initializeRenderContext(e6) {
    this._context = e6;
    const t7 = e6.renderContext.rctx;
    this._quadVAO = f2(t7), this._techniqueRepository = e6.techniqueRepository, this._techniqueConfig = new n3();
    const i3 = new e5();
    i3.contrastControlEnabled = this._config.contrastControlEnabled, this._pathTechnique = this._techniqueRepository.acquire(m3, i3);
  }
  uninitializeRenderContext() {
    this._quadVAO = t(this._quadVAO), this._technique = f(this._technique), this._pathVerticalPlaneData = t(this._pathVerticalPlaneData), this._pathTechnique = f(this._pathTechnique);
  }
  prepareTechnique() {
    return this.heightManifoldEnabled || this.pointDistanceEnabled || this.lineVerticalPlaneSegment || this.intersectsLineEnabled ? (this._techniqueConfig.heightManifoldEnabled = this.heightManifoldEnabled, this._techniqueConfig.lineVerticalPlaneEnabled = this.lineVerticalPlaneEnabled, this._techniqueConfig.pointDistanceEnabled = this.pointDistanceEnabled, this._techniqueConfig.intersectsLineEnabled = this.intersectsLineEnabled, this._techniqueConfig.contrastControlEnabled = this._config.contrastControlEnabled, this._techniqueConfig.spherical = this._viewingMode === l.Global, this._technique = this._techniqueRepository.releaseAndAcquire(p3, this._techniqueConfig, this._technique), this._technique) : this._pathTechnique;
  }
  render(e6, t7) {
    (this.heightManifoldEnabled || this.pointDistanceEnabled || this.lineVerticalPlaneSegment || this.intersectsLineEnabled) && this._renderUnified(e6, t7), this.pathVerticalPlaneEnabled && this._renderPath(e6);
  }
  _renderUnified(e6, t7) {
    const i3 = e6.rctx;
    this._updatePassParameters(e6), i3.bindTechnique(t7, this._passParameters, e6.bindParameters), i3.bindVAO(this._quadVAO), i3.drawArrays(E.TRIANGLE_STRIP, 0, 4);
  }
  _renderPath(e6) {
    if (null == this._pathVerticalPlaneData || null == this._pathTechnique)
      return;
    const t7 = e6.rctx, i3 = this._pathTechnique;
    t7.bindTechnique(i3, { ...this._passParameters, origin: this._pathVerticalPlaneData.origin }, e6.bindParameters), this._pathVerticalPlaneData.draw(e6.rctx);
  }
  _updatePassParameters(e6) {
    if (!this._intersectsLineEnabled)
      return;
    const t7 = e6.bindParameters.camera;
    if (this._intersectsLineInfinite) {
      if (y(p(this._passParameters.intersectsLineSegment.origin, this._passParameters.intersectsLineSegment.vector), R2), R2.c0 = -Number.MAX_VALUE, !m2(t7.frustum, R2))
        return;
      p2(R2, this._passParameters.lineStartWorld), g(R2, this._passParameters.lineEndWorld);
    } else
      r2(this._passParameters.lineStartWorld, this._passParameters.intersectsLineSegment.origin), u(this._passParameters.lineEndWorld, this._passParameters.intersectsLineSegment.origin, this._passParameters.intersectsLineSegment.vector);
  }
  _requestRender() {
    this._context && this._context.requestRender();
  }
};
var R2 = a2();

// node_modules/@arcgis/core/views/3d/interactive/visualElements/LaserlineVisualElement.js
var c5 = class extends t6 {
  constructor(e6) {
    super(e6.view), this._angleCutoff = C, this._style = {}, this._heightManifoldTarget = n(), this._heightManifoldEnabled = false, this._intersectsLine = v(), this._intersectsLineEnabled = false, this._intersectsLineInfinite = false, this._lineVerticalPlaneSegment = null, this._pathVerticalPlaneBuffers = null, this._pointDistanceLine = null, this.applyProps(e6);
  }
  get testData() {
    return this._renderer;
  }
  createResources() {
    this._ensureRenderer();
  }
  destroyResources() {
    this._disposeRenderer();
  }
  updateVisibility() {
    this._syncRenderer(), this._syncHeightManifold(), this._syncIntersectsLine(), this._syncPathVerticalPlane(), this._syncLineVerticalPlane(), this._syncPointDistance();
  }
  get angleCutoff() {
    return this._angleCutoff;
  }
  set angleCutoff(e6) {
    this._angleCutoff !== e6 && (this._angleCutoff = e6, this._syncAngleCutoff());
  }
  get style() {
    return this._style;
  }
  set style(e6) {
    this._style = e6, this._syncStyle();
  }
  get heightManifoldTarget() {
    return this._heightManifoldEnabled ? this._heightManifoldTarget : null;
  }
  set heightManifoldTarget(t7) {
    null != t7 ? (r2(this._heightManifoldTarget, t7), this._heightManifoldEnabled = true) : this._heightManifoldEnabled = false, this._syncRenderer(), this._syncHeightManifold();
  }
  set intersectsWorldUpAtLocation(e6) {
    if (null == e6)
      return void (this.intersectsLine = null);
    const t7 = this.view.renderCoordsHelper.worldUpAtPosition(e6, _4);
    this.intersectsLine = m(e6, t7), this.intersectsLineInfinite = true;
  }
  get intersectsLine() {
    return this._intersectsLineEnabled ? this._intersectsLine : null;
  }
  set intersectsLine(e6) {
    null != e6 ? (h(e6, this._intersectsLine), this._intersectsLineEnabled = true) : this._intersectsLineEnabled = false, this._syncIntersectsLine(), this._syncRenderer();
  }
  get intersectsLineInfinite() {
    return this._intersectsLineInfinite;
  }
  set intersectsLineInfinite(e6) {
    this._intersectsLineInfinite = e6, this._syncIntersectsLineInfinite();
  }
  get lineVerticalPlaneSegment() {
    return this._lineVerticalPlaneSegment;
  }
  set lineVerticalPlaneSegment(e6) {
    this._lineVerticalPlaneSegment = null != e6 ? h(e6) : null, this._syncLineVerticalPlane(), this._syncRenderer();
  }
  get pathVerticalPlane() {
    return this._pathVerticalPlaneBuffers;
  }
  set pathVerticalPlane(e6) {
    this._pathVerticalPlaneBuffers = e6, this._syncPathVerticalPlane(), this._syncLineVerticalPlane(), this._syncPointDistance(), this._syncRenderer();
  }
  get pointDistanceLine() {
    return this._pointDistanceLine;
  }
  set pointDistanceLine(e6) {
    this._pointDistanceLine = null != e6 ? { origin: t2(e6.origin), target: e6.target ? t2(e6.target) : null } : null, this._syncPointDistance(), this._syncRenderer();
  }
  _syncRenderer() {
    this.attached && this.visible && (this._intersectsLineEnabled || this._heightManifoldEnabled || null != this._pointDistanceLine || null != this._pathVerticalPlaneBuffers) ? this._ensureRenderer() : this._disposeRenderer();
  }
  _ensureRenderer() {
    null == this._renderer && (this._renderer = new V({ renderCoordsHelper: this.view.renderCoordsHelper }, { contrastControlEnabled: true }), this._renderer.viewingMode = this.view.state.viewingMode, this._syncStyle(), this._syncHeightManifold(), this._syncIntersectsLine(), this._syncIntersectsLineInfinite(), this._syncPathVerticalPlane(), this._syncLineVerticalPlane(), this._syncPointDistance(), this._syncAngleCutoff(), this.view._stage && this.view._stage.addRenderPlugin(this._renderer.renderSlots, this._renderer));
  }
  _syncStyle() {
    null != this._renderer && (this._renderer.setParameters(this._style), null != this._style.intersectsLineRadius && (this._renderer.intersectsLineRadius = this._style.intersectsLineRadius));
  }
  _syncAngleCutoff() {
    null != this._renderer && this._renderer.setParameters({ angleCutoff: this._angleCutoff });
  }
  _syncHeightManifold() {
    null != this._renderer && (this._renderer.heightManifoldEnabled = this._heightManifoldEnabled && this.visible, this._heightManifoldEnabled && (this._renderer.heightManifoldTarget = this._heightManifoldTarget));
  }
  _syncIntersectsLine() {
    null != this._renderer && (this._renderer.intersectsLineEnabled = this._intersectsLineEnabled && this.visible, this._intersectsLineEnabled && (this._renderer.intersectsLineSegment = this._intersectsLine));
  }
  _syncIntersectsLineInfinite() {
    null != this._renderer && (this._renderer.intersectsLineInfinite = this._intersectsLineInfinite);
  }
  _syncPathVerticalPlane() {
    null != this._renderer && (this._renderer.pathVerticalPlaneEnabled = null != this._pathVerticalPlaneBuffers && this.visible, null != this._pathVerticalPlaneBuffers && (this._renderer.pathVerticalPlaneBuffers = this._pathVerticalPlaneBuffers));
  }
  _syncLineVerticalPlane() {
    null != this._renderer && (this._renderer.lineVerticalPlaneEnabled = null != this._lineVerticalPlaneSegment && this.visible, null != this._lineVerticalPlaneSegment && (this._renderer.lineVerticalPlaneSegment = this._lineVerticalPlaneSegment));
  }
  _syncPointDistance() {
    if (null == this._renderer)
      return;
    const e6 = this._pointDistanceLine, t7 = null != e6;
    this._renderer.pointDistanceEnabled = t7 && null != e6.target && this.visible, t7 && (this._renderer.pointDistanceOrigin = e6.origin, null != e6.target && (this._renderer.pointDistanceTarget = e6.target));
  }
  _disposeRenderer() {
    null != this._renderer && this.view._stage && (this.view._stage.removeRenderPlugin(this._renderer), this._renderer = null);
  }
};
var _4 = n();

// node_modules/@arcgis/core/views/3d/interactive/visualElements/PointVisualElement.js
var y2 = class {
  constructor(e6) {
    this.view = null, this._geometry = null, this._size = 3, this._color = r3(1, 0, 1, 1), this._pixelSnappingEnabled = true, this._primitive = "square", this._outlineSize = 1, this._outlineColor = r3(1, 1, 1, 1), this._elevationInfo = null, this._resources = new a4({ view: e6.view, createResources: (e7) => this._createResources(e7), destroyResources: (e7) => this._destroyResources(e7), recreateGeometry: (e7, t8) => {
      e7.geometry = this._recreateGeometry(t8, e7.material);
    } });
    let t7 = true;
    for (const r7 in e6)
      r7 in this ? "attached" === r7 ? t7 = e6[r7] ?? false : this[r7] = e6[r7] : console.error("Cannot set unknown property", r7);
    this.attached = t7;
  }
  destroy() {
    this._resources.destroy();
  }
  get visible() {
    return this._resources.visible;
  }
  set visible(e6) {
    this._resources.visible = e6;
  }
  get attached() {
    return this._resources.attached;
  }
  set attached(e6) {
    this._resources.attached = e6;
  }
  get geometry() {
    return this._geometry;
  }
  set geometry(e6) {
    this._geometry = e6, this._resources.recreateGeometry();
  }
  get size() {
    return this._size;
  }
  set size(e6) {
    if (e6 !== this._size) {
      const t7 = this._preferredTextureSize;
      this._size = e6, t7 < this._preferredTextureSize ? null != this._resources && this._resources.recreate() : this._updateSizeAttribute();
    }
  }
  get color() {
    return this._color;
  }
  set color(e6) {
    D(e6, this._color) || (a(this._color, e6), this._updateMaterial());
  }
  get pixelSnappingEnabled() {
    return this._pixelSnappingEnabled;
  }
  set pixelSnappingEnabled(e6) {
    this._pixelSnappingEnabled !== e6 && (this._pixelSnappingEnabled = e6, this._updateMaterial());
  }
  get primitive() {
    return this._primitive;
  }
  set primitive(e6) {
    this._primitive !== e6 && (this._primitive = e6, null != this._resources && this._resources.recreate());
  }
  get outlineSize() {
    return this._outlineSize;
  }
  set outlineSize(e6) {
    e6 !== this._outlineSize && (this._outlineSize = e6, this._updateMaterial());
  }
  get outlineColor() {
    return this._outlineColor;
  }
  set outlineColor(e6) {
    D(e6, this._outlineColor) || (a(this._outlineColor, e6), this._updateMaterial());
  }
  get elevationInfo() {
    return this._elevationInfo;
  }
  set elevationInfo(e6) {
    this._elevationInfo = e6, this._resources && this._resources.recreateGeometry();
  }
  _updateMaterial() {
    const e6 = this._resources.resources;
    null != e6 && e6.material.setParameters(this._materialParameters(e6.texture.id));
  }
  _updateSizeAttribute() {
    const e6 = this._resources.resources, t7 = this._resources.object;
    if (null == e6 || null == t7)
      return;
    const r7 = e6.geometry;
    if (null == r7)
      return;
    const i3 = r7.getMutableAttribute(O.SIZE).data, s2 = this._geometrySize;
    i3[0] = s2, i3[1] = s2, t7.geometryVertexAttrsUpdated(t7.geometries[0]);
  }
  _materialParameters(e6) {
    return { color: this._color, textureIsSignedDistanceField: true, distanceFieldBoundingBox: S, occlusionTest: false, outlineColor: this._outlineColor, outlineSize: this._outlineSize, textureId: e6, polygonOffset: false, shaderPolygonOffset: 0, drawInSecondSlot: true, depthEnabled: false, pixelSnappingEnabled: this.pixelSnappingEnabled };
  }
  get _geometrySize() {
    return this._size / v2;
  }
  _recreateGeometry(e6, t7) {
    const r7 = this._createRenderGeometry(t7);
    return null != r7 && e6.addGeometry(r7), r7;
  }
  _createResources(e6) {
    const t7 = o3(this._primitive, this._preferredTextureSize), r7 = new K(this._materialParameters(t7.id)), i3 = this._recreateGeometry(e6, r7);
    return { material: r7, texture: t7, geometry: i3, forEach(e7) {
      e7(t7), e7(r7), null != this.geometry && e7(this.geometry);
    } };
  }
  _destroyResources(e6) {
    e6.geometry = null, e6.material.dispose(), e6.texture.dispose();
  }
  get _preferredTextureSize() {
    return i(e3(2 * this._geometrySize), 16, 128);
  }
  calculateMapBounds(e6) {
    if (null == this._resources.resources || null == this._resources.resources.geometry)
      return false;
    const t7 = this._resources.resources.geometry.vertexAttributes.get(O.POSITION);
    return Hn(t7.data, this.view.renderCoordsHelper.spatialReference, b2, this.view.spatialReference), c(e6, b2), true;
  }
  _createRenderGeometry(e6) {
    const t7 = this.geometry;
    if (null == t7)
      return null;
    const { renderCoordsHelper: i3, elevationProvider: s2 } = this.view, o4 = f3(t7, s2, o2.fromElevationInfo(this.elevationInfo), i3), n4 = o(c2.get(), t7.x, t7.y, o4), a5 = c2.get();
    Hn(n4, t7.spatialReference, a5, i3.spatialReference);
    const c6 = this._geometrySize;
    return ot(e6, null, a5, null, [c6, c6], [0, 0, 0, 1]);
  }
};
var v2 = a3;
var S = [v2 / 2, v2 / 2, 1 - v2 / 2, 1 - v2 / 2];
var b2 = n();

export {
  c5 as c,
  y2 as y
};
//# sourceMappingURL=chunk-V7DVK56X.js.map
