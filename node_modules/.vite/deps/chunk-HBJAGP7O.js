import {
  o as o3
} from "./chunk-6OVHX5ZO.js";
import {
  h as h5
} from "./chunk-FLA7Z76H.js";
import {
  A as A3,
  L as L2,
  L2 as L3,
  N,
  P as P2,
  a as a6,
  e as e5,
  e2 as e6,
  e3 as e7,
  i3 as i5,
  l2 as l5,
  m as m5,
  n as n4,
  r as r3
} from "./chunk-YOWAMJJI.js";
import {
  u as u4
} from "./chunk-PFDC65N2.js";
import {
  a as a5,
  d2 as d3
} from "./chunk-6WY3ZZYN.js";
import {
  c as c4,
  w as w2
} from "./chunk-CS6BZGQO.js";
import {
  f as f3
} from "./chunk-XXN3TEOU.js";
import {
  c as c5
} from "./chunk-DBIFU6GO.js";
import {
  A as A4,
  t as t9
} from "./chunk-V33FVMPT.js";
import {
  C as C4
} from "./chunk-2EO2WRP7.js";
import {
  t as t8
} from "./chunk-VYGC2LVC.js";
import {
  t as t6
} from "./chunk-JP7O2ZWE.js";
import {
  I as I2,
  f as f2,
  z
} from "./chunk-2XKILFME.js";
import {
  t as t4
} from "./chunk-TDPKDZC3.js";
import {
  t as t5
} from "./chunk-M5UHI5WR.js";
import {
  t as t7
} from "./chunk-BFVDDR4R.js";
import {
  S as S5,
  c as c3,
  u as u3
} from "./chunk-EG6CFIHA.js";
import {
  A as A2
} from "./chunk-XIYY37WZ.js";
import {
  a as a4,
  y as y2
} from "./chunk-Z3GCSCQI.js";
import {
  e as e4,
  i as i3
} from "./chunk-CGJNVOU3.js";
import {
  r as r2
} from "./chunk-ZWFMUHG3.js";
import {
  S as S4,
  a as a3
} from "./chunk-EAGDM3GO.js";
import {
  o as o4
} from "./chunk-CEUJOC5P.js";
import {
  C as C3,
  F,
  I,
  g as g2
} from "./chunk-KRCNIFX2.js";
import {
  d as d2
} from "./chunk-VMTVUE47.js";
import {
  Cn,
  Hn,
  _n,
  dn,
  kn,
  yn
} from "./chunk-BNBT4QTW.js";
import {
  S as S3,
  b as b2,
  b2 as b3,
  c,
  c2,
  h as h3,
  h2 as h4,
  m3,
  u as u2
} from "./chunk-JNDFAMXY.js";
import {
  B,
  E as E2,
  P,
  S as S2,
  Z,
  h as h2,
  i as i2
} from "./chunk-AQ7R6V4L.js";
import {
  i as i4
} from "./chunk-4BXK4H4L.js";
import {
  m as m4
} from "./chunk-DTYFMKYK.js";
import {
  _
} from "./chunk-SVCGLUNW.js";
import {
  b
} from "./chunk-3KEIFTQ6.js";
import {
  C as C2,
  E,
  e as e3,
  i,
  l as l3,
  m as m2,
  p
} from "./chunk-EKJ2DJIR.js";
import {
  g,
  o as o2,
  r,
  u
} from "./chunk-TPJLFGOT.js";
import {
  n as n2
} from "./chunk-CQX57DED.js";
import {
  M
} from "./chunk-3VUFACNT.js";
import {
  x2 as x
} from "./chunk-ZEEBL7ZN.js";
import {
  A2 as A,
  S2 as S,
  T2 as T
} from "./chunk-RTDN6KAT.js";
import {
  U,
  a as a2,
  f,
  h,
  j as j2,
  l as l4,
  w
} from "./chunk-H7RDAEPY.js";
import {
  n as n3
} from "./chunk-7KH4CLS5.js";
import {
  m,
  t2,
  v,
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a,
  e as e2,
  l as l2
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  n,
  t as t3
} from "./chunk-3R7FAT25.js";
import {
  C,
  d,
  j,
  s as s3
} from "./chunk-7I33FAWS.js";
import {
  l,
  o,
  t
} from "./chunk-DWOEYHKS.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-HMVAPW5X.js";
import {
  L,
  R,
  has
} from "./chunk-JZJWZ6DN.js";

// node_modules/@arcgis/core/renderers/support/rendererConversion.js
function t10(r5) {
  return null == r5 || "simple" === r5.type || "unique-value" === r5.type || "class-breaks" === r5.type || "dictionary" === r5.type || "heatmap" === r5.type;
}
function s4(r5, n5) {
  if (null == r5)
    return null;
  if (!t10(r5))
    return new s2("renderer-conversion-3d:unsupported-renderer", `Unsupported renderer of type '${r5.type || r5.declaredClass}'`, { renderer: r5 });
  switch (r5.type) {
    case "simple":
      return u5(r5);
    case "unique-value":
      return i6(r5, n5);
    case "class-breaks":
      return a7(r5);
    case "dictionary":
    case "heatmap":
      return null;
  }
  return null;
}
function l6(r5, n5) {
  if (!n5)
    return null;
  let o5;
  if (o5 = Array.isArray(n5) ? n5 : [n5], o5.length > 0) {
    const n6 = o5.map((r6) => r6.details.symbol.type || r6.details.symbol.declaredClass).filter((r6) => !!r6);
    n6.sort();
    const t13 = [];
    return n6.forEach((r6, e9) => {
      0 !== e9 && r6 === n6[e9 - 1] || t13.push(r6);
    }), new s2("renderer-conversion-3d:unsupported-symbols", `Renderer contains symbols (${t13.join(", ")}) which are not supported in 3D`, { renderer: r5, symbolErrors: o5 });
  }
  return null;
}
function u5(r5) {
  return l6(r5, S4(r5.symbol).error);
}
function i6(e9, t13) {
  var _a;
  const s8 = { ...a3, ...t13 }, u10 = (_a = e9.uniqueValueInfos) == null ? void 0 : _a.map((r5) => S4(r5.symbol, s8).error).filter(R), i7 = S4(e9.defaultSymbol, s8);
  return i7.error && (u10 == null ? void 0 : u10.unshift(i7.error)), l6(e9, u10);
}
function a7(e9) {
  const o5 = e9.classBreakInfos.map((r5) => S4(r5.symbol).error).filter(R), t13 = S4(e9.defaultSymbol);
  return t13.error && o5.unshift(t13.error), l6(e9, o5);
}

// node_modules/@arcgis/core/symbols/support/defaults3D.js
var y3 = h4.fromSimpleMarkerSymbol(S5);
var a8 = b3.fromSimpleLineSymbol(u3);
var u6 = S3.fromSimpleFillSymbol(c3);
var S6 = new c2({ symbolLayers: [new h3({ material: { color: e4 }, edges: new c({ size: "1px", color: i3 }) })] });
function c6(o5) {
  if (null == o5)
    return null;
  switch (o5.type) {
    case "mesh":
      return S6;
    case "point":
    case "multipoint":
      return y3;
    case "polyline":
      return a8;
    case "polygon":
    case "extent":
      return u6;
  }
  return null;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DFeatureStore.js
var u7 = i2();
var d4 = class extends m {
  constructor(t13) {
    super(t13), this.events = new n3(), this.hasZ = null, this.hasM = null, this.objectIdField = null, this.featureAdapter = { getAttribute: (t14, e9) => "graphic" in t14 ? t14.graphic.attributes[e9] : o3.getAttribute(t14, e9), getAttributes: (t14) => "graphic" in t14 ? t14.graphic.attributes : o3.getAttributes(t14), getObjectId: (t14) => "graphic" in t14 ? I2(t14.graphic, this.objectIdField) ?? void 0 : o3.getObjectId(t14), getGeometry: (t14) => "graphic" in t14 ? t14.getAsOptimizedGeometry(this.hasZ, this.hasM) : o3.getGeometry(t14), getCentroid: (t14, e9) => {
      if ("graphic" in t14) {
        let r5 = null;
        null != t14.centroid ? r5 = t14.centroid : "point" === t14.graphic.geometry.type && _n(t14.graphic.geometry, l7, this.viewSpatialReference) && (r5 = l7);
        const o5 = new Array(2 + (e9.hasZ ? 1 : 0) + (e9.hasM ? 1 : 0));
        return null == r5 ? (o5[0] = 0, o5[1] = 0, o5[2] = 0, o5[3] = 0) : (o5[0] = r5.x, o5[1] = r5.y, e9.hasZ && (o5[2] = r5.hasZ ? r5.z : 0), e9.hasM && (o5[e9.hasZ ? 3 : 2] = r5.hasM ? r5.m : 0)), new t5([], o5);
      }
      return o3.getCentroid(t14, e9);
    }, cloneWithGeometry: (t14, e9) => "graphic" in t14 ? new t4(e9, this.featureAdapter.getAttributes(t14), null, this.featureAdapter.getObjectId(t14)) : o3.cloneWithGeometry(t14, e9) };
  }
  forEachInBounds(t13, e9) {
    this.getSpatialIndex().forEachInBounds(t13, e9);
  }
  forEachBounds(t13, e9) {
    const r5 = this.getSpatialIndex();
    for (const o5 of t13) {
      const t14 = this.featureAdapter.getObjectId(o5);
      null != r5.getBounds(t14, u7) && e9(u7);
    }
  }
};
e([y({ constructOnly: true })], d4.prototype, "getSpatialIndex", void 0), e([y({ constructOnly: true })], d4.prototype, "forEach", void 0), e([y({ constructOnly: true })], d4.prototype, "hasZ", void 0), e([y({ constructOnly: true })], d4.prototype, "hasM", void 0), e([y({ constructOnly: true })], d4.prototype, "objectIdField", void 0), e([y({ constructOnly: true })], d4.prototype, "viewSpatialReference", void 0), e([y({ constructOnly: true })], d4.prototype, "featureSpatialReference", void 0), d4 = e([a("esri.views.3d.layers.graphics.Graphics3DFeatureStore")], d4);
var l7 = { type: "point", x: 0, y: 0, hasZ: false, hasM: false, spatialReference: null };

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DPointSymbol.js
var s5 = class extends m5 {
  constructor(r5, o5, t13) {
    super(r5, o5, t13), this._calloutSymbolLayer = null, this.symbol.hasVisibleCallout() && (this._calloutSymbolLayer = e7(this.symbol, o5));
  }
  async doLoad(o5) {
    var _a;
    const a10 = this._calloutSymbolLayer ? _(this._calloutSymbolLayer.load()) : null;
    try {
      await super.doLoad(o5), s3(o5);
    } catch (l10) {
      throw (_a = this._calloutSymbolLayer) == null ? void 0 : _a.abortLoad(), l10;
    }
    a10 && await a10;
  }
  destroy() {
    super.destroy(), this._calloutSymbolLayer = l(this._calloutSymbolLayer);
  }
  createGraphics3DGraphic(r5, o5) {
    const t13 = super.createGraphics3DGraphic(r5, o5);
    if (null != this._calloutSymbolLayer && null != t13) {
      const o6 = this._createCalloutGraphic(r5);
      o6 && t13.setCalloutGraphic(o6);
    }
    return t13;
  }
  globalPropertyChanged(r5, o5) {
    return !!super.globalPropertyChanged(r5, o5) && (!this._calloutSymbolLayer || this._calloutSymbolLayer.globalPropertyChanged(r5, o5, (r6) => r6.calloutLayer));
  }
  updateGeometry(r5, o5) {
    const t13 = super.updateGeometry(r5, o5);
    if (t13 && this._calloutSymbolLayer) {
      const t14 = r5.calloutLayer;
      if (t14)
        return this._calloutSymbolLayer.updateGeometry(t14, o5);
    }
    return t13;
  }
  _createCalloutGraphic(r5) {
    const o5 = r5.renderingInfo;
    return r5.renderingInfo = new L3(o5.renderer, o5.symbol), this._calloutSymbolLayer.createGraphics3DGraphic(r5);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DSymbolFactory.js
function t11(t13, i7, n5) {
  return "point-3d" === t13.type ? new s5(t13, i7, n5) : new m5(t13, i7, n5);
}

// node_modules/@arcgis/core/views/3d/layers/graphics/GraphicStateTracking.js
var s6 = class {
  constructor(t13) {
    this._graphicsCore = t13, this._idToState = /* @__PURE__ */ new Map(), this._states = /* @__PURE__ */ new Set();
    const i7 = t13.owner.layer && t13.owner.layer.objectIdField;
    i7 ? (this._getGraphicId = (t14) => I2(t14, i7), this._getGraphics3DGraphicById = (t14) => this._graphicsCore.getGraphics3DGraphicByObjectId(t14)) : (this._getGraphicId = (t14) => t14.uid, this._getGraphics3DGraphicById = (t14) => this._graphicsCore.getGraphics3DGraphicById(t14));
  }
  destroy() {
    this._idToState.clear(), this._states.forEach((t13, i7) => this.remove(i7));
  }
  add(t13) {
    const e9 = e2(() => this.remove(t13));
    if (this._states.has(t13))
      return e9;
    const s8 = this._getGraphicId(t13.graphic), a10 = this._getGraphics3DGraphicById(s8);
    this._states.has(t13) || this._states.add(t13);
    return this._ensureStateList(s8).push(t13), t13.displaying = null != a10 && a10.isVisible(), t13.isDraped = null != a10 && a10.isDraped, t13.tracking = true, null != a10 && t13.emit("changed"), e9;
  }
  remove(i7) {
    if (this._states.has(i7)) {
      if (this._idToState.size) {
        const e9 = this._getGraphicId(i7.graphic), s8 = this._idToState.get(e9);
        s8 && (L(s8, i7), 0 === s8.length && this._idToState.delete(e9));
      }
      this._states.delete(i7), i7.tracking = false, i7.displaying = false;
    }
  }
  addGraphic(t13) {
    this._forEachState(t13, (i7) => {
      i7.displaying = t13.isVisible(), i7.isDraped = t13.isDraped, i7.emit("changed");
    });
  }
  removeGraphic(t13) {
    this._forEachState(t13, (t14) => {
      t14.displaying = false, t14.isDraped = false;
    });
  }
  updateGraphicGeometry(t13) {
    this._forEachState(t13, (t14) => t14.emit("changed"));
  }
  updateGraphicVisibility(t13) {
    this._forEachState(t13, (i7) => i7.displaying = t13.isVisible());
  }
  allGraphicsDeleted() {
    this._states.forEach((t13) => {
      t13.displaying = false;
    });
  }
  _ensureStateList(t13) {
    const i7 = this._idToState.get(t13);
    if (i7)
      return i7;
    const e9 = new Array();
    return this._idToState.set(t13, e9), e9;
  }
  _forEachState(t13, i7) {
    if (0 === this._states.size || 0 === this._idToState.size)
      return;
    const e9 = this._getGraphicId(t13.graphic), s8 = this._idToState.get(e9);
    null != s8 && s8.forEach(i7);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/SpatialIndex2D.js
var d5 = class extends m {
  constructor(t13) {
    super(t13), this._index = new h5(9, has("esri-csp-restrictions") ? (t14) => ({ minX: t14.extent[0], minY: t14.extent[1], maxX: t14.extent[2], maxY: t14.extent[3] }) : [".extent[0]", ".extent[1]", ".extent[2]", ".extent[3]"]), this._missing = /* @__PURE__ */ new Set(), this._boundsByFeature = /* @__PURE__ */ new Map(), this.spatialReference = null, this.hasZ = null, this.hasM = null, this.objectIdField = null, this.updating = false;
  }
  setup(t13) {
    this._addMany(t13);
  }
  destroy() {
    this._missing.clear(), this._index = l(this._index), this._boundsByFeature.clear(), this._boundsByFeature = null;
  }
  update() {
    this._missing.size > 0 && (this._addMany(Array.from(this._missing.values())), this.updating = false, this._missing.clear());
  }
  get updatingRemaining() {
    return this._missing.size;
  }
  queryGraphicUIDsInExtent(t13, e9, s8) {
    null != e9 && e9.equals(this.spatialReference) && (u8.minX = t13[0], u8.minY = t13[1], u8.maxX = t13[2], u8.maxY = t13[3], this.update(), this._index.search(u8, (t14) => s8(t14.graphic.uid)));
  }
  add(t13) {
    this._missing.add(t13), this.updating = true;
  }
  remove(t13) {
    if (this._missing.delete(t13))
      return void (this.updating = this._missing.size > 0);
    this._index.remove(t13);
    const e9 = I2(t13.graphic, this._get("objectIdField"));
    null != e9 && this._boundsByFeature.delete(e9);
  }
  _addMany(t13) {
    if (0 === t13.length)
      return;
    const e9 = this._get("objectIdField");
    for (const s8 of t13) {
      s8.computeExtent(this.spatialReference);
      const t14 = I2(s8.graphic, e9);
      null != t14 && this._boundsByFeature.set(t14, s8.extent);
    }
    this._index.load(t13);
  }
  clear() {
    this._index.clear(), this._missing.clear(), this._boundsByFeature.clear(), this.updating = false;
  }
  forEachInBounds(t13, e9) {
    u8.minX = t13[0], u8.minY = t13[1], u8.maxX = t13[2], u8.maxY = t13[3], this.update(), this._index.search(u8, (t14) => {
      e9(t14);
    });
  }
  getBounds(t13, e9) {
    this.update();
    const s8 = this._boundsByFeature.get(t13);
    return s8 ? Z(e9, s8) : null;
  }
};
e([y({ constructOnly: true })], d5.prototype, "spatialReference", void 0), e([y({ constructOnly: true })], d5.prototype, "hasZ", void 0), e([y({ constructOnly: true })], d5.prototype, "hasM", void 0), e([y({ constructOnly: true })], d5.prototype, "objectIdField", void 0), e([y()], d5.prototype, "updating", void 0), e([y({ readOnly: true })], d5.prototype, "updatingRemaining", null), d5 = e([a("esri.views.3d.layers.graphics.SpatialIndex2D")], d5);
var u8 = { minX: 0, minY: 0, maxX: 0, maxY: 0 };

// node_modules/@arcgis/core/views/3d/layers/support/StageLayerElevationProvider.js
var j3 = 1;
var y4 = class extends n3.EventedMixin(m) {
  get spatialReference() {
    var _a;
    return (_a = this.view) == null ? void 0 : _a.spatialReference;
  }
  constructor(e9) {
    super(e9), this._elevationOffset = 0, this._layerHandes = new t2();
  }
  initialize() {
    this._renderCoordsHelper = this.view.renderCoordsHelper, this._intersectLayers = [this.stageLayer], this._intersector = A4(this.view.state.viewingMode), this._intersector.options.store = t9.MIN;
    const e9 = this._computeLayerExtent(this.spatialReference, this.stageLayer);
    this._zmin = e9[2], this._zmax = e9[5];
    const t13 = this.stageLayer.events;
    this._layerHandes.add([t13.on("layerObjectAdded", (e10) => this._objectChanged(e10.object)), t13.on("layerObjectRemoved", (e10) => this._objectChanged(e10.object)), t13.on("objectGeometryAdded", (e10) => this._objectChanged(e10.object)), t13.on("objectGeometryRemoved", (e10) => this._objectChanged(e10.object)), t13.on("objectGeometryUpdated", (e10) => this._objectChanged(e10.object)), t13.on("objectTransformation", (e10) => this._objectChanged(e10))]);
  }
  dispose() {
    this._layerHandes.destroy();
  }
  elevationInfoChanged() {
    const e9 = null != this.layer ? this.layer.elevationInfo : null;
    if (null != e9 && "on-the-ground" !== e9.mode) {
      const t13 = T(this.layer.spatialReference), o5 = r2(e9.unit ?? "meters");
      this._elevationOffset = (e9.offset ?? 0) * o5 / t13;
    } else
      this._elevationOffset = 0;
  }
  getElevation(e9, t13, o5, r5) {
    if (x2[0] = e9, x2[1] = t13, x2[2] = o5, !this._renderCoordsHelper.toRenderCoords(x2, r5, x2))
      return s.getLogger(this).error("could not project point for elevation alignment"), null;
    const n5 = this._elevationOffset, i7 = this._zmin + n5, a10 = this._zmax + n5;
    this._renderCoordsHelper.setAltitude(C5, a10, x2), this._renderCoordsHelper.setAltitude(E3, i7, x2);
    const l10 = (e10) => !!e10.lastValidElevationBB;
    return this._intersector.reset(C5, E3, null), this._intersector.intersect(this._intersectLayers, null, j3, null, l10), this._intersector.results.min.getIntersectionPoint(x2) ? this._renderCoordsHelper.getAltitude(x2) : null;
  }
  _objectChanged(e9) {
    const t13 = this.spatialReference;
    if (!e9.lastValidElevationBB || !t13)
      return;
    P(g3);
    const o5 = e9.lastValidElevationBB;
    o5.isEmpty() || this._expandExtent(t13, o5.min, o5.max, g3);
    const { min: r5, max: s8 } = e9.boundingVolumeWorldSpace;
    this._expandExtent(t13, r5, s8, g3), S2(g3, v2), this._zmin = Math.min(this._zmin, g3[2]), this._zmax = Math.max(this._zmax, g3[5]), b4.extent = v2, b4.spatialReference = t13, this.emit("elevation-change", b4), r(o5.min, r5), r(o5.max, s8);
  }
  _computeLayerExtent(e9, t13) {
    return P(g3), null != e9 && t13.objects.forAll((t14) => this._expandExtent(e9, t14.boundingVolumeWorldSpace.min, t14.boundingVolumeWorldSpace.max, g3)), g3;
  }
  _expandExtent(e9, t13, o5, r5) {
    for (let s8 = 0; s8 < 8; ++s8)
      x2[0] = 1 & s8 ? t13[0] : o5[0], x2[1] = 2 & s8 ? t13[1] : o5[1], x2[2] = 4 & s8 ? t13[2] : o5[2], this._renderCoordsHelper.fromRenderCoords(x2, x2, e9), h2(r5, x2);
    return r5;
  }
};
e([y({ constructOnly: true })], y4.prototype, "layer", void 0), e([y({ constructOnly: true })], y4.prototype, "stageLayer", void 0), e([y({ constructOnly: true })], y4.prototype, "view", void 0), e([y()], y4.prototype, "spatialReference", null), y4 = e([a("esri.views.3d.layers.support.StageLayerElevationProvider")], y4);
var g3 = P();
var v2 = C2();
var b4 = { spatialReference: null, extent: v2, context: "scene" };
var x2 = n2();
var C5 = n2();
var E3 = n2();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DCore.js
var Ae;
var Oe = n2();
var je = i2();
var Le = "esri.views.3d.layers.graphics.Graphics3DCore";
var Ve = s.getLogger(Le);
var Fe = Ae = class extends m {
  get _viewSpatialReference() {
    return this.owner.view.spatialReference;
  }
  get spatialIndex() {
    var _a;
    return this._spatialIndex || (this._spatialIndex = new d5({ objectIdField: (_a = this.owner.layer) == null ? void 0 : _a.objectIdField, spatialReference: this._viewSpatialReference, hasZ: !!this.hasZ, hasM: !!this.hasM }), this._spatialIndex.setup(Array.from(this.graphics3DGraphics.values()))), this._spatialIndex.update(), this._spatialIndex;
  }
  get numberOfGraphics() {
    return this._numberOfGraphics;
  }
  get effectiveUpdatePolicy() {
    return null != this.currentRenderer && "dictionary" === this.currentRenderer.type ? C4.ASYNC : this._forcedUpdatePolicy ?? this.preferredUpdatePolicy;
  }
  get featureStore() {
    return this._featureStore;
  }
  get initializePromise() {
    return this._initializePromise;
  }
  get scaleVisibility() {
    return this._scaleVisibility;
  }
  get elevationAlignment() {
    return this._elevationAlignment;
  }
  get objectStates() {
    return this._objectStates;
  }
  get filterVisibility() {
    return this._filterVisibility;
  }
  get updating() {
    var _a;
    return !!(this._graphicsWaitingForSymbol.size > 0 || this.running || ((_a = this._elevationAlignment) == null ? void 0 : _a.updating) || null != this._scaleVisibility && this._scaleVisibility.updating || null != this._filterVisibility && this._filterVisibility.updating || this._rendererChangeAbortController || this._elevationInfoChangeAbortController || this._updatingPendingLoadedGraphicsChange || this._frameTask.updating || this._loadingSymbols > 0);
  }
  get running() {
    var _a;
    return this._pendingUpdates.size > 0 || !!((_a = this._spatialIndex) == null ? void 0 : _a.updating);
  }
  get suspendedOrOutsideOfView() {
    var _a;
    return this.owner.suspended || !!((_a = this.owner.suspendInfo) == null ? void 0 : _a.outsideOfView);
  }
  get updatingRemaining() {
    var _a, _b;
    return this.updating ? this._pendingUpdates.size + 0.1 * (((_a = this._spatialIndex) == null ? void 0 : _a.updatingRemaining) || 0) + 0.1 * (((_b = this._elevationAlignment) == null ? void 0 : _b.updatingRemaining) || 0) : 0;
  }
  get displayFeatureLimit() {
    const e9 = this.owner && this.owner.view && this.owner.view.qualitySettings, i7 = e9 ? e9.graphics3D.minTotalNumberOfFeatures : 0, t13 = e9 ? e9.graphics3D.maxTotalNumberOfFeatures : 0, r5 = e9 ? e9.graphics3D.maxTotalNumberOfPrimitives : 0, s8 = this.averageSymbolComplexity, a10 = Math.max(1, null != s8 ? s8.primitivesPerFeature : 1), n5 = null != s8 && s8.drawCallsPerFeature > 0 ? t13 / s8.drawCallsPerFeature * 0.3 : t13, o5 = Math.ceil(r5 / a10), l10 = Math.max(i7, Math.min(t13, o5, n5)), h6 = this._get("displayFeatureLimit");
    return h6 && h6.minimumTotalNumberOfFeatures === i7 && h6.maximumTotalNumberOfFeatures === t13 && h6.maximumTotalNumberOfPrimitives === r5 && h6.averageSymbolComplexity === s8 && h6.maximumNumberOfFeatures === l10 ? h6 : { minimumTotalNumberOfFeatures: i7, maximumTotalNumberOfFeatures: t13, maximumTotalNumberOfPrimitives: r5, averageSymbolComplexity: s8, maximumNumberOfFeatures: l10 };
  }
  get averageSymbolComplexity() {
    const e9 = n4(this._symbolComplexities), i7 = this._get("averageSymbolComplexity");
    return 0 === e9.numComplexities || null != i7 && (e9.estimated && (i7.primitivesPerFeature >= e9.primitivesPerFeature || i7.primitivesPerCoordinate >= e9.primitivesPerCoordinate || i7.drawCallsPerFeature >= e9.drawCallsPerFeature) || i7.primitivesPerFeature === e9.primitivesPerFeature && i7.primitivesPerCoordinate === e9.primitivesPerCoordinate && i7.drawCallsPerFeature === e9.drawCallsPerFeature) ? i7 : e9;
  }
  get usedMemory() {
    const e9 = null != this.averageSymbolComplexity && this.labelsEnabled ? this.averageSymbolComplexity.memory.bytesPerFeatureLabel * this._numberOfGraphics : 0, i7 = this._getSymbolComplexitiesUsed().reduce((e10, i8) => e10 + i8.memory.resourceBytes, 0);
    return this._usedMemory + e9 + i7;
  }
  get usedMemoryPerGraphic() {
    if (this._usedMemory && this._numberOfGraphics) {
      const e9 = this._numberOfGraphics / (this._numberOfGraphics + Math.max(this._pendingAdds, this._pendingRemoves));
      return this._usedMemory / this._numberOfGraphics * e9;
    }
    if (null != this.averageSymbolComplexity) {
      const e9 = this.labelsEnabled ? this.averageSymbolComplexity.memory.bytesPerFeatureLabel : 0;
      return this.averageSymbolComplexity.memory.bytesPerFeature + e9;
    }
    return 0;
  }
  get unprocessedMemoryEstimate() {
    return (this._pendingAdds - this._pendingRemoves) * this.usedMemoryPerGraphic;
  }
  get _symbolComplexities() {
    return this.currentRenderer ? this._getSymbolComplexitiesUsedOrRenderer(this.currentRenderer) : this._getSymbolComplexitiesUsed();
  }
  get visible() {
    return this._visible;
  }
  _getConvertedSymbol(e9) {
    var _a;
    if ("web-style" === e9.type)
      return e9.clone();
    const i7 = this._symbolConversionCache.get(e9.id);
    if (null != i7)
      return i7;
    const t13 = S4(e9, { geometryType: ((_a = this.layer) == null ? void 0 : _a.geometryType) ?? void 0, retainId: true, hasLabelingContext: this._hasLabelingContext(e9) }), r5 = t13.symbol || null;
    return null == r5 && t13.error && Ve.error(t13.error.message), this._symbolConversionCache.set(e9.id, r5), r5;
  }
  _getSymbolComplexitiesUsedOrRenderer(e9) {
    if (null == e9)
      return [];
    const i7 = e9.getSymbols(), t13 = "backgroundFillSymbol" in e9 ? e9.backgroundFillSymbol : null;
    if (!(t13 || i7 && i7.length))
      return [];
    const r5 = [], s8 = this._getSymbolComplexityUsedOrRenderer(t13);
    null != s8 && r5.push(s8);
    for (const a10 of i7) {
      const e10 = this._getSymbolComplexityUsedOrRenderer(a10);
      null != e10 && r5.push(e10);
    }
    return r5;
  }
  _getSymbolComplexityUsedOrRenderer(e9) {
    if (null == e9)
      return null;
    const i7 = this._symbols.get(e9.id);
    if (null != i7)
      return i7.complexity;
    const t13 = this._getConvertedSymbol(e9);
    return null != t13 ? P2(t13) : null;
  }
  _getSymbolComplexitiesUsed() {
    const e9 = [];
    return this._symbols.forEach((i7) => {
      null != i7 && e9.push(i7.complexity);
    }), e9;
  }
  get _objectIdField() {
    return this.layer.objectIdField;
  }
  constructor(e9) {
    super(e9), this._propertiesPool = new o4({ computedExtent: M }, this), this.computedExtent = null, this.currentRenderer = null, this.rendererHasGeometryOperations = false, this._graphicStateTracking = null, this.graphics3DGraphics = /* @__PURE__ */ new Map(), this.stageLayer = null, this.stage = null, this._graphicsDrapedUids = /* @__PURE__ */ new Set(), this._graphicsBySymbol = /* @__PURE__ */ new Map(), this._symbolConversionCache = /* @__PURE__ */ new Map(), this._symbols = /* @__PURE__ */ new Map(), this._graphicsWithoutSymbol = /* @__PURE__ */ new Map(), this._graphicsWaitingForSymbol = /* @__PURE__ */ new Map(), this._graphicsUpdateId = 0, this._handles = new t2(), this._frameTask = F, this._suspendSymbolCleanup = false, this._arcadeOnDemand = null, this._rendererChangeAbortController = null, this._elevationInfoChangeAbortController = null, this._initializeAbortController = null, this._scaleVisibility = null, this._filterVisibility = null, this._spatialIndex = null, this.extentPadding = 0, this._updatingPendingLoadedGraphicsChange = null, this._featureStore = null, this._deconflictor = null, this._labeler = null, this._objectStates = null, this._viewElevationProvider = null, this._stageLayerElevationProvider = null, this._sharedSymbolResourcesOwnerHandle = null, this._whenGraphics3DGraphicRequests = {}, this._pendingUpdates = /* @__PURE__ */ new Map(), this._numberOfGraphics = 0, this._numberOfGraphicsProvidingElevation = 0, this._pendingAdds = 0, this._pendingRemoves = 0, this._applyPendingRemovesFirst = false, this._loadingSymbols = 0, this._pendingUpdatesPool = new l2({ allocator: (e10) => e10 || new ke(), deallocator: (e10) => (e10.clear(), e10) }), this._symbolWarningLogged = false, this._geometryWarningLogged = false, this._objectIdInvisibleSet = /* @__PURE__ */ new Set(), this._whenSymbolRemoved = new l2(), this.preferredUpdatePolicy = C4.SYNC, this._forcedUpdatePolicy = null, this.elevationFeatureExpressionEnabled = true, this.owner = null, this.layer = null, this.graphicSymbolSupported = true, this.getRenderingInfoWithoutRenderer = false, this.setUidToIdOnAdd = true, this.hasZ = null, this.hasM = null, this._usedMemory = 0, this._visible = false, this._startCreateGraphics = false, this.symbolCreationContext = new e5(e9.owner.view.resourceController.scheduler, (e10, i7) => this._frameTask.schedule(e10, i7));
  }
  initialize() {
    this._featureStore = new d4({ objectIdField: this.owner.layer && this.owner.layer.objectIdField, hasZ: !!this.hasZ, hasM: !!this.hasM, viewSpatialReference: this._viewSpatialReference, featureSpatialReference: this.owner.featureSpatialReference, getSpatialIndex: () => this.spatialIndex, forEach: (e10) => this.graphics3DGraphics.forEach(e10) });
    const e9 = (e10, i8, t13) => this.spatialIndex.queryGraphicUIDsInExtent(e10, i8, t13), { componentFactories: i7 } = this;
    if (null != i7.elevationAlignment) {
      const t13 = i7.elevationAlignment(this, e9);
      this._elevationAlignment = t13;
    }
    if (null != i7.scaleVisibility) {
      const t13 = i7.scaleVisibility(this, e9);
      this._scaleVisibility = t13;
    }
    if (null != i7.filterVisibility) {
      const e10 = i7.filterVisibility({ featureStore: this._featureStore, getFeatureCount: () => this.graphics3DGraphics.size, updateFeatureVisibilities: (e11) => this.modifyGraphics3DGraphicVisibilities((i8) => i8.setVisibilityFlag(A3.GRAPHIC, L2.FILTER, e11(I2(i8.graphic, this._objectIdField)))), setAllFeaturesVisibility: (e11) => this.modifyGraphics3DGraphicVisibilities((i8) => i8.setVisibilityFlag(A3.GRAPHIC, L2.FILTER, e11)), clearFeaturesVisibility: () => this.modifyGraphics3DGraphicVisibilities((e11) => e11.setVisibilityFlag(A3.GRAPHIC, L2.FILTER, true)) });
      this._filterVisibility = e10;
    }
    if (null != i7.deconflictor) {
      const e10 = i7.deconflictor(this);
      this._deconflictor = e10;
    }
    if (null != i7.labeler && null != this._scaleVisibility) {
      const e10 = i7.labeler(this, this._scaleVisibility);
      this._labeler = e10;
    }
    if (null != i7.objectStates) {
      const e10 = i7.objectStates(this);
      this._objectStates = e10;
    }
    this._initializeAbortController = new AbortController(), this._initializePromise = this._initializeAsync();
  }
  async _initializeAsync() {
    var _a, _b, _c, _d;
    const e9 = (_a = this._initializeAbortController) == null ? void 0 : _a.signal, i7 = this.owner.view;
    this._viewElevationProvider = new a6(this._viewSpatialReference, i7), this._initializeStage(i7, this.layer.uid);
    const t13 = i7.sharedSymbolResources;
    this.symbolCreationContext.sharedResources = t13, this._sharedSymbolResourcesOwnerHandle = t13.addGraphicsOwner(this.owner), null != this.currentRenderer && (this.symbolCreationContext.renderer = this.currentRenderer), this.symbolCreationContext.stage = this.stage, this.symbolCreationContext.streamDataRequester = t13.streamDataRequester, this.symbolCreationContext.renderCoordsHelper = i7.renderCoordsHelper, this.symbolCreationContext.layer = this.layer, this.symbolCreationContext.graphicsCoreOwner = this.owner, this.symbolCreationContext.localOriginFactory = new f3(i7.renderSpatialReference), this.symbolCreationContext.elevationProvider = i7.elevationProvider, this.symbolCreationContext.notifyGraphicGeometryChanged = (e10) => this.notifyGraphicGeometryChanged(e10), this.symbolCreationContext.notifyGraphicVisibilityChanged = (e10) => this.notifyGraphicVisibilityChanged(e10);
    const r5 = d3(this.layer.elevationInfo, this.elevationFeatureExpressionEnabled);
    if (this.symbolCreationContext.featureExpressionInfoContext = await a5(r5, this._viewSpatialReference, e9, Ve), s3(e9), this.symbolCreationContext.screenSizePerspectiveEnabled = i7.screenSizePerspectiveEnabled && !!this.layer.screenSizePerspectiveEnabled, this.symbolCreationContext.slicePlaneEnabled = !!this.owner.slicePlaneEnabled, this.symbolCreationContext.physicalBasedRenderingEnabled = !!((_b = this.owner.view.qualitySettings) == null ? void 0 : _b.physicallyBasedRenderingEnabled), this.symbolCreationContext.skipHighSymbolLods = !!((_d = (_c = this.owner.view.qualitySettings) == null ? void 0 : _c.graphics3D) == null ? void 0 : _d.skipHighSymbolLods), "drapeSourceType" in this.owner) {
      const { owner: e10 } = this;
      this.symbolCreationContext.drapeSourceRenderer = i7.basemapTerrain.overlayManager.registerGeometryDrapeSource(e10), this._handles.add(e2(() => i7.basemapTerrain.overlayManager.unregisterDrapeSource(e10)));
    }
    this._handles.add([l4(() => this.suspendedOrOutsideOfView, () => this._frameTask.reschedule(() => this._updateLayerVisibility())), l4(() => {
      var _a2, _b2;
      return [(_a2 = this.layer) == null ? void 0 : _a2.screenSizePerspectiveEnabled, (_b2 = this.owner.view) == null ? void 0 : _b2.screenSizePerspectiveEnabled];
    }, () => {
      var _a2;
      const e10 = i7.screenSizePerspectiveEnabled && !!this.layer.screenSizePerspectiveEnabled;
      e10 !== this.symbolCreationContext.screenSizePerspectiveEnabled && (this.symbolCreationContext.screenSizePerspectiveEnabled = e10, (_a2 = this._labeler) == null ? void 0 : _a2.reset(), this.recreateAllGraphicsAndSymbols());
    }), l4(() => this.owner.slicePlaneEnabled, (e10) => this._slicePlaneEnabledChange(!!e10)), l4(() => {
      var _a2;
      return (_a2 = this.owner.view.state) == null ? void 0 : _a2.rasterPixelRatio;
    }, () => this._pixelRatioChange()), l4(() => {
      var _a2;
      return !!((_a2 = this.owner.view.qualitySettings) == null ? void 0 : _a2.physicallyBasedRenderingEnabled);
    }, (e10) => this._physicalBasedRenderingChange(e10)), l4(() => {
      var _a2, _b2;
      return !!((_b2 = (_a2 = this.owner.view.qualitySettings) == null ? void 0 : _a2.graphics3D) == null ? void 0 : _b2.skipHighSymbolLods);
    }, (e10) => this._skipHighSymbolLoDsChange(e10)), f(() => {
      var _a2;
      return (_a2 = i7.basemapTerrain) == null ? void 0 : _a2.tilingScheme;
    }, (e10) => {
      if (e10.spatialReference.equals(this.symbolCreationContext.overlaySR) || null == i7.basemapTerrain.spatialReference || (this.symbolCreationContext.overlaySR = i7.basemapTerrain.spatialReference), this._handles.has("loaded-graphics"))
        this.recreateAllGraphics();
      else {
        const e11 = () => {
          var _a2;
          return (_a2 = this.owner) == null ? void 0 : _a2.loadedGraphics;
        };
        this._handles.add([a2(e11, "change", (e12) => {
          this._graphicsCollectionChanged(e12), this._signalUpdatingDuringAsyncLoadedGraphicsChange();
        }, { onListenerAdd: () => {
          this.recreateAllGraphics(), this._signalUpdatingDuringAsyncLoadedGraphicsChange();
        } })], "loaded-graphics");
      }
    }, { initial: true }), l4(() => this.effectiveUpdatePolicy, (e10) => {
      null != this.stageLayer && (this.stageLayer.updatePolicy = e10), this.symbolCreationContext.isAsync = this.effectiveUpdatePolicy === C4.ASYNC, e10 === C4.SYNC && this.runTask(C3);
    }, w)]), this._frameTask = i7.resourceController.scheduler.registerTask(I.GRAPHICS_CORE, this), this.layer && "featureReduction" in this.layer && this._handles.add(l4(() => this.layer.featureReduction, () => this._deconflictor.featureReductionChange())), this.notifyChange("averageSymbolComplexity"), this.rendererChange(this.owner.renderer).catch(() => {
    }), this._initializeAbortController = null;
  }
  _abortInitialize() {
    this._initializeAbortController && (this._initializeAbortController.abort(), this._initializeAbortController = null);
  }
  destroy() {
    var _a, _b, _c, _d;
    this._abortInitialize(), this._abortRendererChange(), this._abortElevationInfoChange(), this._frameTask.remove(), this._frameTask = F, (_b = (_a = this.owner.view) == null ? void 0 : _a.deconflictor) == null ? void 0 : _b.removeGraphicsOwner(this), (_d = (_c = this.owner.view) == null ? void 0 : _c.labeler) == null ? void 0 : _d.removeGraphicsOwner(this), this._elevationAlignment = l(this._elevationAlignment), this._scaleVisibility = l(this._scaleVisibility), this._filterVisibility = l(this._filterVisibility), this._deconflictor = null, this._labeler = null, this._objectStates = l(this._objectStates), this.clear(), this._featureStore = l(this._featureStore), this._updatingPendingLoadedGraphicsChange = o(this._updatingPendingLoadedGraphicsChange), this._graphicStateTracking = l(this._graphicStateTracking), this.stage && (this.stageLayer = l(this.stageLayer), this.stage = null), this._handles = l(this._handles), this._set("owner", null);
    for (const e9 in this._whenGraphics3DGraphicRequests)
      this._whenGraphics3DGraphicRequests[e9].reject(new s2("graphic:layer-destroyed", "Layer has been destroyed"));
    this._whenGraphics3DGraphicRequests = null, this._sharedSymbolResourcesOwnerHandle = o(this._sharedSymbolResourcesOwnerHandle), this._propertiesPool = l(this._propertiesPool), this._pendingUpdatesPool = null, this._symbolConversionCache.clear(), this._objectIdInvisibleSet.clear(), this._spatialIndex = l(this._spatialIndex);
  }
  clear() {
    var _a, _b;
    (_a = this._objectStates) == null ? void 0 : _a.allGraphicsDeleted(), null != this._graphicStateTracking && this._graphicStateTracking.allGraphicsDeleted(), this.graphics3DGraphics.forEach((e9) => e9.destroy()), (_b = this._spatialIndex) == null ? void 0 : _b.clear(), this.graphics3DGraphics.clear(), this._numberOfGraphics = 0, this._usedMemory = 0, this._updateLayerVisibility(), this._symbols.forEach(l), this._symbols.clear(), this._graphicsBySymbol.clear(), this._graphicsWithoutSymbol.clear(), this._graphicsWaitingForSymbol.clear(), this._pendingUpdates.clear(), this._pendingUpdatesPool.clear(), this._pendingAdds = 0, this._pendingRemoves = 0, this._applyPendingRemovesFirst = false, this.notifyChange("updating"), this.notifyChange("running"), this.notifyChange("updatingRemaining"), this._featureStore.events.emit("changed");
  }
  _initializeStage(e9, i7) {
    this.stage = e9._stage, this.stageLayer = new c5(this.stage, { pickable: !this.suspendedOrOutsideOfView, updatePolicy: this.effectiveUpdatePolicy }, i7);
    const t13 = this.stageLayer.events;
    t13.on("objectTransformation", (e10) => this.notifyGraphicGeometryChanged(e10.graphicUid)), t13.on("objectShaderTransformation", (e10) => this.notifyGraphicGeometryChanged(e10.graphicUid)), t13.on("visibilityChanged", (e10) => this.notifyGraphicVisibilityChanged(e10.graphicUid)), t13.on("objectGeometryAdded", (e10) => this.notifyGraphicGeometryChanged(e10.object.graphicUid)), t13.on("objectGeometryRemoved", (e10) => this.notifyGraphicGeometryChanged(e10.object.graphicUid)), t13.on("objectGeometryUpdated", (e10) => this.notifyGraphicGeometryChanged(e10.object.graphicUid));
  }
  notifyGraphicGeometryChanged(e9) {
    if (null == this._graphicStateTracking || null == e9)
      return;
    const i7 = this.graphics3DGraphics.get(e9);
    i7 && this._graphicStateTracking.updateGraphicGeometry(i7);
  }
  notifyGraphicVisibilityChanged(e9) {
    if (null == this._graphicStateTracking || null == e9)
      return;
    const i7 = this.graphics3DGraphics.get(e9);
    i7 && this._graphicStateTracking.updateGraphicVisibility(i7);
  }
  _updateLayerVisibility() {
    const e9 = this.displayFeatureLimit.maximumNumberOfFeatures, i7 = this._numberOfGraphics > e9 * ze, t13 = !this.suspendedOrOutsideOfView && !i7;
    t13 !== this._visible && (this._visible = t13, t13 ? (this.stageLayer.pickable = true, this.updateAllGraphicsVisibility()) : (this.stageLayer.pickable = false, this._hideAllGraphics()), this._updateStageLayerVisibility());
  }
  _updateStageLayerVisibility() {
    this.stageLayer.visible = this._visible && (null == this.layer.opacity || this.layer.opacity > 0);
  }
  getGraphics3DGraphicById(e9) {
    return null != e9 ? this.graphics3DGraphics.get(e9) : void 0;
  }
  getGraphics3DGraphicByObjectId(e9) {
    var _a;
    return ((_a = this.owner.layer) == null ? void 0 : _a.objectIdField) ? this._findGraphics3DGraphicByObjectId(e9) : null;
  }
  _getGraphicObjectID(e9, i7 = this.owner.layer && this.owner.layer.objectIdField) {
    return I2(e9, i7);
  }
  get graphics3DGraphicsByObjectID() {
    const e9 = this.owner.layer && this.owner.layer.objectIdField;
    if (!e9)
      return;
    const i7 = /* @__PURE__ */ new Map();
    return this.graphics3DGraphics.forEach((t13) => {
      if (!t13)
        return;
      const r5 = t13.graphic, s8 = this._getGraphicObjectID(r5, e9);
      null != s8 && i7.set(s8, t13);
    }), i7;
  }
  get labelsEnabled() {
    return !(!this._labeler || !this._labeler.layerLabelsEnabled());
  }
  async updateLabelingInfo(e9) {
    const i7 = this._deconflictor && this._deconflictor.labelingInfoChange(e9), t13 = this._labeler && this._labeler.labelingInfoChange(e9);
    await j([i7, t13]);
  }
  updateVisibilityInfo() {
    this._deconflictor && this._deconflictor.labelingInfoChange(), this._labeler && this._labeler.visibilityInfoChange();
  }
  get symbolUpdateType() {
    if (this._pendingUpdates.size > 0)
      return "unknown";
    let e9 = 0, i7 = 0;
    return n(this._symbols, (t13, r5) => {
      if (null != t13) {
        const s8 = t13.getFastUpdateStatus();
        if (s8.loading > 0)
          return true;
        this._graphicsBySymbol.has(r5) && (i7 += s8.fast, e9 += s8.slow);
      }
      return false;
    }) ? "unknown" : i7 >= 0 && 0 === e9 ? "fast" : e9 >= 0 && 0 === i7 ? "slow" : "mixed";
  }
  runTask(e9) {
    if (this._frameTask.processQueue(e9), this._applyPendingUpdates(e9), this.notifyChange("running"), this.running || this.notifyChange("updating"), this.notifyChange("updatingRemaining"), !e9.hasProgressed)
      return g2.YIELD;
  }
  setObjectIdVisibility(e9, i7) {
    i7 ? this._objectIdInvisibleSet.delete(e9) : this._objectIdInvisibleSet.add(e9);
    const t13 = this._findGraphics3DGraphicByObjectId(e9);
    null != t13 && this._updateUserVisibility(t13);
  }
  _findGraphics3DGraphicByObjectId(e9) {
    return t3(this.graphics3DGraphics, (i7) => this._getGraphicObjectID(i7.graphic) === e9);
  }
  _updateUserVisibility(e9) {
    if (null == e9)
      return false;
    const i7 = e9.graphic, t13 = this._getGraphicObjectID(i7), r5 = i7.visible && !this.owner.suspended && (null == t13 || !this._objectIdInvisibleSet.has(t13));
    return e9.setVisibilityFlag(A3.GRAPHIC, L2.USER, r5);
  }
  _whenGraphics3DGraphic(e9) {
    const i7 = this.graphics3DGraphics.get(e9.uid);
    if (i7)
      return Promise.resolve(i7);
    const t13 = this._whenGraphics3DGraphicRequests[e9.uid];
    if (t13)
      return t13.promise;
    const r5 = C();
    return this._whenGraphics3DGraphicRequests[e9.uid] = r5, r5.promise;
  }
  async _boundsForGraphics3DGraphic(e9, i7) {
    const t13 = this._viewSpatialReference, r5 = this.owner.view.renderSpatialReference, s8 = this.owner.view.basemapTerrain.spatialReference, a10 = (e10, i8, s9) => yn(e10, r5, i8, e10, t13, i8, s9), n5 = (e10, i8, r6) => yn(e10, s8, i8, e10, t13, i8, r6), o5 = this._viewElevationProvider ? { service: this._viewElevationProvider, useViewElevation: null != i7 && !!i7.useViewElevation, minDemResolution: null != i7 ? i7.minDemResolution : null, minDemResolutionForPoints: this.owner.view.resolution } : null, l10 = await e9.getProjectedBoundingBox(a10, n5, o5, i7 == null ? void 0 : i7.signal);
    if (!l10)
      return null;
    const h6 = l10.boundingBox;
    if (l10.requiresDrapedElevation) {
      const e10 = this.symbolCreationContext.elevationProvider;
      if (e10) {
        E2(h6, Oe);
        const i8 = e10.getElevation(Oe[0], Oe[1], 0, t13, "ground") ?? 0;
        h6[2] = Math.min(h6[2], i8), h6[5] = Math.max(h6[5], i8);
      }
    }
    return { boundingBox: h6, screenSpaceObjects: l10.screenSpaceObjects };
  }
  async whenGraphicBounds(e9, i7) {
    await j2(() => {
      var _a;
      return (_a = this.owner) == null ? void 0 : _a.loadedGraphics;
    });
    const t13 = this.owner.layer && this.owner.layer.objectIdField, r5 = this.owner.loadedGraphics.find((i8) => i8 === e9 || null != t13 && null != i8.attributes && e9.attributes && i8.attributes[t13] === e9.attributes[t13]);
    if (!r5)
      throw new s2("internal:graphic-not-part-of-view", "Graphic is not part of this view");
    const a10 = await this._whenGraphics3DGraphic(r5);
    return this._boundsForGraphics3DGraphic(a10, i7);
  }
  computeAttachmentOrigin(e9, i7) {
    const t13 = this.graphics3DGraphics.get(e9.uid);
    if (!t13)
      return null;
    const r5 = t13.computeAttachmentOrigin();
    if (0 === r5.render.num && 0 === r5.draped.num)
      return null;
    o2(We, 0, 0, 0);
    let s8 = 0;
    if (r5.render.num > 0) {
      if (!Hn(r5.render.origin, this.symbolCreationContext.renderCoordsHelper.spatialReference, Me, i7))
        return null;
      u(We, We, Me), s8++;
    }
    if (r5.draped.num > 0) {
      const [e10, t14] = r5.draped.origin, a10 = this._viewElevationProvider.getElevation(e10, t14, "ground") ?? 0;
      if (o2(Me, e10, t14, a10), !Hn(Me, this._viewElevationProvider.spatialReference, Me, i7))
        return null;
      u(We, We, Me), s8++;
    }
    return s8 > 1 && g(We, We, 1 / s8), new x({ x: We[0], y: We[1], z: We[2], spatialReference: i7 });
  }
  getSymbolLayerSize(e9, i7) {
    const t13 = this._symbols.get(e9.id);
    if (null == t13)
      throw new s2("internal:symbol-not-part-of-view", "Symbol is not part of this view");
    const r5 = e9.symbolLayers.indexOf(i7);
    if (-1 === r5)
      throw new s2("internal:missing-symbol-layer", "Symbol layer is not in symbol");
    const a10 = t13.getSymbolLayerSize(r5);
    if (null == a10)
      throw new s2("internal:missing-size", "Symbol layer has no valid size");
    return a10;
  }
  _graphicsCollectionChanged(e9) {
    this._startCreateGraphics && (this.add(e9.added), this.remove(e9.removed));
  }
  graphicUpdateHandler(e9) {
    const i7 = e9.graphic.uid, t13 = this.graphics3DGraphics.get(i7);
    if (null != t13 || null != this._graphicsWithoutSymbol.get(i7))
      switch (e9.property) {
        case "visible":
          this._graphicUpdateVisibleHandler(t13);
          break;
        case "geometry":
          this._graphicUpdateGeometryHandler(t13, e9);
          break;
        case "symbol":
          this._graphicUpdateSymbolHandler(t13, e9);
          break;
        case "attributes":
          break;
        case "origin-transform":
          this._graphicUpdateTransformHandler(t13, e9);
      }
  }
  _graphicUpdateGeometryHandler(e9, i7) {
    this._graphicUpdateGeometryOrTransformHandler(e9, i7, () => null != i7.newValue && null != e9 && e9.graphics3DSymbol.updateGeometry(e9, i7.newValue));
    const t13 = i7.graphic.geometry;
    null != t13 && this._expandComputedExtent(t13);
  }
  _graphicUpdateTransformHandler(e9, i7) {
    const t13 = i7.graphic.geometry;
    this._graphicUpdateGeometryOrTransformHandler(e9, i7, () => null != i7.newValue && null != e9 && null != t13 && e9.graphics3DSymbol.updateTransform(e9, t13.spatialReference, i7.newValue, i7.action));
  }
  _graphicUpdateGeometryOrTransformHandler(e9, i7, t13) {
    if (null != i7.graphic.geometry)
      if (null != e9)
        t13() || this._recreateGraphic(e9.graphic);
      else {
        const e10 = i7.graphic.symbol && i7.graphic.symbol.id;
        if (e10) {
          const i8 = this._symbols.get(e10);
          if (null != i8 && i8.loadStatus === l5.LOADING)
            return;
        }
        this._recreateGraphic(i7.graphic);
      }
    else
      this._recreateGraphic(i7.graphic);
  }
  _graphicUpdateSymbolHandler(e9, i7) {
    const t13 = i7.graphic, r5 = null != e9 ? e9.graphics3DSymbol : null != i7.oldValue ? this._symbols.get(i7.oldValue.id) : null;
    if (null == r5 || null == i7.newValue)
      return void this._recreateGraphic(t13);
    const s8 = r5.symbol, a10 = this._getConvertedSymbol(i7.newValue);
    if (null != a10 && (a10.type !== s8.type || "web-style" === a10.type) || "web-style" === s8.type)
      return void this._recreateGraphic(t13);
    const n5 = this._graphicsBySymbol.get(s8.id);
    if (n5 && 1 !== n5.size)
      return void this._recreateGraphic(t13);
    const o5 = a4(s8, a10);
    if (null == o5)
      return void this._updateSymbolMapping(s8.id, a10);
    const l10 = { diff: o5, graphics3DGraphicPatches: [], symbolStatePatches: [] };
    if (r5.prepareSymbolPatch(l10), !y2(l10.diff))
      return void this._recreateGraphic(t13);
    const h6 = this._getRenderingInfo(t13);
    if (null == h6)
      return void this._recreateGraphic(t13);
    const d8 = r5.extentPadding;
    for (const p2 of l10.symbolStatePatches)
      p2();
    if (d8 !== r5.extentPadding && this._recomputeExtentPadding(), null != e9)
      for (const p2 of l10.graphics3DGraphicPatches)
        p2(e9, h6);
    this._updateSymbolMapping(s8.id, a10);
  }
  _graphicUpdateVisibleHandler(e9) {
    this._updateUserVisibility(e9) && (this._labeler && this.owner.view.labeler.setDirty(), this.owner.view.deconflictor.setDirty());
  }
  recreateGraphics(e9) {
    this._suspendSymbolCleanup = true, this.remove(e9), this.add(e9), this._suspendSymbolCleanup = false, this.effectiveUpdatePolicy === C4.SYNC && this._cleanupSymbols();
  }
  _recreateGraphic(e9) {
    this.recreateGraphics([e9]);
  }
  _beginGraphicUpdate(e9) {
    const i7 = this._graphicsUpdateId;
    return this._graphicsUpdateId++, this._graphicsWaitingForSymbol.set(e9.uid, i7), 1 === this._graphicsWaitingForSymbol.size && this.notifyChange("updating"), i7;
  }
  _endGraphicUpdate(e9) {
    e9 && (this._graphicsWaitingForSymbol.delete(e9.uid), 0 === this._graphicsWaitingForSymbol.size && (this._cleanupSymbols(), this.notifyChange("updating")));
  }
  _recomputeExtentPadding() {
    let e9 = 0;
    this._symbols.forEach((i7) => {
      null != i7 && (e9 = Math.max(e9, i7.extentPadding));
    }), this._set("extentPadding", e9);
  }
  _expandComputedExtent(e9) {
    const i7 = je, t13 = e9.spatialReference;
    z(e9, i7);
    const r5 = this._viewSpatialReference, s8 = Ae.tmpVec;
    if (S(t13, r5) || dn(i7[0], i7[1], 0, t13, s8, r5) && (i7[0] = s8[0], i7[1] = s8[1], dn(i7[3], i7[4], 0, t13, s8, r5), i7[3] = s8[0], i7[4] = s8[1]), !(isFinite(i7[0]) && isFinite(i7[3]) && isFinite(i7[1]) && isFinite(i7[4])))
      return;
    const a10 = this.computedExtent;
    let n5 = null;
    const o5 = isFinite(i7[2]) && isFinite(i7[5]), l10 = o5 && (!a10 || null == a10.zmin || i7[2] < a10.zmin), h6 = o5 && (!a10 || null == a10.zmax || i7[5] > a10.zmax);
    if (a10) {
      (i7[0] < a10.xmin || i7[1] < a10.ymin || i7[3] > a10.xmax || i7[4] > a10.ymax || l10 || h6) && (n5 = this._propertiesPool.get("computedExtent"), n5.xmin = Math.min(i7[0], a10.xmin), n5.ymin = Math.min(i7[1], a10.ymin), n5.xmax = Math.max(i7[3], a10.xmax), n5.ymax = Math.max(i7[4], a10.ymax), n5.spatialReference = r5);
    } else
      n5 = this._propertiesPool.get("computedExtent"), n5.xmin = i7[0], n5.ymin = i7[1], n5.xmax = i7[3], n5.ymax = i7[4], n5.spatialReference = r5;
    n5 && (l10 && (n5.zmin = i7[2]), h6 && (n5.zmax = i7[5]), this._set("computedExtent", n5));
  }
  _abortElevationInfoChange() {
    this._elevationInfoChangeAbortController && (this._elevationInfoChangeAbortController.abort(), this._elevationInfoChangeAbortController = null);
  }
  async elevationInfoChange() {
    var _a, _b;
    this._abortElevationInfoChange();
    const e9 = new AbortController();
    this._elevationInfoChangeAbortController = e9;
    const i7 = d3(this.layer.elevationInfo, this.elevationFeatureExpressionEnabled);
    this.symbolCreationContext.featureExpressionInfoContext = await a5(i7, this._viewSpatialReference, e9.signal, Ve), s3(e9.signal), this._elevationInfoChangeAbortController = null, (_a = this._labeler) == null ? void 0 : _a.elevationInfoChange(), this.forEachGraphics3DSymbol((e10, i8, t13) => {
      e10.globalPropertyChanged("elevationInfo", i8) ? i8.forEach((e11) => {
        const i9 = e11.graphic, t14 = e11.labelLayers;
        for (const r5 of t14) {
          r5.graphics3DSymbolLayer.updateGraphicElevationContext(i9, r5);
        }
      }) : this._recreateSymbol(t13);
    }), this.updateStageLayerElevationProvider(), (_b = this._elevationAlignment) == null ? void 0 : _b.elevationInfoChange();
  }
  updateStageLayerElevationProvider() {
    this._stageLayerElevationProvider ? (this.layer.elevationInfo && "relative-to-scene" === this.layer.elevationInfo.mode || 0 === this._numberOfGraphicsProvidingElevation) && (this.owner.view.elevationProvider.unregister(this._stageLayerElevationProvider), this._stageLayerElevationProvider = t(this._stageLayerElevationProvider)) : (!this.layer.elevationInfo || this.layer.elevationInfo && "relative-to-scene" !== this.layer.elevationInfo.mode) && this._numberOfGraphicsProvidingElevation > 0 && (this._stageLayerElevationProvider = new y4({ layer: this.layer, stageLayer: this.stageLayer, view: this.owner.view }), this.owner.view.elevationProvider.register("scene", this._stageLayerElevationProvider));
  }
  _clearSymbolsAndGraphics() {
    var _a, _b, _c, _d;
    this.clear(), null != this._filterVisibility && this._filterVisibility.clear(), (_a = this._labeler) == null ? void 0 : _a.reset(), (_b = this._deconflictor) == null ? void 0 : _b.clear(), (_c = this._elevationAlignment) == null ? void 0 : _c.clear(), (_d = this.stageLayer) == null ? void 0 : _d.invalidateSpatialQueryAccelerator(), this._stageLayerElevationProvider && (this.owner.view.elevationProvider.unregister(this._stageLayerElevationProvider), this._stageLayerElevationProvider = t(this._stageLayerElevationProvider));
  }
  startCreateGraphics() {
    this._startCreateGraphics = true, this.recreateAllGraphics();
  }
  recreateAllGraphics() {
    this._recreateAllGraphics(false);
  }
  recreateAllGraphicsAndSymbols() {
    this._recreateAllGraphics(true);
  }
  _recreateAllGraphics(e9 = false) {
    if (!this._startCreateGraphics)
      return;
    const { loadedGraphics: i7, view: t13 } = this.owner, r5 = t13.basemapTerrain.tilingScheme && i7 && i7.length ? i7.toArray() : null;
    !e9 && r5 || this._clearSymbolsAndGraphics(), this.symbolCreationContext.screenSizePerspectiveEnabled = this.owner.view.screenSizePerspectiveEnabled && !!this.layer.screenSizePerspectiveEnabled, this.symbolCreationContext.slicePlaneEnabled = !!this.owner.slicePlaneEnabled, this._set("computedExtent", null), r5 && (e9 ? this.add(r5) : this.recreateGraphics(r5));
  }
  _recreateSymbol(e9) {
    const i7 = this._graphicsBySymbol.get(e9), t13 = [];
    i7 && (i7.forEach((e10, i8) => {
      var _a;
      const r6 = e10.usedMemory;
      this._conditionalRemove(e10, i8), (_a = this._spatialIndex) == null ? void 0 : _a.remove(e10), t13.push(e10.graphic), e10.destroy(), this._removeGraphics3DGraphic(i8, r6), this._updateLayerVisibility(), this._featureStore.events.emit("changed");
    }), this._graphicsBySymbol.set(e9, /* @__PURE__ */ new Map()));
    const r5 = this._symbols.get(e9);
    l(r5), this._symbols.delete(e9), this.add(t13);
  }
  _recreateGraphicsForSymbol(e9) {
    const i7 = this._graphicsBySymbol.get(e9);
    if (i7) {
      const e10 = [];
      i7.forEach((i8) => e10.push(i8.graphic)), this.recreateGraphics(e10);
    }
  }
  _conditionalRemove(e9, i7) {
    var _a, _b, _c;
    this._graphicsDrapedUids.delete(i7), (_a = this._objectStates) == null ? void 0 : _a.removeGraphic(e9), (_b = this._labeler) == null ? void 0 : _b.removeGraphic(e9), (_c = this._deconflictor) == null ? void 0 : _c.removeGraphic(e9), null != this._graphicStateTracking && this._graphicStateTracking.removeGraphic(e9);
  }
  add(e9) {
    e9 && 0 !== e9.length && (this.owner.view.basemapTerrain && this.owner.view.basemapTerrain.tilingScheme ? (this._updatePolicyForGraphics(e9) === C4.ASYNC ? this._addDelayed(e9) : this._addImmediate(e9), this.notifyChange("updating")) : Ve.error("#add()", "Cannot add graphics before terrain surface has been initialized"));
  }
  _updatePolicyForGraphics(e9) {
    if (this.effectiveUpdatePolicy === C4.SYNC && ("mesh" === this.layer.geometryType || null == this.layer.geometryType)) {
      for (const i7 of e9)
        if (null != i7.geometry && "mesh" === i7.geometry.type && !i7.geometry.loaded)
          return C4.ASYNC;
    }
    return this.effectiveUpdatePolicy;
  }
  _addImmediate(e9) {
    this._geometryWarningLogged = false, this._symbolWarningLogged = false;
    for (const i7 of e9)
      this._addGraphic(i7, this._getRenderingInfo(i7, Ve), C4.SYNC);
    this._cleanupSymbols(), this._labeler && (this.owner.view.labeler.setDirty(), this._cleanupSymbols()), this.owner.view.deconflictor.setDirty();
  }
  _addDelayed(e9) {
    var _a;
    for (const i7 of e9) {
      const e10 = i7.uid;
      let t13 = this._pendingUpdates.get(e10);
      t13 ? t13.add ? t13.state !== Te.NEW && ((_a = t13.abortController) == null ? void 0 : _a.abort()) : this._pendingAdds++ : (t13 = this._pendingUpdatesPool.pushNew(), this._pendingAdds++, this._pendingUpdates.set(e10, t13)), t13.add = i7;
    }
    this.notifyChange("running"), this.notifyChange("updatingRemaining");
  }
  remove(e9) {
    this.effectiveUpdatePolicy === C4.ASYNC ? this._removeDelayed(e9) : this._removeImmediate(e9), this.notifyChange("updating");
  }
  _removeImmediate(e9) {
    for (const i7 of e9)
      this._removeGraphic(i7);
    this._cleanupSymbols(), this._labeler && this.owner.view.labeler.setDirty(), this.owner.view.deconflictor.setDirty();
  }
  _removeDelayed(e9) {
    var _a;
    for (const i7 of e9) {
      const e10 = i7.uid, t13 = this._pendingUpdates.get(e10);
      if (t13)
        t13.add && (t13.remove ? t13.add = null : this._pendingUpdates.delete(e10), t13.state === Te.LOADING && ((_a = t13.abortController) == null ? void 0 : _a.abort()), this._pendingAdds--);
      else {
        const t14 = this._pendingUpdatesPool.pushNew();
        t14.remove = i7, this._pendingUpdates.set(e10, t14), this._pendingRemoves++, this._applyPendingRemovesFirst = true;
      }
    }
    0 === this._pendingUpdates.size && this._finishPendingUpdates(), this.notifyChange("running"), this.notifyChange("updatingRemaining");
  }
  _finishPendingUpdates() {
    this._pendingUpdatesPool.clear(), this._cleanupSymbols(), (this._pendingAdds || this._pendingRemoves) && Ve.warn("pendingAdds/Removes in inconsistent state!"), this._pendingAdds = 0, this._pendingRemoves = 0, this._applyPendingRemovesFirst = false;
  }
  _applyPendingUpdates(e9) {
    var _a;
    if (this._geometryWarningLogged = false, this._symbolWarningLogged = false, 0 === this._pendingUpdates.size && ((_a = this._spatialIndex) == null ? void 0 : _a.updating))
      return this._spatialIndex.update(), void e9.madeProgress();
    if (this._applyPendingRemovesFirst) {
      this._applyPendingRemovesFirst = false;
      for (const [i7, t13] of this._pendingUpdates) {
        if (e9.done) {
          this._applyPendingRemovesFirst = true;
          break;
        }
        if (t13.remove && !t13.add && (this._pendingRemoves--, e9.madeProgress(), this._removeGraphic(t13.remove), t13.remove = null, this._pendingUpdates.delete(i7), 0 === this._pendingRemoves))
          break;
      }
    }
    for (const [i7, t13] of this._pendingUpdates) {
      if (e9.done)
        break;
      t13.add && t13.state === Te.NEW && this._processPendingUpdateNew(t13);
      let r5 = this.effectiveUpdatePolicy;
      if (!t13.remove || t13.add && t13.state !== Te.READY || (this._pendingRemoves--, e9.madeProgress(), this._removeGraphic(t13.remove), t13.remove = null, r5 = C4.SYNC), t13.add)
        switch (t13.state) {
          case Te.READY:
            this._addGraphic(t13.add, t13.renderingInfo, r5), t13.add = null, this._pendingAdds--, e9.madeProgress();
            break;
          case Te.REJECTED:
            t13.add = null, this._pendingAdds--;
          case Te.LOADING:
        }
      null == t13.remove && null == t13.add && this._pendingUpdates.delete(i7);
    }
    0 === this._pendingUpdates.size && (this._finishPendingUpdates(), this.notifyChange("running"));
  }
  _processPendingUpdateNew(e9) {
    if (!e9.add)
      return void (e9.state = Te.READY);
    const i7 = e9.add.geometry;
    null == i7 || "mesh" !== i7.type || i7.loaded ? this._processPendingUpdateNewRenderingInfo(e9) : this._processPendingUpdateNewMesh(e9, i7);
  }
  async _processPendingUpdateNewMesh(e9, i7) {
    e9.state = Te.LOADING, e9.abortController = new AbortController();
    const t13 = e9.abortController.signal;
    try {
      await i7.load({ signal: t13 });
    } catch (r5) {
      return this._processPendingUpdateNewError(e9, r5);
    }
    e9.abortController = null, this._processPendingUpdateNewRenderingInfo(e9);
  }
  _processPendingUpdateNewError(e9, i7) {
    e9.abortController = null, d(i7) ? e9.state = Te.NEW : e9.state = Te.REJECTED;
  }
  async _processPendingUpdateNewRenderingInfo(e9) {
    if (null == this.layer.renderer || "dictionary" !== this.layer.renderer.type)
      return e9.renderingInfo = this._getRenderingInfo(e9.add, Ve), void (e9.state = Te.READY);
    e9.state = Te.LOADING, e9.abortController = new AbortController();
    let i7 = null;
    try {
      i7 = await this._getRenderingInfoAsync(e9.add, { signal: e9.abortController.signal });
    } catch (t13) {
      return e9.abortController = null, void (d(t13) ? e9.state = Te.NEW : e9.state = Te.REJECTED);
    }
    null == i7 || null == i7.symbol ? (Ve && !this._symbolWarningLogged && (this._symbolWarningLogged = true, Ve.warn(`Graphic in layer ${this.layer.id} has no symbol and will not render`)), e9.renderingInfo = null) : e9.renderingInfo = i7, e9.state = Te.READY;
  }
  _addGraphic(e9, i7, t13) {
    var _a;
    if (this._graphicsWithoutSymbol.set(e9.uid, e9), null == i7 || null == i7.symbol || !f2(e9))
      return;
    if (null != this.stage.renderView.objectAndLayerIdRenderHelper && this.setUidToIdOnAdd) {
      const i8 = m4(this.owner.view.map, this.layer.uid);
      this.stage.renderView.objectAndLayerIdRenderHelper.setUidToObjectAndLayerId(e9.objectId, e9.uid, this.layer.id, this.layer.uid, !!this.layer.popupEnabled && !i8 && t7(this.layer, (_a = this.owner.view.popup) == null ? void 0 : _a.defaultPopupTemplateEnabled));
    }
    const r5 = i7.symbol, s8 = this.getOrCreateGraphics3DSymbol(r5, i7.renderer);
    if (null == s8)
      return;
    this._expandComputedExtent(e9.geometry);
    const a10 = this._beginGraphicUpdate(e9), n5 = new r3(e9, i7, this.layer);
    let o5 = false;
    const l10 = (e10) => {
      e10 === s8.symbol.id && (o5 = true);
    };
    this._whenSymbolRemoved.push(l10);
    const h6 = () => {
      if (--this._loadingSymbols, this.destroyed)
        return;
      this._whenSymbolRemoved.removeUnordered(l10);
      if (this._graphicsWaitingForSymbol.get(e9.uid) !== a10 || o5 || s8.destroyed || this.graphicSymbolSupported && e9.symbol && e9.symbol.id !== s8.symbol.id)
        --s8.referenced, this._cleanupSymbols();
      else {
        const i8 = this._createGraphics3DGraphic(s8, n5);
        this._spatialIndex && null != i8 && this._spatialIndex.add(i8), --s8.referenced, this._endGraphicUpdate(e9);
      }
      this._featureStore.events.emit("changed"), this._labeler && this.owner.view.labeler.setDirty();
    }, d8 = (i8) => {
      --this._loadingSymbols, this.destroyed || (this._whenSymbolRemoved.removeUnordered(l10), o5 || (d(i8) ? this.add([e9]) : s8.destroyed || this._endGraphicUpdate(e9)));
    };
    ++this._loadingSymbols, t13 === C4.ASYNC ? s8.load(() => this._frameTask.schedule(h6), (e10) => this._frameTask.schedule(() => d8(e10))) : s8.load(h6, d8);
  }
  _removeGraphic(e9) {
    var _a, _b;
    const i7 = e9.uid, t13 = this.graphics3DGraphics.get(i7);
    if (t13) {
      t13.graphics3DSymbol.onRemoveGraphic(t13);
      const e10 = t13.usedMemory, r5 = t13.isElevationSource;
      this._conditionalRemove(t13, i7), (_a = this._spatialIndex) == null ? void 0 : _a.remove(t13);
      const s8 = t13.graphics3DSymbol.symbol.id;
      (_b = this._graphicsBySymbol.get(s8)) == null ? void 0 : _b.delete(i7), this._graphicsWithoutSymbol.delete(i7), this._removeGraphics3DGraphic(i7, e10, r5), t13.destroy(), this._featureStore.events.emit("changed");
    } else
      this._graphicsWithoutSymbol.delete(i7), this._graphicsWaitingForSymbol.delete(i7), 0 === this._graphicsWaitingForSymbol.size && (this._cleanupSymbols(), this.notifyChange("updating"));
  }
  _hasLabelingContext(e9) {
    if (e9 instanceof b2 || e9 instanceof m3) {
      const i7 = this.symbolCreationContext.layer;
      return !!i7.labelingInfo && i7.labelingInfo.some((i8) => i8.symbol === e9);
    }
    return false;
  }
  _hasValidSymbolCreationContext(e9) {
    return !(e9 instanceof b2 && !this._hasLabelingContext(e9)) || (Ve.error("LabelSymbol3D is only valid as part of a LabelClass. Using LabelSymbol3D as a renderer symbol is not supported."), false);
  }
  _getRenderingInfo(e9, i7) {
    const t13 = e9.geometry;
    if (null == t13)
      return i7 && !this._geometryWarningLogged && (this._geometryWarningLogged = true, i7.warn(`Graphic in layer ${this.layer.id} has no geometry and will not render`)), null;
    if (!Cn(t13.spatialReference, this._viewSpatialReference))
      return i7 && !this._geometryWarningLogged && (this._geometryWarningLogged = true, i7.warn(`Graphic in layer ${this.layer.id} has incompatible spatial reference and will not render`)), null;
    if (!this.graphicSymbolSupported && null != e9.symbol)
      return i7 && !this._symbolWarningLogged && (this._symbolWarningLogged = true, i7.warn(`Graphic in layer ${this.layer.id} is not allowed to have a symbol, use a renderer instead`)), null;
    const r5 = this.rendererHasGeometryOperations ? c4(e9, this.layer) : e9;
    let s8;
    if (this.owner.getRenderingInfo && (this.getRenderingInfoWithoutRenderer || null != this.currentRenderer))
      s8 = this.owner.getRenderingInfo(r5, this.currentRenderer, this._arcadeOnDemand);
    else {
      s8 = { symbol: r5.symbol || c6(r5.geometry) };
    }
    return null == s8 || null == s8.symbol ? (i7 && !this._symbolWarningLogged && (this._symbolWarningLogged = true, i7.warn(`Graphic in layer ${this.layer.id} has no symbol and will not render`)), null) : s8;
  }
  _getRenderingInfoAsync(e9, i7) {
    if (null == e9.geometry)
      return Ve && !this._geometryWarningLogged && (this._geometryWarningLogged = true, Ve.warn(`Graphic in layer ${this.layer.id} has no geometry and will not render`)), null;
    if (!this.graphicSymbolSupported && null != e9.symbol)
      return Ve && !this._symbolWarningLogged && (this._symbolWarningLogged = true, Ve.warn(`Graphic in layer ${this.layer.id} is not allowed to have a symbol, use a renderer instead`)), null;
    const t13 = this.rendererHasGeometryOperations ? c4(e9, this.layer) : e9;
    return this.owner.getRenderingInfoAsync(t13, this.currentRenderer, this._arcadeOnDemand, i7);
  }
  _createGraphics3DSymbol(e9, i7) {
    if (!this._hasValidSymbolCreationContext(e9))
      return null;
    const t13 = this._getConvertedSymbol(e9);
    if (!t13)
      return null;
    let r5;
    if (null != i7 && "backgroundFillSymbol" in i7 && i7.backgroundFillSymbol) {
      const e10 = S4(i7.backgroundFillSymbol, { ignoreDrivers: true });
      null != e10.symbol && "web-style" !== e10.symbol.type && "cim" !== e10.symbol.type && (r5 = e10.symbol.symbolLayers);
    }
    const s8 = t11(t13, this.symbolCreationContext, r5);
    return s8.load(() => {
      const e10 = s8.extentPadding;
      e10 > this.extentPadding && this._set("extentPadding", e10), this.notifyChange("averageSymbolComplexity");
    }, () => {
    }), s8;
  }
  getOrCreateGraphics3DSymbol(e9, i7) {
    let t13 = this._symbols.get(e9.id);
    return void 0 === t13 && (t13 = e9 instanceof u2 ? new i5(e9, (e10) => this._frameTask.schedule(e10), (e10) => this._createGraphics3DSymbol(e10, i7)) : this._createGraphics3DSymbol(e9, i7), this._symbols.set(e9.id, t13)), null != t13 && ++t13.referenced, t13;
  }
  trackGraphicState(e9) {
    return null == this._graphicStateTracking && (this._graphicStateTracking = new s6(this)), this._graphicStateTracking.add(e9);
  }
  _addGraphics3DGraphic(e9) {
    this._usedMemory += e9.usedMemory, this.graphics3DGraphics.set(e9.graphic.uid, e9), this._numberOfGraphics++, e9.isElevationSource && (this._numberOfGraphicsProvidingElevation++, this.updateStageLayerElevationProvider()), this._updateLayerVisibility();
  }
  _removeGraphics3DGraphic(e9, i7, t13 = false) {
    this._usedMemory -= i7, this.graphics3DGraphics.delete(e9), this._numberOfGraphics--, t13 && (this._numberOfGraphicsProvidingElevation--, this.updateStageLayerElevationProvider()), this._updateLayerVisibility();
  }
  _createGraphics3DGraphic(e9, i7) {
    var _a, _b, _c;
    const t13 = i7.graphic;
    if (this._graphicsWithoutSymbol.delete(t13.uid), !this._symbols.has(e9.symbol.id))
      return this.add([t13]), null;
    if (this.graphics3DGraphics.has(t13.uid))
      return null;
    const r5 = e9.createGraphics3DGraphic(i7);
    if (null == r5)
      return null;
    this._addGraphics3DGraphic(r5);
    const s8 = e9.symbol.id;
    this._graphicsBySymbol.has(s8) || this._graphicsBySymbol.set(s8, /* @__PURE__ */ new Map()), this._graphicsBySymbol.get(s8).set(t13.uid, r5);
    if (r5.isDraped && this._graphicsDrapedUids.add(t13.uid), r5.centroid = null, null != t13.geometry && "point" !== t13.geometry.type && (r5.centroid = w2(t13.geometry, this._viewSpatialReference)), this._updateUserVisibility(r5), null != this._scaleVisibility && this._scaleVisibility.updateVisibility(r5), null != this._filterVisibility) {
      const { defaultVisibility: e10 } = this._filterVisibility;
      r5.setVisibilityFlag(A3.GRAPHIC, L2.FILTER, e10), e10 || this._filterVisibility.reapply();
    }
    (_a = this._deconflictor) == null ? void 0 : _a.addGraphic(r5), (_b = this._labeler) == null ? void 0 : _b.addGraphic(r5), (_c = this._objectStates) == null ? void 0 : _c.addGraphic(r5), this._deconflictor && this.owner.view.deconflictor.setInitialIconVisibilityFlag(this, r5), r5.initialize(this.stageLayer, this.owner), null != this._graphicStateTracking && this._graphicStateTracking.addGraphic(r5);
    const a10 = this._whenGraphics3DGraphicRequests[t13.uid];
    return a10 && (delete this._whenGraphics3DGraphicRequests[t13.uid], a10.resolve(r5)), r5;
  }
  _abortRendererChange() {
    this._rendererChangeAbortController && (this._rendererChangeAbortController.abort(), this._rendererChangeAbortController = null);
  }
  async rendererChange(e9) {
    if (this._abortRendererChange(), e9 !== this.currentRenderer)
      if (this._validateRenderer(e9), null == e9 && this._currentRendererChange(null, false), t10(e9))
        if (null != e9 && e9.arcadeRequired) {
          const i7 = new AbortController();
          this._rendererChangeAbortController = i7;
          const { arcadeUtils: t13 } = await this._ensureArcade();
          s3(i7);
          const r5 = t13.hasGeometryOperations(e9);
          r5 && (await t13.enableGeometryOperations(), s3(i7)), this.effectiveUpdatePolicy === C4.ASYNC ? await this._frameTask.schedule(() => this._currentRendererChange(e9, r5), i7.signal) : this._currentRendererChange(e9, r5), this._rendererChangeAbortController = null;
        } else if (this.effectiveUpdatePolicy === C4.ASYNC) {
          const i7 = new AbortController();
          this._rendererChangeAbortController = i7, await this._frameTask.schedule(() => this._currentRendererChange(e9, false), i7.signal), this._rendererChangeAbortController = null;
        } else
          this._currentRendererChange(e9, false);
      else
        this._currentRendererChange(e9, false);
  }
  async _ensureArcade() {
    return null == this._arcadeOnDemand ? (this._arcadeOnDemand = await i4(), this._arcadeOnDemand) : this._arcadeOnDemand;
  }
  _currentRendererChange(e9, i7) {
    this.currentRenderer = e9, this.rendererHasGeometryOperations = i7, this.symbolCreationContext.arcade = this._arcadeOnDemand;
    const t13 = this.symbolCreationContext.renderer;
    if (e9 === t13)
      return;
    if (this._symbolConversionCache.clear(), null == e9)
      return this.symbolCreationContext.renderer = null, void this.recreateAllGraphicsAndSymbols();
    const r5 = a4(t13, e9);
    this._updateUnchangedSymbolMappings(r5, e9, t13), this.symbolCreationContext.renderer = e9, null != r5 && ("complete" === r5.type ? this.recreateAllGraphicsAndSymbols() : "partial" === r5.type && (this._applyRendererDiff(r5, e9, t13) ? this._volatileGraphicsUpdated() : this.recreateAllGraphicsAndSymbols()), this.notifyChange("averageSymbolComplexity"));
  }
  _diffHasSymbolChange(e9) {
    for (const i7 in e9.diff)
      switch (i7) {
        case "visualVariables":
        case "defaultSymbol":
        case "uniqueValueInfos":
          break;
        case "uniqueValueGroups":
        case "authoringInfo":
        case "fieldDelimiter":
          delete e9.diff[i7];
          break;
        default:
          return true;
      }
    return false;
  }
  _applySymbolSetDiff(e9, i7, t13) {
    e9 = e9 || [], i7 = i7 || [];
    const r5 = [];
    for (const s8 of i7) {
      const i8 = this._graphicsBySymbol.get(s8.id);
      i8 && i8.forEach((a10, n5) => {
        const o5 = a10.graphic, l10 = this.layer instanceof b ? this.layer : null, h6 = this._arcadeOnDemand;
        if (s8 === t13.defaultSymbol && t13.getSymbol(c4(o5, l10), { arcade: h6 }) === t13.defaultSymbol)
          return;
        const d8 = a10.usedMemory;
        e9.length || t13.defaultSymbol ? r5.push(o5) : this._graphicsWithoutSymbol.set(n5, o5);
        const p2 = this.graphics3DGraphics.get(n5);
        this._conditionalRemove(p2, n5), a10.destroy(), i8.delete(n5), this._removeGraphics3DGraphic(n5, d8), this._updateLayerVisibility();
      }), this._whenSymbolRemoved.forAll((e10) => e10(s8.id));
    }
    (e9.length || r5.length) && (this._graphicsWithoutSymbol.forEach((e10) => r5.push(e10)), this._graphicsWithoutSymbol.clear(), this.add(r5)), this._cleanupSymbols(), this._labeler && this.owner.view.labeler.setDirty(), this.owner.view.deconflictor.setDirty();
  }
  _applyUniqueValueRendererDiff(e9, i7, t13) {
    const s8 = e9.diff.defaultSymbol, a10 = e9.diff.uniqueValueInfos;
    if (s8 || a10) {
      const n5 = a10 ? a10.added.map((e10) => e10.symbol).filter(R) : [], o5 = a10 ? a10.removed.map((e10) => e10.symbol).filter(R) : [];
      if (a10)
        for (let e10 = 0; e10 < a10.changed.length; e10++)
          n5.push(a10.changed[e10].newValue.symbol), o5.push(a10.changed[e10].oldValue.symbol);
      return s8 ? (t13.defaultSymbol && o5.push(t13.defaultSymbol), i7.defaultSymbol && n5.push(i7.defaultSymbol)) : t13.defaultSymbol && n5.length && o5.push(i7.defaultSymbol), this._applySymbolSetDiff(n5, o5, i7), delete e9.diff.defaultSymbol, delete e9.diff.uniqueValueInfos, true;
    }
    return false;
  }
  _calculateUnchangedSymbolMapping(e9, i7, t13) {
    var _a;
    if ("unique-value" !== (i7 == null ? void 0 : i7.type) || "unique-value" !== (t13 == null ? void 0 : t13.type) || null != e9 && "partial" !== e9.type)
      return [];
    const r5 = (e10) => null != e10 ? e10.id : null, s8 = e9 && e9.diff, a10 = s8 && s8.defaultSymbol, n5 = s8 && s8.uniqueValueInfos;
    let o5;
    if (n5)
      o5 = n5.unchanged.map((e10) => ({ oldId: r5(e10.oldValue.symbol), newId: r5(e10.newValue.symbol) }));
    else {
      o5 = [];
      for (const e10 of t13.uniqueValueInfos ?? []) {
        const t14 = r5(e10.symbol), s9 = (_a = i7.uniqueValueInfos) == null ? void 0 : _a.find((i8) => i8.value === e10.value);
        s9 && t14 !== r5(s9.symbol) && o5.push({ oldId: t14, newId: r5(s9.symbol) });
      }
    }
    return !a10 && t13.defaultSymbol && o5.push({ oldId: r5(t13.defaultSymbol), newId: r5(i7.defaultSymbol) }), o5;
  }
  _updateSymbolMapping(e9, i7) {
    const t13 = null != i7 && i7 ? "string" == typeof i7 ? i7 : i7.id : null;
    if (null == e9 || e9 === t13)
      return;
    const r5 = this._graphicsBySymbol.get(e9);
    this._graphicsBySymbol.delete(e9), void 0 !== r5 && this._graphicsBySymbol.set(t13, r5);
    const s8 = this._symbols.get(e9);
    if (void 0 !== s8 && (this._symbols.delete(e9), this._symbols.set(t13, s8), null != s8)) {
      const e10 = "string" == typeof i7 ? null : i7;
      null != e10 ? s8.symbol = e10 : s8.symbol.id = t13;
    }
  }
  _updateUnchangedSymbolMappings(e9, i7, t13) {
    const r5 = this._calculateUnchangedSymbolMapping(e9, i7, t13);
    for (const { oldId: s8, newId: a10 } of r5)
      this._updateSymbolMapping(s8, a10);
  }
  _applyRendererDiff(e9, t13, r5) {
    if (this._diffHasSymbolChange(e9))
      return false;
    if (t13 instanceof A2 && r5 instanceof A2 && this._applyUniqueValueRendererDiff(e9, t13, r5) && 0 === Object.keys(e9.diff).length)
      return true;
    for (const [i7] of this._graphicsBySymbol) {
      const r6 = this._symbols.get(i7);
      if (null != r6)
        switch (r6.applyRendererDiff(e9, t13)) {
          case e6.RecreateSymbol:
            this._recreateSymbol(i7);
            break;
          case e6.RecreateGraphics:
            this._recreateGraphicsForSymbol(i7);
          case e6.FastUpdate:
        }
    }
    return true;
  }
  opacityChange() {
    this.forEachGraphics3DSymbol((e9, i7) => e9.globalPropertyChanged("opacity", i7)), this._updateStageLayerVisibility();
  }
  _slicePlaneEnabledChange(e9) {
    e9 !== this.symbolCreationContext.slicePlaneEnabled && (this.symbolCreationContext.slicePlaneEnabled = e9, this.stageLayer.sliceable = e9, this.forEachGraphics3DSymbol((e10, i7) => e10.globalPropertyChanged("slicePlaneEnabled", i7)), this._deconflictor && this._deconflictor.slicePlaneEnabledChange(), this._labeler && this._labeler.slicePlaneEnabledChange());
  }
  _physicalBasedRenderingChange(e9) {
    this.symbolCreationContext.physicalBasedRenderingEnabled = e9, this.forEachGraphics3DSymbol((e10, i7, t13) => {
      e10.globalPropertyChanged("physicalBasedRenderingEnabled", i7) || this._recreateSymbol(t13);
    });
  }
  _skipHighSymbolLoDsChange(e9) {
    this.symbolCreationContext.skipHighSymbolLods = e9, this.forEachGraphics3DSymbol((e10, i7, t13) => {
      e10.globalPropertyChanged("skipHighSymbolLods", i7) || this._recreateSymbol(t13);
    });
  }
  _pixelRatioChange() {
    this.forEachGraphics3DSymbol((e9, i7, t13) => {
      e9.globalPropertyChanged("pixelRatio", i7) || this._recreateSymbol(t13);
    });
  }
  _signalUpdatingDuringAsyncLoadedGraphicsChange() {
    this._updatingPendingLoadedGraphicsChange && this._updatingPendingLoadedGraphicsChange.remove(), this._updatingPendingLoadedGraphicsChange = v(() => {
      this._updatingPendingLoadedGraphicsChange = null;
    });
  }
  setClippingExtent(e9, i7) {
    const t13 = this.symbolCreationContext.clippingExtent, r5 = i();
    return u4(e9, r5, i7) ? this.symbolCreationContext.clippingExtent = Z(i2(), r5) : this.symbolCreationContext.clippingExtent = null, !B(this.symbolCreationContext.clippingExtent, t13);
  }
  modifyGraphics3DGraphicVisibilities(e9) {
    var _a, _b;
    if (this.destroyed)
      return;
    let i7 = false;
    this.graphics3DGraphics.forEach((t13) => {
      e9(t13) && (i7 = true);
    }), i7 && ((_a = this.owner.view.labeler) == null ? void 0 : _a.setDirty(), (_b = this.owner.view.deconflictor) == null ? void 0 : _b.setDirty());
  }
  forEachGraphics3DSymbol(e9) {
    for (const [i7, t13] of this._symbols) {
      if (null == t13)
        return;
      e9(t13, this._graphicsBySymbol.get(i7) || Ne, i7);
    }
  }
  updateAllGraphicsVisibility() {
    null != this._filterVisibility && this._filterVisibility.reapply(), this.modifyGraphics3DGraphicVisibilities((e9) => {
      const i7 = this._updateUserVisibility(e9), t13 = null != this._scaleVisibility && this._scaleVisibility.updateVisibility(e9);
      return i7 || t13;
    });
  }
  _hideAllGraphics() {
    this.modifyGraphics3DGraphicVisibilities((e9) => e9.setVisibilityFlag(A3.GRAPHIC, L2.USER, false));
  }
  _validateRenderer(e9) {
    var _a;
    const i7 = s4(e9, { geometryType: (_a = this.layer) == null ? void 0 : _a.geometryType });
    if (i7) {
      const e10 = `Renderer for layer '${this.layer.title ? `${this.layer.title}, ` : ""}, id:${this.layer.id}' is not supported in a SceneView`;
      Ve.warn(e10, i7.message);
    }
  }
  _volatileGraphicsUpdated() {
    var _a;
    (_a = this._labeler) == null ? void 0 : _a.reset(), this.stageLayer.shaderTransformationChanged(), this.notifyChange("updating");
  }
  _cleanupSymbols() {
    if (this._graphicsWaitingForSymbol.size > 0 || this._suspendSymbolCleanup)
      return;
    let e9 = false;
    this._symbols.forEach((i7, t13) => {
      if (null == i7 || i7.referenced > 0)
        return;
      const r5 = this._graphicsBySymbol.get(t13);
      r5 && 0 !== r5.size || (this._graphicsBySymbol.delete(t13), this._symbols.delete(t13), l(i7), e9 = true);
    }), e9 && (this._recomputeExtentPadding(), this.notifyChange("averageSymbolComplexity"));
  }
  get test() {
    return { snapshotInternals: () => ({ graphics: [...this.graphics3DGraphics.keys()].sort(), symbols: [...this._symbols.keys()].sort(), graphicsBySymbol: [...this._graphicsBySymbol.keys()].sort().map((e9) => ({ symbolId: e9, graphics: [...this._graphicsBySymbol.get(e9).keys()].sort() })), graphicsWithoutSymbol: [...this._graphicsWithoutSymbol.keys()].sort(), graphicsDrapedUids: [...this._graphicsDrapedUids].sort(), pendingUpdates: this._pendingUpdates }), symbols: this._symbols, filterVisibility: this._filterVisibility, numPending: this._pendingUpdates.size, forceUpdatePolicy: (e9) => {
      this._forcedUpdatePolicy = e9;
    } };
  }
  get performanceInfo() {
    return { visible: this.graphics3DGraphics.size, missing: this._graphicsWithoutSymbol.size, pending: this._pendingUpdates.size };
  }
};
var Te;
Fe.tmpVec = n2(), e([y({ readOnly: true })], Fe.prototype, "computedExtent", void 0), e([y()], Fe.prototype, "currentRenderer", void 0), e([y()], Fe.prototype, "rendererHasGeometryOperations", void 0), e([y()], Fe.prototype, "_frameTask", void 0), e([y({ readOnly: true })], Fe.prototype, "_viewSpatialReference", null), e([y()], Fe.prototype, "_rendererChangeAbortController", void 0), e([y()], Fe.prototype, "_elevationInfoChangeAbortController", void 0), e([y()], Fe.prototype, "_initializeAbortController", void 0), e([y()], Fe.prototype, "_elevationAlignment", void 0), e([y()], Fe.prototype, "_scaleVisibility", void 0), e([y()], Fe.prototype, "_filterVisibility", void 0), e([y()], Fe.prototype, "_initializePromise", void 0), e([y()], Fe.prototype, "_spatialIndex", void 0), e([y({ readOnly: true })], Fe.prototype, "extentPadding", void 0), e([y()], Fe.prototype, "_updatingPendingLoadedGraphicsChange", void 0), e([y()], Fe.prototype, "_featureStore", void 0), e([y()], Fe.prototype, "_deconflictor", void 0), e([y()], Fe.prototype, "_labeler", void 0), e([y()], Fe.prototype, "_objectStates", void 0), e([y()], Fe.prototype, "_loadingSymbols", void 0), e([y()], Fe.prototype, "preferredUpdatePolicy", void 0), e([y()], Fe.prototype, "_forcedUpdatePolicy", void 0), e([y({ readOnly: true })], Fe.prototype, "effectiveUpdatePolicy", null), e([y({ constructOnly: true })], Fe.prototype, "elevationFeatureExpressionEnabled", void 0), e([y({ constructOnly: true })], Fe.prototype, "owner", void 0), e([y({ constructOnly: true })], Fe.prototype, "layer", void 0), e([y({ constructOnly: true })], Fe.prototype, "graphicSymbolSupported", void 0), e([y({ constructOnly: true })], Fe.prototype, "getRenderingInfoWithoutRenderer", void 0), e([y({ constructOnly: true })], Fe.prototype, "componentFactories", void 0), e([y({ constructOnly: true })], Fe.prototype, "setUidToIdOnAdd", void 0), e([y()], Fe.prototype, "featureStore", null), e([y()], Fe.prototype, "initializePromise", null), e([y()], Fe.prototype, "scaleVisibility", null), e([y()], Fe.prototype, "elevationAlignment", null), e([y()], Fe.prototype, "objectStates", null), e([y()], Fe.prototype, "filterVisibility", null), e([y({ readOnly: true })], Fe.prototype, "updating", null), e([y({ readOnly: true })], Fe.prototype, "running", null), e([y({ readOnly: true })], Fe.prototype, "suspendedOrOutsideOfView", null), e([y({ readOnly: true, dependsOn: [] })], Fe.prototype, "updatingRemaining", null), e([y({ readOnly: true, dependsOn: ["owner.view.qualitySettings.graphics3D.maxTotalNumberOfPrimitives", "owner.view.qualitySettings.graphics3D.maxTotalNumberOfFeatures", "averageSymbolComplexity"] })], Fe.prototype, "displayFeatureLimit", null), e([y({ readOnly: true, dependsOn: [] })], Fe.prototype, "averageSymbolComplexity", null), e([y({ constructOnly: true })], Fe.prototype, "hasZ", void 0), e([y({ constructOnly: true })], Fe.prototype, "hasM", void 0), e([y()], Fe.prototype, "_objectIdField", null), Fe = Ae = e([a(Le)], Fe), function(e9) {
  e9[e9.NEW = 0] = "NEW", e9[e9.LOADING = 1] = "LOADING", e9[e9.READY = 2] = "READY", e9[e9.REJECTED = 3] = "REJECTED";
}(Te || (Te = {}));
var ke = class {
  constructor() {
    this.add = null, this.renderingInfo = null, this.state = Te.NEW, this.abortController = null, this.remove = null;
  }
  clear() {
    this.add = null, this.renderingInfo = null, this.state = Te.NEW, this.abortController = null, this.remove = null;
  }
};
var ze = 10;
var We = n2();
var Me = n2();
var Ne = /* @__PURE__ */ new Map();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DScaleVisibility.js
var y5 = s.getLogger("esri.views.3d.layers.graphics.Graphics3DScaleVisibility");
var d6 = class extends d2 {
  constructor(e9) {
    super(e9), this._scaleRangeActive = false, this._layerScaleRangeVisibilityQuery = false, this._extent = null, this.graphicsCoreOwner = null, this.layer = null, this.queryGraphicUIDsInExtent = null, this.graphicsCore = null, this.basemapTerrain = null, this.layerScaleEnabled = true, this.suspended = false, this._dirty = true;
  }
  initialize() {
    this.updateScaleRangeActive();
    const e9 = this.graphicsCoreOwner.view.resourceController.scheduler;
    this.handles.add(e9.registerTask(I.SCALE_VISIBILITY, this)), this.updatingHandles.add(() => this.layer.effectiveScaleRange, () => this.layerMinMaxScaleChangeHandler());
  }
  destroy() {
    this.updatingHandles.removeAll(), this.handles.removeAll(), this._dirty = false, this._extent = null, this.graphicsCoreOwner = null, this.layer = null, this.queryGraphicUIDsInExtent = null, this.graphicsCore = null, this.basemapTerrain = null;
  }
  get updating() {
    return this._dirty || this.updatingHandles.updating;
  }
  _setDirty() {
    this._dirty = true;
  }
  setExtent(e9) {
    const i7 = this.graphicsCoreOwner.view.spatialReference, t13 = this.graphicsCoreOwner.view.basemapTerrain.spatialReference;
    if (i7 === t13)
      this._extent = e9 ?? null;
    else {
      const r5 = i();
      kn(e9, i7, r5, t13) ? this._extent = r5 : this._extent = null;
    }
    this._setDirty();
  }
  scaleRangeActive() {
    return this._scaleRangeActive;
  }
  updateScaleRangeActive() {
    const e9 = this.layer, i7 = e9.effectiveScaleRange;
    let t13 = this.layerScaleEnabled && null != i7 && u9(i7.minScale, i7.maxScale);
    e9.labelingInfo && !t13 && (t13 = e9.labelingInfo.some((e10) => e10 && u9(e10.minScale ?? 0, e10.maxScale ?? 0)));
    const r5 = this._scaleRangeActive !== t13;
    return this._scaleRangeActive = t13, t13 && !this.handles.has(g4) && this.basemapTerrain ? (this.handles.add(this.basemapTerrain.on("scale-change", (e10) => this._scaleUpdateHandler(e10)), g4), this.layerScaleEnabled && this.handles.add(this.basemapTerrain.on("tiles-visibility-changed", () => this._setDirty()), g4)) : !t13 && this.handles.has(g4) && this.handles.remove(g4), r5;
  }
  get running() {
    return !(!this.graphicsCoreOwner.view.basemapTerrain || !this.updating);
  }
  runTask(e9) {
    const i7 = this.graphicsCoreOwner.view.basemapTerrain;
    if (this._extent && i7 && i7.ready && this._scaleRangeActive && this.layerScaleEnabled) {
      if (this._layerScaleRangeVisibilityQuery)
        return g2.YIELD;
      {
        this._layerScaleRangeVisibilityQuery = true;
        const { minScale: e10, maxScale: t13 } = this.layer.effectiveScaleRange;
        i7.queryVisibleScaleRange(this._extent, e10, t13, (e11) => this._finishUpdate(e11));
      }
    } else
      this._finishUpdate(true);
    e9.madeProgress();
  }
  _finishUpdate(e9) {
    this._layerScaleRangeVisibilityQuery = false, this._set("suspended", !e9), this._dirty = false;
  }
  _visibleAtLayerScale(e9) {
    const i7 = this.layer.effectiveScaleRange;
    return !this.layerScaleEnabled || t8(e9, i7.minScale || 0, i7.maxScale || 0);
  }
  _visibleAtLabelScale(e9, i7) {
    return t8(e9, i7.minScale || 0, i7.maxScale || 0);
  }
  _graphicScale(e9) {
    let i7;
    if (null != e9.centroid ? i7 = e9.centroid : null != e9.graphic.geometry && "point" === e9.graphic.geometry.type && (i7 = e9.graphic.geometry), i7) {
      return this.graphicsCoreOwner.view.basemapTerrain ? this.graphicsCoreOwner.view.basemapTerrain.getScale(i7) : 1;
    }
    return null;
  }
  _graphicVisible(e9) {
    if (!this.layerScaleEnabled)
      return true;
    const i7 = this._graphicScale(e9);
    return this._visibleAtLayerScale(i7);
  }
  updateVisibility(e9) {
    if (this._scaleRangeActive) {
      const i7 = this._graphicVisible(e9);
      return e9.setVisibilityFlag(A3.GRAPHIC, L2.SCALE_RANGE, i7);
    }
    return false;
  }
  updateGraphicLabelScaleVisibility(e9) {
    if (!this._scaleRangeActive)
      return false;
    if (!e9.labelLayers || 0 === e9.labelLayers.length)
      return false;
    const i7 = this._graphicScale(e9), t13 = this._updateLabelScaleVisibility(e9, i7);
    return t13 && (this.graphicsCoreOwner.view.deconflictor.setDirty(), this.graphicsCoreOwner.view.labeler.setDirty()), t13;
  }
  _updateLabelScaleVisibility(e9, i7) {
    if (!e9.labelLayers || 0 === e9.labelLayers.length)
      return false;
    const t13 = e9.labelLayers[0]._labelClass;
    if (t13 && null != t13.minScale && null != t13.maxScale) {
      const r5 = this._visibleAtLabelScale(i7, t13);
      if (e9.setVisibilityFlag(A3.LABEL, L2.SCALE_RANGE, r5))
        return true;
    }
    return false;
  }
  _scaleUpdateHandler(e9) {
    if (this._setDirty(), !this.graphicsCore.visible)
      return;
    const i7 = e9.extent, t13 = e9.scale, r5 = this._visibleAtLayerScale(t13);
    let s8 = false;
    const l10 = this.graphicsCoreOwner.view.spatialReference, h6 = e9.spatialReference;
    if (null == h6)
      return void y5.error("scaleUpdate: Internal error, no SpatialReference given for tiles");
    const o5 = !h6.equals(l10);
    if (o5) {
      if (!kn(i7, h6, b5, l10))
        return void y5.error("scaleUpdate: Internal error, cannot project AABR from " + h6 + " to wkid " + l10);
    }
    const p2 = o5 ? b5 : i7;
    this.queryGraphicUIDsInExtent(p2, l10, (e10) => {
      const a10 = this.graphicsCore.getGraphics3DGraphicById(e10);
      if (null == a10)
        return;
      const l11 = a10.centroid;
      null != l11 && (i7[0] > l11.x || i7[1] > l11.y || i7[2] < l11.x || i7[3] < l11.y) || (a10.setVisibilityFlag(A3.GRAPHIC, L2.SCALE_RANGE, r5) && (s8 = true), this._updateLabelScaleVisibility(a10, t13) && (s8 = true));
    }), s8 && (this.graphicsCoreOwner.view.deconflictor.setDirty(), this.graphicsCoreOwner.view.labeler.setDirty());
  }
  layerMinMaxScaleChangeHandler() {
    this.updateScaleRangeActive() && !this._scaleRangeActive ? this.graphicsCore.modifyGraphics3DGraphicVisibilities((e9) => e9.setVisibilityFlag(A3.GRAPHIC, L2.SCALE_RANGE, true)) : this._scaleRangeActive && this.graphicsCore.updateAllGraphicsVisibility(), this._setDirty();
  }
};
function u9(e9, i7) {
  return e9 > 0 || i7 > 0;
}
e([y()], d6.prototype, "graphicsCoreOwner", void 0), e([y()], d6.prototype, "layer", void 0), e([y()], d6.prototype, "queryGraphicUIDsInExtent", void 0), e([y()], d6.prototype, "graphicsCore", void 0), e([y()], d6.prototype, "basemapTerrain", void 0), e([y({ constructOnly: true })], d6.prototype, "layerScaleEnabled", void 0), e([y({ readOnly: true })], d6.prototype, "suspended", void 0), e([y({ readOnly: true })], d6.prototype, "updating", null), e([y()], d6.prototype, "_dirty", void 0), d6 = e([a("esri.views.3d.layers.graphics.Graphics3DScaleVisibility")], d6);
var g4 = "terrain-events";
var b5 = i();
var m6 = d6;

// node_modules/@arcgis/core/views/3d/layers/graphics/ExtentSet.js
var a9 = 0.05;
var l8 = class {
  constructor() {
    this._extents = new l2({ allocator: (t13) => t13 || i() }), this._tmpExtent = i(), this._dirty = false;
  }
  get empty() {
    return 0 === this._extents.length;
  }
  get size() {
    return this._extents.length;
  }
  clear() {
    this._extents.clear();
  }
  add(t13) {
    this._contains(t13) || (this._removeContained(t13), e3(this._extents.pushNew(), t13), this._dirty = true);
  }
  pop() {
    return this._dirty && this._mergeTight(), this._extents.pop();
  }
  merge(t13) {
    return this._mergeTight(t13), t13.hasProgressed;
  }
  _mergeTight(t13 = C3) {
    const e9 = this._extents, o5 = /* @__PURE__ */ new Set();
    let i7 = 0;
    for (; i7 !== e9.length; ) {
      e9.sort((t14, e10) => t14[0] - e10[0]), i7 = e9.length, o5.clear();
      for (let i8 = 0; i8 < e9.length; ++i8) {
        if (t13.done)
          return;
        const h6 = e9.at(i8);
        if (h6) {
          for (let t14 = i8 + 1; t14 < e9.length; ++t14) {
            const r5 = e9.at(t14);
            if (null == r5 || r5[0] >= h6[2])
              break;
            o5.add(r5);
          }
          o5.forEach((i9) => {
            if (h6 === i9)
              return;
            if (i9[2] <= h6[0])
              return void o5.delete(i9);
            const l10 = l3(h6), _3 = l3(i9), c8 = this._tmpExtent;
            m2(h6, i9, c8);
            const d8 = l10 + _3;
            (l3(c8) - d8) / d8 < a9 && (e3(h6, c8), o5.delete(i9), e9.remove(i9), t13.madeProgress());
          }), o5.add(h6);
        }
      }
    }
    this._dirty = false;
  }
  _contains(t13) {
    return this._extents.some((e9) => E(e9, t13));
  }
  _removeContained(t13) {
    this._extents.filterInPlace((e9) => !E(t13, e9));
  }
  get test() {
    const t13 = this;
    return { containsPoint: (e9) => t13._extents.some((t14) => p(t14, e9)) };
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DElevationAlignment.js
var c7 = class extends m {
  constructor(e9) {
    super(e9), this._dirtyExtents = new l8(), this._globalDirty = false, this._averageExtentUpdateSize = 0, this._dirtyGraphicsSet = /* @__PURE__ */ new Set(), this._handles = new t2(), this._updateElevation = false, this.graphicsCoreOwner = null, this.graphicsCore = null, this.events = new n3();
  }
  initialize() {
    const e9 = this.elevationProvider, t13 = this.graphicsCoreOwner.view.resourceController.scheduler;
    this._handles.add([e9.on("elevation-change", (e10) => this._elevationChanged(e10)), l4(() => this.graphicsCoreOwner.suspended, () => this._suspendedChange()), t13.registerTask(I.ELEVATION_ALIGNMENT, this)]);
  }
  destroy() {
    this._dirtyGraphicsSet.clear(), this._handles = l(this._handles), this.graphicsCoreOwner = null, this.graphicsCore = null, this.queryGraphicUIDsInExtent = null, this.elevationProvider = null;
  }
  clear() {
    this._dirtyGraphicsSet.clear(), this.notifyChange("updating");
  }
  _suspendedChange() {
    true === this.graphicsCoreOwner.suspended ? this._updateElevation = false : false === this.graphicsCoreOwner.suspended && this._updateElevation && (this._globalDirty = true, this.notifyChange("updating"));
  }
  elevationInfoChange() {
    this._globalDirty = true, this.notifyChange("updating");
  }
  get updating() {
    return this.running;
  }
  get running() {
    return this._dirtyGraphicsSet.size > 0 || this._dirtyExtents && !this._dirtyExtents.empty || this._globalDirty;
  }
  get updatingRemaining() {
    return this._dirtyGraphicsSet.size + this._dirtyExtents.size * this._averageExtentUpdateSize;
  }
  runTask(e9) {
    for (this._globalDirty && (this._markAllGraphicsElevationDirty(), this._globalDirty = false, e9.madeProgress()), e9.run(() => this._dirtyExtents.merge(e9)); this.running && !e9.done; )
      this._updateDirtyGraphics(e9), this._updateDirtyExtents(e9);
    this.notifyChange("updating");
  }
  _updateDirtyGraphics(e9) {
    const t13 = this.graphicsCoreOwner.view.renderCoordsHelper, i7 = this.graphicsCore.effectiveUpdatePolicy === C4.ASYNC;
    for (const r5 of this._dirtyGraphicsSet.keys()) {
      const s8 = this.graphicsCore.getGraphics3DGraphicById(r5);
      if (this._dirtyGraphicsSet.delete(r5), null != s8 && (s8.alignWithElevation(this.elevationProvider, t13, i7), this.graphicsCoreOwner.view.deconflictor.setDirty(), e9.madeProgress()), e9.done)
        return;
    }
  }
  _updateDirtyExtents(e9) {
    for (; !this._dirtyExtents.empty && !e9.done; ) {
      const t13 = this._dirtyExtents.pop(), i7 = this.elevationProvider.spatialReference;
      this.events.emit("invalidate-elevation", { extent: t13, spatialReference: i7 });
      const r5 = this._dirtyGraphicsSet.size;
      this.queryGraphicUIDsInExtent(t13, i7, (e10) => {
        const t14 = this.graphicsCore.getGraphics3DGraphicById(e10);
        null != t14 && t14.needsElevationUpdates() && this._dirtyGraphicsSet.add(e10);
      }), this._averageExtentUpdateSize = 0.1 * (this._dirtyGraphicsSet.size - r5) + 0.9 * this._averageExtentUpdateSize, e9.madeProgress();
    }
  }
  _markAllGraphicsElevationDirty() {
    this._dirtyExtents.clear(), this._dirtyGraphicsSet.clear(), this.graphicsCore.graphics3DGraphics.forEach((e9, t13) => this._dirtyGraphicsSet.add(t13));
  }
  _elevationChanged(e9) {
    if ("scene" === e9.context && (!this.graphicsCore.layer.elevationInfo || "relative-to-scene" !== this.graphicsCore.layer.elevationInfo.mode))
      return;
    const { extent: t13, spatialReference: i7 } = e9;
    if (this.graphicsCoreOwner.suspended) {
      if (!this._updateElevation) {
        const e10 = this.graphicsCore.computedExtent;
        e10 && t13[2] > e10.xmin && t13[0] < e10.xmax && t13[3] > e10.ymin && t13[1] < e10.ymax && (this._updateElevation = true);
      }
      this.events.emit("invalidate-elevation", { extent: t13, spatialReference: i7 });
    } else
      t13[0] === -1 / 0 ? this._globalDirty = true : this._dirtyExtents.add(t13), this.notifyChange("updating");
  }
};
e([y()], c7.prototype, "graphicsCoreOwner", void 0), e([y()], c7.prototype, "graphicsCore", void 0), e([y()], c7.prototype, "queryGraphicUIDsInExtent", void 0), e([y()], c7.prototype, "elevationProvider", void 0), e([y({ readOnly: true })], c7.prototype, "updating", null), e([y({ readOnly: true })], c7.prototype, "updatingRemaining", null), c7 = e([a("esri.views.3d.layers.graphics.Graphics3DElevationAlignment")], c7);
var l9 = c7;

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DFrustumVisibility.js
var d7 = 1.2;
var _2 = class extends m {
  constructor(e9) {
    super(e9), this.suspended = false, this._extent = null, this._extentIntersectionDirty = true, this._isVisibleBelowSurfaceInternal = false, this._handles = new t2(), this.graphicsCoreOwner = null, this.updating = true;
  }
  initialize() {
    const { graphicsCoreOwner: e9 } = this;
    this._extentIntersection = new N({ renderCoordsHelper: e9.view.renderCoordsHelper });
    const t13 = e9.view, s8 = t13.basemapTerrain, i7 = t13.resourceController.scheduler;
    this._handles.add([t13.on("resize", () => this._viewChange()), l4(() => t13.state.camera, () => this._viewChange(), U), i7.registerTask(I.FRUSTUM_VISIBILITY, this), l4(() => s8.visibleElevationBounds, () => this._elevationBoundsChange())]), "local" === t13.viewingMode ? this._isVisibleBelowSurface = true : this._handles.add([l4(() => {
      var _a, _b, _c;
      return [s8.baseOpacity, s8.wireframe, (_c = (_b = (_a = t13.map) == null ? void 0 : _a.ground) == null ? void 0 : _b.navigationConstraint) == null ? void 0 : _c.type];
    }, () => this._updateIsVisibleBelowSurface(), h)]);
  }
  destroy() {
    this._set("graphicsCoreOwner", null), this._extent = null, this._extentIntersection = null, this._handles = l(this._handles);
  }
  _setDirty() {
    this.updating || this._set("updating", true);
  }
  setExtent(e9) {
    this._extent = e9, this._extentIntersectionDirty = true, this._setDirty();
  }
  _viewChange() {
    this._setDirty();
  }
  _elevationBoundsChange() {
    this._setDirty(), this._extentIntersectionDirty = true;
  }
  set _isVisibleBelowSurface(e9) {
    this._isVisibleBelowSurfaceInternal = e9, this._setDirty(), this._extentIntersectionDirty = true;
  }
  _updateIsVisibleBelowSurface() {
    var _a, _b;
    const e9 = this.graphicsCoreOwner.view, t13 = e9.basemapTerrain, s8 = "local" === e9.viewingMode, i7 = "none" === ((_b = (_a = e9.map.ground) == null ? void 0 : _a.navigationConstraint) == null ? void 0 : _b.type);
    this._isVisibleBelowSurface = s8 || !t13.opaque || i7;
  }
  _updateExtentIntersection() {
    if (!this._extentIntersectionDirty)
      return;
    this._extentIntersectionDirty = false;
    const e9 = this.graphicsCoreOwner.view;
    let t13;
    if (this._isVisibleBelowSurfaceInternal)
      t13 = -0.3 * A(e9.spatialReference).radius;
    else {
      const { min: s8, max: i7 } = e9.basemapTerrain.visibleElevationBounds;
      t13 = s8 - Math.max(1, (i7 - s8) * (d7 - 1));
    }
    this._extentIntersection.update(this._extent, e9.spatialReference, t13);
  }
  get running() {
    return this.updating;
  }
  runTask(e9) {
    if (this._set("updating", false), !this._extent)
      return this._set("suspended", false), g2.YIELD;
    this._updateExtentIntersection();
    const t13 = this.graphicsCoreOwner.view.frustum, s8 = A(this.graphicsCoreOwner.view.spatialReference).radius;
    this._set("suspended", !this._extentIntersection.isVisibleInFrustum(t13, s8)), e9.madeProgress();
  }
};
e([y({ readOnly: true })], _2.prototype, "suspended", void 0), e([y({ constructOnly: true })], _2.prototype, "graphicsCoreOwner", void 0), e([y({ readOnly: true })], _2.prototype, "updating", void 0), _2 = e([a("esri.views.3d.layers.graphics.Graphics3DFrustumVisibility")], _2);
var m7 = _2;

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Object3DStateSet.js
var t12;
!function(e9) {
  e9[e9.Object = 0] = "Object", e9[e9.RenderGeometry = 1] = "RenderGeometry", e9[e9.External = 2] = "External", e9[e9.COUNT = 3] = "COUNT";
}(t12 || (t12 = {}));
var r4 = class {
  constructor() {
    this._items = [];
  }
  addObject(e9, r5) {
    this._items.push({ type: t12.Object, objectStateId: r5, object: e9 });
  }
  addRenderGeometry(e9, r5, o5) {
    this._items.push({ type: t12.RenderGeometry, objectStateId: r5, renderGeometry: e9, owner: o5 });
  }
  addExternal(e9, r5) {
    this._items.push({ type: t12.External, objectStateId: r5, remove: e9 });
  }
  remove(e9) {
    for (let t13 = this._items.length - 1; t13 >= 0; --t13) {
      const r5 = this._items[t13];
      r5.objectStateId === e9 && (this._removeObjectStateItem(r5), this._items.splice(t13, 1));
    }
  }
  removeObject(e9) {
    for (let r5 = this._items.length - 1; r5 >= 0; --r5) {
      const o5 = this._items[r5];
      o5.type === t12.Object && o5.object === e9 && (this._removeObjectStateItem(o5), this._items.splice(r5, 1));
    }
  }
  removeRenderGeometry(e9) {
    for (let r5 = this._items.length - 1; r5 >= 0; --r5) {
      const o5 = this._items[r5];
      o5.type === t12.RenderGeometry && o5.renderGeometry === e9 && (this._removeObjectStateItem(o5), this._items.splice(r5, 1));
    }
  }
  removeAll() {
    this._items.forEach((e9) => {
      this._removeObjectStateItem(e9);
    }), this._items = [];
  }
  _removeObjectStateItem(r5) {
    switch (r5.type) {
      case t12.Object:
        r5.objectStateId.channel === t6.Highlight ? r5.object.removeHighlight(r5.objectStateId) : r5.objectStateId.channel === t6.MaskOccludee && r5.object.removeOcclude(r5.objectStateId);
        break;
      case t12.RenderGeometry:
        r5.owner.removeRenderGeometryObjectState(r5.renderGeometry, r5.objectStateId);
        break;
      case t12.External:
        r5.remove(r5.objectStateId);
    }
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DObjectStateSet.js
var e8 = class {
  constructor(e9, i7) {
    this.stateType = e9, this.objectIdField = i7, this.objectStateSet = new r4(), this.ids = /* @__PURE__ */ new Set(), this.paused = false;
  }
  hasGraphic(t13) {
    if (this.objectIdField) {
      const e9 = t13.graphic.attributes[this.objectIdField];
      return this.ids.has(e9);
    }
    return this.ids.has(t13.graphic.uid);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DObjectStates.js
var s7 = class {
  constructor(t13) {
    this._graphicsCore = t13, this._stateSets = new Array();
  }
  destroy() {
    this.reset(), this._stateSets = null;
  }
  reset() {
    this._stateSets && (this._stateSets.forEach((t13) => t13.objectStateSet.removeAll()), this._stateSets.length = 0);
  }
  acquireSet(s8, a10) {
    const i7 = new e8(s8, a10);
    this._stateSets.push(i7);
    const h6 = e2(() => this.releaseSet(i7));
    return { set: i7, handle: h6 };
  }
  releaseSet(t13) {
    t13.objectStateSet.removeAll();
    const e9 = this._stateSets ? this._stateSets.indexOf(t13) : -1;
    -1 !== e9 && this._stateSets.splice(e9, 1);
  }
  _addObjectStateSet(t13, e9) {
    t13.addObjectStateSet(e9.stateType, e9.objectStateSet);
  }
  _removeObjectStateSet(t13, e9) {
    t13.removeObjectState(e9.objectStateSet);
  }
  setUid(t13, e9) {
    t13.ids.add(e9);
    const s8 = this._graphicsCore.graphics3DGraphics.get(e9);
    s8 && this._addObjectStateSet(s8, t13);
  }
  setUids(t13, e9) {
    e9.forEach((e10) => this.setUid(t13, e10));
  }
  setObjectIds(t13, e9) {
    e9.forEach((e10) => t13.ids.add(e10)), this._initializeSet(t13);
  }
  addGraphic(t13) {
    this._stateSets.forEach((e9) => {
      !e9.paused && e9.hasGraphic(t13) && this._addObjectStateSet(t13, e9);
    });
  }
  removeGraphic(t13) {
    this._stateSets.forEach((e9) => {
      e9.hasGraphic(t13) && this._removeObjectStateSet(t13, e9);
    });
  }
  allGraphicsDeleted() {
    this._stateSets && this._stateSets.forEach((t13) => t13.objectStateSet.removeAll());
  }
  _initializeSet(t13) {
    const e9 = this._graphicsCore.graphics3DGraphics;
    t13.objectIdField ? e9.forEach((e10) => {
      e10 && t13.hasGraphic(e10) && this._addObjectStateSet(e10, t13);
    }) : t13.ids.forEach((s8) => {
      const a10 = e9.get(s8);
      a10 && this._addObjectStateSet(a10, t13);
    });
  }
  get test() {
    return { states: this._stateSets };
  }
};

export {
  Fe,
  m6 as m,
  l8 as l,
  l9 as l2,
  m7 as m2,
  s7 as s
};
//# sourceMappingURL=chunk-HBJAGP7O.js.map
