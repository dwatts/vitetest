import {
  t as t2
} from "./chunk-XBN7M5OG.js";
import "./chunk-BPITJIFG.js";
import {
  g,
  y as y2
} from "./chunk-2XKILFME.js";
import "./chunk-G4LSNP77.js";
import {
  It,
  st
} from "./chunk-IG234GCS.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-BA6PBZHC.js";
import {
  y
} from "./chunk-GSS6WNQU.js";
import "./chunk-C2EHS6UI.js";
import {
  t
} from "./chunk-3FQOSG5O.js";
import "./chunk-AQ7R6V4L.js";
import {
  n
} from "./chunk-4CZO65BK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-JPW73GY2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-3VUFACNT.js";
import {
  f
} from "./chunk-ZEEBL7ZN.js";
import "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-MP6GH2AC.js";
import {
  e2 as e
} from "./chunk-V76KGJFU.js";
import "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import "./chunk-7I33FAWS.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/rest/query/operations/pbfDehydratedFeatureSet.js
function l(t4, e2) {
  return e2;
}
function u(t4, e2, r, s2) {
  switch (r) {
    case 0:
      return f2(t4, e2 + s2, 0);
    case 1:
      return "lowerLeft" === t4.originPosition ? f2(t4, e2 + s2, 1) : y3(t4, e2 + s2, 1);
  }
}
function p(t4, e2, r, s2) {
  return 2 === r ? f2(t4, e2, 2) : u(t4, e2, r, s2);
}
function c(t4, e2, r, s2) {
  return 2 === r ? f2(t4, e2, 3) : u(t4, e2, r, s2);
}
function d(t4, e2, r, s2) {
  return 3 === r ? f2(t4, e2, 3) : p(t4, e2, r, s2);
}
function f2({ translate: t4, scale: e2 }, r, s2) {
  return t4[s2] + r * e2[s2];
}
function y3({ translate: t4, scale: e2 }, r, s2) {
  return t4[s2] - r * e2[s2];
}
var m = class {
  constructor(t4) {
    this._options = t4, this.geometryTypes = ["point", "multipoint", "polyline", "polygon"], this._previousCoordinate = [0, 0], this._transform = null, this._applyTransform = l, this._lengths = [], this._currentLengthIndex = 0, this._toAddInCurrentPath = 0, this._vertexDimension = 0, this._coordinateBuffer = null, this._coordinateBufferPtr = 0, this._attributesConstructor = class {
    };
  }
  createFeatureResult() {
    return new g();
  }
  finishFeatureResult(t4) {
    if (this._options.applyTransform && (t4.transform = null), this._attributesConstructor = class {
    }, this._coordinateBuffer = null, this._lengths.length = 0, !t4.hasZ)
      return;
    const e2 = t(t4.geometryType, this._options.sourceSpatialReference, t4.spatialReference);
    if (null != e2)
      for (const r of t4.features)
        e2(r.geometry);
  }
  createSpatialReference() {
    return new f();
  }
  addField(t4, e2) {
    t4.fields.push(y.fromJSON(e2));
    const r = t4.fields.map((t5) => t5.name);
    this._attributesConstructor = function() {
      for (const t5 of r)
        this[t5] = null;
    };
  }
  addFeature(t4, e2) {
    const r = this._options.maxStringAttributeLength ?? 0;
    if (r > 0)
      for (const s2 in e2.attributes) {
        const t5 = e2.attributes[s2];
        "string" == typeof t5 && t5.length > r && (e2.attributes[s2] = "");
      }
    t4.features.push(e2);
  }
  addQueryGeometry(t4, e2) {
    const { queryGeometry: r, queryGeometryType: s2 } = e2, o = It(r.clone(), r, false, false, this._transform), i = st(o, s2, false, false);
    let h = null;
    switch (s2) {
      case "esriGeometryPoint":
        h = "point";
        break;
      case "esriGeometryPolygon":
        h = "polygon";
        break;
      case "esriGeometryPolyline":
        h = "polyline";
        break;
      case "esriGeometryMultipoint":
        h = "multipoint";
    }
    i.type = h, t4.queryGeometryType = s2, t4.queryGeometry = i;
  }
  prepareFeatures(e2) {
    switch (this._transform = e2.transform ?? null, this._options.applyTransform && e2.transform && (this._applyTransform = this._deriveApplyTransform(e2)), this._vertexDimension = 2, e2.hasZ && this._vertexDimension++, e2.hasM && this._vertexDimension++, e2.geometryType) {
      case "point":
        this.addCoordinate = (t4, e3, r) => this.addCoordinatePoint(t4, e3, r), this.createGeometry = (t4) => this.createPointGeometry(t4);
        break;
      case "polygon":
        this.addCoordinate = (t4, e3, r) => this._addCoordinatePolygon(t4, e3, r), this.createGeometry = (t4) => this._createPolygonGeometry(t4);
        break;
      case "polyline":
        this.addCoordinate = (t4, e3, r) => this._addCoordinatePolyline(t4, e3, r), this.createGeometry = (t4) => this._createPolylineGeometry(t4);
        break;
      case "multipoint":
        this.addCoordinate = (t4, e3, r) => this._addCoordinateMultipoint(t4, e3, r), this.createGeometry = (t4) => this._createMultipointGeometry(t4);
        break;
      case "mesh":
      case "extent":
        break;
      default:
        n(e2.geometryType);
    }
  }
  createFeature() {
    return this._lengths.length = 0, this._currentLengthIndex = 0, this._previousCoordinate[0] = 0, this._previousCoordinate[1] = 0, new y2(e(), null, new this._attributesConstructor());
  }
  allocateCoordinates() {
    const t4 = this._lengths.reduce((t5, e2) => t5 + e2, 0);
    this._coordinateBuffer = new Float64Array(t4 * this._vertexDimension), this._coordinateBufferPtr = 0;
  }
  addLength(t4, e2) {
    0 === this._lengths.length && (this._toAddInCurrentPath = e2), this._lengths.push(e2);
  }
  createPointGeometry(t4) {
    const e2 = { type: "point", x: 0, y: 0, spatialReference: t4.spatialReference, hasZ: !!t4.hasZ, hasM: !!t4.hasM };
    return e2.hasZ && (e2.z = 0), e2.hasM && (e2.m = 0), e2;
  }
  addCoordinatePoint(t4, e2, r) {
    const s2 = this._transform ? this._applyTransform(this._transform, e2, r, 0) : e2;
    if (null != s2)
      switch (r) {
        case 0:
          t4.x = s2;
          break;
        case 1:
          t4.y = s2;
          break;
        case 2:
          t4.hasZ ? t4.z = s2 : t4.m = s2;
          break;
        case 3:
          t4.m = s2;
      }
  }
  _transformPathLikeValue(t4, e2) {
    let r = 0;
    return e2 <= 1 && (r = this._previousCoordinate[e2], this._previousCoordinate[e2] += t4), this._transform ? this._applyTransform(this._transform, t4, e2, r) : t4;
  }
  _addCoordinatePolyline(t4, e2, r) {
    this._dehydratedAddPointsCoordinate(t4.paths, e2, r);
  }
  _addCoordinatePolygon(t4, e2, r) {
    this._dehydratedAddPointsCoordinate(t4.rings, e2, r);
  }
  _addCoordinateMultipoint(t4, e2, r) {
    0 === r && t4.points.push([]);
    const s2 = this._transformPathLikeValue(e2, r);
    t4.points[t4.points.length - 1].push(s2);
  }
  _createPolygonGeometry(t4) {
    return { type: "polygon", rings: [[]], spatialReference: t4.spatialReference, hasZ: !!t4.hasZ, hasM: !!t4.hasM };
  }
  _createPolylineGeometry(t4) {
    return { type: "polyline", paths: [[]], spatialReference: t4.spatialReference, hasZ: !!t4.hasZ, hasM: !!t4.hasM };
  }
  _createMultipointGeometry(t4) {
    return { type: "multipoint", points: [], spatialReference: t4.spatialReference, hasZ: !!t4.hasZ, hasM: !!t4.hasM };
  }
  _dehydratedAddPointsCoordinate(t4, e2, r) {
    0 === r && 0 == this._toAddInCurrentPath-- && (t4.push([]), this._toAddInCurrentPath = this._lengths[++this._currentLengthIndex] - 1, this._previousCoordinate[0] = 0, this._previousCoordinate[1] = 0);
    const s2 = this._transformPathLikeValue(e2, r), o = t4[t4.length - 1], i = this._coordinateBuffer;
    if (i) {
      if (0 === r) {
        const t5 = this._coordinateBufferPtr * Float64Array.BYTES_PER_ELEMENT;
        o.push(new Float64Array(i.buffer, t5, this._vertexDimension));
      }
      i[this._coordinateBufferPtr++] = s2;
    }
  }
  _deriveApplyTransform(t4) {
    const { hasZ: e2, hasM: r } = t4;
    return e2 && r ? d : e2 ? p : r ? c : u;
  }
};

// node_modules/@arcgis/core/views/3d/support/PBFDecoderWorker.js
var t3 = class {
  _parseFeatureQuery(t4) {
    var _a;
    const s2 = t2(t4.buffer, new m(t4.options)), o = { ...s2, spatialReference: (_a = s2.spatialReference) == null ? void 0 : _a.toJSON(), fields: s2.fields ? s2.fields.map((e2) => e2.toJSON()) : void 0 };
    return Promise.resolve(o);
  }
};
function s() {
  return new t3();
}
export {
  s as default
};
//# sourceMappingURL=PBFDecoderWorker-L4V4XMVN.js.map
