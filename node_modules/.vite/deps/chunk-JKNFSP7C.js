import {
  f,
  v
} from "./chunk-4YXJLES6.js";
import {
  e as e2
} from "./chunk-PV5KBAYL.js";
import {
  n
} from "./chunk-GYNE34WO.js";
import {
  a as a2
} from "./chunk-IVMJPIWO.js";
import {
  a
} from "./chunk-3I3GE5YW.js";
import {
  e as e3
} from "./chunk-WRFNQB7U.js";
import {
  o as o2
} from "./chunk-2US5EKDI.js";
import {
  s
} from "./chunk-Z3NHJA5D.js";
import {
  i2
} from "./chunk-BO2REVMA.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  e
} from "./chunk-CW7LIPBH.js";
import {
  h,
  i
} from "./chunk-7EG7BYWF.js";

// node_modules/@arcgis/core/chunks/ShadowCastAccumulate.glsl.js
var w = class extends v {
};
var u = 255;
var g = 1 / u;
function f2(r) {
  const i3 = new i2(), w2 = i3.fragment;
  return w2.include(a), w2.include(a2), i3.include(n), i3.include(o2), i3.include(f, r), w2.uniforms.add(new s("depthMap", (e4) => e4.linearDepthTexture), new e2("inverseViewMatrix", (r2, o3) => h(v2, i(v2, o3.camera.viewMatrix, o3.camera.center))), new e3("nearFar", (e4, a3) => a3.camera.nearFar)), w2.constants.add("sampleValue", "float", g), w2.code.add(o`void main(void) {
float depth = rgba2float(texture(depthMap, uv));
if (depth == 0.0) {
discard;
}
float currentPixelDepth = linearDepthFromFloat(depth, nearFar);
if (-currentPixelDepth > nearFar.y || -currentPixelDepth < nearFar.x) {
discard;
}
vec4 currentPixelPos = vec4(reconstructPosition(gl_FragCoord.xy, currentPixelDepth), 1.0);
vec4 worldSpacePos = inverseViewMatrix * currentPixelPos;
mat4 shadowMatrix;
float linearDepth = -currentPixelDepth;
int i = chooseCascade(linearDepth, shadowMatrix);
if (i >= numCascades) {
discard;
}
vec3 lvpos = lightSpacePosition(worldSpacePos.xyz, shadowMatrix);
if (lvpos.z >= 1.0 || lvpos.x < 0.0 || lvpos.x > 1.0 || lvpos.y < 0.0 || lvpos.y > 1.0) {
discard;
}
vec2 uvShadow = cascadeCoordinates(i, lvpos);
float depthShadow = readShadowMapDepth(uvShadow, shadowMapTex);
bool shadow = depthShadow < lvpos.z;
if (!shadow) {
discard;
}
fragColor = vec4(sampleValue);
}`), i3;
}
var v2 = e();
var x = Object.freeze(Object.defineProperty({ __proto__: null, ShadowCastAccumulatePassParameters: w, ShadowCastMaxSamples: u, build: f2 }, Symbol.toStringTag, { value: "Module" }));

export {
  w,
  u,
  f2 as f,
  x
};
//# sourceMappingURL=chunk-JKNFSP7C.js.map
