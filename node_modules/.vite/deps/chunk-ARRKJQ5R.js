import {
  Fe,
  l2 as l4,
  m,
  m2,
  s as s2
} from "./chunk-HBJAGP7O.js";
import {
  i,
  l3,
  s
} from "./chunk-YOWAMJJI.js";
import {
  F,
  c
} from "./chunk-CS6BZGQO.js";
import {
  e as e3
} from "./chunk-UYTAZUBJ.js";
import {
  C
} from "./chunk-2EO2WRP7.js";
import {
  t
} from "./chunk-JP7O2ZWE.js";
import {
  b as b2
} from "./chunk-O443WBFA.js";
import {
  a as a2
} from "./chunk-Z3GCSCQI.js";
import {
  d as d2
} from "./chunk-VMTVUE47.js";
import {
  h
} from "./chunk-XWGNMTES.js";
import {
  b
} from "./chunk-3KEIFTQ6.js";
import {
  V
} from "./chunk-7EQSYZHW.js";
import {
  U,
  l as l2,
  w
} from "./chunk-H7RDAEPY.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a,
  e as e2
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  d
} from "./chunk-7I33FAWS.js";
import {
  l
} from "./chunk-DWOEYHKS.js";

// node_modules/@arcgis/core/views/3d/layers/graphics/GraphicsProcessor.js
var x = class extends d2 {
  constructor(t2) {
    super(t2), this.type = "graphics-3d", this.graphicsCore = null, this.drapeSourceType = e3.Features, this.scaleVisibilityEnabled = false, this.frustumVisibilityEnabled = false, this._suspendResumeExtent = null;
  }
  initialize() {
    const { layer: t2 } = this, e4 = "effectiveScaleRange" in t2 ? t2 : null, i2 = this.scaleVisibilityEnabled && null != e4, r = new Fe({ owner: this, layer: this.owner.layer, preferredUpdatePolicy: C.SYNC, graphicSymbolSupported: true, componentFactories: { elevationAlignment: (t3, e5) => new l4({ graphicsCoreOwner: this, graphicsCore: t3, queryGraphicUIDsInExtent: e5, elevationProvider: this.view.elevationProvider }), scaleVisibility: i2 ? (t3, i3) => new m({ graphicsCoreOwner: this, layer: e4, queryGraphicUIDsInExtent: i3, graphicsCore: t3, basemapTerrain: this.owner.view.basemapTerrain }) : null, objectStates: (t3) => new s2(t3) } });
    if (this._set("graphicsCore", r), this.frustumVisibilityEnabled && this._set("frustumVisibility", new m2({ graphicsCoreOwner: this })), "fullOpacity" in this.owner) {
      const t3 = this.owner;
      this.updatingHandles.add(() => t3.fullOpacity, () => this.graphicsCore.opacityChange());
    }
    if ("elevationInfo" in t2) {
      const e5 = t2;
      this.updatingHandles.add(() => e5.elevationInfo, (t3, e6) => {
        a2(t3, e6) && this.updatingHandles.addPromise(this.graphicsCore.elevationInfoChange());
      });
    }
    this._set("initializePromise", this._initializeAsync()), this.updatingHandles.addPromise(this.initializePromise);
  }
  async _initializeAsync() {
    try {
      await this.graphicsCore.initializePromise;
    } catch (t2) {
      if (d(t2))
        return;
      throw t2;
    }
    this.destroyed || (this.handles.add(l2(() => this.view.clippingArea, () => this._updateClippingExtent(), U)), this._updateClippingExtent(), this._setupSuspendResumeExtent(), this.graphicsCore.startCreateGraphics());
  }
  destroy() {
    this.handles.removeAll(), this.updatingHandles.removeAll(), this._set("frustumVisibility", l(this.frustumVisibility)), this._set("graphicsCore", l(this.graphicsCore));
  }
  get layer() {
    return this.owner.layer;
  }
  get view() {
    return this.owner.view;
  }
  get scaleVisibility() {
    var _a;
    return (_a = this.graphicsCore) == null ? void 0 : _a.scaleVisibility;
  }
  get elevationAlignment() {
    var _a;
    return (_a = this.graphicsCore) == null ? void 0 : _a.elevationAlignment;
  }
  get objectStates() {
    var _a;
    return (_a = this.graphicsCore) == null ? void 0 : _a.objectStates;
  }
  get scaleVisibilitySuspended() {
    return !(null == this.scaleVisibility || !this.scaleVisibility.suspended);
  }
  get frustumVisibilitySuspended() {
    return null != this.frustumVisibility && this.frustumVisibility.suspended;
  }
  get suspended() {
    return this.owner.suspended ?? false;
  }
  get updating() {
    var _a;
    return !!(((_a = this.graphicsCore) == null ? void 0 : _a.updating) || null != this.scaleVisibility && this.scaleVisibility.updating || null != this.frustumVisibility && this.frustumVisibility.updating || this.updatingHandles.updating);
  }
  get graphics3DGraphics() {
    var _a;
    return (_a = this.graphicsCore) == null ? void 0 : _a.graphics3DGraphics;
  }
  get graphics3DGraphicsByObjectID() {
    var _a;
    return (_a = this.graphicsCore) == null ? void 0 : _a.graphics3DGraphicsByObjectID;
  }
  get loadedGraphics() {
    return this.owner.loadedGraphics;
  }
  get fullOpacity() {
    return this.owner.fullOpacity ?? 1;
  }
  get slicePlaneEnabled() {
    return this.owner.slicePlaneEnabled;
  }
  get updatePolicy() {
    return this.owner.updatePolicy;
  }
  notifyGraphicGeometryChanged(t2) {
    this.graphicsCore.notifyGraphicGeometryChanged(t2);
  }
  notifyGraphicVisibilityChanged(t2) {
    this.graphicsCore.notifyGraphicVisibilityChanged(t2);
  }
  getRenderingInfo(t2, e4, i2) {
    const r = i(t2, { renderer: e4, arcade: i2 });
    if (null != r && r.color) {
      const t3 = r.color;
      t3[0] = t3[0] / 255, t3[1] = t3[1] / 255, t3[2] = t3[2] / 255;
    }
    return r;
  }
  getRenderingInfoAsync(t2, e4, i2, r) {
    return l3(t2, { renderer: e4, arcade: i2, ...r });
  }
  getHit(t2) {
    if (this.owner.loadedGraphics) {
      const e4 = this.owner.loadedGraphics.find((e5) => e5.uid === t2);
      if (e4) {
        const t3 = this.layer instanceof b ? this.layer : null, i2 = c(e4, t3);
        return { type: "graphic", graphic: i2, layer: i2.layer };
      }
    }
    return null;
  }
  whenGraphicBounds(t2, e4) {
    return this.graphicsCore ? this.graphicsCore.whenGraphicBounds(t2, e4) : Promise.reject();
  }
  computeAttachmentOrigin(t2, e4) {
    return this.graphicsCore ? this.graphicsCore.computeAttachmentOrigin(t2, e4) : null;
  }
  getSymbolLayerSize(t2, e4) {
    return this.graphicsCore ? this.graphicsCore.getSymbolLayerSize(t2, e4) : null;
  }
  maskOccludee(t2) {
    const { set: e4, handle: i2 } = this.objectStates.acquireSet(t.MaskOccludee, null);
    return this.objectStates.setUid(e4, t2.uid), i2;
  }
  highlight(t2) {
    if (t2 instanceof b2)
      return P;
    if ("number" == typeof t2)
      return this.highlight([t2]);
    if (t2 instanceof h)
      return this.highlight([t2]);
    if (t2 instanceof V && (t2 = t2.toArray()), Array.isArray(t2) && t2.length > 0) {
      if (t2[0] instanceof h) {
        const e4 = t2.map((t3) => t3.uid), { set: i2, handle: r } = this.objectStates.acquireSet(t.Highlight, null);
        return this.objectStates.setUids(i2, e4), r;
      }
      if ("number" == typeof t2[0]) {
        const e4 = t2, { set: i2, handle: r } = this.objectStates.acquireSet(t.Highlight, null);
        return this.objectStates.setObjectIds(i2, e4), r;
      }
    }
    return P;
  }
  _setupSuspendResumeExtent() {
    const { scaleVisibility: t2, frustumVisibility: e4 } = this;
    if (null == t2 && null == e4)
      return;
    const i2 = ({ computedExtent: i3, extentPadding: r }) => {
      this._suspendResumeExtent = F(i3, this._suspendResumeExtent, s, r), null != t2 && t2.setExtent(this._suspendResumeExtent), null != e4 && e4.setExtent(this._suspendResumeExtent);
    };
    this.handles.add(l2(() => {
      var _a, _b;
      return { computedExtent: (_a = this.graphicsCore) == null ? void 0 : _a.computedExtent, extentPadding: (_b = this.graphicsCore) == null ? void 0 : _b.extentPadding };
    }, (t3) => i2(t3), w));
  }
  _updateClippingExtent() {
    const t2 = this.view.clippingArea;
    this.graphicsCore.setClippingExtent(t2, this.view.spatialReference) && this.graphicsCore.recreateAllGraphics();
  }
};
e([y()], x.prototype, "type", void 0), e([y({ constructOnly: true })], x.prototype, "owner", void 0), e([y()], x.prototype, "layer", null), e([y()], x.prototype, "view", null), e([y({ constructOnly: true })], x.prototype, "graphicsCore", void 0), e([y()], x.prototype, "scaleVisibility", null), e([y({ constructOnly: true })], x.prototype, "frustumVisibility", void 0), e([y()], x.prototype, "elevationAlignment", null), e([y()], x.prototype, "objectStates", null), e([y()], x.prototype, "scaleVisibilitySuspended", null), e([y({ readOnly: true })], x.prototype, "frustumVisibilitySuspended", null), e([y()], x.prototype, "suspended", null), e([y({ readOnly: true })], x.prototype, "updating", null), e([y()], x.prototype, "loadedGraphics", null), e([y()], x.prototype, "fullOpacity", null), e([y()], x.prototype, "slicePlaneEnabled", null), e([y()], x.prototype, "drapeSourceType", void 0), e([y()], x.prototype, "updatePolicy", null), e([y({ constructOnly: true })], x.prototype, "scaleVisibilityEnabled", void 0), e([y({ constructOnly: true })], x.prototype, "frustumVisibilityEnabled", void 0), e([y()], x.prototype, "initializePromise", void 0), x = e([a("esri.views.3d.layers.graphics.GraphicsProcessor")], x);
var P = e2();

export {
  x
};
//# sourceMappingURL=chunk-ARRKJQ5R.js.map
