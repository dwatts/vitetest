import {
  f as f2
} from "./chunk-SS6BI3R6.js";
import {
  g
} from "./chunk-YC5U2RV5.js";
import "./chunk-ZNQYDNXF.js";
import {
  l as l2,
  m,
  s as s2,
  u as u2
} from "./chunk-LJ3FBGIN.js";
import {
  K,
  N
} from "./chunk-6OH4SNKA.js";
import "./chunk-QPXU3YKY.js";
import "./chunk-T3UXUOZW.js";
import "./chunk-FLVP2XLK.js";
import "./chunk-FCLGNXEM.js";
import {
  i as i2
} from "./chunk-LCS4FL4K.js";
import {
  l
} from "./chunk-4JFWLHWB.js";
import {
  j as j2
} from "./chunk-ZX45U24W.js";
import "./chunk-KYWX7M3R.js";
import {
  t as t2
} from "./chunk-QC2JMJXZ.js";
import {
  c
} from "./chunk-GFPASUQP.js";
import {
  O
} from "./chunk-KDACHJ5G.js";
import {
  d
} from "./chunk-IQRLZSBX.js";
import "./chunk-OZL6Q7O2.js";
import "./chunk-ZWFMUHG3.js";
import "./chunk-EFRTD25L.js";
import "./chunk-NVGPNIR6.js";
import "./chunk-BNBT4QTW.js";
import "./chunk-3FQOSG5O.js";
import "./chunk-W4KI5YEI.js";
import "./chunk-CAFGOFIE.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-4BXK4H4L.js";
import {
  i
} from "./chunk-SLVNG7FV.js";
import "./chunk-SVCGLUNW.js";
import {
  b
} from "./chunk-3KEIFTQ6.js";
import "./chunk-DEZCXTA3.js";
import "./chunk-A6VKJXIH.js";
import "./chunk-KFSY6ZZH.js";
import {
  V
} from "./chunk-7EQSYZHW.js";
import "./chunk-GGOVZ2GK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-WLWP35G2.js";
import "./chunk-JPW73GY2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-2CTB7MKH.js";
import "./chunk-Z2ZUNW5S.js";
import "./chunk-7L7Z2HXM.js";
import "./chunk-75NKPXTR.js";
import "./chunk-EUVARFSM.js";
import "./chunk-3VUFACNT.js";
import "./chunk-ZEEBL7ZN.js";
import {
  o
} from "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-5EXFDBQJ.js";
import {
  U,
  a as a2
} from "./chunk-H7RDAEPY.js";
import "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import "./chunk-JL3TJGVW.js";
import "./chunk-JZM5YUHA.js";
import {
  j
} from "./chunk-43LWRDQS.js";
import "./chunk-R6YKST3K.js";
import {
  L
} from "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import {
  u2 as u
} from "./chunk-MP6GH2AC.js";
import {
  t2 as t,
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import {
  f
} from "./chunk-7I33FAWS.js";
import "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/support/SceneModifications.js
var a3;
var n = a3 = class extends u(V.ofType(f2)) {
  constructor(r) {
    super(r), this.url = null;
  }
  clone() {
    return new a3({ url: this.url, items: this.items.map((r) => r.clone()) });
  }
  toJSON(r) {
    return this.toArray().map((o2) => o2.toJSON(r)).filter((r2) => !!r2.geometry);
  }
  static fromJSON(r, o2) {
    const t3 = new a3();
    for (const e2 of r)
      t3.add(f2.fromJSON(e2, o2));
    return t3;
  }
  static async fromUrl(r, t3, e2) {
    const i3 = { url: L(r), origin: "service" }, c2 = await j(r, { responseType: "json", signal: e2 == null ? void 0 : e2.signal }), n2 = t3.toJSON(), m3 = [];
    for (const o2 of c2.data)
      m3.push(f2.fromJSON({ ...o2, geometry: { ...o2.geometry, spatialReference: n2 } }, i3));
    return new a3({ url: r, items: m3 });
  }
};
e([y({ type: String })], n.prototype, "url", void 0), n = a3 = e([a("esri.layers.support.SceneModifications")], n);
var m2 = n;

// node_modules/@arcgis/core/layers/IntegratedMeshLayer.js
var I = class extends N(l(c(j2(t2(O(i2(b))))))) {
  constructor(...e2) {
    super(...e2), this._handles = new t(), this.geometryType = "mesh", this.operationalLayerType = "IntegratedMeshLayer", this.type = "integrated-mesh", this.nodePages = null, this.materialDefinitions = null, this.textureSetDefinitions = null, this.geometryDefinitions = null, this.serviceUpdateTimeStamp = null, this.profile = "mesh-pyramids", this.modifications = null, this._modificationsSource = null, this.elevationInfo = null, this.path = null;
  }
  destroy() {
    this._handles.destroy();
  }
  initialize() {
    this._handles.add(a2(() => this.modifications, "after-changes", () => this.modifications = this.modifications, U));
  }
  normalizeCtorArgs(e2, t3) {
    return "string" == typeof e2 ? { url: e2, ...t3 } : e2;
  }
  readModifications(e2, t3, r) {
    this._modificationsSource = { url: i(e2, r), context: r };
  }
  async load(e2) {
    return this.addResolvingPromise(this._doLoad(e2)), this;
  }
  async _doLoad(e2) {
    const t3 = e2 == null ? void 0 : e2.signal;
    try {
      await this.loadFromPortal({ supportedTypes: ["Scene Service"] }, e2);
    } catch (r) {
      f(r);
    }
    if (await this._fetchService(t3), null != this._modificationsSource) {
      const t4 = await m2.fromUrl(this._modificationsSource.url, this.spatialReference, e2);
      this.setAtOrigin("modifications", t4, this._modificationsSource.context.origin), this._modificationsSource = null;
    }
    await this._fetchIndexAndUpdateExtent(this.nodePages, t3);
  }
  beforeSave() {
    if (null != this._modificationsSource)
      return this.load().then(() => {
      }, () => {
      });
  }
  async saveAs(e2, t3) {
    return this._debouncedSaveOperations(K.SAVE_AS, { ...t3, getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "integrated-mesh" }, e2);
  }
  async save() {
    const e2 = { getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "integrated-mesh" };
    return this._debouncedSaveOperations(K.SAVE, e2);
  }
  validateLayer(e2) {
    if (e2.layerType && "IntegratedMesh" !== e2.layerType)
      throw new s("integrated-mesh-layer:layer-type-not-supported", "IntegratedMeshLayer does not support this layer type", { layerType: e2.layerType });
    if (isNaN(this.version.major) || isNaN(this.version.minor))
      throw new s("layer:service-version-not-supported", "Service version is not supported.", { serviceVersion: this.version.versionString, supportedVersions: "1.x" });
    if (this.version.major > 1)
      throw new s("layer:service-version-too-new", "Service version is too new.", { serviceVersion: this.version.versionString, supportedVersions: "1.x" });
  }
  _getTypeKeywords() {
    return ["IntegratedMeshLayer"];
  }
};
e([y({ type: String, readOnly: true })], I.prototype, "geometryType", void 0), e([y({ type: ["show", "hide"] })], I.prototype, "listMode", void 0), e([y({ type: ["IntegratedMeshLayer"] })], I.prototype, "operationalLayerType", void 0), e([y({ json: { read: false }, readOnly: true })], I.prototype, "type", void 0), e([y({ type: s2, readOnly: true })], I.prototype, "nodePages", void 0), e([y({ type: [l2], readOnly: true })], I.prototype, "materialDefinitions", void 0), e([y({ type: [u2], readOnly: true })], I.prototype, "textureSetDefinitions", void 0), e([y({ type: [m], readOnly: true })], I.prototype, "geometryDefinitions", void 0), e([y({ readOnly: true })], I.prototype, "serviceUpdateTimeStamp", void 0), e([y({ type: m2 }), g({ origins: ["web-scene", "portal-item"], type: "resource", prefix: "modifications" })], I.prototype, "modifications", void 0), e([o(["web-scene", "portal-item"], "modifications")], I.prototype, "readModifications", null), e([y(d)], I.prototype, "elevationInfo", void 0), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true }, "portal-item": { read: true, write: true } }, read: false } })], I.prototype, "path", void 0), I = e([a("esri.layers.IntegratedMeshLayer")], I);
var O2 = I;
export {
  O2 as default
};
//# sourceMappingURL=IntegratedMeshLayer-G7N2KKXN.js.map
