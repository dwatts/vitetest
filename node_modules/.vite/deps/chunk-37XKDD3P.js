import {
  p
} from "./chunk-BFVDDR4R.js";
import {
  b as b2
} from "./chunk-O443WBFA.js";
import {
  b
} from "./chunk-IQRLZSBX.js";
import {
  x2 as x
} from "./chunk-ZEEBL7ZN.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  s3 as s
} from "./chunk-HMVAPW5X.js";

// node_modules/@arcgis/core/views/layers/ImageryLayerView.js
var n = (n2) => {
  let u = class extends n2 {
    constructor() {
      super(...arguments), this.view = null;
    }
    async fetchPopupFeatures(e2, t) {
      const { layer: o } = this;
      if (!e2)
        throw new s("imagerylayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: o });
      const { popupEnabled: p2 } = o, n3 = p(o, t);
      if (!p2 || null == n3)
        throw new s("imagerylayerview:fetchPopupFeatures", "Missing required popupTemplate or popupEnabled", { popupEnabled: p2, popupTemplate: n3 });
      const u2 = await n3.getRequiredFields(), l = new b2();
      l.timeExtent = this.timeExtent, l.geometry = e2, l.outFields = u2, l.outSpatialReference = e2.spatialReference;
      const { resolution: m, spatialReference: c } = this.view, y2 = "2d" === this.view.type ? new x(m, m, c) : new x(0.5 * m, 0.5 * m, c), { returnTopmostRaster: d, showNoDataRecords: h } = n3.layerOptions || { returnTopmostRaster: true, showNoDataRecords: false }, w = { returnDomainValues: true, returnTopmostRaster: d, pixelSize: y2, showNoDataRecords: h, signal: null != t ? t.signal : null };
      return o.queryVisibleRasters(l, w).then((e3) => e3);
    }
    canResume() {
      var _a;
      return !!super.canResume() && !((_a = this.timeExtent) == null ? void 0 : _a.isEmpty);
    }
  };
  return e([y()], u.prototype, "layer", void 0), e([y()], u.prototype, "suspended", void 0), e([y(b)], u.prototype, "timeExtent", void 0), e([y()], u.prototype, "view", void 0), u = e([a("esri.views.layers.ImageryLayerView")], u), u;
};

export {
  n
};
//# sourceMappingURL=chunk-37XKDD3P.js.map
