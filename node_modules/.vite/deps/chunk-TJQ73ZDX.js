import {
  s as s2
} from "./chunk-XM3YSFN6.js";
import {
  r
} from "./chunk-KFDARCTS.js";
import {
  t
} from "./chunk-WH76OAIT.js";
import {
  o as o2
} from "./chunk-CG3URTR2.js";
import {
  e as e3
} from "./chunk-PV5KBAYL.js";
import {
  e as e2
} from "./chunk-YVVROPAO.js";
import {
  e as e4
} from "./chunk-WRFNQB7U.js";
import {
  o as o3
} from "./chunk-UUW6REOV.js";
import {
  s
} from "./chunk-Z3NHJA5D.js";
import {
  i2 as i
} from "./chunk-BO2REVMA.js";
import {
  n as n3,
  o
} from "./chunk-V66LHQVK.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import {
  n as n2
} from "./chunk-SS3YG6J3.js";
import {
  n
} from "./chunk-CQX57DED.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";

// node_modules/@arcgis/core/views/3d/environment/SimpleAtmosphereTechniqueConfiguration.js
var r2;
!function(e5) {
  e5[e5.Cone = 0] = "Cone", e5[e5.Cylinder = 1] = "Cylinder", e5[e5.Underground = 2] = "Underground", e5[e5.COUNT = 3] = "COUNT";
}(r2 || (r2 = {}));
var i2 = class extends s2 {
  constructor() {
    super(...arguments), this.geometry = r2.Cone;
  }
};
e([r({ count: r2.COUNT })], i2.prototype, "geometry", void 0);

// node_modules/@arcgis/core/chunks/SimpleAtmosphere.glsl.js
var g = class extends n3 {
  constructor() {
    super(...arguments), this.texV = n2(), this.altitudeFade = 0, this.innerScale = 0, this.undergroundFadeAlpha = 0, this.silhouette = new u();
  }
};
var u = class {
  constructor() {
    this.center = n(), this.v1 = n(), this.v2 = n();
  }
};
function v(e5) {
  const o4 = new i(), { vertex: l, fragment: g2 } = o4;
  if (t(l), e5.geometry === r2.Underground)
    o4.attributes.add(O.POSITION, "vec2"), o4.varyings.add("color", "vec4"), l.uniforms.add(new e2("cameraPosition", (e6, o5) => o5.camera.eye), new o3("undergroundFadeAlpha", (e6) => e6.undergroundFadeAlpha)), l.code.add(o`void main(void) {
float ndotl = dot(normalize(cameraPosition), mainLightDirection);
float lighting = max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));
color = vec4(vec3(lighting), undergroundFadeAlpha);
gl_Position = vec4(position.xy, 1.0, 1.0);
}`), g2.code.add(o`void main() {
fragColor = color;
}`);
  else {
    o4.include(o2, e5), o4.attributes.add(O.POSITION, "vec3"), o4.varyings.add("vtc", "vec2"), o4.varyings.add("falloff", "float");
    const t2 = e5.geometry === r2.Cylinder;
    l.uniforms.add(new e3("proj", (e6, o5) => o5.camera.projectionMatrix), new e3("view", (e6, o5) => o5.camera.viewMatrix)), t2 || (o4.varyings.add("innerFactor", "float"), l.uniforms.add(new e2("silCircleCenter", (e6) => e6.silhouette.center)), l.uniforms.add(new e2("silCircleV1", (e6) => e6.silhouette.v1)), l.uniforms.add(new e2("silCircleV2", (e6) => e6.silhouette.v2)), l.uniforms.add(new e4("texV", (e6) => e6.texV)), l.uniforms.add(new o3("innerScale", (e6) => e6.innerScale)));
    const m = 6.2831853, u2 = 1 / 128;
    l.code.add(o`
		void main(void) {
      ${t2 ? o`
      vec3 pos = position;
      float ndotl = mainLightDirection.z;
      vtc = vec2(0.0, position.z + 0.05);` : o`
      innerFactor = clamp(-position.z, 0.0, 1.0);
      float scale = position.y * (1.0 + innerFactor * innerScale);
      float phi = position.x * ${o.float(m * u2)} + 1.0;
      vec3 pos =  (silCircleCenter + sin(phi) * silCircleV1 + cos(phi) * silCircleV2) * scale;
      float ndotl = dot(normalize(position.y > 0.0 ? pos: silCircleCenter), mainLightDirection);
      vtc.x = position.x  * ${o.float(u2)};
      vtc.y = texV.x * (1.0 - position.z) + texV.y * position.z;
      `}
      falloff = max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));

		  gl_Position = transformPosition(proj, view, pos);
		  gl_Position.z = gl_Position.w; // project atmosphere onto the far plane
    }
	  `), g2.uniforms.add(new s("tex", (e6) => e6.texture)), t2 || g2.uniforms.add(new o3("altitudeFade", (e6) => e6.altitudeFade)), g2.code.add(o`
		void main() {
			vec4 atmosphereColor = texture(tex, vtc) * falloff;
      ${t2 ? o`fragColor = atmosphereColor;` : o`
			vec4 innerColor = vec4(atmosphereColor.rgb, 1.0 - altitudeFade);
			fragColor = mix(atmosphereColor, innerColor, smoothstep(0.0, 1.0, innerFactor));
      `}
    }`);
  }
  return o4;
}
var h = Object.freeze(Object.defineProperty({ __proto__: null, SilhouetteCircle: u, SimpleAtmospherePassParameters: g, build: v }, Symbol.toStringTag, { value: "Module" }));

export {
  r2 as r,
  i2 as i,
  g,
  u,
  v,
  h
};
//# sourceMappingURL=chunk-TJQ73ZDX.js.map
