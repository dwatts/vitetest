import {
  i
} from "./chunk-UPDSQXLR.js";
import {
  s
} from "./chunk-EHQZFPMP.js";
import {
  d
} from "./chunk-VC3BY3DV.js";
import {
  s as s2
} from "./chunk-BFVOSCOB.js";
import {
  s as s3
} from "./chunk-Z3NHJA5D.js";
import {
  a
} from "./chunk-BO2REVMA.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  O
} from "./chunk-BN6X2OXK.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js
function m(m2, c) {
  const i2 = m2.fragment;
  c.hasVertexTangents ? (m2.attributes.add(O.TANGENT, "vec4"), m2.varyings.add("vTangent", "vec4"), c.doubleSidedMode === i.WindingOrder ? i2.code.add(o`mat3 computeTangentSpace(vec3 normal) {
float tangentHeadedness = gl_FrontFacing ? vTangent.w : -vTangent.w;
vec3 tangent = normalize(gl_FrontFacing ? vTangent.xyz : -vTangent.xyz);
vec3 bitangent = cross(normal, tangent) * tangentHeadedness;
return mat3(tangent, bitangent, normal);
}`) : i2.code.add(o`mat3 computeTangentSpace(vec3 normal) {
float tangentHeadedness = vTangent.w;
vec3 tangent = normalize(vTangent.xyz);
vec3 bitangent = cross(normal, tangent) * tangentHeadedness;
return mat3(tangent, bitangent, normal);
}`)) : i2.code.add(o`mat3 computeTangentSpace(vec3 normal, vec3 pos, vec2 st) {
vec3 Q1 = dFdx(pos);
vec3 Q2 = dFdy(pos);
vec2 stx = dFdx(st);
vec2 sty = dFdy(st);
float det = stx.t * sty.s - sty.t * stx.s;
vec3 T = stx.t * Q2 - sty.t * Q1;
T = T - normal * dot(normal, T);
T *= inversesqrt(max(dot(T,T), 1.e-10));
vec3 B = sign(det) * cross(normal, T);
return mat3(T, B, normal);
}`), c.textureCoordinateType !== d.None && (m2.include(s, c), i2.uniforms.add(c.pbrTextureBindType === a.Pass ? new s3("normalTexture", (e) => e.textureNormal) : new s2("normalTexture", (e) => e.textureNormal)), i2.code.add(o`vec3 computeTextureNormal(mat3 tangentSpace, vec2 uv) {
vec3 rawNormal = textureLookup(normalTexture, uv).rgb * 2.0 - 1.0;
return tangentSpace * rawNormal;
}`));
}

export {
  m
};
//# sourceMappingURL=chunk-T52K6PNI.js.map
