import {
  E as E2
} from "./chunk-WWUAHPIM.js";
import {
  i
} from "./chunk-TEHNQYQD.js";
import {
  E3 as E,
  F,
  O2 as O,
  j,
  v
} from "./chunk-RTDN6KAT.js";
import {
  c2 as c
} from "./chunk-SJ2GJCS2.js";
import {
  r
} from "./chunk-IYZKKFJM.js";

// node_modules/@arcgis/core/core/unitFormatUtils.js
function l(t, n, r2) {
  return t.units[n][r2];
}
function b(t, n, r2, i2 = 2, e = "abbr") {
  return `${c(n, { minimumFractionDigits: i2, maximumFractionDigits: i2, signDisplay: n > 0 ? "never" : "exceptZero" })} ${l(t, r2, e)}`;
}
function p(t, n, r2, i2 = 2, u = "abbr") {
  const s2 = v(n, r2);
  return b(t, j(n, r2, s2), s2, i2, u);
}
function x(t, n, r2, i2 = 2, e = "abbr") {
  const s2 = E(n, r2);
  return b(t, j(n, r2, s2), s2, i2, e);
}
function y(t, n, r2, i2 = 2, e = "abbr") {
  const u = F(n, r2);
  return b(t, j(n, r2, u), u, i2, e);
}
function d(t, n, r2, i2 = 2, e = "abbr") {
  const u = O(n, r2);
  return b(t, j(n, r2, u), u, i2, e);
}
var T = ["B", "kB", "MB", "GB", "TB"];
function v2(n, e) {
  let o = 0 === e ? 0 : Math.floor(Math.log(e) / Math.log(E2.KILOBYTES));
  o = i(o, 0, T.length - 1);
  const u = c(e / E2.KILOBYTES ** o, { maximumFractionDigits: 2 });
  return r(n.units.bytes[T[o]], { fileSize: u });
}

export {
  b,
  p,
  x,
  y,
  d,
  v2 as v
};
//# sourceMappingURL=chunk-V6RPZZQL.js.map
