import {
  t
} from "./chunk-GTUBINZG.js";
import {
  le
} from "./chunk-SLMR4CTS.js";
import {
  n as n2,
  p as p3
} from "./chunk-BFVDDR4R.js";
import {
  l,
  m as m2,
  s as s6,
  u
} from "./chunk-LJ3FBGIN.js";
import {
  r as r2
} from "./chunk-QPXU3YKY.js";
import {
  Be
} from "./chunk-3C6NSN3C.js";
import {
  s as s5
} from "./chunk-2WJ2SRK2.js";
import {
  n
} from "./chunk-KE6VYSDW.js";
import {
  p as p2
} from "./chunk-GDP6ZU2A.js";
import {
  b
} from "./chunk-O443WBFA.js";
import {
  r
} from "./chunk-YA7WDOJK.js";
import {
  S
} from "./chunk-KDACHJ5G.js";
import {
  p,
  y as y2
} from "./chunk-IQRLZSBX.js";
import {
  h
} from "./chunk-OZL6Q7O2.js";
import {
  h as h2
} from "./chunk-XWGNMTES.js";
import {
  k
} from "./chunk-6NNEHJYI.js";
import {
  b as b2
} from "./chunk-4BXK4H4L.js";
import {
  s as s4
} from "./chunk-DEZCXTA3.js";
import {
  o as o2
} from "./chunk-JPW73GY2.js";
import {
  _
} from "./chunk-7L7Z2HXM.js";
import {
  M
} from "./chunk-3VUFACNT.js";
import {
  f
} from "./chunk-ZEEBL7ZN.js";
import {
  o
} from "./chunk-RTDN6KAT.js";
import {
  m
} from "./chunk-JL3TJGVW.js";
import {
  j
} from "./chunk-43LWRDQS.js";
import {
  s as s3
} from "./chunk-F3KGLZDZ.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  T
} from "./chunk-3R7FAT25.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-HMVAPW5X.js";

// node_modules/@arcgis/core/layers/buildingSublayers/BuildingSublayer.js
var a2 = class extends s4(S) {
  constructor(e2) {
    super(e2), this.title = "", this.id = -1, this.modelName = null, this.isEmpty = null, this.legendEnabled = true, this.visible = true, this.opacity = 1;
  }
  readTitle(e2, o3) {
    return "string" == typeof o3.alias ? o3.alias : "string" == typeof o3.name ? o3.name : "";
  }
  readIdOnlyOnce(e2) {
    return -1 !== this.id ? this.id : "number" == typeof e2 ? e2 : -1;
  }
};
e([y({ type: String, json: { origins: { "web-scene": { write: true }, "portal-item": { write: true } } } })], a2.prototype, "title", void 0), e([o("service", "title", ["alias", "name"])], a2.prototype, "readTitle", null), e([y()], a2.prototype, "layer", void 0), e([y({ type: T, readOnly: true, json: { read: false, write: { ignoreOrigin: true } } })], a2.prototype, "id", void 0), e([o("service", "id")], a2.prototype, "readIdOnlyOnce", null), e([y(y2(String))], a2.prototype, "modelName", void 0), e([y(y2(Boolean))], a2.prototype, "isEmpty", void 0), e([y({ type: Boolean, nonNullable: true })], a2.prototype, "legendEnabled", void 0), e([y({ type: Boolean, json: { name: "visibility", write: true } })], a2.prototype, "visible", void 0), e([y({ type: Number, json: { write: true } })], a2.prototype, "opacity", void 0), a2 = e([a("esri.layers.buildingSublayers.BuildingSublayer")], a2);
var n3 = a2;

// node_modules/@arcgis/core/layers/buildingSublayers/BuildingComponentSublayer.js
var Q = "esri.layers.buildingSublayers.BuildingComponentSublayer";
var E = s.getLogger(Q);
var A = s5();
var _2 = class extends _.LoadableMixin(m(n3)) {
  constructor(e2) {
    super(e2), this.type = "building-component", this.nodePages = null, this.materialDefinitions = [], this.textureSetDefinitions = [], this.geometryDefinitions = [], this.indexInfo = null, this.serviceUpdateTimeStamp = null, this.store = null, this.attributeStorageInfo = [], this.fields = [], this.associatedLayer = null, this.outFields = null, this.listMode = "show", this.renderer = null, this.definitionExpression = null, this.popupEnabled = true, this.popupTemplate = null, this.layerType = "3d-object";
  }
  get parsedUrl() {
    var _a, _b;
    return this.layer ? { path: `${(_a = this.layer.parsedUrl) == null ? void 0 : _a.path}/sublayers/${this.id}`, query: (_b = this.layer.parsedUrl) == null ? void 0 : _b.query } : { path: "" };
  }
  get fieldsIndex() {
    return new r(this.fields);
  }
  readAssociatedLayer(e2, r3) {
    const t2 = this.layer.associatedFeatureServiceItem, o3 = r3.associatedLayerID;
    return null != t2 && "number" == typeof o3 ? new Be({ portalItem: t2, layerId: o3 }) : null;
  }
  get objectIdField() {
    if (null != this.fields) {
      for (const e2 of this.fields)
        if ("oid" === e2.type)
          return e2.name;
    }
    return null;
  }
  get displayField() {
    return null != this.associatedLayer ? this.associatedLayer.displayField : void 0;
  }
  get apiKey() {
    return this.layer.apiKey;
  }
  get fullExtent() {
    return this.layer.fullExtent;
  }
  get spatialReference() {
    return this.layer.spatialReference;
  }
  get version() {
    return this.layer.version;
  }
  get elevationInfo() {
    return this.layer.elevationInfo;
  }
  get minScale() {
    return this.layer.minScale;
  }
  get maxScale() {
    return this.layer.maxScale;
  }
  get effectiveScaleRange() {
    return this.layer.effectiveScaleRange;
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  load(e2) {
    const r3 = null != e2 ? e2.signal : null, t2 = this._fetchService(r3).then(() => {
      this.indexInfo = r2(this.parsedUrl.path, this.rootNode, this.nodePages, this.apiKey, E, r3);
    });
    return this.addResolvingPromise(t2), Promise.resolve(this);
  }
  createPopupTemplate(e2) {
    return p2(this, e2);
  }
  async _fetchService(e2) {
    const r3 = (await j(this.parsedUrl.path, { query: { f: "json", token: this.apiKey }, responseType: "json", signal: e2 })).data;
    this.read(r3, { origin: "service", url: this.parsedUrl });
  }
  getField(e2) {
    return this.fieldsIndex.get(e2);
  }
  getFieldDomain(e2, r3) {
    var _a, _b, _c;
    const t2 = (_b = (_a = this.getFeatureType(r3 == null ? void 0 : r3.feature)) == null ? void 0 : _a.domains) == null ? void 0 : _b[e2];
    return t2 && "inherited" !== t2.type ? t2 : ((_c = this.getField(e2)) == null ? void 0 : _c.domain) ?? null;
  }
  getFeatureType(e2) {
    return e2 && null != this.associatedLayer ? this.associatedLayer.getFeatureType(e2) : null;
  }
  get types() {
    return null != this.associatedLayer ? this.associatedLayer.types ?? [] : [];
  }
  get typeIdField() {
    return null != this.associatedLayer ? this.associatedLayer.typeIdField : null;
  }
  get geometryType() {
    return "3d-object" === this.layerType ? "mesh" : "point";
  }
  get profile() {
    return "3d-object" === this.layerType ? "mesh-pyramids" : "points";
  }
  get capabilities() {
    const e2 = null != this.associatedLayer && this.associatedLayer.capabilities ? this.associatedLayer.capabilities : t, { query: r3, data: { supportsZ: t2, supportsM: o3, isVersioned: s7 } } = e2;
    return { query: r3, data: { supportsZ: t2, supportsM: o3, isVersioned: s7 } };
  }
  createQuery() {
    const e2 = new b();
    return "mesh" !== this.geometryType && (e2.returnGeometry = true, e2.returnZ = true), e2.where = this.definitionExpression || "1=1", e2.sqlFormat = "standard", e2;
  }
  queryExtent(e2, r3) {
    return this._getAssociatedLayerForQuery().then((t2) => t2.queryExtent(e2 || this.createQuery(), r3));
  }
  queryFeatureCount(e2, r3) {
    return this._getAssociatedLayerForQuery().then((t2) => t2.queryFeatureCount(e2 || this.createQuery(), r3));
  }
  queryFeatures(e2, r3) {
    return this._getAssociatedLayerForQuery().then((t2) => t2.queryFeatures(e2 || this.createQuery(), r3)).then((e3) => {
      if (e3 == null ? void 0 : e3.features)
        for (const r4 of e3.features)
          r4.layer = this.layer, r4.sourceLayer = this;
      return e3;
    });
  }
  queryObjectIds(e2, r3) {
    return this._getAssociatedLayerForQuery().then((t2) => t2.queryObjectIds(e2 || this.createQuery(), r3));
  }
  async queryCachedAttributes(e2, r3) {
    const t2 = b2(this.fieldsIndex, await n2(this, p3(this)));
    return le(this.parsedUrl.path, this.attributeStorageInfo, e2, r3, t2);
  }
  async queryCachedFeature(e2, t2) {
    const o3 = await this.queryCachedAttributes(e2, [t2]);
    if (!o3 || 0 === o3.length)
      throw new s2("scenelayer:feature-not-in-cached-data", "Feature not found in cached data");
    const s7 = new h2();
    return s7.attributes = o3[0], s7.layer = this, s7.sourceLayer = this, s7;
  }
  getFieldUsageInfo(e2) {
    return this.fieldsIndex.has(e2) ? { supportsLabelingInfo: false, supportsRenderer: false, supportsPopupTemplate: false, supportsLayerQuery: false } : { supportsLabelingInfo: false, supportsRenderer: true, supportsPopupTemplate: true, supportsLayerQuery: null != this.associatedLayer };
  }
  _getAssociatedLayerForQuery() {
    const e2 = this.associatedLayer;
    return null != e2 && e2.loaded ? Promise.resolve(e2) : this._loadAssociatedLayerForQuery();
  }
  async _loadAssociatedLayerForQuery() {
    if (await this.load(), null == this.associatedLayer)
      throw new s2("buildingscenelayer:query-not-available", "BuildingSceneLayer component layer queries are not available without an associated feature layer", { layer: this });
    try {
      await this.associatedLayer.load();
    } catch (e2) {
      throw new s2("buildingscenelayer:query-not-available", "BuildingSceneLayer associated feature layer could not be loaded", { layer: this, error: e2 });
    }
    return this.associatedLayer;
  }
};
e([y({ readOnly: true })], _2.prototype, "parsedUrl", null), e([y({ type: s6, readOnly: true })], _2.prototype, "nodePages", void 0), e([y({ type: [l], readOnly: true })], _2.prototype, "materialDefinitions", void 0), e([y({ type: [u], readOnly: true })], _2.prototype, "textureSetDefinitions", void 0), e([y({ type: [m2], readOnly: true })], _2.prototype, "geometryDefinitions", void 0), e([y({ readOnly: true })], _2.prototype, "serviceUpdateTimeStamp", void 0), e([y({ readOnly: true })], _2.prototype, "store", void 0), e([y({ type: String, readOnly: true, json: { read: { source: "store.rootNode" } } })], _2.prototype, "rootNode", void 0), e([y({ readOnly: true })], _2.prototype, "attributeStorageInfo", void 0), e([y(A.fields)], _2.prototype, "fields", void 0), e([y({ readOnly: true })], _2.prototype, "fieldsIndex", null), e([y({ readOnly: true, type: Be })], _2.prototype, "associatedLayer", void 0), e([o("service", "associatedLayer", ["associatedLayerID"])], _2.prototype, "readAssociatedLayer", null), e([y(A.outFields)], _2.prototype, "outFields", void 0), e([y({ type: String, readOnly: true })], _2.prototype, "objectIdField", null), e([y({ readOnly: true, type: String, json: { read: false } })], _2.prototype, "displayField", null), e([y({ readOnly: true, type: String })], _2.prototype, "apiKey", null), e([y({ readOnly: true, type: M })], _2.prototype, "fullExtent", null), e([y({ readOnly: true, type: f })], _2.prototype, "spatialReference", null), e([y({ readOnly: true })], _2.prototype, "version", null), e([y({ readOnly: true, type: h })], _2.prototype, "elevationInfo", null), e([y({ readOnly: true, type: Number })], _2.prototype, "minScale", null), e([y({ readOnly: true, type: Number })], _2.prototype, "maxScale", null), e([y({ readOnly: true, type: Number })], _2.prototype, "effectiveScaleRange", null), e([y({ type: ["hide", "show"], json: { write: true } })], _2.prototype, "listMode", void 0), e([y({ types: n, json: { origins: { service: { read: { source: "drawingInfo.renderer" } } }, name: "layerDefinition.drawingInfo.renderer", write: true }, value: null })], _2.prototype, "renderer", void 0), e([y({ type: String, json: { origins: { service: { read: false, write: false } }, name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], _2.prototype, "definitionExpression", void 0), e([y(p)], _2.prototype, "popupEnabled", void 0), e([y({ type: k, json: { read: { source: "popupInfo" }, write: { target: "popupInfo" } } })], _2.prototype, "popupTemplate", void 0), e([y({ readOnly: true, type: String, json: { origins: { service: { read: { source: "store.normalReferenceFrame" } } }, read: false } })], _2.prototype, "normalReferenceFrame", void 0), e([y({ readOnly: true, json: { read: false } })], _2.prototype, "defaultPopupTemplate", null), e([y()], _2.prototype, "types", null), e([y()], _2.prototype, "typeIdField", null), e([y({ json: { write: false } }), o2(new s3({ "3DObject": "3d-object", Point: "point" }))], _2.prototype, "layerType", void 0), e([y()], _2.prototype, "geometryType", null), e([y()], _2.prototype, "profile", null), e([y({ readOnly: true, json: { read: false } })], _2.prototype, "capabilities", null), _2 = e([a(Q)], _2);
var C = _2;

export {
  n3 as n,
  C
};
//# sourceMappingURL=chunk-PFUZUHLB.js.map
