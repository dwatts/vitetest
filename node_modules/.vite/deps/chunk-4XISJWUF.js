import {
  d
} from "./chunk-TYEEWKIN.js";
import {
  n,
  t
} from "./chunk-PL5Q4C6Y.js";
import {
  V
} from "./chunk-7EQSYZHW.js";
import {
  U,
  l
} from "./chunk-H7RDAEPY.js";
import {
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";

// node_modules/@arcgis/core/views/layers/GroupLayerView.js
var h = class extends d {
  constructor(i) {
    super(i), this.type = "group", this.layerViews = new V();
  }
  destroy() {
    this.handles.removeAll(), this.layerViews.length = 0;
  }
  _allLayerViewVisibility(i) {
    this.layerViews.forEach((e2) => {
      e2.visible = i;
    });
  }
  initialize() {
    this.handles.add([this.layerViews.on("change", (i) => this._layerViewsChangeHandler(i)), l(() => {
      var _a;
      return (_a = this.layer) == null ? void 0 : _a.visibilityMode;
    }, () => {
      this.layer && this._applyVisibility(() => this._allLayerViewVisibility(this.visible), () => this._applyExclusiveVisibility(null));
    }, U), l(() => this.visible, (i) => {
      this._applyVisibility(() => this._allLayerViewVisibility(i), () => {
      });
    }, U)], "grouplayerview"), this._layerViewsChangeHandler({ target: null, added: this.layerViews.toArray(), removed: [], moved: [] });
  }
  set layerViews(i) {
    this._set("layerViews", n(i, this._get("layerViews")));
  }
  get updatingProgress() {
    return 0 === this.layerViews.length ? 1 : this.layerViews.reduce((i, e2) => i + e2.updatingProgress, 0) / this.layerViews.length;
  }
  isUpdating() {
    return this.layerViews.some((i) => i.updating);
  }
  _hasLayerViewVisibleOverrides() {
    return this.layerViews.some((i) => i._isOverridden("visible"));
  }
  _findLayerViewForLayer(i) {
    return i && this.layerViews.find((e2) => e2.layer === i);
  }
  _firstVisibleOnLayerOrder() {
    const i = this.layer.layers.find((i2) => {
      const e2 = this._findLayerViewForLayer(i2);
      return !!(e2 == null ? void 0 : e2.visible);
    });
    return i && this._findLayerViewForLayer(i);
  }
  _applyExclusiveVisibility(i) {
    null == i && null == (i = this._firstVisibleOnLayerOrder()) && this.layerViews.length > 0 && (i = this._findLayerViewForLayer(this.layer.layers.at(0))), this.layerViews.forEach((e2) => {
      e2.visible = e2 === i;
    });
  }
  _layerViewsChangeHandler(i) {
    this.handles.remove("grouplayerview:visible"), this.handles.add(this.layerViews.map((i2) => l(() => i2.visible, (e3) => this._applyVisibility(() => {
      e3 !== this.visible && (i2.visible = this.visible);
    }, () => this._applyExclusiveVisibility(e3 ? i2 : null)), U)).toArray(), "grouplayerview:visible");
    const e2 = i.added[i.added.length - 1];
    this._applyVisibility(() => this._allLayerViewVisibility(this.visible), () => this._applyExclusiveVisibility((e2 == null ? void 0 : e2.visible) ? e2 : null));
  }
  _applyVisibility(i, e2) {
    var _a, _b;
    this._hasLayerViewVisibleOverrides() && ("inherited" === ((_a = this.layer) == null ? void 0 : _a.visibilityMode) ? i() : "exclusive" === ((_b = this.layer) == null ? void 0 : _b.visibilityMode) && e2());
  }
};
e([y({ cast: t })], h.prototype, "layerViews", null), e([y({ readOnly: true })], h.prototype, "updatingProgress", null), e([y()], h.prototype, "view", void 0), h = e([a("esri.views.layers.GroupLayerView")], h);
var n2 = h;

export {
  n2 as n
};
//# sourceMappingURL=chunk-4XISJWUF.js.map
