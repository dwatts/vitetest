import {
  A,
  T,
  _,
  c,
  l,
  m,
  p
} from "./chunk-FCJWVHPT.js";
import {
  v
} from "./chunk-YDZG6FES.js";
import {
  L
} from "./chunk-BCDDCNQ2.js";
import {
  t
} from "./chunk-DWOEYHKS.js";

// node_modules/@arcgis/core/views/3d/terrain/RasterTile.js
var u = { bandCount: 3, outMin: 0, outMax: 1, minCutOff: [0, 0, 0], maxCutOff: [255, 255, 255], factor: [1 / 255, 1 / 255, 1 / 255], useGamma: false, gamma: [1, 1, 1], gammaCorrection: [1, 1, 1], colormap: null, colormapOffset: null, stretchType: "none", type: "stretch" };
var m2 = class {
  constructor(t2, e, r = null, s = null) {
    this.type = "raster-tile", this._memoryUsed = null, this._source = null, this._symbolizerParameters = null, this._bandIds = null, this._interpolation = null, this._dirty = false, this._transformGrid = null, this.isRendereredSource = false, this.symbolizerRenderer = null, this.rawPixelData = null, this.lij = null, this.opacity = 1, this.lij = t2, this.source = e, this.width = r || e.width, this.height = s || e.height;
  }
  get source() {
    return this._source;
  }
  set source(e) {
    this._source = e, this._rasterTexture = t(this._rasterTexture), this._memoryUsed = null;
  }
  get symbolizerParameters() {
    return this.isRendereredSource ? { ...u, maxCutOff: [1, 1, 1], factor: [1, 1, 1] } : this._symbolizerParameters || u;
  }
  set symbolizerParameters(t2) {
    this._symbolizerParameters = t2;
  }
  get bandIds() {
    return this._bandIds;
  }
  set bandIds(t2) {
    if (null != t2 && t2.length > 0) {
      this._bandIds && t2.every((t3, e) => {
        var _a;
        return !!((_a = this._bandIds) == null ? void 0 : _a[e]) && t3 === this._bandIds[e];
      }) || (this._bandIds = t2, this._dirty = true);
    } else
      this._bandIds = null;
  }
  get interpolation() {
    return this._interpolation || "nearest";
  }
  set interpolation(t2) {
    if (this._interpolation = t2, null != this._rasterTexture) {
      const e = this._getRasterTextureInterpolation(t2);
      this._rasterTexture.setSamplingMode("bilinear" === e ? L.LINEAR : L.NEAREST);
    }
  }
  get transformGrid() {
    return this._transformGrid;
  }
  set transformGrid(e) {
    this._transformGrid = e, this._transformGridTexture = t(this._transformGridTexture), this._memoryUsed = null;
  }
  bind(t2) {
    return !!(this.source && this.source.pixels && this.source.pixels.length > 0) && ((null == this._rasterTexture || this._dirty) && this._updateRasterTexture(t2, this.bandIds), null != this._rasterTexture && (this._updateColormapTexture(t2), this.transformGrid && null == this._transformGridTexture && (this._transformGridTexture = m(t2, this.transformGrid))), true);
  }
  getUniforms() {
    const { symbolizerParameters: t2, transformGrid: r, width: s, height: h, opacity: n } = this, u2 = _(r, [s, h], [this.source.width, this.source.height], n), m3 = p(t2.colormap, t2.colormapOffset), d = "stretch" === this.symbolizerParameters.type ? A(this.symbolizerParameters) : null, _2 = "hillshade" === this.symbolizerParameters.type ? T(this.symbolizerParameters) : null;
    return new v(u2, m3, d || _2, this._rasterTexture, this._transformGridTexture, this._colormapTexture);
  }
  get isBilinearWithStretchColorRamp() {
    const { symbolizerParameters: t2 } = this;
    return "bilinear" === this.interpolation && null != t2.colormap && "stretch" === t2.type;
  }
  get memoryUsage() {
    if (null == this._memoryUsed) {
      const t2 = [this._rasterTexture, this._transformGridTexture, this._colormapTexture];
      this._memoryUsed = t2.map((t3) => null != t3 ? t3.descriptor.width * t3.descriptor.height * 4 : 0).reduce((t3, e) => t3 + e, 0);
    }
    return this._memoryUsed;
  }
  release() {
    return this._rasterTexture = t(this._rasterTexture), this._transformGridTexture = t(this._transformGridTexture), this._colormapTexture = t(this._colormapTexture), this.source = null, this.transformGrid = null, this.rawPixelData = null, true;
  }
  _updateRasterTexture(e, r) {
    const s = this.source ? this.source.extractBands(r) : null;
    if (!(s && s.pixels && s.pixels.length > 0))
      return void (this._rasterTexture = t(this._rasterTexture));
    const i = null == r && null == this.bandIds || null != r && null != this.bandIds && r.join("") === this.bandIds.join("");
    if (null != this._rasterTexture && i)
      return;
    this._rasterTexture = t(this._rasterTexture);
    const o = this._getRasterTextureInterpolation(this.interpolation);
    this._rasterTexture = c(e, s, o, this.isRendereredSource || this.hasStretchTypeNone());
  }
  hasStretchTypeNone() {
    return "stretchType" in this.symbolizerParameters && "none" === this.symbolizerParameters.stretchType && !this.symbolizerParameters.useGamma && "u8" === this.source.pixelType;
  }
  _getRasterTextureInterpolation(t2) {
    return "lut" === this.symbolizerParameters.type || "nearest" === t2 || "majority" === t2 || this.isBilinearWithStretchColorRamp ? "nearest" : "bilinear";
  }
  _updateColormapTexture(e) {
    const r = this._colormap, s = this.symbolizerParameters.colormap;
    return s ? r ? s.length !== r.length || s.some((t2, e2) => t2 !== r[e2]) ? (this._colormapTexture = t(this._colormapTexture), this._colormapTexture = l(e, s), void (this._colormap = s)) : void 0 : (this._colormapTexture = l(e, s), void (this._colormap = s)) : (this._colormapTexture = t(this._colormapTexture), void (this._colormap = null));
  }
};

export {
  m2 as m
};
//# sourceMappingURL=chunk-UOUZR2TX.js.map
