import {
  F,
  W,
  v
} from "./chunk-LIO6VZRI.js";
import {
  o as o2
} from "./chunk-ASBUA7EG.js";
import {
  e as e2
} from "./chunk-FY4ZONHH.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  e
} from "./chunk-VN2IXVGV.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import {
  n as n2
} from "./chunk-YGUWDSEH.js";
import {
  n
} from "./chunk-4CZO65BK.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js
function t(t2, s) {
  switch (s.normalType) {
    case a.Compressed:
      t2.attributes.add(O.NORMALCOMPRESSED, "vec2"), t2.vertex.code.add(o`vec3 normalModel() {
float z = 1.0 - abs(normalCompressed.x) - abs(normalCompressed.y);
return vec3(normalCompressed + sign(normalCompressed) * min(z, 0.0), z);
}`);
      break;
    case a.Attribute:
      t2.attributes.add(O.NORMAL, "vec3"), t2.vertex.code.add(o`vec3 normalModel() {
return normal;
}`);
      break;
    case a.ScreenDerivative:
      t2.fragment.code.add(o`vec3 screenDerivativeNormal(vec3 positionView) {
return normalize(cross(dFdx(positionView), dFdy(positionView)));
}`);
      break;
    default:
      n(s.normalType);
    case a.COUNT:
    case a.Ground:
  }
}
var a;
!function(e3) {
  e3[e3.Attribute = 0] = "Attribute", e3[e3.Compressed = 1] = "Compressed", e3[e3.Ground = 2] = "Ground", e3[e3.ScreenDerivative = 3] = "ScreenDerivative", e3[e3.COUNT = 4] = "COUNT";
}(a || (a = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js
function c(o3, a2) {
  switch (a2.normalType) {
    case a.Attribute:
    case a.Compressed:
      o3.include(t, a2), o3.varyings.add("vNormalWorld", "vec3"), o3.varyings.add("vNormalView", "vec3"), o3.vertex.uniforms.add(new o2("transformNormalGlobalFromModel", (r) => r.transformNormalGlobalFromModel), new e2("transformNormalViewFromGlobal", (r) => r.transformNormalViewFromGlobal)), o3.vertex.code.add(o`void forwardNormal() {
vNormalWorld = transformNormalGlobalFromModel * normalModel();
vNormalView = transformNormalViewFromGlobal * vNormalWorld;
}`);
      break;
    case a.Ground:
      o3.include(v, a2), o3.varyings.add("vNormalWorld", "vec3"), o3.vertex.code.add(o`
        void forwardNormal() {
          vNormalWorld = ${a2.spherical ? o`normalize(vPositionWorldCameraRelative);` : o`vec3(0.0, 0.0, 1.0);`}
        }
        `);
      break;
    case a.ScreenDerivative:
      o3.vertex.code.add(o`void forwardNormal() {}`);
      break;
    default:
      n(a2.normalType);
    case a.COUNT:
  }
}
var f = class extends F {
  constructor() {
    super(...arguments), this.transformNormalViewFromGlobal = e();
  }
};
var v2 = class extends W {
  constructor() {
    super(...arguments), this.transformNormalGlobalFromModel = e(), this.toMapSpace = n2();
  }
};

export {
  t,
  a,
  c,
  f,
  v2 as v
};
//# sourceMappingURL=chunk-XUU35WPC.js.map
