import {
  n
} from "./chunk-37XKDD3P.js";
import {
  z
} from "./chunk-QE3IPVAC.js";
import "./chunk-BTHQ4EZE.js";
import "./chunk-F6PJCZPH.js";
import "./chunk-32IFRFHL.js";
import "./chunk-XGIDQJNQ.js";
import "./chunk-TYEEWKIN.js";
import "./chunk-XW6BCJUG.js";
import "./chunk-WRC5WFEM.js";
import "./chunk-UYTAZUBJ.js";
import "./chunk-2EO2WRP7.js";
import "./chunk-VYGC2LVC.js";
import "./chunk-CXYYGJUL.js";
import "./chunk-N4JKQR77.js";
import "./chunk-BDX5TRUE.js";
import "./chunk-LIXBKTBN.js";
import "./chunk-VDSNHCMM.js";
import "./chunk-6LC2JTLC.js";
import "./chunk-XM3YSFN6.js";
import "./chunk-NIZWDAMQ.js";
import "./chunk-DU3C7D26.js";
import "./chunk-Z2RTGLQI.js";
import "./chunk-V6CD66ZZ.js";
import "./chunk-6FHMQNMS.js";
import "./chunk-KFDARCTS.js";
import "./chunk-TRGMWULG.js";
import "./chunk-WTPQKRQM.js";
import "./chunk-SMDDCTGQ.js";
import "./chunk-NU4UASX6.js";
import "./chunk-YLTVH2K4.js";
import "./chunk-FB4A6PBH.js";
import "./chunk-CG3URTR2.js";
import "./chunk-IBJTEQQG.js";
import "./chunk-SADO52IH.js";
import "./chunk-WVOBJDWI.js";
import "./chunk-LIO6VZRI.js";
import "./chunk-7DFZCT3D.js";
import "./chunk-ASBUA7EG.js";
import "./chunk-FY4ZONHH.js";
import "./chunk-73PNWDTS.js";
import "./chunk-PKS3ZVLN.js";
import "./chunk-N3RXOITN.js";
import "./chunk-DOR4M5EA.js";
import "./chunk-3ROGWJVH.js";
import "./chunk-BUCIQGFS.js";
import "./chunk-CR5XNTAP.js";
import "./chunk-Z6IKMUOC.js";
import "./chunk-PV5KBAYL.js";
import "./chunk-YVVROPAO.js";
import "./chunk-IVMJPIWO.js";
import "./chunk-3I3GE5YW.js";
import "./chunk-WRFNQB7U.js";
import "./chunk-UUW6REOV.js";
import "./chunk-Z3NHJA5D.js";
import "./chunk-BO2REVMA.js";
import "./chunk-V66LHQVK.js";
import "./chunk-JP7O2ZWE.js";
import "./chunk-4SIKLJSS.js";
import "./chunk-UM64E5NS.js";
import "./chunk-MVWFPLOX.js";
import "./chunk-X3YW4YOG.js";
import "./chunk-Z7LZRT7C.js";
import "./chunk-SGBMUZSF.js";
import "./chunk-3TMT4LDG.js";
import "./chunk-BDWD2ZNU.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-FIBWCATC.js";
import "./chunk-BFVDDR4R.js";
import "./chunk-6S2FCH6S.js";
import "./chunk-3TTW7E7W.js";
import "./chunk-FOEAKQNX.js";
import "./chunk-LEDSC236.js";
import "./chunk-CW7LIPBH.js";
import "./chunk-TYOIANOD.js";
import "./chunk-VN2IXVGV.js";
import "./chunk-WWUAHPIM.js";
import "./chunk-BN6X2OXK.js";
import "./chunk-O443WBFA.js";
import "./chunk-RGS3ANC3.js";
import "./chunk-IQRLZSBX.js";
import "./chunk-OZL6Q7O2.js";
import "./chunk-YGUWDSEH.js";
import "./chunk-ZWFMUHG3.js";
import "./chunk-EFRTD25L.js";
import "./chunk-GSS6WNQU.js";
import "./chunk-C2EHS6UI.js";
import "./chunk-F4ILXEXC.js";
import "./chunk-63ERNIOV.js";
import "./chunk-NLWV7Q6F.js";
import "./chunk-RVS5HU2K.js";
import "./chunk-SS3YG6J3.js";
import "./chunk-H37COY3W.js";
import "./chunk-NVGPNIR6.js";
import "./chunk-VMTVUE47.js";
import "./chunk-GDZM4A6K.js";
import "./chunk-W4KI5YEI.js";
import "./chunk-CAFGOFIE.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-TFIKV5RU.js";
import "./chunk-AQ7R6V4L.js";
import "./chunk-4BXK4H4L.js";
import "./chunk-SLVNG7FV.js";
import "./chunk-SVCGLUNW.js";
import "./chunk-DEZCXTA3.js";
import "./chunk-KFSY6ZZH.js";
import "./chunk-GGOVZ2GK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-JPW73GY2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-Z2ZUNW5S.js";
import "./chunk-7L7Z2HXM.js";
import "./chunk-75NKPXTR.js";
import "./chunk-EUVARFSM.js";
import "./chunk-3VUFACNT.js";
import "./chunk-ZEEBL7ZN.js";
import "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import {
  f
} from "./chunk-H7RDAEPY.js";
import "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import "./chunk-JL3TJGVW.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-43LWRDQS.js";
import "./chunk-R6YKST3K.js";
import "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-MP6GH2AC.js";
import "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import {
  k
} from "./chunk-7I33FAWS.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/3d/layers/ImageryLayerView3D.js
var o = class extends n(z) {
  constructor() {
    super(...arguments), this.type = "imagery-3d", this.redrawDebounced = k(async (e2) => {
      this.redraw((e3, a2) => this._redrawImage(e3, a2), e2);
    }, 2e3);
  }
  initialize() {
    this.handles.add([f(() => this.view.basemapTerrain.ready, () => this._initializeMaximumDataResolution(), { once: true, initial: true }), this.layer.on("redraw", () => this.updatingHandles.addPromise(this.redrawDebounced()))]), this.updatingHandles.add(() => {
      var _a, _b;
      return (_b = (_a = this.layer) == null ? void 0 : _a.exportImageServiceParameters) == null ? void 0 : _b.version;
    }, () => {
      this.updatingHandles.addPromise(this.refreshDebounced());
    }), this.updatingHandles.add(() => {
      var _a;
      return (_a = this.layer) == null ? void 0 : _a.renderer;
    }, () => {
      this.updatingHandles.addPromise(this.refreshDebounced());
    }), this.updatingHandles.add(() => this.timeExtent, () => this.updatingHandles.addPromise(this.refreshDebounced()));
  }
  _initializeMaximumDataResolution() {
    this.maximumDataResolution = this.layer.loaded ? this.layer.serviceRasterInfo.pixelSize : null;
  }
  getFetchOptions() {
    return { timeExtent: this.timeExtent };
  }
  async processResult(e2, a2, t) {
    a2.imageOrCanvasElement ? e2.image = a2.imageOrCanvasElement : (e2.image = document.createElement("canvas"), e2.pixelData = a2.pixelData, await this._redrawImage(e2, t));
  }
  async _redrawImage(e2, a2) {
    if (!(e2.image instanceof HTMLCanvasElement) || null == e2.pixelData)
      throw new Error();
    const t = e2.image, i = t.getContext("2d"), r = await this.layer.applyRenderer(e2.pixelData, { signal: a2 }), s = this.layer.applyFilter(r).pixelBlock;
    if (null == s)
      throw new Error();
    t.width = s.width, t.height = s.height;
    const o2 = i.createImageData(s.width, s.height);
    o2.data.set(s.getAsRGBA()), i.putImageData(o2, 0, 0);
  }
};
o = e([a("esri.views.3d.layers.ImageryLayerView3D")], o);
var n2 = o;
export {
  n2 as default
};
//# sourceMappingURL=ImageryLayerView3D-3BPHJNXO.js.map
