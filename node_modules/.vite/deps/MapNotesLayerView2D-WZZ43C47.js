import {
  r
} from "./chunk-JF4ZJFJW.js";
import {
  i
} from "./chunk-3AKVKVHP.js";
import "./chunk-RLCH4JTX.js";
import {
  oe
} from "./chunk-XJSQN3VD.js";
import {
  f
} from "./chunk-IVHBK5M6.js";
import "./chunk-U7ACAW2W.js";
import "./chunk-HVV5CDLD.js";
import "./chunk-JNPHM5XV.js";
import "./chunk-X6M7YYU3.js";
import "./chunk-HMHRXSML.js";
import {
  h as h3
} from "./chunk-JXKASHKJ.js";
import "./chunk-WGM2OLIG.js";
import "./chunk-3MPC6MVT.js";
import "./chunk-UBY6VMKB.js";
import "./chunk-ULFDJHIR.js";
import {
  d
} from "./chunk-TYEEWKIN.js";
import "./chunk-LYNC7OVT.js";
import "./chunk-3QGLF4DO.js";
import "./chunk-OKNF37G2.js";
import "./chunk-5W2MUQQG.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-VF625TQS.js";
import "./chunk-UXWYXWGD.js";
import "./chunk-PX3Q44FM.js";
import "./chunk-XYJMHUDA.js";
import "./chunk-CSLWFQJE.js";
import "./chunk-MRDUXF66.js";
import "./chunk-IVABPLLZ.js";
import "./chunk-FS3VDXRM.js";
import "./chunk-BWIRPDWB.js";
import "./chunk-XP6ESZGI.js";
import "./chunk-RKM5MXYH.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-TBHRKIAA.js";
import "./chunk-EFDT2ZDW.js";
import "./chunk-USNIBKH4.js";
import "./chunk-BBJLFBMQ.js";
import "./chunk-J6SRKANJ.js";
import "./chunk-RBDJB3ZY.js";
import "./chunk-RRRAGAMB.js";
import "./chunk-ERFCZMKG.js";
import "./chunk-C2GW4T2D.js";
import "./chunk-SO7CVIZK.js";
import "./chunk-YAWND7HF.js";
import "./chunk-FJYIB7HF.js";
import "./chunk-JORCYNDS.js";
import "./chunk-BZUKDBTT.js";
import "./chunk-7YCGPGGL.js";
import "./chunk-GPABU246.js";
import "./chunk-KILCBNKU.js";
import "./chunk-K4WBDIIJ.js";
import "./chunk-H3DKDGMJ.js";
import "./chunk-FB6EWBGE.js";
import "./chunk-TRGMWULG.js";
import "./chunk-WTPQKRQM.js";
import "./chunk-AER5JAFS.js";
import "./chunk-7HZ72XIE.js";
import "./chunk-ALPCRJS4.js";
import "./chunk-WDZ5AAFL.js";
import "./chunk-XL7RF4A6.js";
import "./chunk-ZL3HOHNK.js";
import "./chunk-PR2OEILG.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-MVWFPLOX.js";
import "./chunk-X3YW4YOG.js";
import "./chunk-IG234GCS.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-BA6PBZHC.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-D3BOGOKY.js";
import "./chunk-QOWAKGE4.js";
import "./chunk-3TTW7E7W.js";
import "./chunk-RWWB77SD.js";
import "./chunk-ZMFGNDTK.js";
import "./chunk-UL64BLDS.js";
import "./chunk-EG6CFIHA.js";
import "./chunk-CMNAZRWU.js";
import "./chunk-P4PDTNIU.js";
import "./chunk-G2DTL6AE.js";
import "./chunk-Q6HN54VB.js";
import "./chunk-Z3GCSCQI.js";
import "./chunk-UU2XJGLA.js";
import "./chunk-CGJNVOU3.js";
import "./chunk-YA7WDOJK.js";
import "./chunk-FVR25IMN.js";
import "./chunk-EV77QZBT.js";
import "./chunk-467UETSR.js";
import "./chunk-SHFLRM67.js";
import "./chunk-YGUWDSEH.js";
import "./chunk-LO3LAMAS.js";
import "./chunk-EFRTD25L.js";
import "./chunk-EAGDM3GO.js";
import "./chunk-W2YWKOK7.js";
import "./chunk-YOTOWDJK.js";
import "./chunk-ND7XUHDE.js";
import "./chunk-XG5SDOKD.js";
import "./chunk-UQHDCOJC.js";
import "./chunk-MF3HZ6GV.js";
import "./chunk-SNAARWF3.js";
import "./chunk-FQZ2JEHK.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-G3Q2URFK.js";
import "./chunk-D5NSNTGJ.js";
import "./chunk-63ERNIOV.js";
import "./chunk-QNFDBY7V.js";
import "./chunk-RVQLSA5X.js";
import "./chunk-5KLICR5E.js";
import "./chunk-YYTXJF6W.js";
import "./chunk-NLWV7Q6F.js";
import "./chunk-JB7FDW5N.js";
import "./chunk-SS3YG6J3.js";
import "./chunk-5IYCCZ54.js";
import "./chunk-JLSXEPY6.js";
import "./chunk-VMTVUE47.js";
import "./chunk-GDZM4A6K.js";
import {
  h as h2
} from "./chunk-XWGNMTES.js";
import "./chunk-6NNEHJYI.js";
import "./chunk-BNBT4QTW.js";
import "./chunk-3FQOSG5O.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-JNDFAMXY.js";
import "./chunk-NTEKJWGF.js";
import "./chunk-TFIKV5RU.js";
import "./chunk-KW6QQDGN.js";
import "./chunk-AQ7R6V4L.js";
import "./chunk-DOQ3SAAR.js";
import "./chunk-4BXK4H4L.js";
import "./chunk-SLVNG7FV.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-4CZO65BK.js";
import "./chunk-DEZCXTA3.js";
import "./chunk-RRJGZKNX.js";
import "./chunk-PL5Q4C6Y.js";
import "./chunk-A6VKJXIH.js";
import "./chunk-KFSY6ZZH.js";
import {
  V
} from "./chunk-7EQSYZHW.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-GGOVZ2GK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-WLWP35G2.js";
import "./chunk-JPW73GY2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-Z2ZUNW5S.js";
import "./chunk-7L7Z2HXM.js";
import "./chunk-75NKPXTR.js";
import "./chunk-EUVARFSM.js";
import "./chunk-3VUFACNT.js";
import "./chunk-ZEEBL7ZN.js";
import "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-SJ2GJCS2.js";
import {
  a as a2,
  h,
  l
} from "./chunk-H7RDAEPY.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import "./chunk-JL3TJGVW.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-43LWRDQS.js";
import "./chunk-R6YKST3K.js";
import "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-MP6GH2AC.js";
import "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import "./chunk-7I33FAWS.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import {
  R
} from "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/MapNotesLayerView2D.js
var u = "sublayers";
var f2 = "layerView";
var m = Object.freeze({ remove() {
}, pause() {
}, resume() {
} });
var w = class extends f(d) {
  constructor() {
    super(...arguments), this._highlightIds = /* @__PURE__ */ new Map(), this.container = new r();
  }
  async fetchPopupFeatures(e2) {
    return Array.from(this.graphicsViews(), (i2) => i2.hitTest(e2).filter((e3) => !!e3.popupTemplate)).flat();
  }
  *graphicsViews() {
    null == this._graphicsViewsFeatureCollectionMap ? null == this._graphicsViews ? yield* [] : yield* this._graphicsViews : yield* this._graphicsViewsFeatureCollectionMap.keys();
  }
  async hitTest(e2, i2) {
    return Array.from(this.graphicsViews(), (i3) => {
      const s = i3.hitTest(e2);
      if (null != this._graphicsViewsFeatureCollectionMap) {
        const e3 = this._graphicsViewsFeatureCollectionMap.get(i3);
        for (const i4 of s)
          !i4.popupTemplate && e3.popupTemplate && (i4.popupTemplate = e3.popupTemplate), i4.sourceLayer = i4.layer = this.layer;
      }
      return s;
    }).flat().map((i3) => ({ type: "graphic", graphic: i3, layer: this.layer, mapPoint: e2 }));
  }
  highlight(e2) {
    let r2;
    "number" == typeof e2 ? r2 = [e2] : e2 instanceof h2 ? r2 = [e2.uid] : Array.isArray(e2) && e2.length > 0 ? r2 = "number" == typeof e2[0] ? e2 : e2.map((e3) => e3 && e3.uid) : V.isCollection(e2) && (r2 = e2.map((e3) => e3 && e3.uid).toArray());
    const a3 = r2 == null ? void 0 : r2.filter(R);
    return (a3 == null ? void 0 : a3.length) ? (this._addHighlight(a3), { remove: () => {
      this._removeHighlight(a3);
    } }) : m;
  }
  update(e2) {
    for (const i2 of this.graphicsViews())
      i2.processUpdate(e2);
  }
  attach() {
    const e2 = this.view, i2 = () => this.requestUpdate(), s = this.layer.featureCollections;
    if (null != s && s.length) {
      this._graphicsViewsFeatureCollectionMap = /* @__PURE__ */ new Map();
      for (const t of s) {
        const s2 = new i(this.view.featuresTilingScheme), a3 = new oe({ view: e2, graphics: t.source, renderer: t.renderer, requestUpdateCallback: i2, container: s2 });
        this._graphicsViewsFeatureCollectionMap.set(a3, t), this.container.addChild(a3.container), this.addHandles([l(() => t.visible, (e3) => a3.container.visible = e3, h), l(() => a3.updating, () => this.notifyChange("updating"), h)], f2);
      }
      this._updateHighlight();
    } else
      null != this.layer.sublayers && this.addHandles(a2(() => this.layer.sublayers, "change", () => this._createGraphicsViews(), { onListenerAdd: () => this._createGraphicsViews(), onListenerRemove: () => this._destroyGraphicsViews() }), u);
  }
  detach() {
    this._destroyGraphicsViews(), this.removeHandles(u);
  }
  moveStart() {
  }
  moveEnd() {
  }
  viewChange() {
    for (const e2 of this.graphicsViews())
      e2.viewChange();
  }
  isUpdating() {
    for (const e2 of this.graphicsViews())
      if (e2.updating)
        return true;
    return false;
  }
  _destroyGraphicsViews() {
    this.container.removeAllChildren(), this.removeHandles(f2);
    for (const e2 of this.graphicsViews())
      e2.destroy();
    this._graphicsViews = null, this._graphicsViewsFeatureCollectionMap = null;
  }
  _createGraphicsViews() {
    if (this._destroyGraphicsViews(), null == this.layer.sublayers)
      return;
    const e2 = [], i2 = this.view, s = () => this.requestUpdate();
    for (const t of this.layer.sublayers) {
      const a3 = new h3(), o = new i(this.view.featuresTilingScheme);
      o.fadeTransitionEnabled = true;
      const l2 = new oe({ view: i2, graphics: t.graphics, requestUpdateCallback: s, container: o });
      this.addHandles([t.on("graphic-update", l2.graphicUpdateHandler), l(() => t.visible, (e3) => l2.container.visible = e3, h), l(() => l2.updating, () => this.notifyChange("updating"), h)], f2), a3.addChild(l2.container), this.container.addChild(a3), e2.push(l2);
    }
    this._graphicsViews = e2, this._updateHighlight();
  }
  _addHighlight(e2) {
    for (const i2 of e2)
      if (this._highlightIds.has(i2)) {
        const e3 = this._highlightIds.get(i2);
        this._highlightIds.set(i2, e3 + 1);
      } else
        this._highlightIds.set(i2, 1);
    this._updateHighlight();
  }
  _removeHighlight(e2) {
    for (const i2 of e2)
      if (this._highlightIds.has(i2)) {
        const e3 = this._highlightIds.get(i2) - 1;
        0 === e3 ? this._highlightIds.delete(i2) : this._highlightIds.set(i2, e3);
      }
    this._updateHighlight();
  }
  _updateHighlight() {
    const e2 = Array.from(this._highlightIds.keys());
    for (const i2 of this.graphicsViews())
      i2.setHighlight(e2);
  }
};
w = e([a("esri.views.2d.layers.MapNotesLayerView2D")], w);
var y = w;
export {
  y as default
};
//# sourceMappingURL=MapNotesLayerView2D-WZZ43C47.js.map
