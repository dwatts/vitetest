import {
  n as n2
} from "./chunk-2MO4ECWJ.js";
import {
  n,
  s as s2
} from "./chunk-B4D7NEKN.js";
import {
  a as a2
} from "./chunk-KO2NU3NQ.js";
import {
  S
} from "./chunk-D6UIL3LF.js";
import {
  f
} from "./chunk-X3YW4YOG.js";
import {
  d
} from "./chunk-CEFGWR5H.js";
import {
  b
} from "./chunk-O443WBFA.js";
import {
  K
} from "./chunk-RGS3ANC3.js";
import {
  o,
  u
} from "./chunk-XR4HIGQP.js";
import {
  M
} from "./chunk-3VUFACNT.js";
import {
  L
} from "./chunk-ZJEWQGHG.js";
import {
  m,
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  p
} from "./chunk-7I33FAWS.js";
import {
  s3 as s
} from "./chunk-HMVAPW5X.js";
import {
  has
} from "./chunk-JZJWZ6DN.js";

// node_modules/@arcgis/core/rest/query/executeForExtent.js
async function m2(m3, n3, s3) {
  const p2 = f(m3);
  return S(p2, b.from(n3), { ...s3 }).then((t) => ({ count: t.data.count, extent: M.fromJSON(t.data.extent) }));
}

// node_modules/@arcgis/core/layers/graphics/sources/support/QueryTask.js
var F = class extends m {
  constructor(e2) {
    super(e2), this.dynamicDataSource = null, this.fieldsIndex = null, this.gdbVersion = null, this.infoFor3D = null, this.pbfSupported = false, this.queryAttachmentsSupported = false, this.sourceSpatialReference = null, this.url = null;
  }
  get parsedUrl() {
    return L(this.url);
  }
  async execute(e2, t) {
    const r = await this.executeJSON(e2, t);
    return this.featureSetFromJSON(e2, r, t);
  }
  async executeJSON(e2, t) {
    var _a;
    const r = this._normalizeQuery(e2), o2 = null != ((_a = e2.outStatistics) == null ? void 0 : _a[0]), s3 = has("featurelayer-pbf-statistics"), i = !o2 || s3;
    let u2;
    if (this.pbfSupported && i)
      try {
        u2 = await n2(this.url, r, t);
      } catch (a3) {
        if ("query:parsing-pbf" !== a3.name)
          throw a3;
        this.pbfSupported = false;
      }
    return this.pbfSupported && i || (u2 = await a2(this.url, r, t)), this._normalizeFields(u2.fields), u2;
  }
  async featureSetFromJSON(e2, t, r) {
    if (!this._queryIs3DObjectFormat(e2) || null == this.infoFor3D || !t.features)
      return d.fromJSON(t);
    const { meshFeatureSetFromJSON: s3 } = await p(import("./meshFeatureSet-QS36X2T5.js"), r);
    return s3(e2, this.infoFor3D, t);
  }
  executeForCount(e2, t) {
    return n(this.url, this._normalizeQuery(e2), t);
  }
  executeForExtent(e2, t) {
    return m2(this.url, this._normalizeQuery(e2), t);
  }
  executeForIds(e2, t) {
    return s2(this.url, this._normalizeQuery(e2), t);
  }
  async executeRelationshipQuery(e2, t) {
    const [{ default: r }, { executeRelationshipQuery: s3 }] = await p(Promise.all([import("./RelationshipQuery-62W7MJLC.js"), import("./executeRelationshipQuery-VWNSBPVB.js")]), t);
    return e2 = r.from(e2), (this.gdbVersion || this.dynamicDataSource) && ((e2 = e2.clone()).gdbVersion = e2.gdbVersion || this.gdbVersion, e2.dynamicDataSource = e2.dynamicDataSource || this.dynamicDataSource), s3(this.url, e2, t);
  }
  async executeRelationshipQueryForCount(e2, t) {
    const [{ default: r }, { executeRelationshipQueryForCount: s3 }] = await p(Promise.all([import("./RelationshipQuery-62W7MJLC.js"), import("./executeRelationshipQuery-VWNSBPVB.js")]), t);
    return e2 = r.from(e2), (this.gdbVersion || this.dynamicDataSource) && ((e2 = e2.clone()).gdbVersion = e2.gdbVersion || this.gdbVersion, e2.dynamicDataSource = e2.dynamicDataSource || this.dynamicDataSource), s3(this.url, e2, t);
  }
  async executeAttachmentQuery(e2, t) {
    const { executeAttachmentQuery: r, fetchAttachments: s3, processAttachmentQueryResult: i } = await p(import("./queryAttachments-QDCAPOUD.js"), t), u2 = f(this.url);
    return i(u2, await (this.queryAttachmentsSupported ? r(u2, e2, t) : s3(u2, e2, t)));
  }
  async executeTopFeaturesQuery(e2, t) {
    const { executeTopFeaturesQuery: r } = await p(import("./executeTopFeaturesQuery-TXETC22Q.js"), t);
    return r(this.parsedUrl, e2, this.sourceSpatialReference, t);
  }
  async executeForTopIds(e2, t) {
    const { executeForTopIds: r } = await p(import("./executeForTopIds-HIGVSMNR.js"), t);
    return r(this.parsedUrl, e2, t);
  }
  async executeForTopExtents(e2, t) {
    const { executeForTopExtents: r } = await p(import("./executeForTopExtents-KHSZ7YX5.js"), t);
    return r(this.parsedUrl, e2, t);
  }
  async executeForTopCount(e2, t) {
    const { executeForTopCount: r } = await p(import("./executeForTopCount-M7HJO3XK.js"), t);
    return r(this.parsedUrl, e2, t);
  }
  _normalizeQuery(e2) {
    let t = b.from(e2);
    t.sourceSpatialReference = t.sourceSpatialReference || this.sourceSpatialReference, (this.gdbVersion || this.dynamicDataSource) && (t = t === e2 ? t.clone() : t, t.gdbVersion = e2.gdbVersion || this.gdbVersion, t.dynamicDataSource = e2.dynamicDataSource ? K.from(e2.dynamicDataSource) : this.dynamicDataSource);
    const { infoFor3D: o2 } = this;
    if (null != o2 && this._queryIs3DObjectFormat(e2)) {
      t = t === e2 ? t.clone() : t, t.formatOf3DObjects = null;
      const { supportedFormats: s3, queryFormats: i } = o2, u2 = o("model/gltf-binary", s3) ?? u("glb", s3), c = o("model/gltf+json", s3) ?? u("gtlf", s3);
      for (const e3 of i) {
        if (e3 === u2) {
          t.formatOf3DObjects = e3;
          break;
        }
        e3 !== c || t.formatOf3DObjects || (t.formatOf3DObjects = e3);
      }
      if (!t.formatOf3DObjects)
        throw new s("query:unsupported-3d-query-formats", "Could not find any supported 3D object query format. Only supported formats are 3D_glb and 3D_gltf");
      if (null == t.outFields || !t.outFields.includes("*")) {
        t = t === e2 ? t.clone() : t, null == t.outFields && (t.outFields = []);
        const { originX: r, originY: s4, originZ: i2, translationX: u3, translationY: a3, translationZ: n3, scaleX: c2, scaleY: p2, scaleZ: l, rotationX: m3, rotationY: y2, rotationZ: d2, rotationDeg: f2 } = o2.transformFieldRoles;
        t.outFields.push(r, s4, i2, u3, a3, n3, c2, p2, l, m3, y2, d2, f2);
      }
    }
    return t;
  }
  _normalizeFields(e2) {
    if (null != this.fieldsIndex && null != e2)
      for (const t of e2) {
        const e3 = this.fieldsIndex.get(t.name);
        e3 && Object.assign(t, e3.toJSON());
      }
  }
  _queryIs3DObjectFormat(e2) {
    return null != this.infoFor3D && true === e2.returnGeometry && "xyFootprint" !== e2.multipatchOption && !e2.outStatistics;
  }
};
e([y({ type: K })], F.prototype, "dynamicDataSource", void 0), e([y()], F.prototype, "fieldsIndex", void 0), e([y()], F.prototype, "gdbVersion", void 0), e([y()], F.prototype, "infoFor3D", void 0), e([y({ readOnly: true })], F.prototype, "parsedUrl", null), e([y()], F.prototype, "pbfSupported", void 0), e([y()], F.prototype, "queryAttachmentsSupported", void 0), e([y()], F.prototype, "sourceSpatialReference", void 0), e([y({ type: String })], F.prototype, "url", void 0), F = e([a("esri.tasks.QueryTask")], F);
var x = F;

export {
  x
};
//# sourceMappingURL=chunk-52VZ5DDK.js.map
