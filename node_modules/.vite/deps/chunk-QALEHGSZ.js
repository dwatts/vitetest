import {
  i as i2,
  n as n2
} from "./chunk-GYNE34WO.js";
import {
  a
} from "./chunk-IVMJPIWO.js";
import {
  e
} from "./chunk-WRFNQB7U.js";
import {
  o as o2
} from "./chunk-UUW6REOV.js";
import {
  o as o3
} from "./chunk-2US5EKDI.js";
import {
  s
} from "./chunk-Z3NHJA5D.js";
import {
  i2 as i
} from "./chunk-BO2REVMA.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  r
} from "./chunk-NLWV7Q6F.js";
import {
  n
} from "./chunk-SS3YG6J3.js";

// node_modules/@arcgis/core/chunks/SSAO.glsl.js
var f = 16;
function d() {
  const r2 = new i(), d2 = r2.fragment;
  return r2.include(o3), d2.include(a), r2.include(n2), d2.uniforms.add(new o2("radius", (e2, r3) => m(r3.camera))), d2.code.add(o`vec3 sphere[16];
void fillSphere() {
sphere[0] = vec3(0.186937, 0.0, 0.0);
sphere[1] = vec3(0.700542, 0.0, 0.0);
sphere[2] = vec3(-0.864858, -0.481795, -0.111713);
sphere[3] = vec3(-0.624773, 0.102853, -0.730153);
sphere[4] = vec3(-0.387172, 0.260319, 0.007229);
sphere[5] = vec3(-0.222367, -0.642631, -0.707697);
sphere[6] = vec3(-0.01336, -0.014956, 0.169662);
sphere[7] = vec3(0.122575, 0.1544, -0.456944);
sphere[8] = vec3(-0.177141, 0.85997, -0.42346);
sphere[9] = vec3(-0.131631, 0.814545, 0.524355);
sphere[10] = vec3(-0.779469, 0.007991, 0.624833);
sphere[11] = vec3(0.308092, 0.209288,0.35969);
sphere[12] = vec3(0.359331, -0.184533, -0.377458);
sphere[13] = vec3(0.192633, -0.482999, -0.065284);
sphere[14] = vec3(0.233538, 0.293706, -0.055139);
sphere[15] = vec3(0.417709, -0.386701, 0.442449);
}
float fallOffFunction(float vv, float vn, float bias) {
float f = max(radius * radius - vv, 0.0);
return f * f * f * max(vn - bias, 0.0);
}`), d2.code.add(o`float aoValueFromPositionsAndNormal(vec3 C, vec3 n_C, vec3 Q) {
vec3 v = Q - C;
float vv = dot(v, v);
float vn = dot(normalize(v), n_C);
return fallOffFunction(vv, vn, 0.1);
}`), d2.uniforms.add(new e("nearFar", (e2, r3) => r3.camera.nearFar), new s("normalMap", (e2) => e2.normalTexture), new s("depthMap", (e2) => e2.depthTexture), new e("zScale", (e2, r3) => i2(r3)), new o2("projScale", (e2) => e2.projScale), new s("rnm", (e2) => e2.noiseTexture), new e("rnmScale", (r3, t) => r(p, t.camera.fullWidth / r3.noiseTexture.descriptor.width, t.camera.fullHeight / r3.noiseTexture.descriptor.height)), new o2("intensity", (e2) => e2.intensity), new e("screenSize", (r3, t) => r(p, t.camera.fullWidth, t.camera.fullHeight))), d2.code.add(o`
    void main(void) {
      fillSphere();
      vec3 fres = normalize(2.0 * texture(rnm, uv * rnmScale).xyz - 1.0);
      float currentPixelDepth = linearDepthFromTexture(depthMap, uv, nearFar);

      if (-currentPixelDepth>nearFar.y || -currentPixelDepth<nearFar.x) {
        fragColor = vec4(0);
        return;
      }

      vec3 currentPixelPos = reconstructPosition(gl_FragCoord.xy,currentPixelDepth);

      // get the normal of current fragment
      vec4 norm4 = texture(normalMap, uv);
      vec3 norm = vec3(-1.0) + 2.0 * norm4.xyz;
      bool isTerrain = norm4.w < 0.5;

      float sum = 0.0;
      vec3 tapPixelPos;

      // note: the factor 2.0 should not be necessary, but makes ssao much nicer.
      // bug or deviation from CE somewhere else?
      float ps = projScale / (2.0 * currentPixelPos.z * zScale.x + zScale.y);

      for(int i = 0; i < ${o.int(f)}; ++i) {
        vec2 unitOffset = reflect(sphere[i], fres).xy;
        vec2 offset = vec2(-unitOffset * radius * ps);

        //don't use current or very nearby samples
        if( abs(offset.x) < 2.0 || abs(offset.y) < 2.0){
          continue;
        }

        vec2 tc = vec2(gl_FragCoord.xy + offset);
        if (tc.x < 0.0 || tc.y < 0.0 || tc.x > screenSize.x || tc.y > screenSize.y) continue;
        vec2 tcTap = tc / screenSize;
        float occluderFragmentDepth = linearDepthFromTexture(depthMap, tcTap, nearFar);

        if (isTerrain) {
          if (texture(normalMap, tcTap).w < 0.5) {
            continue;
          }
        }

        tapPixelPos = reconstructPosition(tc, occluderFragmentDepth);

        sum+= aoValueFromPositionsAndNormal(currentPixelPos, norm, tapPixelPos);
      }

      // output the result
      float A = max(1.0 - sum * intensity / float(${o.int(f)}), 0.0);

      // Anti-tone map to reduce contrast and drag dark region farther: (x^0.2 + 1.2 * x^4) / 2.2
      A = (pow(A, 0.2) + 1.2 * A*A*A*A) / 2.2;
      fragColor = vec4(A);
    }
  `), r2;
}
function m(e2) {
  return Math.max(10, 20 * e2.computeScreenPixelSizeAtDist(Math.abs(4 * e2.relativeElevation)));
}
var p = n();
var v = Object.freeze(Object.defineProperty({ __proto__: null, build: d, getRadius: m }, Symbol.toStringTag, { value: "Module" }));

export {
  d,
  m,
  v
};
//# sourceMappingURL=chunk-QALEHGSZ.js.map
