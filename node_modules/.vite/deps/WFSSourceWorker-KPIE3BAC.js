import {
  H
} from "./chunk-5TLLZN7W.js";
import "./chunk-PODY5IF6.js";
import {
  I,
  T
} from "./chunk-QTM3QPDW.js";
import {
  d as d3
} from "./chunk-4CGQMK33.js";
import {
  m
} from "./chunk-3BTM6YO4.js";
import "./chunk-6OVHX5ZO.js";
import "./chunk-N6RC4PHI.js";
import {
  ee
} from "./chunk-CPHFVZ42.js";
import "./chunk-LLQHB2ZB.js";
import "./chunk-CFEAJLOI.js";
import {
  f,
  g
} from "./chunk-RBDJB3ZY.js";
import "./chunk-RRRAGAMB.js";
import "./chunk-ERFCZMKG.js";
import "./chunk-C2GW4T2D.js";
import "./chunk-FLA7Z76H.js";
import "./chunk-LFQ3TKCC.js";
import "./chunk-ZD5B6I7X.js";
import "./chunk-HAYOKZGJ.js";
import "./chunk-SO7CVIZK.js";
import "./chunk-FJYIB7HF.js";
import "./chunk-S5RIUWET.js";
import "./chunk-MVWFPLOX.js";
import "./chunk-X3YW4YOG.js";
import {
  rt,
  st
} from "./chunk-IG234GCS.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-BA6PBZHC.js";
import {
  r
} from "./chunk-YA7WDOJK.js";
import "./chunk-467UETSR.js";
import "./chunk-SHFLRM67.js";
import "./chunk-GSS6WNQU.js";
import "./chunk-C2EHS6UI.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-KRCNIFX2.js";
import "./chunk-LVVQ2RQY.js";
import "./chunk-M6OG7C2T.js";
import "./chunk-GOK5MP3B.js";
import "./chunk-BNBT4QTW.js";
import "./chunk-3FQOSG5O.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-AQ7R6V4L.js";
import "./chunk-4BXK4H4L.js";
import "./chunk-OZXJDVTE.js";
import {
  d as d2
} from "./chunk-SVCGLUNW.js";
import "./chunk-GGOVZ2GK.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-WLWP35G2.js";
import "./chunk-JPW73GY2.js";
import "./chunk-HXPVVSLV.js";
import "./chunk-4OR73Y2R.js";
import "./chunk-EKJ2DJIR.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-3VUFACNT.js";
import "./chunk-ZEEBL7ZN.js";
import {
  S2 as S,
  p
} from "./chunk-RTDN6KAT.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-H7RDAEPY.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-7KH4CLS5.js";
import "./chunk-WCHO7VLT.js";
import "./chunk-43LWRDQS.js";
import "./chunk-R6YKST3K.js";
import "./chunk-ZJEWQGHG.js";
import "./chunk-YGB42LDG.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-MP6GH2AC.js";
import "./chunk-V76KGJFU.js";
import "./chunk-HB2SQRT2.js";
import "./chunk-U3J7253Q.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-ZWUBORGT.js";
import "./chunk-3R7FAT25.js";
import {
  d,
  s as s3
} from "./chunk-7I33FAWS.js";
import "./chunk-DWOEYHKS.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/graphics/sources/WFSSourceWorker.js
var d4 = class {
  constructor() {
    this._queryEngine = null, this._customParameters = null, this._snapshotFeatures = async (e) => {
      const { objectIdField: t } = this._queryEngine, r2 = await H(this._getFeatureUrl ?? "", this._featureType.typeName, this._getFeatureOutputFormat, { customParameters: this._customParameters, dateFields: this._queryEngine.fieldsIndex.dateFields.map((e2) => e2.name), signal: e });
      await T(r2), s3(e);
      const a = I(r2, { geometryType: this._queryEngine.geometryType, hasZ: false, objectIdField: t });
      if (!S(this._queryEngine.spatialReference, p))
        for (const s4 of a)
          null != s4.geometry && (s4.geometry = rt(g(st(s4.geometry, this._queryEngine.geometryType, false, false), p, this._queryEngine.spatialReference)));
      let p2 = 1;
      for (const s4 of a) {
        const e2 = {};
        d3(this._fieldsIndex, e2, s4.attributes, true), s4.attributes = e2, null == s4.attributes[t] && (s4.objectId = s4.attributes[t] = p2++);
      }
      return a;
    };
  }
  destroy() {
    var _a;
    (_a = this._queryEngine) == null ? void 0 : _a.destroy(), this._queryEngine = null;
  }
  async load(e, t) {
    const { getFeatureUrl: r2, getFeatureOutputFormat: a, spatialReference: i, fields: n, geometryType: o, featureType: u, objectIdField: h, customParameters: y } = e;
    this._featureType = u, this._customParameters = y, this._getFeatureUrl = r2, this._getFeatureOutputFormat = a, this._fieldsIndex = new r(n), await this._checkProjection(i), s3(t), this._queryEngine = new ee({ fields: n, geometryType: o, hasM: false, hasZ: false, objectIdField: h, spatialReference: i, timeInfo: null, featureStore: new m({ geometryType: o, hasM: false, hasZ: false }) });
    const l = await this._snapshotFeatures(t.signal);
    return this._queryEngine.featureStore.addMany(l), { extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async applyEdits() {
    throw new s2("wfs-source:editing-not-supported", "applyEdits() is not supported on WFSLayer");
  }
  async queryFeatures(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e, t.signal);
  }
  async queryFeatureCount(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e, t.signal);
  }
  async queryObjectIds(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForIds(e, t.signal);
  }
  async queryExtent(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e, t.signal);
  }
  async querySnapping(e, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForSnapping(e, t.signal);
  }
  async refresh(s4) {
    var _a;
    return this._customParameters = s4, (_a = this._snapshotTask) == null ? void 0 : _a.abort(), this._snapshotTask = d2(this._snapshotFeatures), this._snapshotTask.promise.then((e) => {
      this._queryEngine.featureStore.clear(), e && this._queryEngine.featureStore.addMany(e);
    }, (e) => {
      this._queryEngine.featureStore.clear(), d(e) || s.getLogger("esri.layers.WFSLayer").error(new s2("wfs-layer:getfeature-error", "An error occurred during the GetFeature request", { error: e }));
    }), await this._waitSnapshotComplete(), { extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _checkProjection(e) {
    try {
      await f(p, e);
    } catch {
      throw new s2("unsupported-projection", "Projection not supported", { spatialReference: e });
    }
  }
};
export {
  d4 as default
};
//# sourceMappingURL=WFSSourceWorker-KPIE3BAC.js.map
