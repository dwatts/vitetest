import {
  s
} from "./chunk-HMVAPW5X.js";

// node_modules/@arcgis/core/core/fontUtils.js
var t = "arial-unicode-ms";
var n = "woff2";
var r = /* @__PURE__ */ new Map();
var s2 = /* @__PURE__ */ new Set();
var o = class {
  constructor(e, t2) {
    this.fontFace = e, this.promise = t2;
  }
};
async function c(t2) {
  const c2 = f(t2), a = r.get(c2);
  if (a)
    return a.promise;
  const i2 = new FontFace(t2.family, `url('${s.fontsUrl}/woff2/${c2}.${n}') format('${n}')`, { style: t2.style, weight: t2.weight }), u2 = document.fonts;
  if (u2.has(i2) && "loading" === i2.status)
    return i2.loaded;
  const l2 = i2.load().then(() => (u2.add(i2), i2));
  return r.set(c2, new o(i2, l2)), s2.add(i2), l2;
}
function i(e) {
  return s2.has(e);
}
function u(e) {
  if (!e)
    return t;
  const n2 = e.toLowerCase().split(" ").join("-");
  switch (n2) {
    case "serif":
      return "noto-serif";
    case "sans-serif":
      return "arial-unicode-ms";
    case "monospace":
      return "ubuntu-mono";
    case "fantasy":
      return "cabin-sketch";
    case "cursive":
      return "redressed";
    default:
      return n2;
  }
}
function f(e) {
  const t2 = l(e) + d(e);
  return u(e.family) + (t2.length > 0 ? t2 : "-regular");
}
function l(e) {
  if (!e.weight)
    return "";
  switch (e.weight.toLowerCase()) {
    case "bold":
    case "bolder":
      return "-bold";
  }
  return "";
}
function d(e) {
  if (!e.style)
    return "";
  switch (e.style.toLowerCase()) {
    case "italic":
    case "oblique":
      return "-italic";
  }
  return "";
}

export {
  t,
  c,
  i,
  u,
  f
};
//# sourceMappingURL=chunk-XL7RF4A6.js.map
