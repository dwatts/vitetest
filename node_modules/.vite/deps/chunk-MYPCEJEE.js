import {
  p
} from "./chunk-DOR4M5EA.js";
import {
  h
} from "./chunk-3ROGWJVH.js";
import {
  o as o2
} from "./chunk-UUW6REOV.js";
import {
  i2 as i
} from "./chunk-BO2REVMA.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  O
} from "./chunk-BN6X2OXK.js";

// node_modules/@arcgis/core/chunks/HeatmapDensity.glsl.js
function s(s2) {
  const d2 = new i(), { vertex: n, fragment: u, attributes: l, varyings: c } = d2;
  p(n, s2);
  const { isAttributeDriven: f, usesHalfFloat: v } = s2;
  return l.add(O.POSITION, "vec3"), l.add(O.UV0, "vec2"), f && (l.add(O.FEATUREATTRIBUTE, "float"), c.add("attributeValue", "float")), v && d2.constants.add("compressionFactor", "float", 0.25), c.add("unitCirclePos", "vec2"), n.uniforms.add(new o2("radius", ({ resolutionForScale: i2, searchRadius: o3 }, { camera: r, screenToWorldRatio: a }) => 2 * o3 * (0 === i2 ? 1 : i2 / a) * r.pixelRatio / r.fullViewport[2] / h)), n.code.add(o`
    void main() {
      unitCirclePos = uv0;

      vec4 posProj = proj * (view * vec4(${O.POSITION}, 1.0));
      vec4 quadOffset = vec4(unitCirclePos * radius, 0.0, 0.0);

      ${f ? o`attributeValue = ${O.FEATUREATTRIBUTE};` : ""}
      gl_Position = posProj + quadOffset;
    }
  `), u.code.add(o`
    void main() {
      float radiusRatioSquared = dot(unitCirclePos, unitCirclePos);
      if (radiusRatioSquared > 1.0) {
        discard;
      }

      float oneMinusRadiusRatioSquared = 1.0 - radiusRatioSquared;
      float density = oneMinusRadiusRatioSquared * oneMinusRadiusRatioSquared ${f ? o` * attributeValue` : ""} ${v ? o` * compressionFactor` : ""};
      fragColor = vec4(density);
    }
  `), d2;
}
var d = Object.freeze(Object.defineProperty({ __proto__: null, build: s }, Symbol.toStringTag, { value: "Module" }));

export {
  s,
  d
};
//# sourceMappingURL=chunk-MYPCEJEE.js.map
