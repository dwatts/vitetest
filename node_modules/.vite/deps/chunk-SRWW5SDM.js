import {
  e
} from "./chunk-QS45OHBM.js";
import {
  s
} from "./chunk-Z3NHJA5D.js";
import {
  i2 as i
} from "./chunk-BO2REVMA.js";
import {
  o
} from "./chunk-V66LHQVK.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import {
  n
} from "./chunk-YGUWDSEH.js";
import {
  r2 as r
} from "./chunk-3CQBBMMD.js";

// node_modules/@arcgis/core/chunks/HighlightApply.glsl.js
var a = 8.6;
var s2 = 0.4;
function u() {
  const o2 = new i(), { vertex: u2, fragment: d2 } = o2, g = u2.code, f = d2.code;
  return o2.attributes.add(O.POSITION, "vec2"), o2.varyings.add("uv", "vec2"), o2.attributes.add(O.UV0, "vec2"), u2.uniforms.add(new s("coverageTex", (e2) => e2.coverageTexture)), g.add(o`void main() {
vec4 cov = texture(coverageTex, uv0);
if (cov.r == 0.0) {
gl_Position = vec4(0.0);
return;
}
gl_Position = vec4(position, 0.0, 1.0);
uv = position.xy * 0.5 + vec2(0.5);
}`), d2.uniforms.add(new s("tex", (e2) => e2.blurColorTexture), new s("origin", (e2) => e2.highlightColorTexture), new e("uColor", (e2) => e2.color), new e("haloColor", (e2) => e2.haloColor), new e("opacities", (o3) => r(c, o3.haloOpacity, o3.haloOpacityOccluded, o3.fillOpacity, o3.fillOpacityOccluded))), d2.constants.add("outlineSize", "float", a), d2.constants.add("blurSize", "float", s2), f.add(o`void main() {
vec4 blurredHighlightValue = texture(tex, uv);
float highlightIntensity = blurredHighlightValue.a;
if (highlightIntensity == 0.0) {
discard;
}
vec4 origin_color = texture(origin, uv);
float outlineIntensity;
float fillIntensity;
if (blurredHighlightValue.g > blurredHighlightValue.b) {
outlineIntensity = haloColor.w * opacities[1];
fillIntensity = uColor.w * opacities[3];
}
else {
outlineIntensity = haloColor.w * opacities[0];
fillIntensity = uColor.w * opacities[2];
}
float inner = 1.0 - outlineSize / 9.0;
float outer = 1.0 - (outlineSize + blurSize) / 9.0;
float outlineFactor = smoothstep(outer, inner, highlightIntensity);
float fillFactor = any(notEqual(origin_color, vec4(0.0, 0.0, 0.0, 0.0))) ? 1.0 : 0.0;
float intensity = outlineIntensity * outlineFactor * (1.0 - fillFactor) + fillIntensity * fillFactor;
fragColor = vec4(mix(haloColor.rgb, uColor.rgb, fillFactor), intensity);
}`), o2;
}
var c = n();
var d = Object.freeze(Object.defineProperty({ __proto__: null, build: u }, Symbol.toStringTag, { value: "Module" }));

export {
  u,
  d
};
//# sourceMappingURL=chunk-SRWW5SDM.js.map
