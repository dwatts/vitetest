import {
  a as a5
} from "./chunk-AWHGPLMH.js";
import {
  t
} from "./chunk-W2MFIVLD.js";
import {
  f as f3
} from "./chunk-YZTKL3LQ.js";
import {
  ne
} from "./chunk-XXN3TEOU.js";
import {
  B
} from "./chunk-DBIFU6GO.js";
import {
  pt
} from "./chunk-WRC5WFEM.js";
import {
  E,
  a as a3,
  a2 as a4,
  e as e4
} from "./chunk-UYTAZUBJ.js";
import {
  C
} from "./chunk-2EO2WRP7.js";
import {
  b
} from "./chunk-BDX5TRUE.js";
import {
  o2 as o
} from "./chunk-SMDDCTGQ.js";
import {
  Z
} from "./chunk-2XKILFME.js";
import {
  s as s2
} from "./chunk-6S2FCH6S.js";
import {
  c
} from "./chunk-LEDSC236.js";
import {
  e as e3
} from "./chunk-CW7LIPBH.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import {
  r as r2
} from "./chunk-YGUWDSEH.js";
import {
  f as f2,
  n as n2,
  q
} from "./chunk-7EG7BYWF.js";
import {
  s
} from "./chunk-DEZCXTA3.js";
import {
  F,
  e as e2,
  r,
  u,
  x,
  z
} from "./chunk-TPJLFGOT.js";
import {
  f,
  n
} from "./chunk-CQX57DED.js";
import {
  a2
} from "./chunk-3CQBBMMD.js";
import {
  l
} from "./chunk-H7RDAEPY.js";
import {
  m,
  y3 as y
} from "./chunk-V76KGJFU.js";
import {
  a2 as a
} from "./chunk-HB2SQRT2.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";

// node_modules/@arcgis/core/views/3d/interactive/visualElements/DrapedVisualElementResources.js
var a6 = class {
  constructor(e5) {
    this._resourceFactory = e5, this._resources = null, this._visible = true, this._attached = false, this._renderGroup = a3.Outline;
  }
  destroy() {
    this._destroyResources();
  }
  get resources() {
    return null != this._resources ? this._resources.external : null;
  }
  get visible() {
    return this._visible;
  }
  set visible(e5) {
    e5 !== this._visible && (this._visible = e5, this._syncGeometriesToRenderer());
  }
  get attached() {
    return this._attached;
  }
  set attached(e5) {
    e5 !== this._attached && (this._attached = e5, this._createOrDestroyResources());
  }
  get renderGroup() {
    return this._renderGroup;
  }
  set renderGroup(e5) {
    var _a2;
    this._renderGroup = e5;
    const r3 = (_a2 = this._resources) == null ? void 0 : _a2.layerView;
    r3 && (r3.renderGroup = e5);
  }
  recreate() {
    this.attached && this._createResources();
  }
  recreateGeometry() {
    this._resourceFactory.recreateGeometry ? null != this._resources && (this._ensureRenderGeometriesRemoved(), this._resourceFactory.recreateGeometry(this._resources.external), this._syncGeometriesToRenderer()) : this.recreate();
  }
  _createOrDestroyResources() {
    this._attached ? null == this._resources && this._createResources() : this._destroyResources();
  }
  _createResources() {
    var _a2;
    this._destroyResources();
    const e5 = this._resourceFactory.createResources(), r3 = new d({ view: this._resourceFactory.view, renderGroup: this._renderGroup }), s3 = (_a2 = this._resourceFactory.view.basemapTerrain) == null ? void 0 : _a2.overlayManager;
    this._resources = { layerView: new d({ view: this._resourceFactory.view, renderGroup: this._renderGroup }), external: e5, geometriesAdded: false }, s3 && (this._resources.drapeSourceRenderer = s3.registerGeometryDrapeSource(r3)), this._syncGeometriesToRenderer();
  }
  _destroyResources() {
    var _a2;
    if (null == this._resources)
      return;
    this._ensureRenderGeometriesRemoved();
    const e5 = (_a2 = this._resourceFactory.view.basemapTerrain) == null ? void 0 : _a2.overlayManager;
    e5 && e5.unregisterDrapeSource(this._resources.layerView), this._resourceFactory.destroyResources(this._resources.external), this._resources = null;
  }
  _syncGeometriesToRenderer() {
    this._visible ? this._ensureRenderGeometriesAdded() : this._ensureRenderGeometriesRemoved();
  }
  _ensureRenderGeometriesRemoved() {
    if (null == this._resources || null == this._resources.drapeSourceRenderer)
      return;
    if (!this._resources.geometriesAdded)
      return;
    this._resources.drapeSourceRenderer.removeGeometries(this._resources.external.geometries, E.UPDATE), this._resources.geometriesAdded = false;
  }
  _ensureRenderGeometriesAdded() {
    if (null == this._resources || null == this._resources.drapeSourceRenderer)
      return;
    if (this._resources.geometriesAdded)
      return;
    this._resources.drapeSourceRenderer.addGeometries(this._resources.external.geometries, E.UPDATE), this._resources.geometriesAdded = true;
  }
};
var d = class extends s(m) {
  constructor(e5) {
    super(e5), this.drapeSourceType = e4.Features, this.updatePolicy = C.SYNC, this.renderGroup = a3.Outline;
  }
};
e([y({ constructOnly: true })], d.prototype, "view", void 0), e([y({ readOnly: true })], d.prototype, "drapeSourceType", void 0), e([y()], d.prototype, "renderGroup", void 0), d = e([a("DrapedVisualElementLayerView")], d);

// node_modules/@arcgis/core/views/3d/interactive/visualElements/EngineVisualElement.js
var t2 = class extends t {
  constructor({ view: s3, isDraped: t3 }) {
    super(s3), this._isDraped = false, this.object3dResources = new a5(this.createObject3DResourceFactory(s3)), this.drapedResources = new a6(this.createDrapedResourceFactory(s3)), this.isDraped = t3 ?? false;
  }
  get isDraped() {
    return this._isDraped;
  }
  set isDraped(e5) {
    e5 !== this._isDraped && (this._isDraped = e5, this.object3dResources.attached = this.attached && !e5, this.drapedResources.attached = this.attached && e5);
  }
  get renderGroup() {
    return this.drapedResources.renderGroup;
  }
  set renderGroup(e5) {
    this.drapedResources.renderGroup = e5;
  }
  createResources() {
    this.object3dResources.attached = !this._isDraped, this.drapedResources.attached = this._isDraped;
  }
  destroyResources() {
    this.object3dResources.attached = false, this.drapedResources.attached = false;
  }
  recreate() {
    this.object3dResources.recreate(), this.drapedResources.recreate();
  }
  recreateGeometry() {
    this.object3dResources.recreateGeometry(), this.drapedResources.recreateGeometry();
  }
  destroy() {
    this.object3dResources.destroy(), this.drapedResources.destroy(), super.destroy();
  }
  updateVisibility(e5) {
    this.object3dResources.visible = e5, this.drapedResources.visible = e5;
  }
};

// node_modules/@arcgis/core/views/3d/interactive/visualElements/RightAngleQuadVisualElement.js
var P = class extends t2 {
  constructor(e5) {
    super(e5), this._maxSize = 0, this._position = n(), this._up = n(), this._right = n(), this._renderOccluded = o.OccludeAndTransparent, this._color = r2(1, 0, 0, 1), this._outlineColor = r2(0, 0, 0, 1), this._outlineSize = 0, this._size = 32, this._outlineRenderOccluded = o.Opaque, this.applyProps(e5);
  }
  createObject3DResourceFactory(e5) {
    return { view: e5, createResources: (e6) => this._createObject3DResources(e6), destroyResources: (e6) => this._destroyObject3DResources(e6), cameraChanged: () => this._updateTransformObject3D() };
  }
  createDrapedResourceFactory(e5) {
    return { view: e5, createResources: () => this._createDrapedResources(), destroyResources: (e6) => this._destroyDrapedResources(e6) };
  }
  get renderOccluded() {
    return this._renderOccluded;
  }
  set renderOccluded(e5) {
    e5 !== this._renderOccluded && (this._renderOccluded = e5, this._updateQuadMaterial());
  }
  get color() {
    return this._color;
  }
  set color(e5) {
    a2(this._color, e5), this._updateQuadMaterial();
  }
  get outlineColor() {
    return this._outlineColor;
  }
  set outlineColor(e5) {
    a2(this._outlineColor, e5), this._updateOutlineMaterial();
  }
  get outlineSize() {
    return this._outlineSize;
  }
  set outlineSize(e5) {
    const t3 = 0 === this._outlineSize != (0 === e5);
    this._outlineSize = e5, t3 ? this.recreateGeometry() : this._updateOutlineMaterial();
  }
  get size() {
    return this._size;
  }
  set size(e5) {
    e5 !== this._size && (this._size = e5, this._updateTransform());
  }
  get outlineRenderOccluded() {
    return this._outlineRenderOccluded;
  }
  set outlineRenderOccluded(e5) {
    this._outlineRenderOccluded = e5, this._updateOutlineMaterial();
  }
  set geometry({ previous: e5, center: t3, next: r3 }) {
    this._maxSize = Math.min(x(t3, e5), x(t3, r3)) / 3, z(this._up, e2(this._up, e5, t3)), z(this._right, e2(this._right, r3, t3)), r(this._position, t3), this.recreateGeometry();
  }
  _createObject3DResources(e5) {
    const t3 = new f3(this._quadMaterialParameters), r3 = 0 === this._outlineSize ? void 0 : new B(this._outlineMaterialParameters);
    return this._createObject3DGeometries(e5, t3, r3), { quadMaterial: t3, outlineMaterial: r3, forEach: (e6) => {
      e6(t3), r3 && e6(r3);
    } };
  }
  _destroyObject3DResources(e5) {
    var _a;
    e5.quadMaterial.dispose(), (_a = e5.outlineMaterial) == null ? void 0 : _a.dispose();
  }
  _createObject3DGeometries(e5, t3, r3) {
    if (F(this._up, f) && F(this._right, f))
      return;
    const i = this._createGeometries(t3, r3);
    for (const s3 of i)
      e5.addGeometry(s3);
    this._updateTransformObject3D(e5);
  }
  _createDrapedResources() {
    const t3 = new f3(this._quadMaterialParameters), r3 = 0 === this._outlineSize ? void 0 : new B(this._outlineMaterialParameters), i = this._createGeometries(t3, r3).map((e5) => new a4(e5));
    this._setTransformDraped(i);
    return { quadMaterial: t3, outlineMaterial: r3, geometries: i, pixelRatioHandle: l(() => this.view.state.contentPixelRatio, () => {
      this.drapedResources.recreateGeometry();
    }) };
  }
  _destroyDrapedResources(e5) {
    var _a;
    e5.pixelRatioHandle.remove(), e5.geometries = [], (_a = e5.outlineMaterial) == null ? void 0 : _a.dispose(), e5.quadMaterial.dispose();
  }
  _createGeometries(e5, t3) {
    const { up: r3, right: i, corner: s3 } = this._getVertices(), a7 = this._quadGeometryData(r3, i, s3, e5);
    if (!t3)
      return [a7];
    return [a7, pt(t3, [r3, s3, i])];
  }
  _getVertices() {
    let e5 = this._up, t3 = this._right;
    const r3 = u(c.get(), e5, t3);
    return this.isDraped && (e5 = r(c.get(), e5), t3 = r(c.get(), t3), e5[2] = 0, t3[2] = 0, r3[2] = 0), { up: e5, right: t3, corner: r3 };
  }
  _updateTransform() {
    this.isDraped ? this.drapedResources.recreateGeometry() : this._updateTransformObject3D();
  }
  _updateTransformObject3D(e5 = this.object3dResources.object) {
    if (!e5)
      return;
    const i = this.view.state.camera, s3 = this._size * i.computeScreenPixelSizeAt(this._position), a7 = Math.min(this._maxSize, s3);
    q(v, this._position), f2(v, v, [a7, a7, a7]), e5.transformation = v;
  }
  _setTransformDraped(e5) {
    if (0 === e5.length)
      return;
    const { view: { basemapTerrain: { overlayManager: s3 }, state: { contentPixelRatio: a7 } } } = this, { _position: o2, _size: n3 } = this, c2 = r(c.get(), o2);
    c2[2] = ne;
    const l2 = S;
    l2.spatialReference = s3.renderer.spatialReference, l2.x = c2[0], l2.y = c2[1];
    const d2 = n3 * (s3.overlayPixelSizeInMapUnits(l2) * a7), h = Math.min(this._maxSize, d2);
    q(v, c2), f2(v, v, [h, h, 1]);
    for (const t3 of e5)
      t3.updateTransformation((e6) => {
        n2(e6, v);
      });
  }
  _quadGeometryData(e5, t3, r3, i) {
    return new b(i, [[O.POSITION, new s2([0, 0, 0, ...t3, ...e5, ...r3], 3, true)]], [[O.POSITION, [0, 1, 2, 1, 2, 3]]]);
  }
  get _quadMaterialParameters() {
    return { color: this._color, transparent: true, writeDepth: false, polygonOffset: true, renderOccluded: this._renderOccluded };
  }
  _updateQuadMaterial() {
    var _a, _b;
    (_a = this.object3dResources.resources) == null ? void 0 : _a.quadMaterial.setParameters(this._quadMaterialParameters), (_b = this.drapedResources.resources) == null ? void 0 : _b.quadMaterial.setParameters(this._quadMaterialParameters);
  }
  get _outlineMaterialParameters() {
    return { color: this._outlineColor, width: this._outlineSize, renderOccluded: this._outlineRenderOccluded };
  }
  _updateOutlineMaterial() {
    var _a, _b, _c, _d;
    (_b = (_a = this.object3dResources.resources) == null ? void 0 : _a.outlineMaterial) == null ? void 0 : _b.setParameters(this._outlineMaterialParameters), (_d = (_c = this.drapedResources.resources) == null ? void 0 : _c.outlineMaterial) == null ? void 0 : _d.setParameters(this._outlineMaterialParameters);
  }
};
var v = e3();
var S = Z(0, 0, void 0, null);

export {
  t2 as t,
  P
};
//# sourceMappingURL=chunk-UX7SMS2W.js.map
