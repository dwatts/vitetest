import {
  e
} from "./chunk-467UETSR.js";
import {
  r as r2
} from "./chunk-ZWFMUHG3.js";
import {
  T2 as T
} from "./chunk-RTDN6KAT.js";
import {
  r
} from "./chunk-3R7FAT25.js";
import {
  s
} from "./chunk-7I33FAWS.js";
import {
  a,
  c
} from "./chunk-IYZKKFJM.js";

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/snappingCandidateElevationAlignment.js
function i(e3 = false, t2) {
  if (e3) {
    const { elevationInfo: e4, alignPointsInFeatures: s3, spatialReference: n3 } = t2;
    return new c2(e4, s3, n3);
  }
  return new a2();
}
var a2 = class {
  async alignCandidates(e3, t2) {
    return e3;
  }
  notifyElevationSourceChange() {
  }
};
var r3 = 1024;
var c2 = class {
  constructor(t2, s3, o2) {
    this._elevationInfo = t2, this._alignPointsInFeatures = s3, this.spatialReference = o2, this._alignmentsCache = new e(r3), this._cacheVersion = 0, this._metersPerVerticalUnit = T(o2);
  }
  async alignCandidates(e3, t2) {
    const s3 = this._elevationInfo;
    return null == s3 || "absolute-height" !== s3.mode || s3.featureExpressionInfo ? this._alignComputedElevationCandidates(e3, t2) : (this._alignAbsoluteElevationCandidates(e3, s3), e3);
  }
  notifyElevationSourceChange() {
    this._alignmentsCache.clear(), this._cacheVersion++;
  }
  _alignAbsoluteElevationCandidates(e3, t2) {
    const { offset: s3, unit: n3 } = t2;
    if (null == s3)
      return;
    const i4 = s3 * (r2(n3 ?? "meters") / this._metersPerVerticalUnit);
    for (const o2 of e3)
      switch (o2.type) {
        case "edge":
          o2.start.z += i4, o2.end.z += i4;
          continue;
        case "vertex":
          o2.target.z += i4;
          continue;
      }
  }
  async _alignComputedElevationCandidates(e3, n3) {
    const o2 = /* @__PURE__ */ new Map();
    for (const s3 of e3)
      r(o2, s3.objectId, d).push(s3);
    const [i4, a5, r6] = this._prepareQuery(o2), c5 = await this._alignPointsInFeatures(i4, n3);
    s(n3);
    if (r6 !== this._cacheVersion)
      return this._alignComputedElevationCandidates(e3, n3);
    this._applyCacheAndResponse(i4, c5, a5);
    const { drapedObjectIds: l2, failedObjectIds: h2 } = c5, u = [];
    for (const t2 of e3) {
      const { objectId: e4 } = t2;
      l2.has(e4) && "edge" === t2.type && (t2.draped = true), h2.has(e4) || u.push(t2);
    }
    return u;
  }
  _prepareQuery(e3) {
    const t2 = [], s3 = [];
    for (const [n3, o2] of e3) {
      const e4 = [];
      for (const t3 of o2)
        this._addToQueriesOrCachedResult(n3, t3.target, e4, s3), "edge" === t3.type && (this._addToQueriesOrCachedResult(n3, t3.start, e4, s3), this._addToQueriesOrCachedResult(n3, t3.end, e4, s3));
      0 !== e4.length && t2.push({ objectId: n3, points: e4 });
    }
    return [t2, s3, this._cacheVersion];
  }
  _addToQueriesOrCachedResult(e3, t2, s3, n3) {
    const o2 = h(e3, t2), i4 = this._alignmentsCache.get(o2);
    null == i4 ? s3.push(t2) : n3.push(new l(t2, i4));
  }
  _applyCacheAndResponse(e3, { elevations: t2, drapedObjectIds: s3, failedObjectIds: n3 }, o2) {
    for (const r6 of o2)
      r6.apply();
    let i4 = 0;
    const a5 = this._alignmentsCache;
    for (const { objectId: r6, points: c5 } of e3) {
      if (n3.has(r6)) {
        i4 += c5.length;
        continue;
      }
      const e4 = !s3.has(r6);
      for (const s4 of c5) {
        const n4 = h(r6, s4), o3 = t2[i4++];
        s4.z = o3, e4 && a5.put(n4, o3, 1);
      }
    }
  }
};
var l = class {
  constructor(e3, t2) {
    this.point = e3, this.z = t2;
  }
  apply() {
    this.point.z = this.z;
  }
};
function h(e3, { x: t2, y: s3, z: n3 }) {
  return `${e3}-${t2}-${s3}-${n3 ?? 0}}`;
}
function d() {
  return [];
}

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/snappingCandidateElevationFilter.js
var t = class {
  filter(t2, n3) {
    return n3;
  }
  notifyElevationSourceChange() {
  }
};
var n = class {
  filter(t2, n3) {
    const { point: r6, distance: c5 } = t2, { z: i4 } = r6;
    if (!(null != i4))
      return n3;
    if (0 === n3.length)
      return n3;
    const o2 = s2(c5), u = this._updateCandidatesTo3D(n3, r6, o2).filter(e2);
    return u.sort(a3), u;
  }
  _updateCandidatesTo3D(t2, n3, e3) {
    for (const r6 of t2)
      switch (r6.type) {
        case "edge":
          c3(r6, n3, e3);
          continue;
        case "vertex":
          o(r6, n3, e3);
          continue;
      }
    return t2;
  }
};
function e2(t2) {
  return t2.distance <= 1;
}
function r4(e3 = false) {
  return e3 ? new n() : new t();
}
function c3(t2, n3, { x: e3, y: r6, z: c5 }) {
  const { start: o2, end: s3, target: a5 } = t2;
  t2.draped || i2(a5, n3, o2, s3);
  const u = (n3.x - a5.x) / e3, d2 = (n3.y - a5.y) / r6, f = (n3.z - a5.z) / c5;
  t2.distance = Math.sqrt(u * u + d2 * d2 + f * f);
}
function i2(t2, n3, e3, r6) {
  const c5 = r6.x - e3.x, i4 = r6.y - e3.y, o2 = r6.z - e3.z, s3 = c5 * c5 + i4 * i4 + o2 * o2, a5 = (n3.x - e3.x) * c5 + (n3.y - e3.y) * i4 + o2 * (n3.z - e3.z), u = Math.min(1, Math.max(0, a5 / s3)), d2 = e3.x + c5 * u, f = e3.y + i4 * u, x = e3.z + o2 * u;
  t2.x = d2, t2.y = f, t2.z = x;
}
function o(t2, n3, { x: e3, y: r6, z: c5 }) {
  const { target: i4 } = t2, o2 = (n3.x - i4.x) / e3, s3 = (n3.y - i4.y) / r6, a5 = (n3.z - i4.z) / c5, u = Math.sqrt(o2 * o2 + s3 * s3 + a5 * a5);
  t2.distance = u;
}
function s2(t2) {
  return "number" == typeof t2 ? { x: t2, y: t2, z: t2 } : t2;
}
function a3(t2, n3) {
  return t2.distance - n3.distance;
}

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/symbologySnappingCandidates.js
function n2(t2 = false, e3) {
  return t2 ? new i3(e3) : new c4();
}
var c4 = class {
  async fetch() {
    return [];
  }
  notifySymbologyChange() {
  }
};
var r5 = 1024;
var i3 = class {
  constructor(t2) {
    this._getSymbologyCandidates = t2, this._candidatesCache = new e(r5), this._cacheVersion = 0;
  }
  async fetch(e3, o2) {
    if (0 === e3.length)
      return [];
    const n3 = [], c5 = [], r6 = this._candidatesCache;
    for (const s3 of e3) {
      const e4 = a4(s3), o3 = r6.get(e4);
      if (o3)
        for (const s4 of o3)
          c5.push(a(s4));
      else
        n3.push(s3), r6.put(e4, [], 1);
    }
    if (0 === n3.length)
      return c5;
    const i4 = this._cacheVersion, { candidates: h2, sourceCandidateIndices: d2 } = await this._getSymbologyCandidates(n3, o2);
    s(o2);
    if (i4 !== this._cacheVersion)
      return this.fetch(e3, o2);
    const f = [], { length: g } = h2;
    for (let s3 = 0; s3 < g; ++s3) {
      const e4 = h2[s3], o3 = a4(n3[d2[s3]]), c6 = r6.get(o3);
      c6.push(e4), r6.put(o3, c6, c6.length), f.push(a(e4));
    }
    return c5.concat(f);
  }
  notifySymbologyChange() {
    this._candidatesCache.clear(), this._cacheVersion++;
  }
};
function a4(t2) {
  switch (t2.type) {
    case "vertex": {
      const { objectId: e3, target: s3 } = t2, n3 = `${e3}-vertex-${s3.x}-${s3.y}-${s3.z ?? 0}`;
      return c(n3).toString();
    }
    case "edge": {
      const { objectId: e3, start: s3, end: n3 } = t2, c5 = `${e3}-edge-${s3.x}-${s3.y}-${s3.z ?? 0}-to-${n3.x}-${n3.y}-${n3.z ?? 0}`;
      return c(c5).toString();
    }
    default:
      return "";
  }
}

export {
  i,
  r4 as r,
  n2 as n
};
//# sourceMappingURL=chunk-SAAQQDRS.js.map
