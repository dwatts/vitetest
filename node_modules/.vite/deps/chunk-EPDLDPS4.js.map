{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/AlignPixel.glsl.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/HUDUniforms.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/HUD.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{BooleanPassUniform as e}from\"../../shaderModules/BooleanPassUniform.js\";import{glsl as i}from\"../../shaderModules/interfaces.js\";function o(o){o.uniforms.add(new e(\"alignPixelEnabled\",((e,i)=>i.alignPixelEnabled))),o.code.add(i`vec4 alignToPixelCenter(vec4 clipCoord, vec2 widthHeight) {\nif (!alignPixelEnabled)\nreturn clipCoord;\nvec2 xy = vec2(0.500123) + 0.5 * clipCoord.xy / clipCoord.w;\nvec2 pixelSz = vec2(1.0) / widthHeight;\nvec2 ij = (floor(xy * widthHeight) + vec2(0.5)) * pixelSz;\nvec2 result = (ij * 2.0 - vec2(1.0)) * clipCoord.w;\nreturn vec4(result, clipCoord.zw);\n}`),o.code.add(i`vec4 alignToPixelOrigin(vec4 clipCoord, vec2 widthHeight) {\nif (!alignPixelEnabled)\nreturn clipCoord;\nvec2 xy = vec2(0.5) + 0.5 * clipCoord.xy / clipCoord.w;\nvec2 pixelSz = vec2(1.0) / widthHeight;\nvec2 ij = floor((xy + 0.5 * pixelSz) * widthHeight) * pixelSz;\nvec2 result = (ij * 2.0 - vec2(1.0)) * clipCoord.w;\nreturn vec4(result, clipCoord.zw);\n}`)}export{o as AlignPixel};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nvar c;!function(c){c[c.Occluded=0]=\"Occluded\",c[c.NotOccluded=1]=\"NotOccluded\",c[c.Both=2]=\"Both\",c[c.COUNT=3]=\"COUNT\"}(c||(c={}));export{c as HUDTransparencyRenderStyle};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{addVerticalOffset as e}from\"../attributes/VerticalOffset.glsl.js\";import{AlignPixel as t}from\"./AlignPixel.glsl.js\";import{HUDTransparencyRenderStyle as o}from\"./HUDUniforms.js\";import{ScreenSizePerspective as a,addScreenSizePerspectiveAlignment as i}from\"../util/ScreenSizePerspective.glsl.js\";import{addProjViewLocalOrigin as r,addCameraPosition as s,addViewNormal as n,addPixelRatio as l}from\"../util/View.glsl.js\";import{Float4PassUniform as c}from\"../../shaderModules/Float4PassUniform.js\";import{FloatPassUniform as f}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as d}from\"../../shaderModules/interfaces.js\";import{Texture2DPassUniform as p}from\"../../shaderModules/Texture2DPassUniform.js\";import{VertexAttribute as u}from\"../../../lib/VertexAttribute.js\";var v;function m(m,O){m.include(a),m.attributes.add(u.POSITION,\"vec3\"),m.attributes.add(u.NORMAL,\"vec3\"),m.attributes.add(u.AUXPOS1,\"vec4\");const w=m.vertex;r(w,O),s(w,O),w.uniforms.add(new c(\"viewport\",((e,t)=>t.camera.fullViewport)),new f(\"polygonOffset\",(e=>e.shaderPolygonOffset)),new f(\"cameraGroundRelative\",((e,t)=>t.camera.aboveGround?1:-1)),new f(\"renderTransparentlyOccludedHUD\",((e,t)=>t.renderTransparentlyOccludedHUD===o.Occluded?1:t.renderTransparentlyOccludedHUD===o.NotOccluded?0:.75)),new p(\"hudVisibilityTexture\",((e,t)=>t.hudVisibilityTexture))),O.hasVerticalOffset&&e(w),w.constants.add(\"smallOffsetAngle\",\"float\",.984807753012208),w.code.add(d`struct ProjectHUDAux {\nvec3 posModel;\nvec3 posView;\nvec3 vnormal;\nfloat distanceToCamera;\nfloat absCosAngle;\n};`),w.code.add(d`float applyHUDViewDependentPolygonOffset(float pointGroundDistance, float absCosAngle, inout vec3 posView) {\nfloat pointGroundSign = sign(pointGroundDistance);\nif (pointGroundSign == 0.0) {\npointGroundSign = cameraGroundRelative;\n}\nfloat groundRelative = cameraGroundRelative * pointGroundSign;\nif (polygonOffset > .0) {\nfloat cosAlpha = clamp(absCosAngle, 0.01, 1.0);\nfloat tanAlpha = sqrt(1.0 - cosAlpha * cosAlpha) / cosAlpha;\nfloat factor = (1.0 - tanAlpha / viewport[2]);\nif (groundRelative > 0.0) {\nposView *= factor;\n}\nelse {\nposView /= factor;\n}\n}\nreturn groundRelative;\n}`),O.draped&&!O.hasVerticalOffset||n(w),O.draped||(w.uniforms.add(new f(\"perDistancePixelRatio\",((e,t)=>Math.tan(t.camera.fovY/2)/(t.camera.fullViewport[2]/2)))),w.code.add(d`void applyHUDVerticalGroundOffset(vec3 normalModel, inout vec3 posModel, inout vec3 posView) {\nfloat distanceToCamera = length(posView);\nfloat pixelOffset = distanceToCamera * perDistancePixelRatio * 0.5;\nvec3 modelOffset = normalModel * cameraGroundRelative * pixelOffset;\nvec3 viewOffset = (viewNormal * vec4(modelOffset, 1.0)).xyz;\nposModel += modelOffset;\nposView += viewOffset;\n}`)),O.screenCenterOffsetUnitsEnabled===v.Screen&&l(w,O),O.hasScreenSizePerspective&&i(w),w.code.add(d`\n    vec4 projectPositionHUD(out ProjectHUDAux aux) {\n      // centerOffset is in view space and is used to implement world size offsetting\n      // of labels with respect to objects. It also pulls the label towards the viewer\n      // so that the label is visible in front of the object.\n      vec3 centerOffset = auxpos1.xyz;\n\n      // The pointGroundDistance is the distance of the geometry to the ground and is\n      // negative if the point is below the ground, or positive if the point is above\n      // ground.\n      float pointGroundDistance = auxpos1.w;\n\n      aux.posModel = position;\n      aux.posView = (view * vec4(aux.posModel, 1.0)).xyz;\n      aux.vnormal = normal;\n      ${O.draped?\"\":\"applyHUDVerticalGroundOffset(aux.vnormal, aux.posModel, aux.posView);\"}\n\n      // Screen sized offset in world space, used for example for line callouts\n      // Note: keep this implementation in sync with the CPU implementation, see\n      //   - MaterialUtil.verticalOffsetAtDistance\n      //   - HUDMaterial.applyVerticalOffsetTransformation\n\n      aux.distanceToCamera = length(aux.posView);\n\n      vec3 viewDirObjSpace = normalize(cameraPosition - aux.posModel);\n      float cosAngle = dot(aux.vnormal, viewDirObjSpace);\n\n      aux.absCosAngle = abs(cosAngle);\n\n      ${O.hasScreenSizePerspective&&(O.hasVerticalOffset||O.screenCenterOffsetUnitsEnabled===v.Screen)?\"vec4 perspectiveFactor = screenSizePerspectiveScaleFactor(aux.absCosAngle, aux.distanceToCamera, screenSizePerspectiveAlignment);\":\"\"}\n\n      ${O.hasVerticalOffset?O.hasScreenSizePerspective?\"float verticalOffsetScreenHeight = applyScreenSizePerspectiveScaleFactorFloat(verticalOffset.x, perspectiveFactor);\":\"float verticalOffsetScreenHeight = verticalOffset.x;\":\"\"}\n\n      ${O.hasVerticalOffset?d`\n            float worldOffset = clamp(verticalOffsetScreenHeight * verticalOffset.y * aux.distanceToCamera, verticalOffset.z, verticalOffset.w);\n            vec3 modelOffset = aux.vnormal * worldOffset;\n            aux.posModel += modelOffset;\n            vec3 viewOffset = (viewNormal * vec4(modelOffset, 1.0)).xyz;\n            aux.posView += viewOffset;\n            // Since we elevate the object, we need to take that into account\n            // in the distance to ground\n            pointGroundDistance += worldOffset;`:\"\"}\n\n      float groundRelative = applyHUDViewDependentPolygonOffset(pointGroundDistance, aux.absCosAngle, aux.posView);\n\n      ${O.screenCenterOffsetUnitsEnabled!==v.Screen?d`\n            // Apply x/y in view space, but z in screen space (i.e. along posView direction)\n            aux.posView += vec3(centerOffset.x, centerOffset.y, 0.0);\n\n            // Same material all have same z != 0.0 condition so should not lead to\n            // branch fragmentation and will save a normalization if it's not needed\n            if (centerOffset.z != 0.0) {\n              aux.posView -= normalize(aux.posView) * centerOffset.z;\n            }\n          `:\"\"}\n\n      vec4 posProj = proj * vec4(aux.posView, 1.0);\n\n      ${O.screenCenterOffsetUnitsEnabled===v.Screen?O.hasScreenSizePerspective?\"float centerOffsetY = applyScreenSizePerspectiveScaleFactorFloat(centerOffset.y, perspectiveFactor);\":\"float centerOffsetY = centerOffset.y;\":\"\"}\n\n      ${O.screenCenterOffsetUnitsEnabled===v.Screen?\"posProj.xy += vec2(centerOffset.x, centerOffsetY) * pixelRatio * 2.0 / viewport.zw * posProj.w;\":\"\"}\n\n      // constant part of polygon offset emulation\n      posProj.z -= groundRelative * polygonOffset * posProj.w;\n      return posProj;\n    }\n  `),w.include(t),w.code.add(d`bool testVisibilityHUD(vec4 posProj) {\nvec4 posProjCenter = alignToPixelCenter(posProj, viewport.zw);\nvec4 occlusionPixel = texture(hudVisibilityTexture, .5 + .5 * posProjCenter.xy / posProjCenter.w);\nif (renderTransparentlyOccludedHUD > 0.5) {\nreturn occlusionPixel.r * occlusionPixel.g > 0.0 && occlusionPixel.g * renderTransparentlyOccludedHUD < 1.0;\n}\nreturn occlusionPixel.r * occlusionPixel.g > 0.0 && occlusionPixel.g == 1.0;\n}`)}!function(e){e[e.World=0]=\"World\",e[e.Screen=1]=\"Screen\",e[e.COUNT=2]=\"COUNT\"}(v||(v={}));export{m as HUD,v as HUDSpace};\n"],
  "mappings": "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",
  "names": ["o", "s", "e", "i", "c", "m", "O", "e", "o", "c", "f"]
}
